{"version":3,"file":"5769.a294d6c94c4247bb3b31.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/helpers/payments.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const currentUnreadMentions = chat.unreadMentions || [];\n\n  const unreadMentions = currentUnreadMentions.filter((id) => !messageIds.includes(id));\n  const removedCount = currentUnreadMentions.length - unreadMentions.length;\n\n  global = updateChat(global, chat.id, {\n    ...(chat.unreadMentionsCount && {\n      unreadMentionsCount: Math.max(chat.unreadMentionsCount - removedCount, 0) || undefined,\n    }),\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.showNotification({\n      message: translate('lng_filters_link_private_error'),\n      tabId,\n    });\n    return;\n  }\n\n  const link = await callApi('exportMessageLink', {\n    chat,\n    id: messageId,\n    shouldIncludeThread,\n    shouldIncludeGrouped,\n  });\n\n  if (!link) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: translate('LinkCopied'),\n    tabId,\n  });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/date/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateChats,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoice, ApiRequestInputInvoice } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const invoice = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users, botId,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = updatePayment(global, {\n    botName: selectUser(global, botId)?.firstName,\n  }, tabId);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { translate } from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: translate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.translate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.translate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSponsoredWebPage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiBotApp } from './bots';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended, sponsorInfo,\n    additionalInfo, showPeerPhoto, webpage, buttonText, app,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(webpage && { webPage: buildSponsoredWebPage(webpage) }),\n    ...(showPeerPhoto && { isAvatarShown: true }),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n    ...(sponsorInfo && { sponsorInfo }),\n    ...(additionalInfo && { additionalInfo }),\n    ...(buttonText && { buttonText }),\n    ...(app && { botApp: buildApiBotApp(app) }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId' | 'fromBoostsApplied' | 'quickReplyShortcutId' | 'viaBusinessBotId'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: string;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n\nfunction buildSponsoredWebPage(webPage: GramJs.TypeSponsoredWebPage): ApiSponsoredWebPage {\n  let photo: ApiPhoto | undefined;\n  if (webPage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(webPage.photo);\n    photo = buildApiPhoto(webPage.photo);\n  }\n\n  return {\n    ...pick(webPage, [\n      'url',\n      'siteName',\n    ]),\n    photo,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.fetchChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: Math.max(chat.unreadMentionsCount - 1, 0) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        if (inputInvoice && inputInvoice.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            setGlobal(global);\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/date/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/date/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"image\":\"y7ijMlDf\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\ntype OwnProps = {\n  peer?: ApiPeer;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n};\n\nfunction PeerColorWrapper({\n  peer, noUserColors, shoudReset, className, emojiIconClassName, children,\n}: OwnProps) {\n  return (\n    <div className={buildClassName(getPeerColorClass(peer, noUserColors, shoudReset), className)}>\n      {peer?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={peer.color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/date/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/date/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/date/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n}> = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasText = textMessage && hasMessageText(textMessage);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n  const text = textMessage && getMessageContent(textMessage).text;\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onAudioPlay={handleAudioPlay}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {Boolean(senderBoosts) && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/date/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderText(inlineButton.text)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !chatId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal,\n  } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]} alt=\"Giveaway\" />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          {isChannel && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('Boosters')}\n              </h4>\n              {!boostStatistics.boosterIds?.length && (\n                <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n              )}\n              {boostStatistics.boosterIds?.map((userId) => (\n                <ListItem\n                  key={userId}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleBoosterClick(userId)}\n                >\n                  <PrivateChatInfo\n                    className={styles.user}\n                    forceShowSelf\n                    userId={userId}\n                    status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                  />\n                </ListItem>\n              ))}\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount)}\n                </ListItem>\n              )}\n            </div>\n          )}\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem icon=\"gift\" ripple onClick={handleGiveawayClick}>\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from '../modals/inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport OneTimeMediaModal from '../modals/oneTimeMedia/OneTimeMediaModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n  oneTimeMediaModal?: TabState['oneTimeMediaModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n  oneTimeMediaModal,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n      loadTimezones();\n      loadQuickReplies();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <OneTimeMediaModal info={oneTimeMediaModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal missingUsers={inviteViaLinkModal?.missingUsers} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","unreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","currentUnreadMentions","removedCount","unreadMentionsCount","markMessagesRead","previousChatId","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","isChatSuperGroup","link","copyTextToClipboard","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","getRequestInputInvoice","inputInvoice","boostChannelId","amount","currency","purpose","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","requestInfo","saveInfo","selectPaymentInputInvoice","requestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","updatePayment","botName","getPaymentForm","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","premiumModal","promo","isOpen","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","closeGiftCodeModal","giveawayId","paymentPurpose","openBoostStatistics","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","shouldCloseRightColumn","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","fetchChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","giftModalState","isCompleted","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","shoudReset","emojiIconClassName","children","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","Separator","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","REACTION_SIZE","ReactionButton","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","Reactions","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","Sticker","observeIntersectionForPlaying","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","textMessage","hasText","hasMessageText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","onAudioPlay","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","ChatReportPanel","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","InviteViaLinkModal","MapModal","OneTimeMediaModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","month","floatingBadge","floatingBadgeButtonColor","floatingBadgeValue","GIVEAWAY_BOOST_PER_PREMIUM","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","leftSide","randomX","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","isGiveawayModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","missingUsers","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}