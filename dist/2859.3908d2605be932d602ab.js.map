{"version":3,"file":"2859.3908d2605be932d602ab.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType,\n  ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    focusMessage,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    focusMessage({\n      chatId: toChannelId(chatOrChannelPostId),\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        tabId,\n        mode,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.oldTranslate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.oldTranslate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.oldTranslate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.oldTranslate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","addChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","_len3","_ref10","_key3","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref12","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref13","_key6","selectChat","isChatBasicGroup","newChat","_len2","_ref9","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","openThread","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","topic","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","hasBoost","hasOwnProperty","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","botId","_len4","_ref11","_key4","channelPostId","currentChat","isCurrentChat","starRefStartPrefixes","appConfig","prefix","p","slice","startBot","param","action","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","selectTopics","chatlistModal","peerIds","peers","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","key","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}