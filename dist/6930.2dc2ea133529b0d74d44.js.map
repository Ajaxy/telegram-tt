{"version":3,"file":"6930.2dc2ea133529b0d74d44.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/util/localization/format.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/fragment/GiftWithdrawModal.module.scss?4fec","webpack://telegram-t/./src/components/modals/gift/fragment/GiftWithdrawModal.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterUsersByName, isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = [\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    const filteredContactIds = filterUsersByName(combinedIds, usersById, searchQuery);\n\n    return sortChatIds(unique(filteredContactIds).filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"subtitle\":\"YN2J8dw6\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.starRefCommision) {\n    return lang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return lang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"uniqueGift\":\"QsvgfDmw\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst UNIQUE_GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const uniqueGift = transaction.starGift?.type === 'starGiftUnique' ? transaction.starGift : undefined;\n  const uniqueGiftSticker = uniqueGift && getStickerFromGift(uniqueGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (uniqueGiftSticker) {\n      const { backdrop } = getGiftAttributes(uniqueGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.uniqueGift}\n            sticker={uniqueGiftSticker}\n            size={UNIQUE_GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [extendedMedia, photo, uniqueGiftSticker, subscriptionPeriod, data.avatarPeer, uniqueGift]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { getChatTitle, getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal className={styles.root} isOpen={isOpen} onClose={closeStarsBalanceModal}>\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              className={buildClassName(styles.starButton, 'settings-main-menu-star')}\n              color=\"translucent\"\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              <StarIcon className=\"icon\" type=\"gold\" size=\"big\" />\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React from '../../lib/teact/teact';\n\nimport type { LangFn } from './types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../config';\nimport buildClassName from '../buildClassName';\n\nimport Icon from '../../components/common/icons/Icon';\nimport StarIcon from '../../components/common/icons/StarIcon';\n\nexport function formatStarsAsText(lang: LangFn, amount: number) {\n  return lang('StarsAmountText', { amount }, { pluralValue: amount });\n}\n\nexport function formatStarsAsIcon(lang: LangFn, amount: number, options?: { asFont?: boolean; className?: string }) {\n  const { asFont, className } = options || {};\n  const icon = asFont\n    ? <Icon name=\"star\" className={buildClassName('star-amount-icon', className)} />\n    : <StarIcon type=\"gold\" className={buildClassName('star-amount-icon', className)} size=\"adaptive\" />;\n  return lang('StarsAmount', { amount }, {\n    withNodes: true,\n    specialReplacement: {\n      [STARS_ICON_PLACEHOLDER]: icon,\n    },\n  });\n}\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n}: OwnProps) => {\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction.starRefCommision) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      <BalanceBlock balance={starBalance} className={styles.modalBalance} />\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className={styles.checkbox}\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"checkbox\":\"oQ5Ar48z\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getPeerTitle } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectTabState, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice, openGiftUpgradeModal } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const isStarGift = 'id' in gift;\n  const isPeerUser = peer && isApiPeerUser(peer);\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: true,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            targetChatId: peerId,\n            mediaType: 'action',\n            text: 'ActionGiftInbound',\n            type: 'giftPremium',\n            amount: gift.amount,\n            currency: gift.currency,\n            months: gift.months,\n            message: {\n              text: giftMessage,\n            },\n            translationValues: ['%action_origin%', '%gift_payment_amount%'],\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: currentUserId!,\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          targetChatId: peerId,\n          mediaType: 'action',\n          text: 'ActionGiftInbound',\n          type: 'starGift',\n          currency: STARS_CURRENCY_CODE,\n          amount: gift.stars,\n          starGift: {\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            isSaved: false,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n          translationValues: ['%action_origin%', '%gift_payment_amount%'],\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, shouldPayForUpgrade, peerId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && gift.upgradeStars && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldPayForUpgradeChange}>\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isPeerUser ? lang('GiftHideNameDescription', { receiver: title }) : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = isStarGift\n      ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n      : formatCurrency(gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage key={isStarGift ? gift.id : gift.months} message={localMessage} />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = global.settings.themes[theme] || {};\n    const peer = selectPeer(global, peerId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getPeerTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n}) => {\n  const {\n    closeGiftModal, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [isHeaderHidden, setIsHeaderHidden] = useState(true);\n  const [isHeaderForStarGifts, setIsHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIsHeaderHidden(true);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (selectedGift) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setIsHeaderHidden(scrollTop <= 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsHeaderForStarGifts('id' in gift);\n    setIsHeaderHidden(false);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftIdsByCategory?.[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (selectedGift) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && renderGiftPremiumHeader()}\n        {!isSelf && !chat && renderGiftPremiumDescription()}\n        {!isSelf && !chat && renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = Boolean(selectedGift);\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} />\n      <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={selectedGift ? 1 : 0}\n      >\n        {!selectedGift && renderMainScreen()}\n        {selectedGift && renderingModal?.forPeerId && (\n          <GiftSendingOptions gift={selectedGift} peerId={renderingModal.forPeerId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUserId,\n  userIds,\n}) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredContactIds = idsWithSelf ? filterUsersByName(idsWithSelf, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../../config';\nimport { getHasAdminRight, getPeerTitle } from '../../../../global/helpers';\nimport { isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatInteger, formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport MenuItem from '../../../ui/MenuItem';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    openChatWithDraft,\n    openGiftWithdrawModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canUpdate = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const starGiftUniqueLink = useMemo(() => {\n    const slug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n    if (!slug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${slug}`;\n  }, [gift]);\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n    handleClose();\n  });\n\n  const handleWithdraw = useLastCallback(() => {\n    if (savedGift?.gift.type !== 'starGiftUnique') return;\n    openGiftWithdrawModal({ gift: savedGift });\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    if (!savedGift?.upgradeMsgId || !renderingTargetPeer) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: renderingTargetPeer.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isMenuOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AriaMoreButton')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canUpdate && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted,\n    } = savedGift || {};\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canUpdate && !isSender) return undefined;\n      if (isConverted && starsToConvert) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: formatInteger(starsToConvert!),\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: formatInteger(starsToConvert!),\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canUpdate) {\n        return lang('GiftInfoDescriptionUpgrade', {\n          amount: formatInteger(starsToConvert!),\n        }, {\n          pluralValue: starsToConvert!,\n          withNodes: true,\n          withMarkdown: true,\n        });\n      }\n\n      return canUpdate\n        ? lang('GiftInfoDescription', {\n          amount: starsToConvert,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert || 0,\n        })\n        : lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert || 0,\n        });\n    })();\n\n    function getTitle() {\n      if (gift?.type === 'starGiftUnique') return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canUpdate ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const isUniqueGift = gift.type === 'starGiftUnique';\n\n    const contextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <MenuItem\n          icon=\"link-badge\"\n          onClick={handleCopyLink}\n        >\n          {lang('CopyLink')}\n        </MenuItem>\n        <MenuItem\n          icon=\"forward\"\n          onClick={handleLinkShare}\n        >\n          {lang('Share')}\n        </MenuItem>\n        {canUpdate && isUniqueGift && (\n          <MenuItem icon=\"diamond\" onClick={handleWithdraw}>\n            {lang('GiftInfoWithdraw')}\n          </MenuItem>\n        )}\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        <Button\n          className={styles.modalCloseButton}\n          round\n          color=\"translucent-white\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {isOpen && contextMenu}\n      </div>\n    );\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      if ((fromId || isNameHidden)) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          fromId ? { chatId: fromId } : (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ),\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          formatDateTimeToString(savedGift.date * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.firstSaleDate) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canUpdate && canConvertDifference > 0 && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !savedGift?.upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canUpdate && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (gift.type === 'starGiftUnique') {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const footer = (\n      <div className={styles.footer}>\n        {canUpdate && (\n          <div className={styles.footerDescription}>\n            <div>\n              {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                link: (\n                  <Link isPrimary onClick={handleTriggerVisibility}>\n                    {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                  </Link>\n                ),\n              }, {\n                withNodes: true,\n              })}\n            </div>\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isUniqueGift ? uniqueGiftModalHeader : undefined,\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang, canUpdate, canConvertDifference, isSender, oldLang,\n    gift, giftAttributes, renderFooterButton, isTargetChat, SettingsMenuButton, isOpen,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={gift?.type === 'starGiftUnique'}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {canConvertDifference > 0 && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId: global.currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      hasAdminRights,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getPeerTitle, getStickerMediaHash } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"omOOKktw\",\"giftPreview\":\"U_aropYW\",\"backdrop\":\"FJcFY5PJ\",\"description\":\"L26FNUBR\",\"arrow\":\"SjEeGvk8\",\"noPassword\":\"fQoPDdGf\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const { closeGiftWithdrawModal, clearGiftWithdrawError, processStarGiftWithdrawal } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","getGlobal","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","filteredContactIds","filterUsersByName","sortChatIds","unique","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","lang","useLang","smallerText","balanceBottom","StarIcon","formatStarsAmount","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","uniqueGift","uniqueGiftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","history","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","all","transactions","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","modalBalance","starButton","topupOptions","tos","list","sectionTitle","nextOffset","isText","disabled","isLoading","noForcedUpperCase","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","formatStarsAsText","pluralValue","formatStarsAsIcon","asFont","icon","withNodes","specialReplacement","STARS_ICON_PLACEHOLDER","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","openStarsBalanceModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withMarkdown","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","deps","noAnimation","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","isUniqueGift","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","number","regularHeader","noLoop","tableData","peerLabel","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","Separator","countText","Checkbox","label","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","customBackgroundValue","useCustomBackground","isStarGift","isPeerUser","localMessage","isOutgoing","senderId","action","targetChatId","mediaType","STARS_CURRENCY_CODE","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","isSaved","fromId","translationValues","months","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","handleOpenUpgradePreview","giftId","handleMainButtonClick","shouldUpgrade","bgClassName","inert","ActionMessage","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","ripple","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","percent","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","isSelf","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","PremiumGiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","setIsHeaderHidden","isHeaderForStarGifts","setIsHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","starGiftsTransition","starGiftsContainer","GiftItemStar","GiftSendingOptions","userSelectionLimit","giveawayAddPeersMax","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","selectedId","forceShowSelf","typeGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","starGiftMaxConvertPeriod","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","openChatWithDraft","openGiftWithdrawModal","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","renderingFromPeer","renderingTargetPeer","isTargetChat","isSavedGift","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","giftSticker","canFocusUpgrade","upgradeMsgId","canUpdate","inputGift","starGiftUniqueLink","TME_LINK_PREFIX","handleCopyLink","handleLinkShare","handleWithdraw","handleFocusUpgraded","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","SettingsMenuButton","onTrigger","isMenuOpen","renderFooterButton","isShiny","modalData","isConverted","isVisibleForMe","contextMenu","DropdownMenu","trigger","positionX","MenuItem","uniqueGiftModalHeader","modalHeader","modalCloseButton","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","starsValue","giftValue","starAmountIcon","BadgeButton","total","renderTextWithEntities","ownerName","ownerAddress","ownerId","originalDetails","copyIcon","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","sender","recipientLink","senderLink","footerDescription","ConfirmDialog","confirmHandler","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","onCheck","TableAboutModal","FRAGMENT_PEER","GIFT_STICKER_SIZE","REM","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","giftPreview","arrow","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","children","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","headerIconName","withSeparator","onButtonClick","absoluteCloseButtonColor","isStatic","multiline","headerAvatarPeer","handleOpenChat","withEmojiStatus","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown","settingValue","setThemeSettings","startsWith","cacheApi","CUSTOM_BG_CACHE_NAME","Blob","then","blob","URL","createObjectURL","preloadImage","catch","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR"],"sourceRoot":""}