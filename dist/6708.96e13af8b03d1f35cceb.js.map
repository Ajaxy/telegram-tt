{"version":3,"file":"6708.96e13af8b03d1f35cceb.js","mappings":"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","sources":["webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts","webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/cycleRestrict.ts"],"sourcesContent":["import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type ApiUpdate = { type: string } & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: AnyToVoidFunction;\n  reject: AnyToVoidFunction;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise = new Promise<any>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n","import { animate } from '../../util/animation';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/browser/windowEnvironment';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst CANVAS_CLASS = 'rlottie-canvas';\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.classList.add(CANVAS_CLASS);\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["ConnectorClass","requestStates","Map","requestStatesByCallback","pendingPayloads","pendingTransferables","constructor","target","onUpdate","channel","destroy","init","_len","arguments","length","args","Array","_key","this","postMessageOnTickEnd","type","request","messageData","transferables","restMessageData","messageId","generateUniqueId","payload","requestState","promise","Promise","resolve","reject","Object","assign","withCallback","callback","pop","set","catch","finally","delete","cancelCallback","progressCallback","isCanceled","get","onMessage","data","payloads","forEach","update","error","response","callbackArgs","Error","message","push","postMessagesOnTickEnd","throttleWithTickEnd","postMessage","createConnector","worker","connector","handleMessage","_ref","addEventListener","removeEventListener","MAX_WORKERS","Math","min","navigator","hardwareConcurrency","instances","launchMediaWorkers","IS_TEST","fill","undefined","map","Worker","URL","requestMediaWorker","index","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","instancesByRenderId","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","views","msPerFrame","reduceFactor","frames","isAnimating","isWaiting","isEnded","isDestroyed","isRendererInited","approxFrameIndex","prevFrameIndex","stopFrameIndex","speed","direction","canvas","renderId","params","viewId","onLoad","instance","addView","coords","tgsUrl","container","customColor","onEnded","onLoop","initConfig","initRenderer","removeView","ctx","isSharedCanvas","clearRect","x","y","imgSize","remove","size","isPlaying","play","forceRestart","isPaused","floor","doPlay","pause","lastRenderAt","from","values","every","_ref2","isLowPriority","frame","i","close","playSegment","_ref3","startFrameIndex","frameIndex","round","setSpeed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","imageData","ImageData","requestMutation","document","createElement","getContext","classList","add","style","appendChild","isConnected","quality","max","window","devicePixelRatio","clearCache","destroyRenderer","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","name","onRendererInit","bind","framesCount","changeData","onChangeData","animate","_ref4","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred"],"sourceRoot":""}