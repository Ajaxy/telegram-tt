{"version":3,"file":"6708.41f85a8c419e0d84c52c.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/cycleRestrict.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/windowEnvironment';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords!.x, containerInfo.coords!.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","import generateUniqueId from './generateUniqueId';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitData = {\n  channel?: string;\n  type: 'init';\n  messageId?: string;\n  name: 'init';\n  args: any;\n};\n\ntype CallMethodData = {\n  channel?: string;\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\nexport type OriginMessageData = InitData | CallMethodData | {\n  channel?: string;\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerMessageData = {\n  channel?: string;\n  type: 'update';\n  update: ApiUpdate;\n} | {\n  channel?: string;\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  channel?: string;\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  channel?: string;\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessage({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    if (data.type === 'update' && this.onUpdate) {\n      this.onUpdate(data.update);\n    }\n    if (data.type === 'methodResponse') {\n      const requestState = requestStates.get(data.messageId);\n      if (requestState) {\n        if (data.error) {\n          requestState.reject(data.error);\n        } else {\n          requestState.resolve(data.response);\n        }\n      }\n    } else if (data.type === 'methodCallback') {\n      const requestState = requestStates.get(data.messageId);\n      requestState?.callback?.(...data.callbackArgs);\n    } else if (data.type === 'unhandledError') {\n      throw new Error(data.error?.message);\n    }\n  }\n\n  private postMessage(data: AnyLiteral) {\n    data.channel = this.channel;\n\n    this.target.postMessage(data);\n  }\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","launchMediaWorkers","map","_ref","connector","instancesByRenderId","Map","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","init","_len","arguments","length","args","Array","_key","canvas","renderId","params","viewId","generateUniqueId","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","undefined","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","direction","doPlay","pause","lastRenderAt","from","values","every","_ref2","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","_ref3","startFrameIndex","frameIndex","round","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","imageData","ImageData","requestMutation","document","createElement","getContext","style","appendChild","isConnected","isRendererInited","quality","max","window","devicePixelRatio","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","MAX_WORKERS","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","animate","_ref4","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred","promise","resolve","ConnectorClass","target","onUpdate","channel","postMessage","type","messageData","requestStates","requestStatesByCallback","messageId","payload","requestState","Promise","reject","Object","assign","withCallback","callback","pop","catch","finally","cancelCallback","progressCallback","isCanceled","onMessage","data","update","error","response","callbackArgs","message","createConnector","worker","handleMessage","addEventListener","removeEventListener","index","min","navigator","hardwareConcurrency","instances","IS_TEST","fill","Worker","URL"],"sourceRoot":""}