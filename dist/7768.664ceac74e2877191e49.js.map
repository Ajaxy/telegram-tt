{"version":3,"file":"7768.664ceac74e2877191e49.js","mappings":"ubAOA,MAAMA,EAAoB,GAAKC,EAAAA,EACzBC,EAA0B,KAAOD,EAAAA,EAC1BE,EAAwB,KAAOF,EAAAA,EAC/BG,EAAwB,GAAKH,EAAAA,EACpCI,EAAqB,OAASJ,EAAAA,E,qCCuB7B,SAASK,EAA6BC,EAAqBC,GAEhE,OAAOA,IADUC,EAAAA,EAAAA,KAAeF,GACVG,qBAAsBC,EAAAA,EAAAA,MACxCJ,EAAOK,mBArBeC,EAqBuBC,EAAAA,EAAWC,MAAMC,OApBhDC,EAAAA,IACTC,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,IAAdS,GAIAA,EAAcQ,EAAAA,IACTH,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,GAAdS,GAIGV,GAOH,GAtBN,IAA4BU,CAuB5B,CAEO,SAASS,EACdf,EAAWgB,EAAqBC,GAEhC,MAAMC,GAAoBC,EAAAA,EAAAA,KAAqBnB,EAAQgB,EAAQI,QACzDC,EAAmBL,EAAQM,WAAa,CAAEC,QAAS,GAAIC,QAASN,GAChEO,GAAgBC,EAAAA,EAAAA,KAAa1B,EAAQgB,EAAQI,QAG7CG,GAAUI,EAAAA,EAAAA,KAAoBN,EAAiBE,QAASN,GAE9D,IAAI,gBAAEW,EAAkB,IAAOP,EAiB/B,OAfIO,EAAgBC,SAClBD,EAAkBA,EAAgBE,QAAOC,IAAA,IAAC,MAAEC,EAAK,OAAEC,GAAQF,EAAA,OAAMC,GAASC,IAAWjC,EAAOkC,aAAa,KAG3GjB,EAAckB,SAASC,IACrB,MAAM,cAAEF,GAAkBlC,EACJ,SAAlBoC,EAASC,MACbT,EAAgBU,QAAQ,CACtBL,OAAQR,GAAec,IAAML,EAC7BE,WACAI,UAAW7B,KAAK8B,MAAMC,KAAKC,MAAQ,KACnCX,OAAO,GACP,KAGGY,EAAAA,EAAAA,IAAkB5C,EAAQgB,EAAQI,OAAQJ,EAAQuB,GAAI,CAC3DjB,UAAW,IACND,EACHE,UACAK,oBAGN,CAEO,SAASiB,EACd7C,EAAWoB,EAAgB0B,GAE3B,OAAOC,EAAAA,EAAAA,IAAW/C,EAAQoB,EAAQ0B,GAAQ,EAC5C,CCMA,MAAME,EAAkB,IAClBC,EAAuB,IA0oB7B,SAASC,EACPlD,EACAmD,EACA/B,EACAmB,EACAjB,EACA8B,EACAC,EACArC,GAEA,MAAMK,EAAmBL,GAASM,UAGlC,GAAID,IAAoBiC,EAAAA,EAAAA,GAAahC,EAAWD,GAC9C,OAAOrB,EAGT,MAAMuD,EAAoBlC,GAAkBE,QAAQiC,MAAMC,GAAMA,EAAEC,cAQlE,GANIH,GAAmBG,cACrBpC,EAAUC,SAAUoC,EAAAA,EAAAA,KAAgBrC,EAAUC,QAASgC,EAAkBG,cAG3E1D,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAAEjB,eAE5C+B,EACH,OAAOrD,EAGT,MAAM,SAAEoC,EAAQ,MAAEJ,EAAK,SAAE4B,GAAatC,EAAUM,kBAAkB,IAAM,CAAC,EAEzE,IAD+BiC,EAAAA,EAAAA,KAA+B7D,EAAQ,oBACxCgB,GAAWoB,GAAYwB,IAAa5B,EAAO,CACvE,MAAM8B,GAAaC,EAAAA,EAAAA,IAAc/C,GAEjCmC,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY1B,WAAU8B,OAAOC,EAAAA,EAAAA,OAC1E,CAEA,MAAMC,EAAqChB,EAAKiB,iBAAiBC,SAAS/B,GACpEgC,GAAmCC,EAAAA,EAAAA,KAA0BxE,EAAQsB,GAG3E,GAAIiD,IAAqCH,EAAoC,CAC3EpE,EAAS6C,EAAsB7C,EAAQoB,EAAQ,CAC7CqD,sBAAuBrB,GAAMqB,sBAAwB,GAAK,EAC1DJ,gBAAiB,IAAKjB,GAAMiB,iBAAmB,GAAK9B,GAAImC,MAAK,CAACC,EAAGC,IAAMA,EAAID,MAG7E,MAAME,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAErD,IAAKa,IAASyB,EAAY,OAAO7E,GAEjC+E,EAAAA,EAAAA,KAAU,MACRC,EAAAA,EAAAA,IAAmB,CACjB5B,OACApC,QAAS6D,EACTI,YAAY,GACZ,GAEN,CASA,OAPKV,GAAoCH,IACvCpE,EAAS6C,EAAsB7C,EAAQoB,EAAQ,CAC7CqD,sBAAuBrB,GAAMqB,sBAAwB,GAAK,EAC1DJ,gBAAiBjB,GAAMiB,iBAAiBvC,QAAQoD,GAAMA,IAAM3C,OAIzDvC,CACT,CAEA,SAASmF,EACPnF,EACAoB,EACAmB,EACA6C,GAEA,IADAC,EAAWC,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAEX,MAAME,EAAiBH,GACnBI,EAAAA,EAAAA,KAAuBzF,EAAQoB,EAAQmB,IACvCuC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAGtC,GAAIiD,GAAkBJ,EAAcM,WAAYC,EAAAA,EAAAA,IAAiBpD,GAAK,CACpE,MAAM,MACJqD,EAAK,MAAEC,EAAK,QAAEC,EAAO,SAAEC,IACrBC,EAAAA,EAAAA,KAAkBR,GAEoB,IAAAS,EAAAC,EAA1C,GAAIN,GAASR,EAAcM,QAAQE,OACjCK,EAAAb,EAAcM,QAAQE,OAAMO,UAA5BF,EAA4BE,QAAYP,EAAMO,UAC9CD,EAAAd,EAAcM,QAAQE,OAAMQ,YAA5BF,EAA4BE,UAAcR,EAAMQ,gBAC3C,GAAIP,GAAST,EAAcM,QAAQG,MAAO,KAAAQ,GAC/CA,EAAAjB,EAAcM,QAAQG,OAAMM,UAA5BE,EAA4BF,QAAYN,EAAMM,QAChD,MAAO,GAAIL,GAAWV,EAAcM,QAAQI,QAAS,KAAAQ,GACnDA,EAAAlB,EAAcM,QAAQI,SAAQS,sBAA9BD,EAA8BC,oBAAwBT,EAAQS,oBAChE,MAAO,GAAIR,GAAYX,EAAcM,QAAQK,SAAU,KAAAS,GACrDA,EAAApB,EAAcM,QAAQK,UAASU,iBAA/BD,EAA+BC,eAAmBV,EAASU,eAC7D,CACF,CAEA,MAAM5B,EAAaW,EAAiB,IAAKA,KAAmBJ,GAAkBA,EAE9E,OAAOC,GACHqB,EAAAA,EAAAA,KAAuB1G,EAAQoB,EAAQmB,EAAIsC,IAC3CjC,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAIsC,EAC5C,CAEA,SAAS8B,EACP3G,EAAWmD,EAAgCnC,EAAqB4F,GAEhE,MAAM,OAAExF,GAAWJ,EAEb6F,GAAYC,EAAAA,EAAAA,GAAoB9F,IAEhC,WAAE+F,IAAeC,EAAAA,EAAAA,KAAsBhH,EAAQgB,IAAY,CAAC,EAElE,IAAK+F,GAAcF,GAAWI,aAAc,CAC1C,MAAMC,GAAgBpC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQyF,EAAUI,cAC9DC,EACFlH,GAASmH,EAAAA,EAAAA,KAAuCnH,EAAQkH,EAAe9F,EAAQJ,EAAQuB,GAAIqE,GAE3FzD,EAAQiE,YAAY,CAClBhG,SACAiG,UAAWR,EAAUI,aACrBK,aAAc,CACZV,aACAW,cAAevG,EAAQuB,KAI/B,CAEA,OAAOvC,CACT,CAEA,SAASwH,EACPxH,EAAWmD,EAAgCnC,GAE3C,MAAM,GAAEuB,EAAE,OAAEnB,GAAWJ,EAEjByG,GAAgBC,EAAAA,EAAAA,KAA+B1H,EAAQgB,IAEvD,WAAE+F,IAAeC,EAAAA,EAAAA,KAAsBhH,EAAQgB,IAAY,CAAC,EAE5DoC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BwG,EAAwBxE,GAAMyE,eAAgBC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ2G,EAAAA,IAEpF/H,EAAS2G,EAAmB3G,EAAQmD,EAASnC,GAC7C,MAAM,SAAEgH,GAAajB,GAAc,CAAEiB,SAAUP,GAgC/C,OA9BIO,IACFhI,GAASiI,EAAAA,EAAAA,KAAgBjI,EAAQoB,EAAQ4G,EAAU,CAACzF,IAEpD2F,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQkG,IAAmB,IAAhB9F,GAAI2B,GAAOmE,EAClD,IAAIC,EAAAA,EAAAA,KAAuBtI,EAAQoB,EAAQ4G,EAAU9D,GAAQ,CAE3D,MAAMqE,GAAgBC,EAAAA,EAAAA,KAAoBxI,EAAQoB,EAAQ4G,GACpDS,GAAkBC,EAAAA,EAAAA,KAAc1I,EAAQoB,EAAQ4G,EAAUzF,EAAI2B,GAC9DyE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBrH,EAAQ4G,EAAU9D,GAEvEqE,IAAiBI,EAAgBrE,SAASiE,KAC7CvI,EAASyI,EAEb,KAGE1B,IACF/G,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,aAAc,IAC/DjB,EACHQ,cAAevG,EAAQuB,MAGpBuG,EAAAA,EAAAA,KAAe9H,KAAa+H,EAAAA,EAAAA,KAAgB/H,KAC/ChB,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ4G,EAAU,CAClDiB,eAAgBlC,EAAWkC,eAAiB,GAAK,OAMrDrB,IAIJ5H,GAASiI,EAAAA,EAAAA,KAAgBjI,EAAQoB,EAAQ2G,EAAAA,GAAgB,CAACxF,IAE1D2F,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQ+G,IAAmB,IAAhB3G,GAAI2B,GAAOgF,EAClD,IAAIZ,EAAAA,EAAAA,KAAuBtI,EAAQoB,EAAQ2G,EAAAA,GAAgB7D,GAAQ,CAEjE,MAAMqE,GAAgBC,EAAAA,EAAAA,KAAoBxI,EAAQoB,EAAQ2G,EAAAA,IACpDU,GAAkBC,EAAAA,EAAAA,KAAc1I,EAAQoB,EAAQ2G,EAAAA,GAAgBxF,EAAI2B,GACpEyE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBrH,EAAQ2G,EAAAA,GAAgB7D,GAE7EqE,IAAiBI,EAAgBrE,SAASiE,KAC7CvI,EAASyI,EAEb,MAfOzI,CAmBX,CAEA,SAASmJ,EACPnJ,EACAoB,EACAJ,GAEA,IADAoI,EAAK9D,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAEL,MAAM,MAAE+D,GAAUrJ,EACZoD,EAAOiG,EAAMC,KAAKlI,GAClBmI,GAAuBC,EAAAA,EAAAA,KAAwBxJ,EAAQoB,GAEvDqI,EAAQrG,GAAMsG,SAAUC,EAAAA,EAAAA,KAAuB3J,EAAQgB,QAAWuE,EACpEkE,IACFzJ,GAAS4J,EAAAA,EAAAA,KAAY5J,EAAQoB,EAAQqI,EAAMlH,GAAI,CAC7CgF,cAAevG,EAAQuB,MAI3B,MAAMkF,GAAgBC,EAAAA,EAAAA,KAA+B1H,EAAQgB,GAK7D,OAJIyG,IACFzH,GAAS6J,EAAAA,EAAAA,KAAwB7J,EAAQyH,EAAezG,EAAQuB,GAAI,WAGlEgH,GAAyBH,GAEzBG,IAAyBvI,EAAQuB,IAAMgH,IAAyBvI,EAAQ8I,iBACrE9I,EAAQuB,GAAKgH,GAOXM,EAAAA,EAAAA,KAAwB7J,EAAQoB,EAAQJ,EAAQuB,IAJ9CvC,CAOb,CAEA,SAAS+J,EAAuC/J,EAAWoB,GAAqD,IAArC4G,EAAkB1C,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAGyC,EAAAA,GAC9F,MAAMuB,GAAOU,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAClC6I,GAAYnC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ4G,GAElD,IAAKsB,IAASW,EACZ,OAGF,IAAI/E,EAAI+E,EAAUpI,OAClB,KAAOqD,KAAK,CACV,MAAMlE,EAAUsI,EAAKW,EAAU/E,IAC/B,GAAIlE,IAAYA,EAAQ4F,WACtB,OAAO5F,CAEX,CAGF,CAyBO,SAASkJ,EACdlK,EAAWoB,EAA4B+I,EAAehH,GAItD,GAAI/B,EAAQ,CACV,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMgH,EAAoB,IAAIC,IAC9BD,EAAkBE,IAAIvC,EAAAA,IAEtBoC,EAAIhI,SAASI,IACXvC,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAC7CqE,YAAY,KAGV2D,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQmB,KAC9BvC,GAASwK,EAAAA,EAAAA,KAAYxK,EAAQoB,EAAQmB,IAGvC,MAAMvB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAClD,IAAKvB,EACH,OAGEA,EAAQ0E,QAAQ+E,QAAQ7E,QAC1B5F,GAAS0K,EAAAA,EAAAA,KAAgB1K,EAAQoB,EAAQJ,EAAQ0E,QAAQ+E,OAAO7E,MAAMrD,IAAI,IAG5EvC,EAAS2G,EAAmB3G,EAAQmD,EAASnC,GAAS,GAEtD,MAAMgH,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GAC/CgH,GACFoC,EAAkBE,IAAItC,EACxB,IAGF7E,EAAQyH,kBAAkB,CAAExJ,WAE5B,MAAMyJ,EAAS,IAAIR,IAAIF,GAEvBC,EAAkBjI,SAAS6F,IACzB,MAAMjB,GAAa+D,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GACpD,IAAKjB,GAAYQ,gBAAkBsD,EAAOE,IAAIhE,EAAWQ,eAAgB,OAEzE,MAAMyD,EAAiBjB,EAAgB/J,EAAQoB,EAAQ4G,GAClDgD,GAODhD,IAAaD,EAAAA,KACf/H,EAASmJ,EAAsBnJ,EAAQoB,EAAQ4J,GAAgB,IAGjEhL,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ4G,EAAU,CAClDT,cAAeyD,EAAezI,KAG5Ba,EAAKsG,UACP1J,GAAS4J,EAAAA,EAAAA,KAAY5J,EAAQoB,EAAQ6J,OAAOjD,GAAW,CACrDT,cAAeyD,EAAezI,OAhB5Ba,EAAKsG,SAAW1B,IAAaD,EAAAA,IAC/B5E,EAAQ+H,cAAc,CAAE9J,SAAQ+J,QAASF,OAAOjD,IAiBpD,KAGFoD,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqL,GAAoBC,EAAAA,EAAAA,KAA2BtL,GAQrD,YANAuL,YAAW,KACTvL,GAASwL,EAAAA,EAAAA,MACTxL,GAASyL,EAAAA,EAAAA,KAAmBzL,EAAQoB,EAAQ+I,IAC5CiB,EAAAA,EAAAA,IAAUpL,EAAO,GAChBqL,EAAoBpI,EAAuBD,EAGhD,CAIA,MAAM0I,EAA4B,GAElCvB,EAAIhI,SAASI,IACX,MAAMoJ,GAAkBC,EAAAA,EAAAA,KAAsB5L,EAAQuC,GACtD,GAAIoJ,EAAiB,CACnBD,EAAgBG,KAAKF,GAMrB,MAAMX,EAAiBjB,EAJvB/J,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQ2L,EAAiBpJ,EAAI,CACtDqE,YAAY,IAGiC+E,GAC3CX,IACFhL,EAASmJ,EAAsBnJ,EAAQ2L,EAAiBX,GAAgB,IAG1E,MAAMhK,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQ2L,EAAiBpJ,GAC3D,IAAIpB,EAAAA,EAAAA,KAAqBnB,EAAQ2L,IAAoB3K,EAAS,CAC5D,MAAMgH,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GACnD,IAAI8K,EAAAA,EAAAA,KAAiBH,EAAiB3D,EAAUhI,EAAOkC,eAAgB,CACrE,MAAM6J,EAA4BhC,EAAgB/J,EAAQ2L,EAAiB3D,GAC3E7E,EAAQ6I,yBAAyB,CAAE5K,OAAQ6K,OAAOjE,KAC9C+D,IACF/L,GAAS6J,EAAAA,EAAAA,KAAwB7J,EAAQ2L,EAAiBI,EAA0BxJ,GAAI,SAE5F,CACF,CAEIvB,GAAS0E,QAAQ+E,QAAQ7E,QAC3B5F,GAAS0K,EAAAA,EAAAA,KAAgB1K,EAAQ2L,EAAiB3K,EAAQ0E,QAAQ+E,OAAO7E,MAAMrD,IAAI,IAGrF,MAAM8I,GAAoBC,EAAAA,EAAAA,KAA2BtL,GAErDuL,YAAW,KACTvL,GAASwL,EAAAA,EAAAA,MACTxL,GAASyL,EAAAA,EAAAA,KAAmBzL,EAAQ2L,EAAiB,CAACpJ,KACtD6I,EAAAA,EAAAA,IAAUpL,EAAO,GAChBqL,EAAoBpI,EAAuBD,EAChD,MAGFoI,EAAAA,EAAAA,IAAUpL,IAEVkM,EAAAA,EAAAA,IAAOR,GAAiBvJ,SAASI,IAC/BY,EAAQyH,kBAAkB,CAAExJ,OAAQmB,GAAK,GAE7C,EAniCA4J,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJ1B,EAAM,GAAEmB,EAAE,QAAEvB,EAAO,iBAAEoL,EAAgB,WAAEC,EAAU,KAAEC,GACjDxJ,EAEJ9C,EAASwH,EADTxH,EAASmF,EAAqBnF,EAAQoB,EAAQmB,EAAIvB,GACNmC,EAASnC,GAErD,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAC/CsE,GAAYC,EAAAA,EAAAA,GAAoBjC,GAChC0H,GAAiBC,EAAAA,EAAAA,GAAkB3H,GACnCzB,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC5BgC,GAAMsG,SACL7C,GAAW4F,gBACV9C,EAAAA,EAAAA,KAAuB3J,EAAQ6E,IAChCgC,EAAUI,cACb9D,EAAQ+H,cAAc,CAAE9J,SAAQ+J,QAAStE,EAAUI,eAGrD,MAAMyF,GAAU5D,EAAAA,EAAAA,KAAe9H,GA2D/B,GAzDAkH,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQJ,IAAmB,IAAhBQ,GAAI2B,GAAOnC,EAE9C2K,GAAWL,IACbrM,EAASmJ,EAAsBnJ,EAAQoB,EAAQyD,IAGjD,MAAMmD,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQ6E,GAGnD,GAFA7E,GAAS2M,EAAAA,EAAAA,KAA4B3M,EAAQ6E,EAAYzD,EAAQ4G,EAAU9D,IAEvE0I,EAAAA,EAAAA,KAAoC5M,EAAQoB,EAAQJ,EAAuBkD,GAAQ,CACrF,GAAIwI,GAAW1L,EAAQqC,aAAgBrC,EAAQ0E,SAAS+E,SAAY8B,GAAgBM,UAC9E7L,EAAQ0E,SAASoH,UAAW,CAChC,MAAMC,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GACxD6I,GAEF5J,EAAQ8J,aAAa,CACnB7L,SACA4G,SAAU+E,EAAmB/E,SAC7BX,UAAWrG,EAAQuB,GACnB2K,aAAa,EACbC,qBAAqB,EACrBjJ,SAGN,CAIKwI,GACHnB,YAAW,KACTvL,GAASwL,EAAAA,EAAAA,MACLY,GACFjJ,EAAQiK,qBAAqB,CAC3BnG,aAAc1E,EACd2B,UAGJlE,EAASmJ,EAAsBnJ,EAAQoB,EAAQyD,IAC/CuG,EAAAA,EAAAA,IAAUpL,EAAO,GAChBgD,EAEP,MACEhD,EAASmJ,EAAsBnJ,EAAQoB,EAAQyD,EACjD,IAGEyH,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GAGL0M,IAAYY,EAAAA,EAAAA,KAAmBtN,EAAQoB,IAC1C+B,EAAQoK,gBAGLb,IAAWvL,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACpD,MAAMqG,GAAgBC,EAAAA,EAAAA,KAA+B1H,EAAQ6E,GACzD4C,KAAkB6F,EAAAA,EAAAA,KAAmBtN,EAAQyH,EAAe,UAC9DtE,EAAQ6I,yBAAyB,CAAE5K,OAAQqG,GAE/C,CAEA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,GAAElF,EAAE,YAAEiL,GAAgB1K,EAE5B9C,EAASmJ,EAAsBnJ,EAAQuC,EAAIiL,GAAa,GACxDxN,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ,CAACwN,KAC9BpC,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,8BACHkI,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQuL,IAAmB,IAAhBnL,GAAI2B,GAAOwJ,EAClD,MAAQtM,OAAQuM,IAAkBX,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE9E,GAAIyJ,IAAkB7K,EAAOP,GAAI,OACjC,MAAMvB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQ2N,EAAe7K,EAAOuE,WAEhE,IAAKrG,EAAS,OAGd,IAAI4M,EAAAA,EAAAA,KAAe5M,KAAa8B,EAAO+K,MAAO,OAE9C,MAAMC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxClE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BgO,wBAAyB,IAAKF,EAASE,yBAA2B,GAAK,CACrEzL,GAAI5B,KAAKsN,SACTC,eAAgBpL,EAAO+K,MACvBxG,UAAWvE,EAAOuE,aAEnBnD,EAAM,KAGXkH,EAAAA,EAAAA,IAAUpL,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OACJoB,EAAM,GAAEmB,EAAE,QAAEvB,EAAO,KAAEsL,GACnBxJ,EAEJ9C,EAASmF,EAAqBnF,EAAQoB,EAAQmB,EAAIvB,GAAS,GAE3D,MAAMmN,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ2G,EAAAA,KAAmB,GAC3E/H,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ2G,EAAAA,GAAgB,gBAAgBmE,EAAAA,EAAAA,IAAO,IAAIiC,EAAc5L,KAErG,MAAMyF,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GACnD,GAAIgH,IAAaD,EAAAA,GAAgB,CAC/B,MAAMsG,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ4G,IAAa,GAC3EhI,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,gBAAgBkE,EAAAA,EAAAA,IAAO,IAAImC,EAAoB9L,IACvG,CAEI+J,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OACJoB,EAAM,GAAEmB,EAAE,QAAEvB,EAAO,KAAEsL,GACnBxJ,EAEE0C,GAAiBV,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GACnDa,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAEhCpB,EAASmF,EAAqBnF,EAAQoB,EAAQmB,EAAIvB,GAElD,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAEjDvB,EAAQM,WAAa8B,IACvBpD,EAASkD,EACPlD,EAAQmD,EAAS/B,EAAQmB,EAAIvB,EAAQM,UAAW8B,EAAMyB,EAAWxB,WAAYmC,IAI7ExE,EAAQ0E,SAAS4I,MAAMA,OAAS9I,GAAgBE,SAAS4I,MAAMA,OACjEtO,GAASuO,EAAAA,EAAAA,KAAwBvO,EAAQoB,EAAQmB,IAG/C+J,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OACJoB,EAAM,GAAEmB,EAAE,QAAEvB,EAAO,KAAEsL,GACnBxJ,EAEE0C,GAAiBC,EAAAA,EAAAA,KAAuBzF,EAAQoB,EAAQmB,GAC9D,IAAKiD,EACH,OAGFxF,EAASmF,EAAqBnF,EAAQoB,EAAQmB,EAAIvB,GAAS,GAC3D,MAAMmJ,EAAMjC,OAAOsG,MAAKC,EAAAA,EAAAA,KAA4BzO,EAAQoB,IAAW,CAAC,GAAGsN,IAAIzD,QAAQvG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC1G3E,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ2G,EAAAA,GAAgB,eAAgBoC,GAE5E,MAAMnC,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQwF,GACnD,GAAIwC,IAAaD,EAAAA,GAAgB,CAC/B,MAAMsG,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ4G,IAAa,GAC3EhI,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,eAAgBqG,EAAmB3J,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC9G,CACI2H,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEuC,EAAE,QAAEvB,EAAO,KAAEsL,GAASxJ,EAE9B9C,GAAS2O,EAAAA,EAAAA,KAAwB3O,EAAQuC,EAAIvB,GAEzCsL,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,WAAE4O,GAAe9L,EAEvB9C,GAAS6O,EAAAA,EAAAA,KAAyB7O,EAAQ4O,IAC1CxD,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,aAAE8O,GAAiBhM,EACnBwG,GAAOyF,EAAAA,EAAAA,IAAqBD,EAAc,MAEhD9O,GAASgP,EAAAA,EAAAA,KAAmBhP,EAAQsJ,IACpC8B,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,mBACHA,GAASiP,EAAAA,EAAAA,KAAiBjP,EAAQ8C,EAAOoM,eACzC9D,EAAAA,EAAAA,IAAUpL,GACV,MAGF,IAAK,6BAA8B,CACjC,MAAM,OACJoB,EAAM,QAAE+N,EAAO,QAAEnO,EAAO,KAAEsL,GACxBxJ,EAEJ9C,EAASwH,EAA2BxH,EAAQmD,EAASnC,GAErD,MAAMwE,GAAiBV,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+N,GAEzDnP,GAASyL,EAAAA,EAAAA,KAAmBzL,EAAQoB,EAAQ,CAAC+N,IAGzCnO,EAAQqE,cACVrF,GAASoP,EAAAA,EAAAA,KAA4BpP,EAAQoB,EAAQ,CAAC+N,KAGxDnP,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQJ,EAAQuB,GAAI,IAClDiD,KACAxE,EACH8I,gBAAiBqF,IAGf7C,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,IAGvCtM,EAAS,IACJA,EACHqP,YAAa,CACXC,cAAcC,EAAAA,EAAAA,IAAKvP,EAAOqP,YAAYC,aAAc,EAACvL,EAAAA,EAAAA,IAAc/C,OAIvE,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQJ,EAAQuB,IAC7DvC,EAASmJ,EAAsBnJ,EAAQoB,EAAQyD,GAE/C,MAAM2K,GAASxI,EAAAA,EAAAA,KAAsBhH,EAAQgB,GA4B7C,GA1BAkH,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQsN,IAAmB,IAAhBlN,GAAI2B,GAAOuL,EAClD,MAAQrO,OAAQuM,EAAe3F,SAAU0H,IAAoB1C,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACrGyJ,IAAkBvM,IAChBoO,GAAQzI,YAAYiB,UAAYD,EAAAA,MAAoB2H,GAI1DvM,EAAQwM,oBAAoB,CAAEC,MAAO5O,EAAQuB,GAAI2B,SAAQ,IAEvDsL,GAAQzI,YAAYiB,WACtBhI,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQoO,EAAOzI,WAAWiB,SAAU,aAAc,IACjFwH,EAAOzI,WACVQ,cAAevG,EAAQuB,GACvBsN,uBAAwB7O,EAAQuB,MAIpCvC,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCyO,uBAAwB7O,EAAQuB,MAI7B+K,EAAAA,EAAAA,KAAmBtN,EAAQoB,IAC9B+B,EAAQoK,gBAGNpM,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACxC,MAAMqG,GAAgBC,EAAAA,EAAAA,KAA+B1H,EAAQ6E,GACzD4C,KAAkB6F,EAAAA,EAAAA,KAAmBtN,EAAQyH,EAAe,UAC9DtE,EAAQ6I,yBAAyB,CAAE5K,OAAQqG,GAE/C,EAEA2D,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OACJoB,EAAM,QAAE+N,EAAO,QAAEnO,EAAO,KAAEsL,GACxBxJ,EACEqL,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ2G,EAAAA,KAAmB,GAC3E/H,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ2G,EAAAA,GAAgB,eAAgB,IAAIoG,EAAcnN,EAAQuB,KAEtG,MAAMyF,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GACnD,GAAIgH,IAAaD,EAAAA,GAAgB,CAC/B,MAAMsG,GAAqBD,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ4G,IAAa,GAC3EhI,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,eAAgB,IAAIqG,EAAoBrN,EAAQuB,IACxG,CAEA,MAAMiD,GAAiBC,EAAAA,EAAAA,KAAuBzF,EAAQoB,EAAQ+N,GAE9DnP,GAASoP,EAAAA,EAAAA,KAA4BpP,EAAQoB,EAAQ,CAAC+N,IACtDnP,GAAS0G,EAAAA,EAAAA,KAAuB1G,EAAQoB,EAAQJ,EAAQuB,GAAI,IACvDiD,KACAxE,EACH8I,gBAAiBqF,IAGf7C,IACFtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,KAGvClB,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEoB,EAAM,SAAE0O,EAAQ,WAAElB,GAAe9L,EAEnCiN,GAAWC,EAAAA,EAAAA,KAAWhG,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAASwN,GAC1DqB,EAA8C,CAClD,CAAClI,EAAAA,IAAiB6G,GAEpB1G,OAAOC,OAAO4H,GAAU5N,SAASnB,IAC/B,MAAMgH,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GAInD,GAHAhB,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQJ,EAAQuB,GAAI,CACrDuN,aAEE9H,IAAaD,EAAAA,GAAgB,OACjC,MAAMmI,EAAyBD,EAAgBjI,IAAa,GAC5DkI,EAAuBrE,KAAK7K,EAAQuB,IACpC0N,EAAgBjI,GAAYkI,CAAsB,IAGpDhI,OAAOiI,QAAQF,GAAiB9N,SAAQiO,IAAqB,IAAnBpI,EAAUmC,GAAIiG,EACtD,MAAMC,GAAYC,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ2G,EAAAA,KAAmB,GAC/DwI,EAAeT,GACjB5D,EAAAA,EAAAA,IAAOmE,EAAUG,OAAOrG,IAAMzF,MAAK,CAACC,EAAGC,IAAMA,EAAID,IACjD0L,EAAUvO,QAAQS,IAAQ4H,EAAI7F,SAAS/B,KAC3CvC,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ6J,OAAOjD,GAAW,YAAauI,EAAa,KAE1FnF,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,WACJ+G,GACEjE,EAEJ9C,GAASyQ,EAAAA,EAAAA,KAAkBzQ,EAAQ,CAAC+G,IACpC,MAAM,OAAE3F,EAAM,SAAE4G,GAAajB,EAC7B,IAAK3F,IAAW4G,EAAU,OAE1B,MAAM5E,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BsP,GAAoB5F,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GAM3D,GALI5E,GAAMsG,SAAW3C,EAAW8I,yBAA2Ba,GAAmBb,wBAC5E1M,EAAQ+H,cAAc,CAAE9J,SAAQ+J,QAASF,OAAOjD,MAI7C5E,GAAMsG,QAAS,CAClB,MAAMmG,EAAyBzM,GAAMyM,uBAC/Bc,EAAiC5J,EAAW8I,wBAA0BA,EACxEA,GAA0Bc,IAC5B3Q,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ4G,EAAU,CAClD6H,uBAAwBlP,KAAKE,IAAI8P,EAAgCd,KAGvE,EACAzE,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQuC,GAAInB,GAAW0B,EACjB8N,GAAe5G,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAEhD,GAAIwP,KAAiBC,EAAAA,EAAAA,KAASzP,GAAS,CACrC,MAAM8C,GAAQC,EAAAA,EAAAA,MACdnE,GAASyL,EAAAA,EAAAA,KAAmBzL,EAAQoB,EAAQ8G,OAAOsG,KAAKoC,GAAclC,IAAIzD,UAC1EG,EAAAA,EAAAA,IAAUpL,GACVmD,EAAQ2N,aAAa,CAAE1P,SAAQgI,OAAO,IACtCjG,EAAQ4N,qBAAqB,CAAE3P,SAAQ4G,SAAUD,EAAAA,GAAgB7D,SACnE,CAEA,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAEiG,EAAG,OAAE/I,GAAW0B,EAExBoH,EAAelK,EAAQoB,EAAQ+I,EAAKhH,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEgH,EAAG,OAAE/I,GAAW0B,GAinB9B,SACE1B,EAA4B+I,EAAehH,EAAgCnD,GAE3E,IAAKoB,EACH,OAGF+I,EAAIhI,SAASI,IACXvC,GAAS0G,EAAAA,EAAAA,KAAuB1G,EAAQoB,EAAQmB,EAAI,CAClDqE,YAAY,GACZ,KAGJwE,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqL,GAAoBC,EAAAA,EAAAA,KAA2BtL,GAErDuL,YAAW,KACTvL,GAASwL,EAAAA,EAAAA,MACTxL,GAASoP,EAAAA,EAAAA,KAA4BpP,EAAQoB,EAAQ+I,GACrD,MAAM6G,GAAoBvC,EAAAA,EAAAA,KAA4BzO,EAAQoB,GAC9DpB,GAAS6I,EAAAA,EAAAA,KACP7I,EAAQoB,EAAQ2G,EAAAA,GAAgB,eAAgBG,OAAOsG,KAAKwC,GAAqB,CAAC,GAAGtC,IAAIzD,UAE3FG,EAAAA,EAAAA,IAAUpL,EAAO,GAChBqL,EAAoBpI,EAAuBD,EAChD,CAzoBMiO,CAAwB7P,EAAQ+I,EAAKhH,EAASnD,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEoB,GAAW0B,EACboO,EAAelR,EAAO+P,SAASoB,SAAS/P,GAY9C,GAXIA,IAAWgQ,EAAAA,MACbpR,EAAS,IACJA,EACHqR,qBAAsBrR,EAAOqR,qBAAqB3C,KAAK4C,IAAY,IAC9DA,EACHC,WAAW,QAGfnG,EAAAA,EAAAA,IAAUpL,IAGRkR,EAAc,CAChB,MAAM/G,EAAMjC,OAAOsG,KAAK0C,EAAa5H,MAAMoF,IAAIzD,QAE/Cf,EADAlK,GAASwL,EAAAA,EAAAA,MACcpK,EAAQ+I,EAAKhH,EACtC,MACEA,EAAQyH,kBAAkB,CAAExJ,WAG9BpB,GAASwL,EAAAA,EAAAA,MACTxL,GAASwR,EAAAA,EAAAA,KAAwBxR,EAAQoB,IACzCgK,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,OAAEoB,GAAW0B,EACbZ,EAAgBlC,EAAOkC,cAC7BlC,GAASwR,EAAAA,EAAAA,KAAwBxR,EAAQoB,EAAQ,UACjDgK,EAAAA,EAAAA,IAAUpL,GA8aT,SACLA,EACAoB,EACA4G,EACA7E,GAEA,MAAMmG,GAAOU,EAAAA,EAAAA,KAAmBhK,EAAQoB,GACxC,IAAKkI,EACH,OAGF,MAAMsF,EAAa1G,OAAOC,OAAOmB,GAAMxH,QAAQd,IACrB2J,EAAAA,EAAAA,KAA0B3K,EAAQgB,KAC/BgH,IAC1B0G,KAAK1N,GAAYA,EAAQuB,KAEvBqM,EAAW/M,QAIhBqI,EAAelK,EAAQoB,EAAQwN,EAAYzL,EAC7C,CAhcMsO,CADAzR,GAASwL,EAAAA,EAAAA,MACYtJ,EAAed,EAAQ+B,GAE5C,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEgH,EAAG,cAAE/E,GAAkBtC,EAE/BqH,EAAIhI,SAASI,IACX,MAAMnB,GAASwK,EAAAA,EAAAA,KAAsB5L,EAAQuC,GACzCnB,IACFpB,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI6C,GACjD,KAGFgG,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAE0R,EAAS,IAAEvH,EAAG,cAAE/E,GAAkBtC,EAE1CqH,EAAIhI,SAASI,IACXvC,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQ0R,EAAWnP,EAAI6C,EAAc,KAGlEgG,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE2R,EAAM,WAAEC,GAAe9O,EAE/B9C,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQ2R,EAAQC,IAEpCxG,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE2R,EAAM,OAAE1P,EAAM,QAAE4P,GAAY/O,EACpC9C,GAAS8R,EAAAA,EAAAA,KAAe9R,EAAQ2R,EAAQ1P,EAAQ4P,IAChDzG,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEgB,GAAY8B,GAEhBiP,EAAAA,EAAAA,KAAyB/R,IAC3BmD,EAAQ6O,0BAA0B,CAAEhR,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEI,EAAM,GAAEmB,EAAE,UAAEjB,GAAcwB,EAC5B9B,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAC5Ca,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAO1B,QAEvC,IAAKgC,IAASpC,EAAS,OAEvBhB,EAASkD,EAAgBlD,EAAQmD,EAAS/B,EAAQmB,EAAIjB,EAAW8B,EAAMpC,EAAQqC,WAAYrC,IAC3FoK,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJoB,EAAM,GAAEmB,EAAE,cAAE0P,EAAa,SAAEC,GACzBpP,EACE9B,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAGlD,KAFaoF,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAO1B,UAEzBJ,EAAS,OAEvB,GAAIA,EAAQ0E,QAAQyM,QAAS,CAC3B,MAAMC,EAAQH,EAAc,GAC5B,GAAI,cAAeG,GAA6B,yBAApBA,EAAMC,UAAsC,CACtE,IAAKrR,EAAQ0E,QAAQyM,QAAS,OAC9BnS,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAC7CmD,QAAS,IACJ1E,EAAQ0E,QACXyM,QAAS,IACJnR,EAAQ0E,QAAQyM,QACnBF,cAAeG,OAIrBhH,EAAAA,EAAAA,IAAUpL,EACZ,KAAO,CACL,MAAM0F,EAAU0M,EAChBpS,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAC7CmD,QAAS,IACJA,MAGP0F,EAAAA,EAAAA,IAAUpL,EACZ,CACF,CAEA,GAAIgB,EAAQ0E,QAAQ4M,UAAW,CAC7B,MAAMC,EAAkBL,EAAW,CAAEA,WAAUD,iBAC3C,CAAEA,cAAeA,EAA4CC,cAAU3M,GAE3EvF,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAC7CmD,QAAS,IACJ1E,EAAQ0E,QACX4M,UAAW,IACNtR,EAAQ0E,QAAQ4M,aAChBC,OAITnH,EAAAA,EAAAA,IAAUpL,EACZ,CAEA,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEwS,EAAe,KAAElE,EAAI,UAAEmE,GAAc3P,EAE7C9C,EAAS,IACJA,EACH0S,eAAgB,IACX1S,EAAO0S,eACV,CAACF,GAAkB,IACbxS,EAAO0S,eAAeF,IAAoB,CAAC,EAC/CA,kBACAlE,OACAmE,gBAINrH,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,QAAE+N,EAAO,MAAEwD,GAAU7P,EAE/B6P,EAAMC,MAAM,2BACd1K,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQ0Q,IAAmB,IAAhBtQ,GAAI2B,GAAO2O,EAClD1P,EAAQ2P,oCAAoC,CAAE1R,SAAQ8C,SAAQ,IAIlElE,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQ+N,EAAS,CAAE4D,aAAc,+BACpE3H,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,WAAEwN,EAAU,eAAEoE,EAAc,aAAEC,GAClCnQ,EAEJ9C,GAASkT,EAAAA,EAAAA,KAA0BlT,EAAQoB,EAAQwN,EAAYoE,EAAgBC,IAE/E7H,EAAAA,EAAAA,IAAUpL,GACV,KACF,EACF,IChlBF,MAEMmT,EAA0B,IAAIC,IAE9BC,GAA0BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAsf5DC,eAAeC,EAAS/F,GAIrB,IAJ6C,OAC9C1N,EAAM,OAAEoB,EAAM,SAAE4G,EAAQ,MAAE0L,EAAK,YAAEC,EAAW,kBAAEC,GAG/ClG,EACC,MAAMtK,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1ByS,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQoB,GAChC,IAAKgC,GAASyQ,IAAQE,EAAAA,EAAAA,KAAcF,GAAQ,OAE5C,MAAMhN,GAAYmN,EAAAA,EAAAA,KAAuBhU,EAAQoB,EAAQ4G,EAAU0L,GAAO7M,WAEpEoN,EAAiCP,EAAQ,IAC1CA,EACH7M,YACAqN,KAAMvT,KAAK8B,MAAMC,KAAKC,MAAQ,KAC9B+J,SAAS,QACPnH,EAEJvF,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,QAASiM,GAC1DL,IACH5T,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAE+S,UAAWF,GAAUC,SAG7D9I,EAAAA,EAAAA,IAAUpL,GAEN2T,UAEiBS,EAAAA,EAAAA,IAAQ,YAAa,CACxChR,OACAsQ,MAAOO,KAGKA,IACZA,EAASvH,SAAU,GAGrB1M,GAASwL,EAAAA,EAAAA,MACTxL,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,QAASiM,GAC/DjU,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAE+S,UAAWF,GAAUC,QAE3D9I,EAAAA,EAAAA,IAAUpL,GACZ,CA+mBAwT,eAAezC,EACb/Q,EACAoD,EACA4E,EACAqM,EACAC,GAKA,IAJAC,EAAUjP,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GACVkP,EAAelP,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GACfmP,EAA6BnP,UAAAzD,OAAA,EAAAyD,UAAA,QAAAC,EAAA,QAAAmP,EAAApP,UAAAzD,OAAAuO,EAAA,IAAAuE,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAxE,EAAAwE,EAAA,GAAAtP,UAAAsP,GAAA,IACzB1Q,GAAQC,EAAAA,EAAAA,OAAkBiM,EAE9B,MAAMhP,EAASgC,EAAKb,GAEpB,IAAIsS,EACAC,EAAYC,EAAAA,IAChB,OAAQT,GACN,KAAKU,EAAAA,GAAkBC,UACjBZ,GACFQ,GAAa,EACbC,GAAa,GAEbD,OAAYtP,EAEd,MACF,KAAKyP,EAAAA,GAAkBE,OACrBL,IAAclU,KAAKwU,MAAMJ,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKC,EAAAA,GAAkBI,SACrBP,IAAcE,EAAAA,IAAqB,GAC/BV,IACFS,GAAa,GAOnB,MAAM5S,GAFNlC,GAASwL,EAAAA,EAAAA,OAEoBtJ,cACvBmT,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAU9F,GACnDoT,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EAEhDmU,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5ChR,MAAMuE,EAAAA,EAAAA,KAAW3H,EAAQsV,GACzBjB,WACAQ,YACAW,MAAOV,EACP9M,WACAqN,kBAGF,IAAKE,EACH,OAGF,MAAM,SACJxF,EAAQ,MAAE0F,GACRF,EAEJvV,GAASwL,EAAAA,EAAAA,MAET,MAAMkK,EAAgBtU,IAAWgQ,EAAAA,IAC7BpR,EAAOqR,qBAAqBvP,QAAO+Q,IAAA,IAAC,UAAEtB,GAAWsB,EAAA,OAAMtB,CAAS,IAAE7C,KAAIrG,IAAA,IAAC,QAAErH,GAASqH,EAAA,OAAKrH,CAAO,IAC9F,GACE2U,EAAe,GAAoBnF,OAAOT,EAAU2F,GACpDpM,GAAOyF,EAAAA,EAAAA,IAAqB4G,EAAa,MACzCxL,EAAMjC,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAElC,GAAIjD,IAAaD,EAAAA,MAAmB+D,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAAgB,CAC5F,MAAM0T,GAAuBC,EAAAA,EAAAA,KAAqB7V,EAAQoB,EAAQ4G,GAC5DmC,EAAI,IAAMyL,IAAyBzL,EAAI,IAAOyL,IAAyB5N,GAC3EmC,EAAI7H,QAAQ2I,OAAOjD,GAEvB,CAEAhI,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQoB,EAAQkI,GAC7CtJ,EAASuU,GACLwB,EAAAA,EAAAA,KAAoB/V,EAAQoB,EAAQ4G,EAAUmC,IAC9ClC,EAAAA,EAAAA,KAAgBjI,EAAQoB,EAAQ4G,EAAUmC,GAE9C,IAAIF,GAAYnC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ4G,GAChD,MAAMgO,EAAe3B,GAAW4B,EAAAA,EAAAA,KAA8BjW,EAAQoB,EAAQ4G,EAAUqM,QAAY9O,EAWpG,GATIgP,GAActK,GAAa+L,IACxBA,EAAanU,UAAUqU,EAAAA,EAAAA,IAA4BjM,EAAW+L,KACjEhW,GAASiI,EAAAA,EAAAA,KAAgBjI,EAAQoB,EAAQ4G,EAAUgO,GACnD/L,GAAYnC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ4G,GAC5ChI,GAASmW,EAAAA,EAAAA,KAAmBnW,EAAQoB,EAAQ4G,EAAUgO,GACtDzB,GAAa,KAIZC,EAAiB,CACpB,MAAM4B,EAAa7B,GAAcyB,EAAeA,EAAe/L,EAC/D,GAAImM,EAAY,CACd,MAAM,eAAEzN,GAAmB0N,EAAiBD,EAAY/B,EAAUC,GAClEtU,GAASsW,EAAAA,EAAAA,KAAuBtW,EAAQoB,EAAQ4G,EAAUW,EAAiBzE,EAC7E,CACF,CAEIuR,IACFzV,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoD,EAAKb,GAAIyF,EAAU,CACnDiB,cAAewM,MAInBrK,EAAAA,EAAAA,IAAUpL,GACVyU,KACF,CA8CA,SAAS4B,EACPE,EACAlC,EACAC,GAEA,MAAM,OAAEzS,GAAW0U,EACbC,EAAQnC,EArBhB,SAA0BkC,EAAqBlC,GAC7C,OAAIA,EAAWkC,EAAU,GAChB,EAGLlC,EAAWkC,EAAUA,EAAU1U,OAAS,GACnC0U,EAAU1U,OAAS,EAGrB0U,EAAUE,WAAU,CAAClU,EAAI2C,IAC9B3C,IAAO8R,GACH9R,EAAK8R,GAAYkC,EAAUrR,EAAI,GAAKmP,GAE5C,CAQ2BqC,CAAiBH,EAAWlC,IAAa,EAG5DsC,EAFcrC,IAAcU,EAAAA,GAAkBC,UAEZuB,EAASA,EAAQ,GAAM3U,EACzDiT,EAFWR,IAAcU,EAAAA,GAAkBE,OAEpBvU,KAAKwU,MAAMJ,EAAAA,IAAqB,GAAKA,EAAAA,IAC5D6B,EAAOD,EAAoB7B,EAC3B+B,EAAKF,EAAoB7B,EAAY,EACrCnM,EAAiB4N,EAAUO,MAAMnW,KAAKE,IAAI,EAAG+V,GAAOC,EAAK,GAE/D,IAAIE,EACAC,EACJ,OAAQ1C,GACN,KAAKU,EAAAA,GAAkBC,UACrB8B,EAAeJ,GAAqB,EACpCK,EAAcJ,GAAQ,EACtB,MACF,KAAK5B,EAAAA,GAAkBI,SACrB2B,EAAeJ,EAAoB9U,EACnCmV,EAAcH,GAAMhV,EAAS,EAC7B,MACF,KAAKmT,EAAAA,GAAkBE,OACvB,QACE6B,EAAepO,EAAe9G,OAAS,EACvCmV,EAAcrO,EAAe9G,SAAWkT,EAAAA,IAI5C,MAAO,CAAEpM,iBAAgBoO,eAAcC,cACzC,CAEAxD,eAAeyD,EAAmCjX,EAAWkX,GAoB3D,IAAIC,EACJ,MAAMC,EAAmBF,EAAOG,WAAa,CAACC,EAAkBxT,KACzDqP,EAAwBpI,IAAIjH,KAC/BqT,EAAoBrT,EACpBqP,EAAwBoE,IAAIzT,EAAYsT,IAG1CpX,GAASwL,EAAAA,EAAAA,MACTxL,GAASwX,EAAAA,EAAAA,IAAyBxX,EAAQ8D,EAAYwT,IACtDlM,EAAAA,EAAAA,IAAUpL,EAAO,OACfuF,GAGA2R,EAAOrQ,WAAa4Q,EAAAA,WAChBC,EAAAA,EAAAA,YAGFtD,EAAAA,EAAAA,IAAQ,cAAe8C,EAAQE,GAEjCA,GAAoBD,IACtBnX,GAASwL,EAAAA,EAAAA,MACTxL,GAASwX,EAAAA,EAAAA,IAAyBxX,EAAQmX,OAAmB5R,IAC7D6F,EAAAA,EAAAA,IAAUpL,GAEVmT,EAAwBwE,OAAOR,GAEnC,CA2MA3D,eAAeoE,GAA2C5X,EAAWoB,EAAgBiT,GACnF,MAAMjR,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhR,OAAMiR,aAE5D,IAAKkB,EAAQ,OAEb,MAAM,SAAExF,GAAawF,EAEfjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtC5F,EAAMjC,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAElCjL,GAASwL,EAAAA,EAAAA,MACTxL,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQoD,EAAKb,GAAI+G,GAC9CtJ,GAAS6X,EAAAA,EAAAA,KAAkB7X,EAAQoB,EAAQgC,EAAM+G,IAEjDiB,EAAAA,EAAAA,IAAUpL,EACZ,EAplDAmM,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,UACJxD,EAAYU,EAAAA,GAAkBE,OAAM,gBACpCV,GAAkB,EAAK,kBACvBuD,GAAoB,EAAK,SACzBtD,EAAQ,QACRuD,EAAO,MACP9T,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEhB,IAAI,OAAE1W,EAAM,SAAE4G,GAAa8P,GAAW,CAAC,EAEvC,IAAK1W,IAAW4G,EAAU,CACxB,MAAM+E,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EAEH,YADAiL,MAIF5W,EAAS2L,EAAmB3L,OAC5B4G,EAAW+E,EAAmB/E,QAChC,CAEA,MAAM5E,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAEhC,IAAKgC,GAAQA,EAAK6U,aAEhB,YADAD,MAIF,MAAME,GAActP,EAAAA,EAAAA,KAAkB5I,EAAQoB,EAAQ4G,EAAU9D,GAC1D+F,GAAYnC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ4G,GAElD,GAAKkQ,GAAgBA,EAAYrW,QAAUyS,IAAcU,EAAAA,GAAkBE,OAuBpE,CACL,MAAMb,EAAWC,IAAcU,EAAAA,GAAkBC,UAAYiD,EAAY,GAAKA,EAAYA,EAAYrW,OAAS,GAG/G,IAAI8D,EAAAA,EAAAA,IAAiB0O,GAAW,OAGhC,GAAIA,IAAarM,GAAYsM,IAAcU,EAAAA,GAAkBC,UAAW,OAExE,MAAMV,EAAa4D,QAAQlO,IAAcA,EAAU3F,SAAS+P,IACtD+B,EAAc7B,GAChB0B,EAAAA,EAAAA,KAA8BjW,EAAQoB,EAAQ4G,EAAUqM,GAAYpK,EACxE,GAAImM,GAAYvU,OAAQ,CACtB,MAAM,eACJ8G,EAAc,aAAEoO,EAAY,YAAEC,GAC5BX,EAAiBD,EAAY/B,EAAUC,GAEvCyC,IACF/W,GAASsW,EAAAA,EAAAA,KAAuBtW,EAAQoB,EAAQ4G,EAAUW,EAAgBzE,KAG5Ea,EAAAA,EAAAA,KAAU,MAyBhByO,eACExT,EACAmD,EACA6T,EAAsBzC,EAAqBC,EAC3CpR,EAAe4E,EAAoBsM,EAA8BD,EACjEI,GAEA,QAAA2D,EAAA9S,UAAAzD,OAAAE,EAAA,IAAA4S,MAAAyD,EAAA,GAAAA,EAAA,MAAAC,EAAA,GAAAA,EAAAD,EAAAC,IAAAtW,EAAAsW,EAAA,IAAA/S,UAAA+S,GAAA,IADInU,GAAQC,EAAAA,EAAAA,OAAkBpC,EAEzBiV,SACGjG,EACJ/Q,EAAQoD,EAAM4E,EAAUqM,EAAUC,EAAWC,EAAYC,EAAiBC,EAAUvQ,GAInFsQ,GACHrR,EAAQ4N,qBAAqB,CAC3B3P,OAAQgC,EAAKb,GAAIyF,WAAUsM,YAAWE,iBAAiB,EAAMC,WAAUvQ,SAG7E,CA3CaoU,CACHtY,EACAmD,EACA6T,EACAzC,EACAC,EACApR,EACA4E,EACAsM,EACAD,EACAI,EACAvQ,EACD,GAEL,CAEA,GAAIsQ,EACF,MAEJ,KAhEmF,CACjF,MAAMH,GAAWkE,EAAAA,EAAAA,KAAuBvY,EAAQoB,EAAQ8C,KAAUsU,EAAAA,EAAAA,KAAqBxY,EAAQoB,EAAQ4G,GACjGuM,EAAa4D,QAAQ9D,GAAYpK,IAAcA,EAAU3F,SAAS+P,IAClE+B,GAAc7B,GAChB0B,EAAAA,EAAAA,KAA8BjW,EAAQoB,EAAQ4G,EAAUqM,GACxDpK,IAAc,IACZ,eACJtB,EAAc,aAAEoO,EAAY,YAAEC,GAC5BX,EAAiBD,EAAY/B,EAAUW,EAAAA,GAAkBE,QAEzD6B,IACF/W,GAASsW,EAAAA,EAAAA,KAAuBtW,EAAQoB,EAAQ4G,EAAUW,EAAgBzE,IAGvE8S,EAOHvC,OANA1P,EAAAA,EAAAA,KAAU,KACHgM,EACH/Q,EAAQoD,EAAM4E,EAAWqM,EAAUW,EAAAA,GAAkBE,OAAQX,EAAYC,EAAiBC,EAAUvQ,EACrG,GAKP,EA2CAkH,EAAAA,EAAAA,IAAUpL,EAAQ,CAAEyY,sBAAuBV,GAAoB,KAwBjE5L,EAAAA,EAAAA,IAAiB,eAAeqH,MAAOxT,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,iBAAEqR,EAAgB,aAAEpR,GACnCwQ,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMpC,QAonCRwS,eACExT,EAAWoD,EAAeiE,EAAmBqR,GAE7C,MAAMnD,QAAenB,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhR,OAAMiE,cACrD,GAAKkO,EAAL,CAIA,GAAIA,IAAWoD,EAAAA,GAkBf,OAJA3Y,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoD,EAAKb,GAAI8E,EAAWkO,EAAOvU,UAC9DoK,EAAAA,EAAAA,IAAUpL,GAEHuV,EAAOvU,QAjBZ,GAAI0X,EAAkB,CACpB1Y,GAASwL,EAAAA,EAAAA,MACT,MAAMoN,GAAe9T,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKb,GAAImW,GACxD1Y,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoD,EAAKb,GAAImW,EAAkB,IACzDE,EACH/R,eAAWtB,KAEb6F,EAAAA,EAAAA,IAAUpL,EACZ,CAXF,CAqBF,CA/oCwBoH,CAAYpH,EAAQoD,EAAMiE,EAAWqR,GAC3D,GAAI1X,GAAWsG,EAAc,CAC3B,MAAM,cAAEC,EAAa,WAAEX,GAAeU,EACtCtH,GAASwL,EAAAA,EAAAA,MAETxL,GAASmH,EAAAA,EAAAA,KACPnH,EACAgB,EACAI,EACAmG,EACAX,IAEFwE,EAAAA,EAAAA,IAAUpL,EACZ,MAGFmM,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,YAAEe,EAAW,MAAE3U,GAAQC,EAAAA,EAAAA,OAAsB2T,GAE7C,QAAEjL,EAAS5K,OAAQ6W,IAAgBC,EAAAA,EAAAA,KAAyB/Y,EAAQkE,GACpE8U,EAAeb,QAAQtL,GAAWiM,GAExC,IAAKD,IAAgBG,EACnB,OAGF,IAAI,OAAE5X,EAAM,SAAE4G,EAAQ,KAAE3F,GAASwW,GAAe,CAAC,EASjD,GARIG,IACF5X,EAAS0X,EACT9Q,EAAWD,EAAAA,GACX1F,EAAO,UAGTyV,GAAUvI,EAAAA,EAAAA,IAAKuI,EAAS,CAAC,UAEZ,cAATzV,IAAyByV,EAAQmB,YACnC,OAAOlL,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkZ,qBAAsBpB,GACrB5T,GAGL,MAAMd,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BsS,GAAQyF,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAS4G,GACrCoR,GAAelZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,iBAAiBzK,YAAY/M,OAE1EyX,EAAkBF,GAAiBJ,OAAkCzT,EAAnBmO,GAAO7M,UAEzD0F,EAAiByM,EAAe,CACpC3W,KAAM,QACNJ,OAAQ6W,EACRjM,QAASA,QAC0BtH,EAE/BgU,GAAmBvF,EAAAA,EAAAA,KAAuBhU,EAAQoB,EAAS4G,EAAWsR,GAEtEzS,EAAY0F,GAAkBgN,EAC9BhS,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQoB,GAEhD8V,EAAS,IACVY,EACH1U,OACAyD,YACA2S,WAAWC,EAAAA,EAAAA,KAAgBzZ,EAAQoB,EAAS4G,GAC5C0R,QAAQhY,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7BmG,iBAGGyR,GACH7V,EAAQwW,oBAAoB,CAAEzV,UAGhC,MAAM0V,GAAY9B,EAAQ+B,aAAe/B,EAAQ+B,YAAYhY,QAAU,EACjEiY,GAAaF,GAAY9B,EAAQiC,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAe9C,EACvCD,EAAYjX,EAAQ,IACfga,EACH3C,WAAYwC,EAAcA,EAAY,QAAKtU,EAC3C8G,WAAY8L,QAAQzE,IAExB,MAAO,GAAIoG,EAAW,CACpB,MAAM,KACJxL,EAAI,SAAE2L,EAAQ,YAAEJ,KAAgBK,GAC9BhD,EACEiD,EAo4DV,SAAgCN,GAC9B,OAAOA,EAAYO,QAAO,CAACC,EAAKhD,EAAYb,EAAO8D,IACnC,IAAV9D,GACF6D,EAAIxO,KAAK,CAACwL,IACHgD,IAGIE,GAAkBlD,KACVkD,GAAkBD,EAAI9D,EAAQ,IAEjD6D,EAAIA,EAAIxY,OAAS,GAAGgK,KAAKwL,GAEzBgD,EAAIxO,KAAK,CAACwL,IAGLgD,IACN,GACL,CAr5DmBG,CAAuBX,GAEtC,IAAIY,GAAiB,EACrBN,EAAOhY,SAAQ,CAACuY,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAI5V,EAAI,EAAGA,EAAI0V,EAAmB/Y,OAAQqD,IAAK,CAClD,MAAM6V,EAAa,GAAErY,KAAKC,QAAQgY,IAAazV,IAEzC8V,EAAgB,IAAN9V,GAA0B,IAAfyV,EACrBM,EAAS/V,IAAM0V,EAAmB/Y,OAAS,GAAK8Y,IAAeR,EAAOtY,OAAS,EAErF,GAAI6Y,EAAM,GAAGQ,QAAUR,EAAM,GAAGS,iBAAkB,CAChD,MAAOC,KAAoBC,GAAmBT,EAAmB1V,GACjE+R,EAAYjX,EAAQ,IACfka,EACH5L,KAAM0M,IAAYP,EAAiBnM,OAAO/I,EAC1C0U,SAAUe,IAAYP,EAAiBR,OAAW1U,EAClD8R,WAAY+D,EACZL,UAAWM,EAAgBxZ,OAAS,EAAIkZ,OAAYxV,EACpD8G,WAAY8L,QAAQzE,KAEtB+G,GAAiB,EAEjBY,EAAgBlZ,SAASkV,IACvBJ,EAAYjX,EAAQ,IACfka,EACH7C,aACA0D,aACA,GAEN,KAAO,CACL,MAAMO,EAAmBV,EAAmB1V,GAAG4R,MAAM,GAAI,GACnDyE,EAAiBX,EAAmB1V,GAAG0V,EAAmB1V,GAAGrD,OAAS,GAC5EyZ,EAAiBnZ,SAASkV,IACxBJ,EAAYjX,EAAQ,IACfka,EACH7C,aACA0D,aACA,IAGJ9D,EAAYjX,EAAQ,IACfka,EACH5L,KAAM2M,IAAWR,EAAiBnM,OAAO/I,EACzC0U,SAAUgB,IAAWR,EAAiBR,OAAW1U,EACjD8R,WAAYkE,EACZR,UAAWO,EAAiBzZ,OAAS,EAAIkZ,OAAYxV,EACrD8G,WAAY8L,QAAQzE,KAEtB+G,GAAiB,CACnB,CACF,IAEJ,KAAO,CACL,MAAM,KACJnM,EAAI,SAAE2L,EAAQ,YAAEJ,EAAahT,UAAW2U,KAA2BtB,GACjEhD,EAEA5I,GACF2I,EAAYjX,EAAQ,IACfka,EACH5L,OACA2L,WACApT,UAAW2U,EACXnP,WAAY8L,QAAQzE,KAIxBmG,GAAa1X,SAASkV,IACpBJ,EAAYjX,EAAQ,IACfka,EACH7C,cACA,GAEN,CAEgB,KAGlBlL,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,EAAM,QAAEqa,EAAO,MAAEvX,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjD4D,GAAeC,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAChD,IAAKsa,GAAcE,WACjB,OAEF,MAAMC,EAA0B,GAehC,aAdMC,QAAQC,IAAIN,EAAQ/M,KAAKsN,IAC7B,MAAM5Y,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQgc,GAChC,IAAK5Y,EACH,OAEF,MAAM6Y,GAAeC,EAAAA,EAAAA,MAAgBpI,EAAAA,EAAAA,KAAW9T,EAAQgc,IAIxD,OAHIC,GACFJ,EAAchQ,KAAKoQ,GAEdhF,EAAYjX,EAAQ,CACzBoD,OACAkL,KAAMoN,EAAaE,YACnB,KAEGzY,EAAQgZ,iBAAiB,CAC9Bnb,SAASob,EAAAA,EAAAA,IAAa,yCAA0CP,EAAcQ,KAAK,OACnFnY,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,YACJe,EAAW,KAAEvK,EAAI,SAAE2L,EAAQ,YAAEJ,EAAW,MAAE3V,GAAQC,EAAAA,EAAAA,OAChD2T,EAEJ,IAAKe,EACH,OAGF,IAAI1B,EACJ,MAAMC,EAAmByC,EAAc,CAACvC,EAAkBxT,KACnDqP,EAAwBpI,IAAIjH,KAC/BqT,EAAoBrT,EACpBqP,EAAwBoE,IAAIzT,EAAYsT,IAG1CpX,GAASwL,EAAAA,EAAAA,MACTxL,GAASwX,EAAAA,EAAAA,IAAyBxX,EAAQ8D,EAAYwT,IACtDlM,EAAAA,EAAAA,IAAUpL,EAAO,OACfuF,GAEE,OAAEnE,EAAM,SAAE4G,EAAU3F,KAAMia,GAAoBzD,EAC9CzV,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAUub,EAAAA,EAAAA,KAAqBvc,EAAQoB,EAAQ4G,EAAUsU,GAC1DlZ,GAASpC,IAIdmC,EAAQqZ,aAAa,CAAEnV,eAAW9B,EAAWrB,UAE7C,iBACQkQ,EAAAA,EAAAA,IAAQ,cAAe,CAC3BhR,OACApC,UACAqW,WAAYwC,EAAcA,EAAY,QAAKtU,EAC3C+I,OACA2L,WACAT,WAAWC,EAAAA,EAAAA,KAAgBzZ,EAAQoB,EAAQ4G,IAC1CoP,GAECA,GAAoBD,IACtBnX,GAASwL,EAAAA,EAAAA,MACTxL,GAASwX,EAAAA,EAAAA,IAAyBxX,EAAQmX,OAAmB5R,IAC7D6F,EAAAA,EAAAA,IAAUpL,GAEVmT,EAAwBwE,OAAOR,GAElC,EAjBD,GAiBI,KAGNhL,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EAExB9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,EAAS,OAEd,MAAMoW,EAAmBpW,GAAWmS,EAAwB3S,KAAIuD,EAAAA,EAAAA,IAAc/C,IAC1EoW,IACFqF,EAAAA,EAAAA,IAAkBrF,IAGhBtO,EAAAA,EAAAA,KAAe9H,IACjBmC,EAAQuZ,UAAU,CAChB,QAAS,iBACTvS,IAAK,CAAC9C,GACNjG,UAEJ,KAGF+K,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAAS2U,KAC9C,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,KAAEsG,GAChBwJ,EACJ,IAAKxJ,EACH,OAGF,MAAMqO,GAAexD,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,GAQjDyL,EAAU,CACRzT,SAAQoB,SAAQ4G,WAAU0L,MAPD,CACzBpF,OACAzH,UAAW8V,GAAc9V,UACzB+V,SAAUD,GAAcC,WAKxB,KAGJzQ,EAAAA,EAAAA,IAAiB,cAAc,CAACnM,EAAQmD,EAAS2U,KAC/C,MAAM,OACJ1W,EAAM,SAAE4G,EAAWD,EAAAA,GAAc,YAAE4L,EAAW,gBAAEkJ,GAC9C/E,EACE6E,GAAexD,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,GACjD,IAAK2U,EACH,OAGF,MAAMG,EAAmBH,EAAa9V,UAMtC4M,EAAU,CACRzT,SAAQoB,SAAQ4G,WAAU0L,MALWmJ,GAAmBC,EAAmB,CAC3EjW,UAAWiW,QACTvX,EAGyCoO,eAC3C,KAGJxH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,SAAsBrB,GAAWgV,EAC3C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,GAAa+E,EAEvB4P,GAAexD,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,GAE3C+U,EAAmB,CACvB1a,KAAM,aACHsa,GAAc9V,aACd/D,GAGAia,EAAiB9V,cAOtBwM,EAAU,CACRzT,SAAQoB,SAAQ4G,WAAU0L,MAND,IACtBiJ,EACH9V,UAAWkW,GAIgCpJ,aAAa,EAAMC,mBAAmB,GACjF,KAGJzH,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAEF,MAAM,OAAE3L,EAAM,SAAE4G,GAAa+E,EAEvB4P,GAAexD,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,GAC3CiM,EAAkC0I,GAAcrO,KAAmB,IACpEqO,EACH9V,eAAWtB,QAFgDA,EAK7DkO,EAAU,CACRzT,SAAQoB,SAAQ4G,WAAU0L,MAAOO,EAAUN,YAAawE,QAAQlE,IAChE,KAGJ9H,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,SAAE4U,GAChB9E,EASJrE,EAAU,CACRzT,SAAQoB,SAAQ4G,WAAU0L,MANX,KAFIyF,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,GAI/C4U,YAI2CjJ,aAAa,EAAMC,mBAAmB,GACjF,KA8CJzH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,SAAE4G,EAAQ,UAAEwR,GAAc1B,EAExC,OAAOjP,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,YAAawR,EAAU,KAG7ErN,EAAAA,EAAAA,IAAiB,cAAc,CAACnM,EAAQmD,EAAS2U,KAC/C,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,QAAE2V,EAAO,UAAEC,EAAS,SAAEC,GACrCpF,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC3BgC,IAIAgR,EAAAA,EAAAA,IAAQ,aAAc,CACzBhR,OAAMiE,YAAW2V,UAASC,YAAWC,YACrC,KAGJ/Q,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,OAAE1W,EAAM,SAAE4G,GAAa8P,EACvB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,aAGIgR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhR,OAAM4E,aAE1ChI,GAASwL,EAAAA,EAAAA,MACT,MAAM6E,GAAYC,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ4G,GAClDqI,GAAWlO,SAASI,IAClBvC,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQmB,EAAI,CAAEuN,UAAU,GAAQ,IAErE9P,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoD,EAAKb,GAAIwF,EAAAA,GAAgB,YAAa,KAC1EqD,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,WAAElJ,EAAU,mBAAEuO,EAAkB,MAAEjZ,GAAQC,EAAAA,EAAAA,OAAsB2T,EAChE/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAEF,MAAM,OAAE3L,EAAM,SAAE4G,GAAa+E,EACvB3J,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1Bgc,EAAqBxO,EAAW9M,QAAQS,IAC5C,MAAMvB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQmB,GAClD,OAAOvB,KAAY8H,EAAAA,EAAAA,KAAe9H,EAAQ,IAI5C,IAAKoc,EAAmBvb,QAAU+M,EAAW/M,OAE3C,YADAqI,EAAelK,GAAQqd,EAAAA,EAAAA,KAAcja,GAAQhC,OAASmE,EAAWqJ,EAAYzL,IAI1EiR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhR,OAAMwL,WAAYwO,EAAoBD,uBAEvE,MAAMG,GAAYC,EAAAA,EAAAA,KAAgBvd,EAAQoB,EAAQ4G,GAC9CsV,GAAa1O,EAAWtK,SAASgZ,IACnCna,EAAQqZ,aAAa,CAAEnV,eAAW9B,EAAWrB,SAC/C,KAGFiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,WAAElJ,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC5C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,GAAW2L,EACb3J,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,IAE3BgT,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhR,OAAMwL,eAEhD,MAAM0O,GAAYE,EAAAA,EAAAA,KAAyBxd,EAAQoB,GAC/Ckc,GAAa1O,EAAWtK,SAASgZ,IACnCna,EAAQqZ,aAAa,CAAEnV,eAAW9B,EAAWrB,SAC/C,KAGFiI,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,OAAE1W,EAAM,mBAAE+b,EAAkB,MAAEjZ,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC5D1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,aAGIgR,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEhR,OAAM+Z,uBAEvCnd,GAASwL,EAAAA,EAAAA,MACT,MAAMiS,GAAazQ,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAChDuZ,GAAcA,EAAWrc,SAAWA,GACtC+B,EAAQua,SAAS,CAAEnb,QAAIgD,EAAWrB,UAIpC,MAAMyZ,EAAU3d,EAAO4d,YAAYtU,KACnCpB,OAAOC,OAAOwV,GAASxb,SAAS0b,IAC9B,GAAIA,EAAOC,gBAAgBxZ,SAASlD,IAAWyc,EAAOE,eAAezZ,SAASlD,GAAS,CACrF,MAAM4c,EAAqBH,EAAOC,gBAAgBhc,QAAQS,GAAOA,IAAOnB,IAClE6c,EAAmBJ,EAAOE,eAAejc,QAAQS,GAAOA,IAAOnB,IAE/D8c,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjB7J,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB7R,GAAIsb,EAAOtb,GACX4b,aAAcD,GAElB,IACA,KAGJ/R,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EACxC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,aAGIgR,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEhR,SAEtCpD,GAASwL,EAAAA,EAAAA,MACT,MAAMiS,GAAazQ,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAChDuZ,GAAcA,EAAWzV,WAAa5G,GACxC+B,EAAQua,SAAS,CAAEnb,QAAIgD,EAAWrB,SACpC,KAGFiI,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,WACJlJ,EAAU,YAAEwP,EAAc,GAAE,OAAEC,EAAS,GAAE,OAAEjd,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OACzD2T,EACE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE1Bkd,QAAiBlK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC/CmK,KAAMnb,EAAMwL,aAAYwP,cAAaC,WAGvC,IAAKC,EAAU,OAEf,MAAM,OAAE/I,EAAM,MAAE5C,GAAU2L,EAE1B,GAAI3L,IAAU6L,EAAAA,IAMZ,OALArb,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAAa,qCACtBlY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAKqR,EAAL,CAEA,GAAoB,aAAhBA,EAAOlT,KAQT,OAPAc,EAAQgZ,iBAAiB,CACvBnb,QAASuU,GACL6G,EAAAA,EAAAA,IAAa,2BACb,2EACJlY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAoB,iBAAhBqR,EAAOlT,KAAyB,CAClCrC,GAASwL,EAAAA,EAAAA,MACT,MAAMkT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIgQ,SAASrO,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBC,MAAOzJ,EAAOyJ,MACdnN,QAAS0D,EAAO1D,QAChBoN,SAAUJ,GAAgBvQ,MAE5BtO,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2e,YAAa,CACXvd,SACAwN,aACAwP,cACAc,QAAS,UACTN,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAEA,GAAoB,YAAhBuV,EAAOlT,KAAoB,CAC7BrC,GAASwL,EAAAA,EAAAA,MACT,MAAMkT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIgQ,SAASrO,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBI,WAAY5J,EAAO4J,WACnBd,OAAQ9I,EAAO8I,OACfW,MAAOH,GAAgBvQ,MAEzBtO,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2e,YAAa,CACXvd,SACAwN,aACAwP,cACAc,QAAS,UACTN,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CArDmB,CAqDnB,KAGFmM,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,OAAErN,EAAM,OAAErJ,EAAM,SAAE4G,GAAa8P,EACrC,GAA+B,yBAA3B9X,EAAOof,gBAA4C,OACvD,IAAIje,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,OAE1C,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAMyQ,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQoB,GAC5ByS,KAASwL,EAAAA,EAAAA,KAAUxL,KAASE,EAAAA,EAAAA,KAAcF,WAExCO,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCmK,KAAMnb,EAAM4E,WAAUyC,UACtB,KAGJ0B,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,cAAEwH,EAAa,OAAEle,EAAM,WAAEwN,GAAekJ,EACxCyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQsf,GAC1Blc,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC3Bmd,GAASnb,IAITgR,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmK,OAAMnb,OAAMwL,cAAa,KAG/DzC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAElI,EAAK,MAAE1L,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEvC/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,GAAa+E,EACvB3J,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,IAAQ0I,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eACrD,OAGFmR,GAAwB,MACjBe,EAAAA,EAAAA,IAAQ,sBAAuB,CAClChR,OAAM4E,WAAU4H,SAChB,IAGAxO,IAAWgQ,EAAAA,MACbpR,EAAS,IACJA,EACHqR,qBAAsBrR,EAAOqR,qBAAqB3C,KAAK4C,GAC9CA,EAAa1N,UAAY0N,EAAa/O,IAAMqN,EAAQ,IAAK0B,EAAc1N,UAAU,GAAU0N,MAKxG,MAAM4G,GAActP,EAAAA,EAAAA,KAAkB5I,EAAQoB,EAAQ4G,EAAU9D,GAC1Dsb,GAAQhX,EAAAA,EAAAA,KAAoBxI,EAAQoB,EAAQ4G,GAElD,GAAIA,IAAaD,EAAAA,KAAmB3E,EAAKsG,QAIvC,OAHSV,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ4G,EAAU,CAClD6H,uBAAwBD,IAK5B,IAAKsI,IAAgBsH,IAAUpc,EAAKyE,YAClC,OAAO7H,EAGT,MAAMyf,EAgxCR,SAAwBtV,EAAeyM,EAAcC,GAEnD,GAAmB,IAAf1M,EAAItI,QAAgB+U,EAAOzM,EAAI,IAAM0M,EAAK1M,EAAIA,EAAItI,OAAS,GAAI,OAEnE,IAAI4T,EAAQ,EAEZ,IAAK,IAAIvQ,EAAI,EAAGwa,EAAIvV,EAAItI,OAAQqD,EAAIwa,IAC9BvV,EAAIjF,IAAM0R,GAAQzM,EAAIjF,IAAM2R,GAC9BpB,MAGEtL,EAAIjF,IAAM2R,IALuB3R,KAUvC,OAAOuQ,CACT,CAjyCoBkK,CAAezH,EAAasH,EAAO5P,GACrD,IAAK6P,EACH,OAAOzf,EAGT,MAAMyJ,GAAQc,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQ4G,GAC1C,GAAI5E,EAAKsG,SAAWD,EAAO,CACzBzJ,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ4G,EAAU,CAClD6H,uBAAwBD,IAE1B,MAAMgQ,EAAsBjf,KAAKE,IAAI,EAAG4I,EAAM5B,YAAc4X,GAM5D,OAL4B,IAAxBG,IACF5f,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCyG,YAAalH,KAAKE,IAAI,EAAGuC,EAAKyE,YAAc,OAGzC+B,EAAAA,EAAAA,KAAY5J,EAAQoB,EAAQ6J,OAAOjD,GAAW,CACnDH,YAAa+X,GAEjB,CAEA,OAAO7c,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAChCyO,uBAAwBD,EACxB/H,YAAalH,KAAKE,IAAI,EAAGuC,EAAKyE,YAAc4X,IAC5C,KAGJtT,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,WAAElJ,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,MAAiB,2BAAE0b,GAA+B/H,EAExE1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAClCd,IAIAgR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhR,OAAMwL,eACtCmR,MAAK,KACAF,GACF1c,EAAQ6c,qBAAqB,CAAE5e,OAAQgC,EAAKb,IAC9C,GACA,KAGN4J,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,KAAExJ,EAAI,MAAEpK,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtCmI,QAAuB7L,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE9F,SAE9DtO,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BigB,kBACC/b,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,IAAK5X,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO+b,eAInC,OAAOlS,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BigB,oBAAgB1a,GACfrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,QAAEwK,GAAYiG,EACjC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE5BgC,IACGgR,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhR,OAAMiE,YAAWwK,WAClD,KAGF1F,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EACxB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE5BgC,IACGgR,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhR,OAAMiE,YAAWwK,QAAS,IAC3D,KAGF1F,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAAS2U,KAC9C,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EACxB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAC5CiF,EAAOtL,IAAWkf,EAAAA,EAAAA,KAAsBlgB,EAAQgB,GAClDoC,GAAQkJ,IACL8H,EAAAA,EAAAA,IAAQ,YAAa,CAAEhR,OAAMiE,YAAWiF,QAC/C,KAGFH,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,KACJ1U,EAAI,UAAEiE,EAAS,OAAEgX,EAAM,OAAE8B,EAAM,MAAE3K,EAAK,kBAAE4K,EAAiB,MAAElc,GAAQC,EAAAA,EAAAA,OACjE2T,EAEEvC,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhR,OAAMiE,YAAWgX,SAAQ8B,SAAQ3K,UAGnC,IAAKD,EACH,OAGFvV,GAASwL,EAAAA,EAAAA,MAET,MAAMsC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,YAAEmc,GAAgBvS,GAClB,OAAEwS,GAAWxS,EAASuS,YAE5BrgB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqgB,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAACjC,IAASnS,EAAAA,EAAAA,IAAO,KACVkU,GAAqBE,IAASjC,GAAUiC,EAAOjC,GAAU,MAC3D9I,EAAOgL,MAAM7R,KAAK8R,GAASA,EAAKve,YAGvCwe,QAAS,IACHJ,EAAYI,QAAUJ,EAAYI,QAAU,CAAC,EACjD,CAACpC,GAAS9I,EAAOmL,YAAc,MAGlCxc,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OAAE1W,EAAM,IAAE+I,GAAQ2N,EAClB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC5BgC,IACGgR,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEhR,OAAM+G,OAC7C,KAGFgC,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,SACJoF,EAAQ,YAAEjE,EAAW,MAAE/U,GAAQC,EAAAA,EAAAA,OAC7B2T,GAEE,WACJ6I,EAAU,WAAE/R,EAAU,SAAEgS,EAAQ,YAAEC,EAAW,UAAEC,EAAS,WAAEC,EAAU,WAAEC,EAAajZ,EAAAA,KACjF7H,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBAE5B4H,GAAuBC,EAAAA,EAAAA,KAA2BlhB,GAClDmhB,EAAiBH,IAAejZ,EAAAA,GAEhCqZ,EAAWT,GAAahZ,EAAAA,EAAAA,KAAW3H,EAAQ2gB,QAAcpb,EACzD8b,EAAST,GAAWjZ,EAAAA,EAAAA,KAAW3H,EAAQ4gB,QAAYrb,EAEnDwK,EAAW4Q,GAAc/R,EAC3BA,EACClK,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnB8J,KAAKnM,IAAOuC,EAAAA,EAAAA,KAAkB9E,EAAQ2gB,EAAYpe,KAAKT,OAAOqW,cAC/D5S,EAEJ,IAAK6b,IAAaC,IAAWtR,GAAaiR,IAAeG,IAAmBE,EAAO3X,QACjF,OAGF,MAAMgQ,GAAShY,EAAAA,EAAAA,KAAa1B,EAAQ4gB,GAC9BlN,GAAQyF,EAAAA,EAAAA,KAAYnZ,EAAQ4gB,EAAWI,GAAcjZ,EAAAA,IACrDR,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQqhB,EAAO9e,KAEtD+e,EAAcC,IAAmBC,EAAAA,EAAAA,IAAUzR,GAAW0R,KAAOC,EAAAA,EAAAA,KAA6BD,KAC7FH,EAAazf,QACf,iBACQ6V,EAAAA,EAAAA,OACNtD,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBgN,WACAC,SACAL,aACAjR,SAAUuR,EACVpE,WACAjE,cACAS,SACAmH,cACAC,YACAC,aACAE,uBACA5U,WAAY8L,QAAQzE,GACpBnM,iBAEH,EAjBD,GAoBFga,EACGpf,SAASnB,IACR,MAAM,KAAEsN,EAAI,SAAE2L,GAAajZ,EAAQ0E,QAAQ4I,MAAQ,CAAC,GAC9C,QAAExI,GAAY9E,EAAQ0E,QAEtBmB,GAAYmN,EAAAA,EAAAA,KAAuBhU,EAAQqhB,EAAO9e,GAAIye,GAEvD/J,EAAYjX,EAAQ,CACvBoD,KAAMie,EACNxa,YACAyH,OACA2L,WACAnU,UACAoX,WACAjE,cACAS,SACAnS,iBACA,IAGNvH,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqZ,gBAAiB,CAAC,EAClBsI,0BAA0B,GACzBzd,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OAAE1W,GAAW0W,EACb1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhR,SACxD,IAAKmS,EACH,OAGF,MAAM,SAAExF,GAAawF,EAEfjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtC5F,EAAMjC,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAAQvG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAK7D,GAHA3E,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4hB,EAAAA,EAAAA,KAAwB5hB,EAAQoD,EAAKb,GAAI+G,GAClDtJ,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoD,EAAKb,GAAIwF,EAAAA,GAAgB,eAAgBoC,GACzE/G,GAAMsG,QAAS,CACjB,MAAMmY,EAAiD,CAAC,EACxD9R,EAAS5N,SAASnB,IAChB,MAAMgH,GAAW2C,EAAAA,EAAAA,KAA0B3K,EAAQgB,GAC7C8gB,EAAoBD,EAAmB7Z,IAAa,GAC1D8Z,EAAkBjW,KAAK7K,EAAQuB,IAC/Bsf,EAAmB7Z,GAAY8Z,CAAiB,IAGlD5Z,OAAOiI,QAAQ0R,GAAoB1f,SAAQsN,IAA8B,IAA5BzH,EAAUmG,GAAasB,EAClEzP,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoD,EAAKb,GAAI0I,OAAOjD,GAAW,eAAgBmG,EAAa,GAEhG,EACA/C,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,OACJ1W,EAAM,GAAEmB,GACNuV,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE3BgC,IAIAgR,EAAAA,EAAAA,IAAQ,wBAAyB,CACpChR,OACA+G,IAAK,CAAC5H,IACN,KAGJ4J,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,YAAE4R,GACjBnB,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,EAAUoC,IAAQqC,EAAAA,EAAAA,KAAuBzF,EAAQoD,EAAKb,GAAI8E,GAC3DjE,GAASpC,IAIToT,EAAAA,EAAAA,IAAQ,oBAAqB,CAChChR,OACApC,UACAiY,eACA,KAGJ9M,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,UAAEzQ,EAAS,OAAEjG,GAAW0W,EAExB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAEhC,IAAKgC,EAAM,OAEXpD,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CACpDmL,gBAAiB,MAGnBpH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEhR,OAAMiE,cAExDrH,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CACpDmL,gBAAiB+C,EACjBwM,sBAAuBxM,KAGzBnK,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,IAAE3N,EAAG,YAAE6X,GAAgBlK,EACvBmK,EAAoBD,EAAc7X,GACpC+B,EAAAA,EAAAA,IAAO/B,EAAIrI,QAAQogB,IAAgBliB,EAAOmiB,aAAa7Y,KAAK4Y,MAC1DE,QAAoBhO,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD8N,WAAYD,IAETG,IAELpiB,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHmiB,aAAc,IACTniB,EAAOmiB,aACV7Y,KAAM,IACDtJ,EAAOmiB,aAAa7Y,SACpByF,EAAAA,EAAAA,IAAqBqT,EAAa,UAI3ChX,EAAAA,EAAAA,IAAUpL,GAAO,KAgPnBmM,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,EAAM,SAAE4G,GAAa8P,EACvB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,IAAQ0I,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eACrD,OAGF,MAAMqT,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhR,OAAM4E,aAC5D,IAAKuN,EACH,OAGF,MAAM,SAAExF,GAAawF,EAEfjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtC5F,EAAMjC,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAAQvG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAE7D3E,GAASwL,EAAAA,EAAAA,MACTxL,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQoD,EAAKb,GAAI+G,GAC9CtJ,GAASqiB,EAAAA,EAAAA,KAAqBriB,EAAQoD,EAAKb,GAAIyF,EAAUmC,IACzDiB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EACxB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,cAAe,CAAEhR,OAAMiE,cAC/CkO,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CACpDib,YAAa/M,KAEfnK,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OAAE1W,EAAM,SAAEmhB,GAAazK,EACvB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BohB,GAAa7a,EAAAA,EAAAA,KAAW3H,EAAQuiB,KAAazO,EAAAA,EAAAA,KAAW9T,EAAQuiB,GACtE,GAAKnf,GAASof,EAMd,OAFKpO,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEsF,OAAQ8I,EAAYpf,UAEjDqf,EAAAA,EAAAA,KAAmBziB,EAAQoB,EAAQ,CAAEmhB,YAAW,KAGzDpW,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OAAE1W,GAAW0W,EACb1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,cAAe,CAAEhR,SAC9C,IAAKmS,EAOH,OANAvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCshB,cAAe,UAEjBtX,EAAAA,EAAAA,IAAUpL,GAKZA,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAEshB,cAAenN,EAAOmE,UAC5DtO,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,OAAE7V,GAAW6V,EACbyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,IAAIoE,EAAAA,EAAAA,IAAcpE,KAASqE,EAAAA,EAAAA,KAA0B5iB,EAAQue,EAAKhc,IAChE,OAGF,MAAMgT,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEmK,SACpDhJ,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS6iB,EAAAA,EAAAA,KAAuB7iB,EAAQiC,EAAQsT,EAAOxF,SAAS,KAChE3E,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAE7V,GAAW6V,EACbyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BjB,GAAU8hB,EAAAA,EAAAA,KAAuB9iB,EAAQiC,GAC1Csc,GAASvd,IAIToT,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEmK,OAAMtQ,OAAQjN,EAAQ+hB,UAAW,KAG1E5W,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,OAAE7V,EAAM,QAAE+gB,EAAO,aAAEC,GAAiBnL,EACpCyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BjB,GAAU8hB,EAAAA,EAAAA,KAAuB9iB,EAAQiC,GAC1Csc,GAASvd,IAIToT,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCmK,OAAMtQ,OAAQjN,EAAQ+hB,SAAUC,UAASC,gBACzC,KAGJ9W,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,OACJ7V,EAAM,SAAE8gB,EAAQ,OAAE1E,EAAS,GAAE,MAAEna,GAAQC,EAAAA,EAAAA,OACrC2T,EACEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEmK,OAAMwE,WAAU1E,WAEzE,GAAK9I,EAAL,CAEA,GAAoB,oBAAhBA,EAAOlT,KAGT,OAFAc,EAAQ+f,iBAAiB,CAAEC,eAAgB,SAAUjf,eACrDf,EAAQigB,mBAAmB,CAAElf,UAI/B,GAAoB,aAAhBqR,EAAOlT,MAAuC,WAAhBkT,EAAOlT,KAUvC,OATAc,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAA6B,aAAhB7G,EAAOlT,KAAsB,aAAe,YAClE6B,UAEFf,EAAQigB,mBAAmB,CAAElf,UAE7BlE,GAASwL,EAAAA,EAAAA,MACTxL,GAASqjB,EAAAA,EAAAA,KAAuBrjB,EAAQiC,QACxCmJ,EAAAA,EAAAA,IAAUpL,GAIZ,GAAoB,iBAAhBuV,EAAOlT,KAAyB,CAClCrC,GAASwL,EAAAA,EAAAA,MACT,MAAMkT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOof,eAAe1E,SAC3DC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIgQ,QAAQrO,MAAMsb,GAAMA,EAAET,SAAWA,IACzFU,EAAa,CACjBC,MAAOzJ,EAAOyJ,MACdnN,QAAS0D,EAAO1D,QAChBoN,SAAUJ,GAAgBvQ,MAE5BtO,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BsjB,cAAe,CACbliB,OAAQa,EACR8gB,WACAnE,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAtCmB,CAsCnB,KAGFmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GACrBoJ,EAAAA,EAAAA,KAA2BlhB,SAMnCoU,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEmP,SAAS,MAEnEvjB,GAASwL,EAAAA,EAAAA,MACTxL,GAASwjB,EAAAA,EAAAA,KAAmBxjB,EAAQA,EAAOkC,cAAgB,CACzDuhB,eAAe,KAEjBrY,EAAAA,EAAAA,IAAUpL,GACVmD,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAAa,YACtBlY,WAbAf,EAAQ+f,iBAAiB,CAAEC,eAAgB,SAAUjf,SAcrD,KAGJiI,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,OAAE1W,EAAM,SAAEiT,GAAayD,QACvBF,GAAoB5X,EAAQoB,EAAQiT,EAAS,KAuBrDlI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,WAAElJ,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAClCd,IAELpD,GAAS0jB,EAAAA,EAAAA,KAAqB1jB,EAAQoD,EAAKb,GAAIa,EAAMwL,GAAY,IACjExD,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQwgB,iBAAiB,CAAE/U,aAAY1K,UAAQ,KAGjDiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,IAAI1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAErC,GAAKd,EAAL,CAEA,IAAKA,EAAKwgB,eAAgB,OAClBhM,GAAoB5X,EAAQoD,EAAKb,IACvCvC,GAASwL,EAAAA,EAAAA,MACT,MAAMqY,EAAiBzgB,EAAKb,GAE5B,GADAa,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,IAC5Bd,GAAMwgB,gBAAkBC,IAAmBzgB,EAAKb,GAAI,MAC3D,CAEAY,EAAQ8J,aAAa,CAAE7L,OAAQgC,EAAKb,GAAI8E,UAAWjE,EAAKwgB,eAAe,GAAI1f,SAV1D,CAUkE,KAGrFiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACvC,GAAKd,EAIL,OAFAgR,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEhR,UAEtBL,EAAAA,EAAAA,KAAW/C,EAAQoD,EAAKb,GAAI,CACjCuhB,yBAAqBve,EACrBqe,oBAAgBre,GAChB,KAGJ4G,EAAAA,EAAAA,IAAiB,WAAW,CAACnM,EAAQmD,EAAS2U,KAC5C,MAAM,IACJiM,EAAG,gBAAEC,EAAe,gBAAEC,EAAe,MAAE/f,GAAQC,EAAAA,EAAAA,OAC7C2T,EACEoM,GAAkBC,EAAAA,EAAAA,GAAeJ,GAEvC,IAAKE,IAAmBG,EAAAA,EAAAA,GAAWF,GAKjC,OAJA/gB,EAAQkhB,iBAAiB,CAAEngB,UAC3Bf,EAAQmhB,kBAAkB,CAAEpgB,eAE5Bf,EAAQohB,iBAAiB,CAAER,MAAK7f,UAIlC,MAAM,UAAEsgB,EAAS,OAAEC,GAAWzkB,EAC9B,GAAIwkB,EAAW,CACb,MAAME,EAAY,IAAIC,IAAIT,GAE1B,GAAIO,GAAQG,gBAAkBJ,EAAUK,iBAAiBvgB,SAASogB,EAAUI,UAG1E,OAFAJ,EAAUK,aAAaxN,IA3pDD,kBA2pD0BkN,EAAOG,qBACvDI,OAAOC,KAAKP,EAAUQ,KAAM,SAAU,YAIxC,GAAIV,EAAUW,eAAe7gB,SAASogB,EAAUI,UAI9C,OAHA3hB,EAAQkhB,iBAAiB,CAAEngB,eAE3Bf,EAAQiiB,mBAAmB,CAAErB,MAAK7f,SAGtC,CAE4BggB,EAAgBtR,MAAMyS,EAAAA,MAAsBrB,EAKtEgB,OAAOC,KAAKf,EAAiB,SAAU,YAFvC/gB,EAAQmiB,oBAAoB,CAAEvB,IAAKG,EAAiBhgB,SAGtD,KAoCFiI,EAAAA,EAAAA,IAAiB,mCAAmC,CAACnM,EAAQmD,EAAS2U,KACpE,MAAQ1W,OAAQwf,EAAQ,QAAEzV,EAAO,MAAEjH,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEjE9X,GAASwL,EAAAA,EAAAA,MAET,MACM+Z,GADWrlB,EAAAA,EAAAA,KAAeF,EAAQkE,GACVshB,gBAE9BxlB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2hB,0BAA0B,EAC1B6D,gBAAiB,CAAC,GACjBthB,IACHkH,EAAAA,EAAAA,IAAUpL,GACVA,GAASwL,EAAAA,EAAAA,MAET,MAAMia,GAAc3F,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACxCwL,GAAkB1C,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAQ8D,SAEjE,IAAKyd,IAAgB/V,EAAiB,OAEtC,MAAM1H,EAAWmD,GAAWpD,EAAAA,GACtB4F,EAAgB8X,EAAYljB,GAE5BmjB,EAAe,CACnBrjB,KAAM,UACN4E,aAAcse,EAAale,UAC3Bse,aAAcJ,EAAavE,WAC3B4E,cAAejY,EACfkY,UAAWN,EAAaM,WAGpB/I,EAAmByI,EAAale,UAClCqe,GAAevM,EAAAA,EAAAA,KAAYnZ,EAAQ2N,EAAe+B,IAAkB7I,UACxE,IAAKiW,EAAkB,OAEvB,KAAKgJ,EAAAA,EAAAA,KAA2B9lB,EAAQ4gB,EAAUjT,EAAemP,GAE/D,YADA3Z,EAAQgZ,iBAAiB,CAAEnb,SAASob,EAAAA,EAAAA,IAAa,2BAA4BlY,UAI/E,IAAK4Y,EAAiB8I,eAAiBhF,IAAa6E,EAAYljB,GAAI,OAEpE,MAIMqjB,EAHC9I,GAAkB8I,cAChB9I,EAAiB8I,gBAAkBhF,OAAWrb,EAAYuX,EAAiB8I,cADrCjY,GA9DjD,SACE3N,EACAgI,EACAnB,EACA+Z,GAEA,MAAMjE,GAAexD,EAAAA,EAAAA,KAAYnZ,EAAQ4gB,EAAU5Y,GAE9CnB,EAAUI,cAOfwM,EAAU,CACRzT,SAAQoB,OAAQwf,EAAU5Y,WAAU0L,MANX,IACtBiJ,EACH9V,aAIqD8M,aAAa,EAAMC,mBAAmB,GAE/F,CAsDEmS,CAAoB/lB,EAAQgI,EANe,IACtC8U,EACH8I,gBACAvjB,KAAM,WAGwCue,GAChDzd,EAAQ6iB,WAAW,CAAE5kB,OAAQwf,EAAU5Y,WAAU9D,UACjDf,EAAQ8iB,iBAAiB,CAAE/hB,UAC3Bf,EAAQ+iB,sBAAsB,CAAEhiB,UAChCf,EAAQgjB,WAAW,CAAE/kB,OAAQuM,EAAe3F,SAAU0H,GAAkB,KAG1EvD,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,OAAE1W,EAAM,QAAE+J,EAAO,MAAEjH,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjDjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQoB,IACaglB,EAAAA,EAAAA,IAAmCpmB,EAAQkE,IAC5C2P,UAjG9CL,eACExT,EACA6T,EACAzS,GAEA,IAAIilB,GAAWC,EAAAA,EAAAA,KAAmBtmB,EAAQoB,GAC1C,IAAKilB,EAAU,CACb,MAAM,WAAEE,GAAe1S,EACjB0B,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,GAAInB,EAAQmlB,eAC5DF,EAAW9Q,GAAQ8Q,QACrB,CACA,OAAOlO,SAASkO,GAAUG,gBAC5B,CAqF6DC,CAA4BzmB,EAAQ6T,EAAMzS,GACnG+B,EAAQujB,WAAW,CACjBC,KAAM,CACJ3lB,SAASob,EAAAA,EAAAA,IAAa,oCAAoCF,EAAAA,EAAAA,KAAgBrI,KAE5E3P,WAIJlE,GAASwL,EAAAA,EAAAA,OAEJob,EAAAA,EAAAA,IAA8B5mB,EAAQoB,EAAQ8C,IAKnDlE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqZ,gBAAiB,KACZnZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBACjCuH,SAAUxf,EACV4f,WAAY7V,GAEdwW,0BAA0B,GACzBzd,IACHkH,EAAAA,EAAAA,IAAUpL,GACVmD,EAAQ6iB,WAAW,CAAE5kB,SAAQ4G,SAAUmD,GAAWpD,EAAAA,GAAgB7D,UAClEf,EAAQ8iB,iBAAiB,CAAE/hB,UAC3Bf,EAAQ+iB,sBAAsB,CAAEhiB,WAf9Bf,EAAQ2P,oCAAoC,CAAE1R,SAAQ8C,UAehB,KAG1CiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqZ,gBAAiB,KACZnZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBACjCuH,SAAU5gB,EAAOkC,gBAElBgC,IACHkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ+iB,sBAAsB,CAAEhiB,UAChCf,EAAQkW,gBAAgB,CAAE6D,UAAU,EAAMhZ,SAAQ,KAGpDiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,SAAE8I,EAAQ,MAAE1c,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAEtD,WAAE6I,EAAU,QAAE9T,IAAY3M,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBACxD+H,EAAWT,GAAahZ,EAAAA,EAAAA,KAAW3H,EAAQ2gB,QAAcpb,EACzD8b,EAAST,GAAWjZ,EAAAA,EAAAA,KAAW3H,EAAQ4gB,QAAYrb,EACnDshB,EAAQlG,GAAc9T,GACxBia,EAAAA,EAAAA,KAAgB9mB,EAAQ2gB,EAAY9T,QACpCtH,EAEJ,IAAK6b,IAAaC,IAAWwF,GAAS,cAAeA,EACnD,OAGF,MAAMtf,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQ4gB,IAEhD,KAAEtS,EAAI,SAAE2L,GAAc4M,EAAmBnhB,QAAQ4I,MAAQ,CAAC,EAC3D2I,EAAYjX,EAAQ,CACvBoD,KAAMie,EACN/S,OACA2L,WACA4M,QACAtf,kBAGFvH,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqZ,gBAAiB,CAAC,EAClBsI,0BAA0B,GACzBzd,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,OACJ1W,EAAM,GAAEmB,EAAE,eAAEyQ,GAAiB+T,EAAAA,EAAAA,KAA0B/mB,GAAO,MAAEkE,GAAQC,EAAAA,EAAAA,OACtE2T,EAOJ,OALA9X,GAASgnB,EAAAA,EAAAA,KAAkChnB,EAAQoB,EAAQmB,EAAIyQ,EAAgB9O,IACtE+iB,EAAAA,EAAAA,KAAgBjnB,EAAQ,CAC/BknB,oBAAqBlU,GAGV,KAGf7G,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,OACJ1W,EAAM,GAAEmB,EAAE,MAAE2B,GAAQC,EAAAA,EAAAA,OAClB2T,EAIJ,OAFSqP,EAAAA,EAAAA,KAAkCnnB,EAAQoB,EAAQmB,EAAI2B,EAElD,KAGfiI,EAAAA,EAAAA,IAAiB,kCAAkC,CAACnM,EAAQmD,EAAS2U,KACnE,MAAM,OACJ1W,EAAM,WAAEwN,EAAU,eAAEoE,GAAiBoU,EAAAA,EAAAA,KAAmBpnB,IACtD8X,EAQJ,OANAlJ,EAAWzM,SAASI,IAClBvC,GAASqnB,EAAAA,EAAAA,KAAyBrnB,EAAQoB,EAAQmB,EAAIyQ,EAAgB,CACpEP,WAAW,GACX,IAGGzS,CAAM,KAGfmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,WAAEwN,EAAU,eAAEoE,GAAiBoU,EAAAA,EAAAA,KAAmBpnB,IACtD8X,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,GAAKgC,EAUL,OARAD,EAAQmkB,+BAA+B,CAAElmB,SAAQwN,aAAYoE,oBAE7DoB,EAAAA,EAAAA,IAAQ,gBAAiB,CACvBhR,OACAwL,aACAoE,mBAGKhT,CAAM,IAKf,IAAIunB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFG,aAAaH,IACbA,QAAwBhiB,GAI1B,MAAM,iBAAEoiB,IAAqBC,EAAAA,EAAAA,MAC7B1f,OAAOiI,QAAQqX,IAAqBrlB,SAAQ+G,IAAmB,IAAjB9H,EAAQ+I,GAAIjB,EACxDye,EAAiB,CAAEvmB,SAAQ+I,IAAKwK,MAAMiC,KAAKzM,GAAM0d,iBAAiB,GAAO,IAG3EL,GAAsB,CAAC,CACzB,CA8MA,SAASjN,GAAkBlD,GACzB,MAAM,iBACJ8D,EAAgB,SAAE2M,GAChBzQ,EACJ,OAAI0Q,EAAAA,IAA8Bhd,IAAI+c,GAAkB,QACpD3M,EAAyB,OACzB2M,IAAaE,EAAAA,IAAsB,MACnCC,EAAAA,IAA8Bld,IAAI+c,IAAaI,EAAAA,IAA8Bnd,IAAI+c,GAAkB,QACnGzQ,EAAW8Q,MAAc,QACtB,MACT,EAvNAhc,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,IAAE3N,EAAG,OAAE/I,GAAW0W,EAEnByP,IACHhc,WAAWkc,GAtBY,KAyBpBD,GAAoBpmB,KACvBomB,GAAoBpmB,GAAU,IAAIiJ,KAGpCF,EAAIhI,SAASI,IACXilB,GAAoBpmB,GAAQkJ,IAAI/H,EAAG,GACnC,KAGJ4J,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,OAAE1W,EAAM,IAAE+I,EAAG,gBAAE0d,GAAoB/P,EAEnC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDhR,OACA+G,MACA0d,oBAGGtS,IAELvV,GAASwL,EAAAA,EAAAA,MACT+J,EAAO6S,UAAUjmB,SAASW,IACxB9C,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQ0B,EAAOP,GAAI,CACpD8lB,WAAYvlB,EAAOwlB,MACnBC,cAAezlB,EAAO0lB,WACrB,GAEC1lB,EAAOiE,aACT/G,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQoB,EAAQ0B,EAAOP,GAAIO,EAAOiE,YAC9D,KAGFqE,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,IAAE+I,GAAQ2N,EAElB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9ChR,OACA+G,QAGGoL,IAELvV,GAASwL,EAAAA,EAAAA,MACT+J,EAAOpT,SAAQ,CAACsmB,EAAWvjB,KACzBlF,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQ+I,EAAIjF,GAAI,CACjDujB,aACA,KAGJrd,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2B,MAC1CiI,EAAAA,EAAAA,IAAQ,2BACQ,KAGlBjI,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EAExB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,GAAKgC,EAEL,IACE,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhR,OAAMiE,cACxDkO,GAAQrB,OACVlU,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CAAEqhB,SAAUnT,EAAOrB,QACzE9I,EAAAA,EAAAA,IAAUpL,GAEd,CAAE,MAAO2S,GACP,MAAM,QAAE3R,GAAY2R,EAEpB,GAAgB,4BAAZ3R,GAAqD,4BAAZA,EAAuC,CAIlF,GAHAhB,GAASwL,EAAAA,EAAAA,QAEIsI,EAAAA,EAAAA,KAAW9T,EAAQoB,GACrB,OACX,MAAMunB,GAAaC,EAAAA,EAAAA,KAAiB5oB,EAAQoB,GAC5C,IAAKunB,EAAY,OAEjB,MAAME,EAA2B,4BAAZ7nB,EACjB,CAAE8nB,sBAAsB,GACxB,CAAEC,0BAA0B,GAEhC/oB,GAASgpB,EAAAA,EAAAA,KAAoBhpB,EAAQ,CACnC,CAACoB,GAAS,IAAKunB,KAAeE,KAGhC7oB,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CAAEqhB,cAAUnjB,KAClE6F,EAAAA,EAAAA,IAAUpL,EACZ,CACF,MAGFmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,UACnC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,qBACxBmB,IAELvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASipB,EAAAA,EAAAA,KAAyBjpB,GAAQ+O,EAAAA,EAAAA,IAAqBwG,EAAOxF,SAAU,OAChF/P,GAASgP,EAAAA,EAAAA,KAAmBhP,EAAQuV,EAAOzG,eAE3C1D,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,OAAE1W,EAAM,aAAE8N,GAAiB4I,EAC3B1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,OAAKgC,IACLgR,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBhR,OACA8lB,WAAYha,IAGPlP,GANWA,CAML,KAGfmM,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,oBAAE8hB,EAAmB,qBAAEC,EAAoB,MAAEllB,GAAQC,EAAAA,EAAAA,OACpE2T,EACE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAKH,YAJAD,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAAa,iBACtBlY,UAIJ,MAAMmlB,EAAgCA,IAAMlmB,EAAQgZ,iBAAiB,CACnEnb,SAASob,EAAAA,EAAAA,IAAa,iBACtBlY,UAGF,KAAKmZ,EAAAA,EAAAA,KAAcja,MAAUkmB,EAAAA,EAAAA,KAAiBlmB,GAE5C,YADAimB,IAGF,MAIME,GAAkCnV,EAAAA,EAAAA,IAAQ,oBAAqB,CACnEhR,OAAMb,GAAI8E,EAAW8hB,sBAAqBC,+BAEtCI,EAAAA,EAAAA,IACJD,GARiCE,IAAMtmB,EAAQgZ,iBAAiB,CAChEnb,SAASob,EAAAA,EAAAA,IAAa,cACtBlY,WAM6DmlB,EAC9D,I,0BC3rEH,MAGMK,IAAkBC,EAAAA,EAAAA,KAAUpW,GAAOA,KAAM,KAAK,GAigBpDC,eAAeoW,GAA0C5pB,EAAW6pB,GAClE,MAAMC,QAAuB1V,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEyV,SACzDC,IAIL9pB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVC,OAAQF,KAGZ1e,EAAAA,EAAAA,IAAUpL,GACZ,CAEAwT,eAAeyW,GACbjqB,EACAmD,EACA+mB,GAEA,IAAIC,EACJ,IACEA,QAAmB/V,EAAAA,EAAAA,IACjB,gBACA,CAAE8V,kBAEN,CAAE,MAAOvX,GACP,GAAoC,uBAA/BA,EAAmB3R,QAetB,YAdAkH,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQsN,IAAmB,IAAhBlN,GAAI2B,GAAOuL,EAClDtM,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAAa,6BACtBlY,UAGE,cAAegmB,IACdhqB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOkmB,4BAA8BF,EAAeG,YAC9ErqB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoqB,+BAA2B7kB,GAC1BrB,IACHkH,EAAAA,EAAAA,IAAUpL,GACZ,GAIN,CAGA,GAFAA,GAASwL,EAAAA,EAAAA,OAEJ2e,EAEH,OAGF,MAAM,IAAE5S,EAAG,SAAEwS,EAAQ,MAAEO,GAAUH,EAI3BI,GAFNvqB,GAASwqB,EAAAA,EAAAA,KAAiBxqB,EAAQuX,EAAIhV,GAAI,IAAKgV,EAAKwS,WAAUO,WAElCP,SAASU,SAAS5c,MAC1C0c,GAAgBD,EAAMC,KACxBvqB,GAAS0qB,EAAAA,EAAAA,KAAwB1qB,KAGnCoL,EAAAA,EAAAA,IAAUpL,EACZ,CAmLAwT,eAAemX,GAAkC3qB,EAAW4qB,EAAeC,EAAsB1K,GACnD,QAAA/H,EAAA9S,UAAAzD,OAAAwG,EAAA,IAAAsM,MAAAyD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAhQ,EAAAgQ,EAAA,GAAA/S,UAAA+S,GAAA,IAAxCnU,GAAQC,EAAAA,EAAAA,OAAkBkE,EAC9B,MAAMkN,QAAenB,EAAAA,EAAAA,IAAQ,aAAc,CAAEwW,QAAOzK,SAAQ2K,SAAUD,IACjEtV,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+qB,EAAAA,EAAAA,KAAgB/qB,GAASmgB,EAAQ5K,EAAOyV,KAAMzV,EAAOmL,WAAYxc,IAC1EkH,EAAAA,EAAAA,IAAUpL,GACZ,EA7vBAmM,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,KACjD,MAAO8nB,EAAeC,SAA2BpP,QAAQC,IAAI,EAC3D3H,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEyV,KAAM7pB,EAAO+pB,SAASoB,MAAMtB,QAC1DzV,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEyV,KAAM7pB,EAAOmiB,aAAagJ,MAAMtB,SAE/DqB,GAAsBD,IAI3BjrB,GAASwL,EAAAA,EAAAA,MAETxL,GAASorB,EAAAA,EAAAA,KACPprB,EACA,QACAirB,EAAcpB,KACdoB,EAAcI,MAGhBrrB,GAASsrB,EAAAA,EAAAA,KACPtrB,EACAkrB,EAAkBrB,KAClBqB,EAAkBG,OAGpBjgB,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQooB,iBAAiB,CACvBphB,IAAKnK,EAAOwrB,qBACZ,KAGJrf,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,KACnD,MACEgoB,OACEM,OAAQC,EAAc,IAExBC,SAAUC,GACR5rB,EAAO+pB,UAEToB,OACEM,OAAQI,EAAoB,KAE5B7rB,EAAOmiB,aACL2J,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAajqB,OAIlB,IAAK,IAAIqD,EAAI,EAAGA,EAAI4mB,EAAajqB,OAAQqD,IAAK,CAC5C,MAAM3C,EAAKupB,EAAa5mB,GACpB0mB,EAAOrpB,IAAKwnB,WAGhB5mB,EAAQ8mB,aAAa,CACnBC,eAAgB,CAAE3nB,KAAIgkB,WAAYqF,EAAOrpB,GAAIgkB,cAG3CrhB,EA7D0B,IA6DQ,GAAKA,EAAI,SACvC6mB,EAAAA,EAAAA,IA/DgB,KAiE1B,MAGF5f,EAAAA,EAAAA,IAAiB,sBAAuBnM,IACtC,MAAM,KAAE6pB,GAAS7pB,EAAO+pB,SAASC,QAAU,CAAC,EACvCJ,GAAmB5pB,EAAQ6pB,EAAK,KAGvC1d,EAAAA,EAAAA,IAAiB,wBAAwBqH,UACvC,MAAM,KAAEqW,GAAS7pB,EAAO+pB,SAASiC,UAAY,CAAC,EAExCC,QAAyB7X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEyV,SAC7DoC,IAILjsB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACViC,SAAUC,KAGd7gB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuBqH,UACtC,MAAM,KAAEqW,GAAS7pB,EAAO+pB,SAASmC,SAAW,CAAC,EAEvC3W,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEvG,MAAO,OAAQgc,SAClEtU,IAILvV,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVmC,QAAS,CACPrC,KAAMtU,EAAOsU,KACbE,SAAUxU,EAAOwU,aAIvB3e,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,UACvC,MAAM,KAAEqW,GAAS7pB,EAAO+pB,SAASoC,UAAY,CAAC,EAExCA,QAAiB/X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEvG,MAAO,OAAQgc,SACpEsC,IAILnsB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVoC,SAAU,CACRtC,KAAMsC,EAAStC,KACfE,SAAUoC,EAASpC,SAASjoB,QAAQgE,GAA8B,OAAlBA,EAAQ+H,YAI9DzC,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,UACvC,MAAM,KAAEqW,GAAS7pB,EAAO+pB,SAASqC,UAAY,CAAC,EACxCC,QAAyBjY,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEyV,SAC7DwC,IAILrsB,GAASwL,EAAAA,EAAAA,MAETxL,GAASorB,EAAAA,EAAAA,KACPprB,EACA,WACAqsB,EAAiBxC,KACjBwC,EAAiBhB,OAEnBjgB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,UACnC,MAAM2W,QAAmB/V,EAAAA,EAAAA,IAAQ,qBACjC,IAAK+V,EACH,OAGF,MAAM,IAAE5S,EAAG,SAAEwS,GAAaI,EAE1BnqB,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHssB,aAAc,IAAK/U,EAAKwS,cAE1B3e,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,UACxC,MAAM2W,QAAmB/V,EAAAA,EAAAA,IAAQ,0BACjC,IAAK+V,EACH,OAEFnqB,GAASwL,EAAAA,EAAAA,MAET,MAAM,IAAE+L,EAAG,SAAEwS,GAAaI,EAEpBoC,EAAU,IAAKhV,EAAKwS,YAE1B/pB,GAASwqB,EAAAA,EAAAA,KAAiBxqB,EAAQusB,EAAQhqB,GAAIgqB,GAC9CvsB,EAAS,IACJA,EACHwsB,oBAAqBD,EAAQhqB,KAE/B6I,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,UACzC,MAAM2W,QAAmB/V,EAAAA,EAAAA,IAAQ,4BACjC,IAAK+V,EACH,OAEFnqB,GAASwL,EAAAA,EAAAA,MAET,MAAM,IAAE+L,EAAG,SAAEwS,GAAaI,EACpBoC,EAAU,IAAKhV,EAAKwS,YAE1B/pB,GAASwqB,EAAAA,EAAAA,KAAiBxqB,EAAQusB,EAAQhqB,GAAIgqB,GAC9CvsB,EAAS,IAAKA,EAAQysB,qBAAsBF,EAAQhqB,KACpD6I,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,eAAEoS,GAAmBpS,EACrB4U,GAAYC,EAAAA,EAAAA,KAAiB3sB,EAAQkqB,GACvCwC,GAAaA,EAAUjX,QAAUiX,GAAW3C,UAAUloB,QACrDooB,GAAajqB,EAAQmD,EAAS+mB,EAAe,KAGpD/d,EAAAA,EAAAA,IAAiB,sBAAsBqH,UACrC,MAAOoZ,EAAQC,SAAiB/Q,QAAQC,IAAI,EAC1C3H,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELwY,GAAWC,IAIhB7sB,GAASwL,EAAAA,EAAAA,MAETxL,GAAS8sB,EAAAA,EAAAA,KAAsB9sB,EAAQ,IAAK4sB,EAAOrV,IAAKwS,SAAU6C,EAAO7C,WACzE/pB,EAAS,IACJA,EACH+sB,qBAAsB,IAAKF,EAAQtV,IAAKwS,SAAU8C,EAAQ9C,YAG5D3e,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,+BAA+BqH,UAC9C,MAAMoZ,QAAexY,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C8V,eAAgB,CACdG,UAAW2C,EAAAA,OAGVJ,IAIL5sB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACHitB,gBAAiB,IAAKL,EAAOrV,IAAKwS,SAAU6C,EAAO7C,YAGrD3e,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,+BAA+BqH,UAC9C,MAAMoZ,QAAexY,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C8V,eAAgB,CACdG,UAAW6C,EAAAA,OAGVN,IAIL5sB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACHmtB,gBAAiB,IAAKP,EAAOrV,IAAKwS,SAAU6C,EAAO7C,YAGrD3e,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,UAC1C,MAAM2W,QAAmB/V,EAAAA,EAAAA,IAAQ,4BACjC,IAAK+V,EACH,OAEFnqB,GAASwL,EAAAA,EAAAA,MAET,MAAM,IAAE+L,EAAG,SAAEwS,GAAaI,EAE1BnqB,EAAS,IACJA,EACHotB,oBAAqB,IAAK7V,EAAKwS,cAEjC3e,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,UAChC,MAAM,KAAEqW,GAAS7pB,EAAOgrB,KAAKqC,MAEvBC,QAAkBlZ,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEyV,SAC/CyD,IAILttB,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACHgrB,KAAM,IACDhrB,EAAOgrB,KACVqC,MAAOC,KAGXliB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,WAAWqH,MAAOxT,EAAQmD,EAAS2U,KAClD,MAAM,IACJyV,EAAG,aAAEC,EAAY,MACjBtpB,GAAQC,EAAAA,EAAAA,OACN2T,EACEjW,EAAS7B,EAAOgrB,KAAKqC,MAAMrC,MAAMnpB,OAEjC2T,GAAQiY,EAAAA,GAAAA,GAAmBztB,EAAQ,aACnC0tB,GAAeC,EAAAA,GAAAA,GAAmB3tB,EAAQ,aAC1C4tB,GAAY1M,EAAAA,EAAAA,KAA2BlhB,GAoB7C,IAlBKwtB,GAAgB3rB,GAAUA,GAAU2T,GACvCrS,EAAQgZ,iBAAiB,CACvB6C,MAAO6O,EAAAA,GAA0B,2BAA4BrY,EAAMsY,YACnE9sB,QAAS4sB,EAAYC,EAAAA,GAA0B,2CAC3CA,EAAAA,GAA0B,mCAC1BH,EAAaI,gBACZF,GAAa,CAChBnjB,OAAQ,CACNA,OAAQ,mBACRqN,QAAS,CAAE5T,WAGf6pB,UAAW,YACX7pB,iBAIiBkQ,EAAAA,EAAAA,IAAQ,UAAW,CAAEmZ,MAAKC,iBAE7C,OAGFxtB,GAASwL,EAAAA,EAAAA,MACT,MAAMwf,EAAOhrB,EAAOgrB,KAAKqC,MAAMrC,MAAMlpB,QAAOC,IAAA,IAAC,GAAEQ,GAAIR,EAAA,OAAKQ,IAAOgrB,EAAIhrB,EAAE,KAAK,GACpEyrB,EAAUR,EAAexC,EAAO,CAACuC,KAAQvC,GAE/ChrB,EAAS,IACJA,EACHgrB,KAAM,IACDhrB,EAAOgrB,KACVqC,MAAO,IACFrtB,EAAOgrB,KAAKqC,MACfrC,KAAMgD,MAIZ5iB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,QAAEhS,EAAO,MAAE5B,GAAQC,EAAAA,EAAAA,OAAsB2T,EACzCmW,EAAUjuB,EAAO+pB,SAASiC,SAASjC,SAASloB,OAC5C2T,GAAQiY,EAAAA,GAAAA,GAAmBztB,EAAQ,iBACnC0tB,GAAeC,EAAAA,GAAAA,GAAmB3tB,EAAQ,iBAC1C4tB,GAAY1M,EAAAA,EAAAA,KAA2BlhB,GAEzCiuB,GAAWzY,GACbrS,EAAQgZ,iBAAiB,CACvB6C,MAAO6O,EAAAA,GAA0B,+BAAgCrY,EAAMsY,YACvE9sB,QAAS4sB,EAAYC,EAAAA,GAA0B,+CAC3CA,EAAAA,GAA0B,uCAC1BH,EAAaI,gBACZF,GAAa,CAChBnjB,OAAQ,CACNA,OAAQ,mBACRqN,QAAS,CAAE5T,WAGf6pB,UAAW,YACX7pB,UAIA4B,IACGsO,EAAAA,EAAAA,IAAQ,cAAe,CAAEtO,WAChC,KAGFqG,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,QAAEhS,GAAYgS,EAEhBhS,IACF9F,GAASwL,EAAAA,EAAAA,MAITxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACViC,SAAU,IACLhsB,EAAO+pB,SAASiC,SACnBjC,SAAU/pB,EAAO+pB,SAASiC,SAASjC,SAASjoB,QAAO4L,IAAA,IAAC,GAAEnL,GAAImL,EAAA,OAAKnL,IAAOuD,EAAQvD,EAAE,QAItF6I,EAAAA,EAAAA,IAAUpL,IAELoU,EAAAA,EAAAA,IAAQ,cAAe,CAAEtO,UAASooB,QAAQ,IACjD,KAGF/hB,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,QAAEhS,GAAYgS,QAEC1D,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtO,aAKtD8jB,IADSpe,EAAAA,EAAAA,MACiB,KAG5BW,EAAAA,EAAAA,IAAiB,uBAAuBqH,gBACjBY,EAAAA,EAAAA,IAAQ,yBAI7BpU,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVC,OAAQ,CACND,SAAU,OAIhB3e,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,aAAEqW,GAAiBrW,EACnBqS,GAAawC,EAAAA,EAAAA,KAAiB3sB,EAAQmuB,GAC5C,IAAKhE,EACH,OAGF,MAAM,WAAE5D,EAAU,cAAE6H,EAAa,WAAEC,GAAelE,EAC5CmE,GAAeD,GAAclW,QAAQiW,IAEtCha,EAAAA,EAAAA,IAASka,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAc5H,cAAa,KAGxGpa,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,SAAEyW,GAAazW,EAErB,IAAI0W,EAAuBxuB,EAAOyuB,cAAcF,GAChD,GAAIC,GAAsBE,UACxB,OAGF1uB,EAAS,IACJA,EACHyuB,cAAe,IACVzuB,EAAOyuB,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAIjBtjB,EAAAA,EAAAA,IAAUpL,GAEV,MAAMyuB,QAAsBra,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDma,WACAI,YAAaH,EAAuBA,EAAqBI,QAAU,IAMrE,GAFAJ,GADAxuB,GAASwL,EAAAA,EAAAA,OACqBijB,cAAcF,IAEvCE,EAaH,OAZAzuB,EAAS,IACJA,EACHyuB,cAAe,IACVzuB,EAAOyuB,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAIjBtjB,EAAAA,EAAAA,IAAUpL,GAKZA,EAAS,IACJA,EACHyuB,cAAe,IACVzuB,EAAOyuB,cACV,CAACF,GAAW,CACVG,WAAW,EACXE,QAASH,EAAcG,QACvBC,SAAU,IACJL,GAAsBK,YACvBJ,EAAcI,cAKzBzjB,EAAAA,EAAAA,IAAUpL,EAAO,KAsEnBmM,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEzC8S,GACGlB,IAAgBlW,UACnB,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEwW,UACjD,IAAKrV,EACH,OAGFvV,GAASwL,EAAAA,EAAAA,MACT,MAAM,SAAEmgB,EAAQ,MAAER,GAAUnrB,EAAO+pB,SAE7B+E,EAAYvZ,EAAO8V,KAAK3c,KAAI0B,IAAA,IAAC,GAAE7N,GAAI6N,EAAA,OAAK7N,CAAE,IAE5C4oB,EAAMM,QACRN,EAAMM,OAAOtpB,SAASI,IACpB,IAAKusB,EAAUxqB,SAAS/B,GAAK,CAC3B,MAAM,MAAEyc,GAAU2M,EAASppB,IAAO,CAAC,EAC/Byc,IAAS+P,EAAAA,GAAAA,GAAY/P,EAAO4L,IAC9BkE,EAAUxsB,QAAQC,EAEtB,KAIJvC,GAASorB,EAAAA,EAAAA,KACPprB,EACA,SACAuV,EAAOsU,KACPtU,EAAO8V,MAGTrrB,GAASgvB,EAAAA,EAAAA,IAAoBhvB,EAAQuV,EAAOsU,KAAMiF,EAAW5qB,IAC7DkH,EAAAA,EAAAA,IAAUpL,EAAO,GAErB,KAGFmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAExB,iBAAV8S,GACJlB,IAAgB,KAEnBiB,GADA3qB,GAASwL,EAAAA,EAAAA,MACUof,EAAO5qB,EAAOykB,QAAQwK,uBAAmB1pB,EAAWrB,EAAM,GAEjF,KAGFiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,MAAE8S,EAAK,OAAEzK,IAAWjgB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOgrB,UAEnC,iBAAVtE,GACJlB,IAAgB,KAEnBiB,GADA3qB,GAASwL,EAAAA,EAAAA,MACUof,EAAO5qB,EAAOykB,QAAQwK,kBAAmB9O,EAAQjc,EAAM,GAE9E,KAGFiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAEjK,GAAUiK,GACZ,KAAE+R,GAAS7pB,EAAO+pB,SAASU,SAE5Bf,IAAgBlW,UACnBxT,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVU,SAAU,IACLzqB,EAAO+pB,SAASU,SACnB5c,YAINzC,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEvG,QAAOgc,SAE/D7pB,GAASwL,EAAAA,EAAAA,MAEJ+J,GAAUvV,EAAO+pB,SAASU,SAAS5c,QAAUA,IAIlD7N,GAASmvB,EAAAA,EAAAA,KAAuBnvB,EAAQ6N,EAAO0H,EAAOwU,SAAUxU,EAAOsU,OAEvEze,EAAAA,EAAAA,IAAUpL,GAAO,GACjB,KAGJmM,EAAAA,EAAAA,IAAiB,yBAA0BnM,IAClC,IACFA,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVU,SAAU,CAAC,QAKjBte,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAEjK,GAAUiK,EAElB,OAAOsX,EAAAA,EAAAA,KAA0BpvB,EAAQ6N,EAAM,KAGjD1B,EAAAA,EAAAA,IAAiB,4BAA6BnM,IACrC,IACFA,EACHmiB,aAAc,IACTniB,EAAOmiB,aACVsI,SAAU,CAAC,QAKjBte,EAAAA,EAAAA,IAAiB,6BAA6BqH,UAC5C,MAAM6Y,QAAyBjY,EAAAA,EAAAA,IAAQ,8BAClCiY,IAILrsB,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHmiB,aAAc,IACTniB,EAAOmiB,aACVkN,YAAahD,EAAiBhB,KAAK3c,KAAImE,IAAA,IAAC,GAAEtQ,GAAIsQ,EAAA,OAAKtQ,CAAE,IACrD+G,KAAM,IACDtJ,EAAOmiB,aAAa7Y,SACpByF,EAAAA,EAAAA,IAAqBsd,EAAiBhB,KAAKiE,SAAS/X,GAAQA,EAAIwS,UAAY,KAAK,QAGxFA,SAAU,IACL/pB,EAAO+pB,SACV4B,SAAU,IACL3rB,EAAO+pB,SAAS4B,aAChB5c,EAAAA,EAAAA,IAAqBsd,EAAiBhB,KAAM,UAIrDjgB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,eAAEoS,EAAc,kBAAEqF,EAAiB,MAAErrB,GAAQC,EAAAA,EAAAA,OAAsB2T,GACrEyX,IAAsB5C,EAAAA,EAAAA,KAAiB3sB,EAAQkqB,UAC3CD,GAAajqB,EAAQmD,EAAS+mB,GAGtClqB,GAASwL,EAAAA,EAAAA,MACT,MAAM+L,GAAMoV,EAAAA,EAAAA,KAAiB3sB,EAAQkqB,GAChC3S,GAAK8S,YAIVrqB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoqB,0BAA2B7S,EAAI8S,WAC9BnmB,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,UAC1C,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,4BACxBmB,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASwvB,EAAAA,EAAAA,KAA+BxvB,EAAQuV,EAAOsU,KAAMtU,EAAOka,gBACpErkB,EAAAA,EAAAA,IAAUpL,GAAO,I,4BC5vBnB,MAAM0pB,IAAkBC,EAAAA,EAAAA,KAAUpW,GAAOA,KAAM,KAAK,GA6QpDC,eAAekc,GAA6B1vB,EAAqBoD,EAAeiE,GAC9E,KAAKsoB,EAAAA,GAAAA,IAAYvsB,MAAUia,EAAAA,GAAAA,IAAcja,GACvC,OAEF,MAAMwsB,GAAe9qB,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKb,GAAI8E,GACxD,GAAIuoB,EACF,OAAOA,EAET,MAAMra,QAAenB,EAAAA,EAAAA,IAAQ,eAAgB,CAAEhR,OAAMiE,cACrD,MAAkB,oBAAXkO,OAA+BhQ,EAAYgQ,GAAQvU,OAC5D,EArRAmL,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,GACvC,OAAE1W,IAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,aAE7CjF,IAAUxpB,GACPsoB,IAAgBlW,UACnB,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,cAAe,CAAEwW,UAE9C5qB,GAASwL,EAAAA,EAAAA,MACT,MAAMskB,GAAqBC,EAAAA,EAAAA,KAA+B/vB,EAAQkE,GAClE,IAAKqR,IAAWua,GAAuBlF,IAAUkF,EAG/C,OAFA9vB,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAEqJ,OAAO,GAASnF,QACpEkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM,iBACJiwB,EAAgB,gBAAEC,GAChB3a,EAEJvV,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAEqJ,OAAO,GAASnF,GACpElE,GAASmwB,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAClCowB,aAAc,CACZC,QAASJ,GAEXK,cAAe,KACVpwB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,aAAaS,cAC9CD,QAASH,IAEVhsB,IAEHkH,EAAAA,EAAAA,IAAUpL,EAAO,GAErB,KAGFmM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,KAAE5D,EAAI,MAAEhQ,GAAQC,EAAAA,EAAAA,OAAsB2T,EACtCyY,EAAUrc,GAAOsc,EAAAA,GAAAA,IAAiBtc,GAAQA,EAEhDlU,GAASmwB,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAClCywB,QAASvc,EACTqc,UACA3F,MAAO,GACP8F,cAAe,KACVxwB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,aAAaa,cAC9CpiB,KAAM,CACJqiB,gBAAYprB,EACZqrB,SAAU,GACVC,aAAc,KAGjB3sB,IACHkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ2tB,qBAAqB,CAAEzuB,KAAM,OAAQ6B,SAAQ,KAGvDiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,KAAEzV,EAAI,MAAE6B,GAAQC,EAAAA,EAAAA,OAAsB2T,GACtC,MACJ8S,EAAK,cAAE8F,EAAa,OAAEtvB,IACpBlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,cAC5B,WACJc,EAAU,SAAEC,EAAQ,aAAEC,EAAY,iBAAEE,EAAgB,eAAEC,GACpDN,IAAgBruB,IAAS,CAAC,EAG9B,QAAmBkD,IAAforB,KAA8BA,GAAeC,GAAYA,EAAS/uB,QAAU8uB,GAC9E,OAGF,MAAMvtB,EAAOhC,GAASme,EAAAA,EAAAA,KAAWvf,EAAQoB,QAAUmE,GA2CrDiO,eAA2DxT,EAAWkX,GAWpE,MAAM,MACJ0T,EAAQ,GAAE,KAAEvoB,EAAI,WAAE4uB,EAAU,SAAE5c,EAAQ,WAAE6c,EAAU,KAAE3S,EAAI,QAAEgS,EAAO,QAAEE,EAAO,MAAEvsB,GAAQC,EAAAA,EAAAA,OAClF+S,EACJ,IAAI3B,EAWA4b,EAEJ,GAAI5S,EAAM,CACR,MAAM6S,GAAsBhd,EAAAA,EAAAA,IAAQ,uBAAwB,CAC1DmK,OACAqM,QACAvoB,OACAmT,MAAO6b,EAAAA,IACPhd,WACAoc,UACAF,YAGIe,GADSC,EAAAA,EAAAA,IAAchT,IACGA,EAAK7U,SAAU0K,EAAAA,EAAAA,IAAQ,cAAe,CACpEhR,KAAMmb,EACNqM,QACApV,MAAOgc,EAAAA,WACJjsB,GAEEksB,EAAcC,SAAgB5V,QAAQC,IAAI,CAACqV,EAAqBE,IAEvE,GAAIG,EAAc,CAChB,MAAM,SACJ1hB,EAAQ,WAAE4gB,EAAU,aAAEE,GACpBY,GAEIC,OAAQC,EAAW,MAAElc,GAAUic,GAAU,CAAC,EAElDnc,EAAS,CACPmc,OAAQC,EACRC,iBAAkBnc,EAClB1F,WACA4gB,aACAE,eAEJ,CACF,MAWE,GAVAtb,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CwW,QACAqG,aACA5c,WACA6c,aACA1b,MAAO6b,EAAAA,IACPhvB,OACAkuB,UACAE,aAEErM,EAAAA,EAAAA,GAAWwG,GAAQ,CACrB,MAAMiH,GAAOC,EAAAA,EAAAA,GAAiBlH,GACX,sBAAfiH,GAAMxvB,KACR8uB,QAsDR3d,eAAsCxT,EAAqB6xB,GACzD,MAAM,SAAE/G,EAAQ,UAAEzjB,GAAcwqB,EAC1BE,GAAYC,EAAAA,EAAAA,KAAqBhyB,EAAQ8qB,GAC/C,GAAIiH,EACF,OAAOrC,GAA6B1vB,EAAQ+xB,EAAW1qB,GAEzD,MAAM,KAAEjE,SAAegR,EAAAA,EAAAA,IAAQ,oBAAqB0W,IAAa,CAAC,EAClE,OAAK1nB,EAGEssB,GAA6B1vB,EAAQoD,EAAMiE,QAHlD,CAIF,CAjE4B4qB,CAAuBjyB,EAAQ6xB,GAC3B,uBAAfA,GAAMxvB,OACf8uB,QAiER,SAAiCnxB,EAAqB6xB,GACpD,MAAM,UAAEngB,EAAS,UAAErK,GAAcwqB,EAC3BK,GAAoBC,EAAAA,GAAAA,IAAYzgB,GAChCtO,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQkyB,GAChC,GAAK9uB,EAGL,OAAOssB,GAA6B1vB,EAAQoD,EAAMiE,EACpD,CAzE4B+qB,CAAwBpyB,EAAQ6xB,GAExD,CAGF7xB,GAASwL,EAAAA,EAAAA,MACT,MAAMskB,GAAqBC,EAAAA,EAAAA,KAA+B/vB,EAAQkE,GAClE,IAAKqR,GAAqB,KAAVqV,GAAgBA,IAAUkF,EAGxC,OAFA9vB,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAE+P,UAAU,GAAS7L,QACvEkH,EAAAA,EAAAA,IAAUpL,GAIRmxB,IACF5b,EAAOob,WAAapb,EAAOxF,SAASzN,QAAQ6uB,IAG9C,MAAM,SACJphB,EAAQ,iBAAEsiB,EAAgB,WAAE1B,EAAU,eAAEK,EAAc,aAAEH,EAAY,iBAAEE,GACpExb,EAEA8c,IACFryB,GAASsyB,EAAAA,EAAAA,KAAgBtyB,EAAQqyB,IAG/BtiB,EAASlO,SACX7B,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ+P,IAG/B/P,GAASuyB,EAAAA,EAAAA,KACPvyB,EACA+P,EACA4gB,EACAtuB,EACA2uB,EACAH,EACAE,EACA7sB,GAGEqR,EAAOmc,SACT1xB,GAASwyB,EAAAA,EAAAA,KAAaxyB,EAAQue,EAAMhc,GAAIgT,EAAOqc,iBAAmBrc,EAAOmc,SAG3E,MAAMe,EAAeld,EAAOmc,QAAQhjB,KAAI3M,IAAA,IAAC,GAAEQ,GAAIR,EAAA,OAAKQ,CAAE,IAAEmC,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC3E3E,GAASmwB,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAClC0yB,cAAeD,GACdvuB,IAEHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAvKE8wB,CAAqB9wB,EAAQ,CAC3B4qB,QACAvoB,OACA4uB,WAAYD,EACZ3c,SAAUwc,EACVK,WAPiBH,GAAmBxR,EAAAA,EAAAA,KAAWvf,EAAQ+wB,QAAoBxrB,EAQ3EgZ,KAAMnb,EACNc,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C6a,GAAiBzyB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,aAAa8C,eAC5DxS,EAASwS,GAAgBjS,WAC/B,GAAIiS,GAAgBtC,UAAYlQ,EAAQ,OAExCngB,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAE4yB,SAAS,GAAQ1uB,IACrEkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE+L,WAGtD,GADAngB,GAASwL,EAAAA,EAAAA,OACJ+J,EAGH,OAFAvV,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAE4yB,SAAS,GAAS1uB,QACtEkH,EAAAA,EAAAA,IAAUpL,GAIZA,GAASmwB,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAClC2yB,eAAgB,CACdtC,QAAS,IAAKsC,GAAgBtC,SAAW,MAAQ9a,EAAO8a,SACxD3P,WAAYnL,EAAOmL,aAEpBxc,GACHlE,GAASgwB,EAAAA,EAAAA,KAAiChwB,EAAQ,CAAE4yB,SAAS,GAAS1uB,IAEtEkH,EAAAA,EAAAA,IAAUpL,EAAO,I,gBCqInBwT,eAAeqf,GACb7yB,EACAue,EACAvW,EACA3F,EACAgS,GAIA,IAHAG,EAAelP,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GACf+P,EAAuB/P,UAAAzD,OAAA,EAAAyD,UAAA,QAAAC,EAAA,QAAA6S,EAAA9S,UAAAzD,OAAAE,EAAA,IAAA4S,MAAAyD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAtW,EAAAsW,EAAA,GAAA/S,UAAA+S,GAAA,IACnBnU,GAAQC,EAAAA,EAAAA,OAAkBpC,EAE9B,MAAM+wB,EAAezd,EAAgBrV,EAAOkC,cAAiBqc,EAAKhc,GAE5DgT,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDmK,OACAlc,OACAmT,MAA4B,EAArBud,EAAAA,GACP/qB,WACAqM,WACAgB,kBAGF,IAAKE,EACH,OAGF,MAAM,iBACJ8c,EAAgB,SAAEtiB,EAAQ,WAAE4gB,EAAU,aAAEE,GACtCtb,EAEEjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtCijB,EAAc9qB,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAE1CjL,GAASwL,EAAAA,EAAAA,OAEaynB,EAAAA,EAAAA,KAA+BjzB,EAAQkE,KAK7DlE,GAASsyB,EAAAA,EAAAA,KAAgBtyB,EAAQqyB,GACjCryB,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQ8yB,EAAcxpB,GACnDtJ,GAASkzB,EAAAA,EAAAA,KACPlzB,EAAQ8yB,EAAc9qB,EAAU3F,EAAM2wB,EAAarC,EAAYE,EAAc3sB,IAE/EkH,EAAAA,EAAAA,IAAUpL,GAELwU,GACEqe,GAAkB7yB,EAAQue,EAAMvW,EAAU3F,EAAMwuB,GAAc,EAAMxb,EAAenR,GAE5F,EA1RAiI,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,MACJ8S,EAAK,OAAExpB,EAAM,SAAE4G,EAAWD,EAAAA,GAAc,MAAE7D,GAAQC,EAAAA,EAAAA,OAChD2T,GAAW,CAAC,EAEhB,IAAK1W,EAAQ,OAEb,MAAMc,EAAgBlC,EAAOkC,cACvBmT,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAU9F,GACnDoT,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EAEhDmd,EAAOjJ,GAAaiK,EAAAA,EAAAA,KAAWvf,EAAQsV,QAAc/P,EAC3D,IAAI4tB,GAAgBC,EAAAA,EAAAA,KAA0BpzB,EAAQkE,GACtD,IAAKqa,EACH,OAGG4U,IACHnzB,GAASqzB,EAAAA,EAAAA,KAAmBrzB,EAAQsV,EAAYtN,EAAU,CAAC,EAAG9D,IAC9DkH,EAAAA,EAAAA,IAAUpL,GACVA,GAASwL,EAAAA,EAAAA,OAEX2nB,GAAgBC,EAAAA,EAAAA,KAA0BpzB,EAAQkE,GAElD,MAAM,QACJ3C,EAAO,SAAE+xB,EAAQ,KAAEjxB,EAAI,UAAEkxB,GACvBJ,EACE9e,EAAW9S,GAASsvB,aACpBI,EAAa1vB,GAASyvB,eACtBwC,EAAejyB,GAASwvB,iBACxBG,EAAasC,GAAe7rB,EAAAA,EAAAA,KAAW3H,EAAQwzB,QAAgBjuB,EAGrE,IADwBguB,IAAcD,KACd1I,EAKtB,OAJA5qB,GAASqzB,EAAAA,EAAAA,KAAmBrzB,EAAQsV,EAAYtN,EAAU,CACxDyrB,mBAAeluB,GACdrB,QACHkH,EAAAA,EAAAA,IAAUpL,GASZ,IAAIuV,EAmCJ,GAxCAvV,GAASqzB,EAAAA,EAAAA,KAAmBrzB,EAAQsV,EAAYtN,EAAU,CACxDyrB,cAAe7I,GACd1mB,IACHkH,EAAAA,EAAAA,IAAUpL,GAGG,SAATqC,IACFkT,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CmK,OACAlc,KAAM,OACNuoB,MAAO2I,EAAa,IAAG3I,IAAUA,EACjC5iB,WACAwN,MAAOke,EAAAA,IACPrf,WACAgB,gBACAie,cAIS,YAATjxB,IACFkT,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C/R,KAAM,OACNuoB,MAAO2I,EAAa,IAAG3I,IAAUA,EACjCpV,MAAOke,EAAAA,IACPrf,WACA4c,aACAC,gBAIS,aAAT7uB,IACFkT,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CAC3Cuf,QAAS/I,EACTpV,MAAOke,EAAAA,IACPrf,WACA6c,aACAD,iBAIC1b,EACH,OAGF,MAAM,iBACJ8c,EAAgB,SAAEtiB,EAAQ,WAAE4gB,EAAU,aAAEE,EAAY,eAAEG,EAAc,iBAAED,GACpExb,EAEEyd,EAAcjjB,EAASrB,IAAIklB,GAAAA,GAEjC5zB,GAASwL,EAAAA,EAAAA,MAET2nB,GAAgBC,EAAAA,EAAAA,KAA0BpzB,EAAQkE,GAClD,MAAM2vB,EAAgBV,GAAeG,YAAaQ,EAAAA,EAAAA,KAAeR,EAAUH,EAAcG,UAEzF,IAAKH,GADoBA,GAAeM,gBAAkB7I,GAChBiJ,EACxC,OAGF,MAAMf,EAAezd,EAAgBnT,EAAgBqc,EAAKhc,GAE1DvC,GAASsyB,EAAAA,EAAAA,KAAgBtyB,EAAQqyB,GACjCryB,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ+P,GAC7B/P,GAASqzB,EAAAA,EAAAA,KAAmBrzB,EAAQ8yB,EAAc9qB,EAAU,CAC1DyrB,mBAAeluB,GACdrB,GACHlE,GAAS+zB,EAAAA,EAAAA,KAA0B/zB,EAAQ8yB,EAAc9qB,EAAU,CACjE4oB,SAAUoC,EACVrC,aACAE,eACAG,iBACAD,mBACAnG,MAAOA,GAAS,IACf1mB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,QAAE6b,EAAO,MAAEzvB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEzCe,GAAc7L,EAAAA,EAAAA,KAAyBhN,EAAQkE,GACrD,IAAK2U,EACH,OAGF,MAAMmb,EAAaL,EAAQM,QAAQ,KAAM,IAEzC9wB,EAAQkwB,mBAAmB,CACzBjyB,OAAQyX,EAAYzX,OACpB4G,SAAU6Q,EAAY7Q,SACtBlF,OAAQ,CACNywB,WAAW,EACXW,eAAgBF,GAElB9vB,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW4G,EACd,OAGF,MAAMqN,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAC1DoT,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EAEhDmd,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQsV,GAC1B6d,GAAgBF,EAAAA,EAAAA,KAA+BjzB,EAAQkE,GAE7D,IAAKqa,IAAS4U,EACZ,OAGF,MAAQgB,YAAa9xB,EAAI,cAAEquB,GAAkByC,EACvCiB,EAAiB/xB,GAAQquB,GAAiBA,EAAcruB,GACxDgS,EAAW+f,GAAgBvD,aAE5BxuB,GAIAwwB,GAAkB7yB,EAAQue,EAAMvW,EAAU3F,EAAMgS,OAAU9O,EAAW8P,EAAenR,EAAM,KAEjGiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,sBAAEqsB,EAAqB,MAAE7e,EAAK,UAAElB,EAAS,MAAEpQ,GAAQC,EAAAA,EAAAA,OACjE2T,EACJ,IAAK1W,IAAW4G,IAAaqsB,EAC3B,OAGF,MAAMhf,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAC1DoT,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EAEhDgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQsV,GAChC,IAAKlS,EACH,OAEF,IAAI+vB,GAAgBmB,EAAAA,EAAAA,KAA6Bt0B,EAAQkE,GAEzD,IAAKivB,EAAe,CAIlB,GAHAnzB,GAASu0B,EAAAA,EAAAA,KAAiCv0B,EAAQoB,EAAQ4G,EAAU9D,IACpEkH,EAAAA,EAAAA,IAAUpL,GACVmzB,GAAgBmB,EAAAA,EAAAA,KAA6Bt0B,EAAQkE,IAChDivB,EACH,OAEFnzB,GAASwL,EAAAA,EAAAA,KACX,EAwLFgI,eACExT,EACAue,EACAvW,EACAqsB,EACAG,EACAlgB,EACAe,GAGA,IAFAG,EAAKlQ,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAGmvB,EAAAA,IAAgB,QAAA/f,EAAApP,UAAAzD,OAAA6L,EAAA,IAAAiH,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlH,EAAAkH,EAAA,GAAAtP,UAAAsP,GAAA,IACpB1Q,GAAQC,EAAAA,EAAAA,OAAkBuJ,EAE9B,MAAM,SAAEgnB,GAAa10B,EACrB,IAAK00B,GAAYF,EAAsB9F,UACrC,OAEF,IAAIiG,EA1GN,SACEzd,EACAmd,GAEA,IAAIO,EAAAA,EAAAA,IAAyBP,EAAuBnd,EAAOyd,eAAe/D,UACxE,OAAO1Z,EAAOyd,eAEhB,MAAMne,EAAQU,EAAO2d,SAASpe,WAC3Bqe,IAAYF,EAAAA,EAAAA,IAAyBP,EAAuBS,EAAQlE,YAGvE,IAAe,IAAXpa,EAIF,YAHIU,EAAOyd,gBAAkBzd,EAAOyd,eAAe/D,SAAS/uB,QAC1DqV,EAAO2d,SAAShpB,KAAKqL,EAAOyd,iBAIhC,MAAMpf,EAAS2B,EAAO2d,SAASE,OAAOve,EAAO,GAAG,GAEhD,OADAU,EAAO2d,SAAShpB,KAAKqL,EAAOyd,gBACrBpf,CACT,CAsFuByf,CAAoCR,EAAuBH,GAMhF,QAJkB9uB,IAAd+O,IACFA,EAnEJ,SAA+B2gB,EAA0BN,GACvD,IAAKA,EAAgB,OAAO3f,EAAAA,GAAkBE,OAC9C,MAAMggB,EAA8BP,EAAe/D,SAAS/uB,OAEtDszB,EAAmBR,EAAe/D,SAASwE,QAAQH,GACzD,IAA0B,IAAtBE,EAAyB,OAAOngB,EAAAA,GAAkBE,OAEtD,GAAIyf,EAAeU,aAAaC,4BAC3BX,EAAeU,aAAaE,0BAC/B,OAGF,MAEMC,EAtVqB,EAoVJ70B,KAAK8B,MAAMyyB,EAA8B,GAEF,EAtVnC,EAuVrBO,EAAiBP,EAA8B,EAErD,GAAIC,GAAoBK,EAAe,CACrC,GAAIb,EAAeU,aAAaC,2BAA4B,OAC5D,OAAOtgB,EAAAA,GAAkBC,SAC3B,CACA,GAAIkgB,GAAoBM,EAAiBD,EAAe,CACtD,GAAIb,EAAeU,aAAaE,0BAA2B,OAC3D,OAAOvgB,EAAAA,GAAkBI,QAC3B,CAEF,CAyCgBsgB,CAAsBrB,EAAuBM,SAGzCpvB,IAAd+O,EACF,OAGF,MAAMD,EArFR,SACEC,EACA2gB,EACAH,GAEA,OAAKA,EACDxgB,IAAcU,EAAAA,GAAkBC,UAAkB6f,EAAQlE,SAAS,GACnEtc,IAAcU,EAAAA,GAAkBI,SAAiB0f,EAAQlE,SAASkE,EAAQlE,SAAS/uB,OAAS,GACzFozB,EAHcA,CAIvB,CA4EmBU,CAA4BrhB,EAAW+f,EAAuBM,GACzE9f,EA/FR,SACEP,EACAkB,GAEA,OAAIlB,IAAcU,EAAAA,GAAkBC,UAAkB,EAClDX,IAAcU,EAAAA,GAAkBI,WAAmBI,EAAQ,KACtD7U,KAAKwU,MAAMK,EAAQ,GAAK,EACnC,CAwFoBogB,CAA6BthB,EAAWkB,GAEpDsd,EAAezd,EAAgBrV,EAAOkC,cAAiBqc,EAAKhc,GAElEvC,GAAS61B,EAAAA,EAAAA,KAA0B71B,EAAQ8yB,EAAc9qB,GAAU,EAAM9D,IACzEkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDmK,OACAlc,KAAM,QACNmT,QACAxN,WACAqM,WACAgB,gBACAR,cAKF,GAFA7U,GAASwL,EAAAA,EAAAA,OAEJ+J,EAGH,OAFAvV,GAAS61B,EAAAA,EAAAA,KAA0B71B,EAAQ8yB,EAAc9qB,GAAU,EAAO9D,QAC1EkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM,SACJ+P,EAAQ,iBAAEsiB,GACR9c,EAEEjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtCijB,EAAc9qB,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAE1CjL,GAASsyB,EAAAA,EAAAA,KAAgBtyB,EAAQqyB,GACjCryB,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQ8yB,EAAcxpB,GAEnD,MAAM+rB,EAlFR,SACE/gB,EACAkB,EAAgBsgB,EAChBnB,GAEA,IAAIY,EAA4Bpd,QAAQwc,GAAgBU,aAAaE,2BACjED,EAA6Bnd,QAAQwc,GAAgBU,aAAaC,4BAStE,OAPIQ,EAAmBtgB,IACjBlB,IAAcU,EAAAA,GAAkBI,SAClCmgB,GAA4B,EACnBjhB,IAAcU,EAAAA,GAAkBC,YACzCqgB,GAA6B,IAG1B,CACLC,4BACAD,6BAEJ,CA+DuBS,CAAiBzhB,EAAWkB,EAAOwd,EAAYnxB,OAAQ8yB,GAEtEqB,GAAcC,EAAAA,EAAAA,KAAuB3sB,EAAM0pB,GAAa,GAC9D2B,GAAiBuB,EAAAA,EAAAA,KACfF,EACAX,EACAV,GAGF30B,GAASm2B,EAAAA,EAAAA,KACPn2B,EAAQ8yB,EAAc9qB,EAAU2sB,EAAgBH,EAAuBtwB,GAEzElE,GAAS61B,EAAAA,EAAAA,KAA0B71B,EAAQ8yB,EAAc9qB,GAAU,EAAO9D,IAC1EkH,EAAAA,EAAAA,IAAUpL,EACZ,CAjQOo2B,CAAgBp2B,EACnBoD,EACA4E,EACAqsB,EACAlB,EACA7e,EACAe,EACAG,EACAtR,EAAM,KAGViI,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,UAAEue,EAAS,MAAEnyB,GAAQC,EAAAA,EAAAA,OAAsB2T,GAE3C,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAGF,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMiE,QAAkB+M,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7DhR,OACAizB,cAGGhvB,GAILlE,EAAQ8J,aAAa,CACnB7L,OAAQgC,EAAKb,GACb8E,YACAnD,SACA,KC/PJiI,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,SAAEgT,EAAQ,MAAE5mB,GAAQC,EAAAA,EAAAA,OAAsB2T,GAE1C,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAIF,IAAIlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOoyB,WAAWhf,WAAaif,EAAAA,GAAmBC,WAC3E,OAGFx2B,GAASy2B,EAAAA,EAAAA,KACPz2B,EAAQoB,EAAQ,CAAEs1B,yBAAqBnxB,EAAWoxB,qBAAiBpxB,GAAarB,IAElFkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAM,OAAEuV,EAAM,MAAE5C,SAAiByB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE0W,aAEhE9qB,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KACP52B,GAAmB,IAAXuV,EAAkBghB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAO5yB,GAEpFlE,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCs1B,qBAAgC,IAAXnhB,EACrBohB,gBAAiB7L,EACjBnY,SACCzO,IACHkH,EAAAA,EAAAA,IAAUpL,QAEKuF,IAAXgQ,GACFpS,EAAQ4zB,sBAAsB,CAAEvhB,MAAO,iBAAkBtR,SAC3D,KAGFiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,SAAEgT,EAAQ,uBAAEkM,EAAsB,MAAE9yB,GAAQC,EAAAA,EAAAA,OAAsB2T,GAElE,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAGF,MAAMgC,QAAa6zB,EAAAA,EAAAA,IAAmBj3B,EAAQmD,EAAS/B,EAAQ8C,GAC/D,IAAKd,EAAM,OAEXpD,GAASwL,EAAAA,EAAAA,MAETxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBC,WAAYtyB,IACzEkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEhR,OAAM0nB,aACpDkM,SACI5iB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhR,SAG5CpD,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQuV,EAASghB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAO5yB,GAC3GlE,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoD,EAAKb,GAAI,CACzCm0B,yBAAqBnxB,EACrBoxB,qBAAiBpxB,EACjBoN,WAAOpN,GACNrB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzDd,EAAOhC,IAAUuG,EAAAA,EAAAA,KAAW3H,EAAQoB,GACrCA,GAAWgC,IAIhBgR,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEhR,QAAO,KAGxC+I,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,EAAM,OAAE81B,EAAM,MAAEhzB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtD9X,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CAAE+1B,cAAeD,GAAUhzB,IACrEkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,OAAE1W,EAAM,OAAE81B,EAAM,MAAEhzB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEhDhV,EAASo0B,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAY7xB,GAEnEvF,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ0B,EAAQoB,IAClDkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,OACJ1W,EAAM,QAAEi2B,EAAO,UAAEC,EAAS,MAAE9hB,EAAK,MAAEtR,GAAQC,EAAAA,EAAAA,OACzC2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1Bm2B,GAAQzjB,EAAAA,EAAAA,KAAW9T,EAAQq3B,GAAWr3B,EAAOkC,eACnD,IAAKqc,IAASgZ,EAAO,OAErB,MAAMhiB,QAAenB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDmK,OAAMgZ,QAAOD,YAAW9hB,UAE1B,IAAKD,EACH,OAEFvV,GAASwL,EAAAA,EAAAA,MACT,MAAM,QAAEgsB,GAAYjiB,EAEdzS,EAASw0B,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3Dx3B,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ0B,EAAQoB,IAClDkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,OACJ1W,EAAM,KAAEywB,EAAI,UAAEyF,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE5Y,EAAK,MAAE9a,GAAQC,EAAAA,EAAAA,OAC/E2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKmd,EAAM,OAEX,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDmK,OACAsT,OACAyF,YACAI,aACAC,aACAC,kBACA5Y,UAEF,IAAKzJ,EACH,OAGF,MAAM,UAAEsiB,EAAS,UAAEC,GAAcviB,EAEjCvV,GAASwL,EAAAA,EAAAA,MACT,MAAM,WAAE8qB,IAAep2B,EAAAA,EAAAA,KAAeF,EAAQkE,GACxCszB,GAAWlB,EAAWnlB,SAAS/P,GAAQo2B,SAAW,IACrD11B,QAAQmsB,GAAYA,EAAQ4D,OAASgG,EAAUhG,OAC5C4F,EAAiB,IAAKnB,EAAWnlB,SAAS/P,GAAQq2B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAen1B,QAAQw1B,GAEvBN,EAAQ3rB,KAAKisB,GAGf93B,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCo2B,UACAC,kBACCvzB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,OACJ1W,EAAM,WAAEs2B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE5Y,EAAK,MAAE9a,GAAQC,EAAAA,EAAAA,OAC9D2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKmd,EAAM,OAEX,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CmK,OACAmZ,aACAC,aACAC,kBACA5Y,UAEF,IAAKzJ,EACH,OAGFvV,GAASwL,EAAAA,EAAAA,MACT,MAAMgsB,GAAUt3B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOoyB,WAAWnlB,SAAS/P,GAAQo2B,SAAW,GACrFx3B,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCo2B,QAAS,IAAIA,EAASjiB,IACrBrR,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,4BAA4BqH,MAAOxT,EAAQmD,EAAS2U,KACnE,MAAM,OACJ1W,EAAM,KAAEywB,EAAI,MAAE3tB,GAAQC,EAAAA,EAAAA,OACpB2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKmd,EAAM,OAMX,UAJqBnK,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDmK,OACAsT,SAGA,OAGF7xB,GAASwL,EAAAA,EAAAA,MACT,MAAMusB,GAAkB73B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOoyB,WAAWnlB,SAAS/P,GAC1EpB,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCo2B,QAASO,GAAiBP,SAAS11B,QAAQo1B,GAAWA,EAAOrF,OAASA,IACtE4F,eAAgBM,GAAiBN,gBAAgB31B,QAAQo1B,GAAWA,EAAOrF,OAASA,KACnF3tB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oCAAoCqH,MAAOxT,EAAQmD,EAAS2U,KAC3E,MAAM,OACJ1W,EAAM,QAAEi2B,EAAO,MAAEnzB,GAAQC,EAAAA,EAAAA,OACvB2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1Bm2B,GAAQzjB,EAAAA,EAAAA,KAAW9T,EAAQq3B,GAAWr3B,EAAOkC,eAC9Cqc,GAASgZ,SAEOnjB,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DmK,OACAgZ,YAMFv3B,GAASwL,EAAAA,EAAAA,MACTxL,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCq2B,eAAgB,IACfvzB,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAC1CxT,EAAQmD,EAAS2U,KAEjB,MAAM,OACJ1W,EAAM,KAAEywB,EAAI,WAAEmG,EAAU,aAAEC,EAAY,MAAEziB,EAAK,MAAEtR,GAAQC,EAAAA,EAAAA,OACrD2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1B82B,EAAaD,GAAenkB,EAAAA,EAAAA,KAAW9T,EAAQi4B,QAAgB1yB,EACrE,IAAKgZ,GAAS0Z,IAAiBC,EAAa,OAE5C,MAAM3iB,QAAenB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDmK,OACAsT,OACAmG,aACAE,aACA1iB,UAEF,IAAKD,EACH,OAEF,MAAM,UAAE4iB,GAAc5iB,EAEtBvV,GAASwL,EAAAA,EAAAA,MACT,MAAM4sB,GAAoBl4B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOoyB,WAAWnlB,SAAS/P,IAASg2B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrF,OAASA,IAIpE7xB,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCg2B,WAAY,IACPgB,EACHD,cAEDj0B,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,4BAA4BqH,MAC3CxT,EAAQmD,EAAS2U,KAEjB,MAAM,OACJ1W,EAAM,KAAEywB,EAAI,WAAEmG,EAAU,aAAEC,EAAY,MAAEziB,EAAK,MAAEtR,GAAQC,EAAAA,EAAAA,OACrD2T,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1B82B,EAAaD,GAAenkB,EAAAA,EAAAA,KAAW9T,EAAQi4B,QAAgB1yB,EACrE,IAAKgZ,GAAS0Z,IAAiBC,EAAa,OAE5C,MAAM3iB,QAAenB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDmK,OACAsT,OACAmG,aACAE,aACA1iB,QACA6iB,aAAa,IAEf,IAAK9iB,EACH,OAEF,MAAM,UAAE4iB,GAAc5iB,EAEtBvV,GAASwL,EAAAA,EAAAA,MACT,MAAM4sB,GAAoBl4B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOoyB,WAAWnlB,SAAS/P,IAASg2B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrF,OAASA,IAGpE7xB,GAASy2B,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CACxCg2B,WAAY,IACPgB,EACHE,WAAYH,IAEbj0B,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OACJ1W,EAAM,WAAE42B,EAAa,EAAC,aAAEC,EAAY,MAAEziB,EAAQ,GAC5CsC,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1B82B,EAAaD,GAAenkB,EAAAA,EAAAA,KAAW9T,EAAQi4B,QAAgB1yB,EACrE,IAAKgZ,GAAS0Z,IAAiBC,EAAa,OAE5C,MAAM3iB,QAAenB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDmK,OACAyZ,aACAE,aACA1iB,QACA6iB,aAAa,IAEf,IAAK9iB,EACH,OAEF,MAAM,UAAE4iB,GAAc5iB,EAEtBvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAEm3B,aAAcJ,KACpD/sB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,OACJ1W,EAAM,OAAE4a,EAAM,WAAEwc,GACd1gB,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1ByS,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKuC,IAAS1K,EAAM,OAOpB,UALqBO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDmK,OACA1K,OACA2kB,eAEW,OAEbx4B,GAASwL,EAAAA,EAAAA,MACT,MAAMitB,GAAa9wB,EAAAA,EAAAA,KAAW3H,EAAQoB,GACjCq3B,IAELz4B,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCm3B,aAAcE,EAAWF,cAAcz2B,QAAQ42B,GAAaA,EAAS1c,SAAWA,OAElF5Q,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,OACJ1W,EAAM,WAAEo3B,EAAU,KAAE3G,GAClB/Z,EACEyG,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC3Bmd,SAEgBnK,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDmK,OACAia,aACA3G,WAIF7xB,GAASwL,EAAAA,EAAAA,OACU7D,EAAAA,EAAAA,KAAW3H,EAAQoB,KAGtCpB,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAEm3B,aAAc,KACpDv4B,GAASyiB,EAAAA,EAAAA,KAAmBziB,EAAQoB,EAAQ,CAC1Cu3B,mBAAoB,GACpBC,gBAAiB,KAEnBxtB,EAAAA,EAAAA,IAAUpL,IAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE1W,GAAW0W,EACb1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC3BgC,SAEgBgR,EAAAA,EAAAA,IAAQ,qBAAsBhR,KAGnDpD,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCy3B,cAAUtzB,KAEZ6F,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,6BAA6BqH,MAAOxT,EAAQmD,EAAS2U,KACpE,MAAM,OACJkE,EAAM,KAAE8c,EAAI,UAAEC,EAAS,MAAE70B,GAAQC,EAAAA,EAAAA,OAC/B2T,EAEEjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKnI,EAAM,OAWX,GATA7T,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBC,WAAYtyB,IACzEkH,EAAAA,EAAAA,IAAUpL,UAEWoU,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDP,OACAilB,OACAC,cAQA,OAJA/4B,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBO,MAAO5yB,QACpEkH,EAAAA,EAAAA,IAAUpL,GAKZA,GAASwL,EAAAA,EAAAA,OACTJ,EAAAA,EAAAA,IAAUpL,GAEV,MAAM,GAAEuC,EAAE,WAAEgkB,GAAe1S,EAE3B,UADsBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,KAAIgkB,eAKnD,OAHAvmB,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBO,MAAO5yB,QACpEkH,EAAAA,EAAAA,IAAUpL,GAIZmD,EAAQ61B,sBAAsB,CAAE/2B,OAAQ+Z,EAAQid,uBAAuB,IAEvEj5B,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBM,SAAU3yB,IACvEkH,EAAAA,EAAAA,IAAUpL,GAEN84B,IAASC,GACX51B,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,4CAA4CqL,EAAAA,EAAAA,KAAuBrlB,IACtG3P,SAEJ,KAGFiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE1D,OAAO2e,EAAAA,EAAAA,KAAiBz2B,EAAQoB,EAAQ,CAAEuR,WAAOpN,GAAarB,EAAM,I,4BCtatE,IAAIi1B,GA4PAC,GAjBJ,SAASC,GAAuCr5B,EAAWoB,EAAgB4G,GACzE,MAAM9F,EAAgBlC,EAAOkC,cACvBmT,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAU9F,GACnDoT,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EAEhDgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQsV,GAEhC,OAAOlB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9BhR,OACA4E,WACAqM,SAAWgB,OAA8C9P,EAA9BnC,EAAKyM,uBAChCgF,YAAalU,KAAKwU,MAAMJ,EAAAA,IAAqB,GAAK,GAClDS,MAAOT,EAAAA,IACPM,iBAEJ,EAxPAlJ,EAAAA,EAAAA,IAAiB,QAAQ,CAACnM,EAAQmD,KAC5Bm2B,EAAAA,KAEFC,QAAQC,IAAI,kBAGVL,IACFzR,aAAayR,IAGfn5B,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IAAKA,EAAQy5B,WAAW,IACjCruB,EAAAA,EAAAA,IAAUpL,GAGVm5B,GAAuBnU,OAAOzZ,YAAW,KACvCvL,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IAAKA,EAAQy5B,WAAW,IACjCruB,EAAAA,EAAAA,IAAUpL,GACVm5B,QAAuB5zB,CAAS,GAvBL,MA0B7B,MAAM,aACJm0B,EAAY,uBAAEC,EAAsB,eAAEC,EAAc,qBAAEC,GACpD12B,GAEJ22B,EAAAA,GAAAA,MAEAJ,EAAa,CACXK,SAAU,SACVC,mBAAoBxmB,gBA0BxBA,eAA6DxT,EAAWmD,GACtE,IAAI82B,GAAoB,EAExBj6B,GAASwL,EAAAA,EAAAA,MAET,IAAI0uB,GAAW,EAGf,MAEMC,EAFejyB,OAAOsG,KAAKxO,EAAO+P,SAASoB,UAEbiJ,QAAwD,CAACC,EAAKjZ,KAChGiZ,EAAIjZ,GAAU8G,OACXsG,KAAKxO,EAAO+P,SAASoB,SAAS/P,GAAQg5B,aACtChgB,QAAwC,CAACigB,EAAMryB,KAC9CqyB,EAAKpvB,OAAOjD,KAAasyB,EAAAA,EAAAA,IAAc,CACrC5mB,OAAOyF,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ6J,OAAOjD,IAC1CsV,WAAWC,EAAAA,EAAAA,KAAgBvd,EAAQoB,EAAQ6J,OAAOjD,IAClDuyB,cAAcC,EAAAA,EAAAA,KAAmBx6B,EAAQoB,EAAQ6J,OAAOjD,MAGnDqyB,IACN,CAAC,GACChgB,IACN,CAAC,GAIEogB,EAAevyB,OAAOiI,QAAQnQ,EAAOqJ,MAAMqxB,eAAe3e,KAAO,CAAC,GAAGrN,KAAI3M,IAAA,IAAEX,EAAQiG,GAAUtF,EAAA,OACjG+C,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ6J,OAAO5D,GAAW,IACnDvF,OAAOqW,SACJwiB,EAAoBzyB,OAAOC,OAAOnI,EAAOqJ,MAAMqxB,eAAerN,OAAS,CAAC,GAAG3e,KAAKrH,IACpFvC,EAAAA,EAAAA,KAAkB9E,EAAQA,EAAOkC,cAAgB+I,OAAO5D,MACvDvF,OAAOqW,SAEV,IAAK,MAAQ5V,GAAI2B,KAAWgE,OAAOC,OAAOnI,EAAOoI,SAAU,CACzDpI,GAASwL,EAAAA,EAAAA,MACT,MAAQpK,OAAQuM,EAAe3F,SAAU0H,IAAoB1C,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACnG02B,EAAiBlrB,GAAmB3H,EAAAA,GACpChB,EAAa4G,GAAiB+B,GAChC5E,EAAAA,EAAAA,KAAiB9K,EAAQ2N,EAAe+B,QAAmBnK,EACzDkgB,EAAc9X,EAAgB3N,EAAOqJ,MAAMC,KAAKqE,QAAiBpI,EACvE,GAAIoI,GAAiB8X,EAAa,CAChC,MAAOlQ,EAAQslB,SAA0B/e,QAAQC,IAAI,CACnDsd,GACEr5B,EACA2N,EACAitB,GAEFA,IAAmB7yB,EAAAA,KAAmB+D,EAAAA,EAAAA,KAAiB2Z,EAAYljB,GAAIq4B,EAAgB56B,EAAOkC,oBAIvFqD,GAHH6O,EAAAA,EAAAA,IAAQ,yBAA0B,CAClChR,KAAMqiB,EACNpe,UAAW4D,OAAO2vB,OAGxB56B,GAASwL,EAAAA,EAAAA,MACT,MAAQpK,OAAQ05B,IAAqB9tB,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAEjF,GAAIqR,GAAUulB,IAAqBntB,EAAe,CAChD,MAAMotB,GAAsB/wB,EAAAA,EAAAA,KAAmBhK,EAAQ2N,GACjD+H,EAAgB/H,IAAkByD,EAAAA,IACpCpR,EAAOqR,qBAAqBvP,QAAO4L,IAAA,IAAC,UAAE6D,GAAW7D,EAAA,OAAM6D,CAAS,IAAE7C,KAAIe,IAAA,IAAC,QAAEzO,GAASyO,EAAA,OAAKzO,CAAO,IAC9F,GACE0wB,GAASsJ,EAAAA,EAAAA,KAAah7B,EAAQ2N,GAC9BstB,EAAoBvJ,EAASxpB,OAAOC,OAAOupB,GAC9ChjB,KAAI0B,IAAA,IAAC,cAAE7I,GAAe6I,EAAA,OAAK2qB,EAAoBxzB,EAAc,IAC7DzF,OAAOqW,SACN,GAEE+iB,EAAmB3lB,EAAOxF,SAASrB,KAAImE,IAAA,IAAC,GAAEtQ,GAAIsQ,EAAA,OAAKtQ,CAAE,IACrD44B,GAAsBC,EAAAA,EAAAA,IAAKp7B,EAAO+P,SAASoB,SAASxD,GAAeysB,YAAac,GAKhFvlB,KAH2BJ,EAAOxF,SAASlO,QAC5C0T,EAAOxF,SAASsrB,MAAKhzB,IAAA,IAAC,GAAE9F,GAAI8F,EAAA,OAAK9F,IAAOs4B,GAAkBS,cAAc,MACrBT,GAAkBU,aAAgB,IAClD/qB,OAAO+E,EAAOxF,SAAU2F,GAC1D8lB,EAAmC7lB,EAAYnF,OAAOyqB,GACtD3xB,GAAOyF,EAAAA,EAAAA,IAAqBysB,EAAkC,MAC9DvxB,GAAYiC,EAAAA,EAAAA,IAAOyJ,EAAYjH,KAAIxF,IAAA,IAAC,GAAE3G,GAAI2G,EAAA,OAAK3G,CAAE,KAElD23B,IACHl6B,EAAS,IACJA,EACH+P,SAAU,IACL/P,EAAO+P,SACVoB,SAAU,CAAC,IAIfjJ,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQs5B,IAAwB,IAArBl5B,GAAIm5B,GAAYD,EACvDz7B,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B27B,WAAY,CAAC,GACZD,EAAW,IAEhBxB,GAAW,GAGbl6B,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQ2N,EAAerE,GACpDtJ,GAASiI,EAAAA,EAAAA,KAAgBjI,EAAQ2N,EAAeitB,EAAgB3wB,GAGhE/B,OAAOiI,QAAQgrB,GAAqBh5B,SAAQy5B,IAAkB,IAAhBr5B,EAAIiN,GAAOosB,EAClDpsB,GAAQzI,aACb/G,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQ2N,EAAepL,EAAIiN,EAAOzI,YAAW,IAGrEA,IAAeA,EAAW80B,gBAAkBjB,IAAmB7yB,EAAAA,KACjE/H,GAASgJ,EAAAA,EAAAA,KAAiBhJ,EAAQ2N,EAAeitB,EAAgB,KAC5DQ,EAAAA,EAAAA,IAAKr0B,EAAY,CAAC,gBAAiB,qBAI1CmB,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQ25B,IAAwB,IAArBv5B,GAAIm5B,GAAYI,EACvD,MAAQ16B,OAAQ26B,EAAa/zB,SAAUg0B,IAAkBhvB,EAAAA,EAAAA,KAAyBhN,EAAQ07B,IAAe,CAAC,EACtGK,IAAgBpuB,GAAiBquB,IAAkBpB,IACrD56B,GAASsW,EAAAA,EAAAA,KAAuBtW,EAAQ2N,EAAeitB,EAAgB3wB,EAAWyxB,GACpF,IAEF17B,GAASi8B,EAAAA,EAAAA,KAAYj8B,GAAQ+O,EAAAA,EAAAA,IAAqBwG,EAAOlM,MAAO,OAChErJ,GAASk8B,EAAAA,EAAAA,KAAYl8B,GAAQ+O,EAAAA,EAAAA,IAAqBwG,EAAO4mB,MAAO,OAEhElC,GAAoB,CACtB,CACF,EAEA7uB,EAAAA,EAAAA,IAAUpL,GAENylB,GAAa/b,UACfvG,EAAQi5B,WAAW,CAAEh7B,OAAQuM,EAAgBvE,OAAO,IAChDsG,GAAmBA,IAAoB3H,EAAAA,IACzC5E,EAAQ+H,cAAc,CACpB9J,OAAQuM,EAAgBxC,QAASF,OAAOyE,GAAkB2sB,wBAAwB,IAI1F,CAEAr8B,GAASwL,EAAAA,EAAAA,MAEJyuB,IACHj6B,EAAS,IACJA,EACH+P,SAAU,IACL/P,EAAO+P,SACVoB,SAAU,CAAC,IAIfjJ,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQm6B,IAAwB,IAArB/5B,GAAIm5B,GAAYY,EACvDt8B,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B27B,WAAY,CAAC,GACZD,EAAW,KAMlBxzB,OAAOsG,KAAK2rB,GAAgBh4B,SAASf,IACnC,MAAMm7B,EAAUpC,EAAe/4B,GAC/B8G,OAAOsG,KAAK+tB,GAASp6B,SAAS6F,IAC5BhI,GAASw8B,EAAAA,EAAAA,KAAax8B,EAAQoB,EAAQ6J,OAAOjD,GAAWmyB,EAAe/4B,GAAQ6J,OAAOjD,IAAW,GACjG,IAIJhI,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQy6B,GAC7Bz6B,GAASyN,EAAAA,EAAAA,KAAYzN,EAAQ26B,IAE7BvvB,EAAAA,EAAAA,IAAUpL,GAEVkI,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQs6B,IAAmB,IAAhBl6B,GAAI2B,GAAOu4B,EAClD,MAAQr7B,OAAQs7B,EAAar1B,UAAWs1B,IAAmBz8B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACrFF,GAAeC,KAAmB73B,EAAAA,EAAAA,KAAkB9E,EAAQ08B,EAAaC,IAC3Ex5B,EAAQ05B,iBAAiB,CAAE34B,SAC7B,GAEJ,CAxMY44B,CAAuB98B,EAAQmD,GAErCnD,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHy5B,WAAW,EACX/E,UAAU,EACVqI,sBAAsB,IAExB3xB,EAAAA,EAAAA,IAAUpL,GAENs5B,EAAAA,KAEFC,QAAQC,IAAI,mBAGdE,EAAa,CAAEK,SAAU,aACzBL,EAAa,CAAEK,SAAU,UACzBJ,IACAC,IACAC,GAAsB,GAExB,KAuMJmD,EAAAA,GAAAA,KAAah9B,IACX,MAAM,gBAAEof,EAAe,UAAE6d,EAAS,SAAEvI,GAAa10B,GAC3C,YAAEk9B,IAAgBh9B,EAAAA,EAAAA,KAAeF,IAClCk9B,GAAexI,GAAa0E,IAAgBha,kBAAoBA,GAChEga,IAAgB6D,YAAcA,GAKX,yBAApB7d,GAA4D,4BAAd6d,IAEhDrV,EAAAA,EAAAA,MAAauV,OANb/D,GAAiBp5B,CASI,KCjTzBmM,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OACJ1W,EAAM,OACNg8B,EAAM,YACNhf,EAAW,MACXla,GAAQC,EAAAA,EAAAA,OACN2T,EACJ,IAAK1W,EACH,OAGF,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,aAAc,CACzCmK,KAAMnb,EACNg6B,SACAhf,gBAGFjb,EAAQgZ,iBAAiB,CACvBnb,QAASuU,GACL6G,EAAAA,EAAAA,IAAa,2BACb,2EACJlY,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OACJ1W,EAAM,OACNg8B,EAAM,YACNhf,EAAW,MACXxY,EAAK,MACL1B,GAAQC,EAAAA,EAAAA,OACN2T,EACJ,IAAK1W,EACH,OAGF,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,IAASwC,EACZ,OAGF,MAAM2P,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDmK,KAAMnb,EACNwC,QACAw3B,SACAhf,gBAGFjb,EAAQgZ,iBAAiB,CACvBnb,QAASuU,GACL6G,EAAAA,EAAAA,IAAa,2BACb,2EACJlY,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,sBAAsBqH,UACrC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,uBACxBmB,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQ/nB,EAAOgoB,eACfC,cAAet1B,OAAOsG,KAAK+G,EAAOgoB,gBAClCE,QAASloB,EAAOkoB,WAGpBryB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,KAAE+R,GAAS/R,EAGjB,UADqB1D,EAAAA,EAAAA,IAAQ,yBAA0ByV,GAErD,OAGF7pB,GAASwL,EAAAA,EAAAA,MAET,MAAQ,CAACqe,GAAO6T,KAAoBC,GAAgB39B,EAAOq9B,eAAeC,OAE1Et9B,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQK,EACRH,cAAex9B,EAAOq9B,eAAeG,cAAc17B,QAAQ87B,GAAOA,IAAO/T,OAG7Eze,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,8BAA8BqH,UAE7C,UADqBY,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMypB,GADN79B,GAASwL,EAAAA,EAAAA,OACyB6xB,eAAeG,cAC9Ch6B,MAAMqmB,GAAS7pB,EAAOq9B,eAAeC,OAAOzT,GAAMiU,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiB/9B,EAAOq9B,eAAeC,OAAOO,GAEpD79B,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpBzyB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,KACJ+R,EAAI,gBAAEmU,EAAe,sBAAEC,EAAqB,YAAEC,GAC5CpmB,QACiB1D,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDyV,OACAmU,kBACAC,wBACAC,kBAOFl+B,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHq9B,eAAgB,IACXr9B,EAAOq9B,eACVC,OAAQ,IACHt9B,EAAOq9B,eAAeC,OACzB,CAACzT,GAAO,IACH7pB,EAAOq9B,eAAeC,OAAOzT,WACRtkB,IAApBy4B,EAAgC,CAAEA,wBAAoBz4B,UAC5BA,IAA1B04B,EAAsC,CAAEA,8BAA0B14B,KAClE24B,GAAe,CAAEC,mBAAe54B,QAK5C6F,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,KAAEsmB,GAAStmB,QAEI1D,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEgqB,WAMnDp+B,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHq9B,eAAgB,IACXr9B,EAAOq9B,eACVI,QAASW,KAGbhzB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,UACxC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKmB,EACH,OAEF,MAAM,kBAAE8oB,GAAsB9oB,EAC9BvV,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQe,EACRb,cAAet1B,OAAOsG,KAAK6vB,MAG/BjzB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,6BAA6BqH,MAAOxT,EAAQmD,EAAS2U,KACpE,MAAM,KAAE+R,GAAS/R,EAGjB,UADqB1D,EAAAA,EAAAA,IAAQ,4BAA6ByV,GAExD,OAGF7pB,GAASwL,EAAAA,EAAAA,MAET,MAAQ,CAACqe,GAAO6T,KAAoBC,GAAgB39B,EAAOs+B,kBAAkBhB,OAE7Et9B,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQK,EACRH,cAAex9B,EAAOs+B,kBAAkBd,cAAc17B,QAAQ87B,GAAOA,IAAO/T,OAGhFze,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iCAAiCqH,gBAC3BY,EAAAA,EAAAA,IAAQ,mCAK7BpU,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQ,CAAC,EACTE,cAAe,MAGnBpyB,EAAAA,EAAAA,IAAUpL,GAAO,I,gBCvMnB,MAEMu+B,IAAwB5U,EAAAA,EAAAA,KAAUpW,GAAOA,KAAM,KAAK,IAE1DpH,EAAAA,EAAAA,IAAiB,gBAAgBqH,MAAOxT,EAAQmD,EAAS2U,KACvD,MAAM,OAAEkE,EAAM,WAAEwiB,GAAe1mB,EACzBjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKnI,EACH,OAGF,MAAM,GAAEtR,EAAE,WAAEgkB,GAAe1S,EACrB0B,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,KAAIgkB,eACpD,IAAKhR,GAAQ1B,KAAM,OAEnB7T,GAASwL,EAAAA,EAAAA,MACT,MAAM6a,GAAWC,EAAAA,EAAAA,KAAmBtmB,EAAQgc,IACpCnI,KAAM4qB,EAASpY,SAAUqY,GAAgBnpB,EAC3CopB,GAAgBC,EAAAA,EAAAA,KAAiB5+B,EAAQgc,GAKzC6iB,EAJmBhrB,EAAKirB,gBAAkBL,EAAQK,eACzBzY,GAAU0Y,cAAcx8B,KAAOm8B,GAAaK,cAAcx8B,IACzD8jB,GAAU2Y,eAAez8B,KAAOm8B,GAAaM,eAAez8B,IAC5D8jB,GAAU4Y,eAAe18B,KAAOm8B,GAAaO,eAAe18B,GAM5FvC,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQgc,EAAQzG,EAAO1B,MAC3C7T,GAASwjB,EAAAA,EAAAA,KAAmBxjB,EAAQgc,EAAQzG,EAAO8Q,UACnDrmB,GAASk8B,EAAAA,EAAAA,KAAYl8B,GAAQ+O,EAAAA,EAAAA,IAAqBwG,EAAO4mB,MAAO,OAChEn8B,GAASi8B,EAAAA,EAAAA,KAAYj8B,GAAQ+O,EAAAA,EAAAA,IAAqBwG,EAAOlM,MAAO,QAEhE+B,EAAAA,EAAAA,IAAUpL,IACNw+B,GAAeG,GAAelpB,OAASopB,IACzC17B,EAAQ61B,sBAAsB,CAAE/2B,OAAQ+Z,EAAQid,uBAAuB,GACzE,KAGF9sB,EAAAA,EAAAA,IAAiB,YAAYqH,MAAOxT,EAAQmD,EAAS2U,KACnD,MAAM,OAAEkE,GAAWlE,EACbjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKnI,EACH,OAGF,MAAM0B,QAAenB,EAAAA,EAAAA,IAAQ,aAAc,CAAE+nB,MAAO,CAACtoB,KACrD,IAAK0B,EACH,OAGF,MAAM,MAAE4mB,EAAK,iBAAE9J,GAAqB9c,EAEpCvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASk8B,EAAAA,EAAAA,KAAYl8B,GAAQ+O,EAAAA,EAAAA,IAAqBotB,EAAO,OACzDn8B,GAASgpB,EAAAA,EAAAA,KAAoBhpB,EAAQ,IAChCA,EAAOm8B,MAAMgD,gBACb9M,KAELjnB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,gBAAgBqH,UAC/B,MAAQ4rB,UAAU,gBAAEC,IAAsBr/B,EAE1C,GAAOq/B,MAAmBC,EAAAA,GAAAA,MAAkBD,EAhEX,IAiE/B,OAGF,MAAM9pB,QAAenB,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKmB,EACH,OAGF,MAAM,IAAEpL,GAAQoL,EAEhBvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHo/B,SAAU,IACLp/B,EAAOo/B,SACV3jB,QAAStR,EACTk1B,iBAAiBC,EAAAA,GAAAA,SAGrBl0B,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,mBAAmBqH,UAClC,MAAM+rB,QAAoBnrB,EAAAA,EAAAA,IAAQ,oBAClC,IAAKmrB,EACH,OAGFv/B,GAASwL,EAAAA,EAAAA,MACTxL,GAASsyB,EAAAA,EAAAA,KAAgBtyB,EAAQu/B,EAAYlN,kBAG7C,MAAMmN,EAAoB3rB,GAAmBA,EAAK4rB,UAAY5rB,EAAK6rB,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAYpD,MAAMz3B,MAAK,CAACC,EAAGC,IAC7C+6B,EAASI,QAAQP,EAAiB76B,GAAI66B,EAAiB56B,MACtD9C,QAAQ+R,IAAUA,EAAKmsB,SAE1BhgC,EAAS,IACJA,EACHu/B,YAAa,CACX9jB,QAASqkB,EAAYpxB,KAAKmF,GAASA,EAAKtR,QAG5C6I,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7BiI,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlCjI,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,OAAEkE,GAAWlE,EACbjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAC1BikB,GAAcC,EAAAA,EAAAA,KAAsBlgC,EAAQgc,GAClD,IAAKnI,IAAQwL,EAAAA,EAAAA,KAAUxL,IAASosB,GAAaE,cAC3C,OAGF,MAAM5qB,QAAenB,EAAAA,EAAAA,IAAQ,mBAAoBP,EAAMosB,GAAarwB,OACpE,IAAK2F,EACH,OAGF,MAAM,QAAE6qB,EAAO,MAAE3qB,GAAUF,EAErBpL,GAAM+B,EAAAA,EAAAA,KAAQ+zB,GAAa91B,KAAO,IAAIqG,OAAO4vB,IAEnDpgC,GAASwL,EAAAA,EAAAA,MACTxL,GAASqgC,EAAAA,EAAAA,KAAsBrgC,EAAQ6T,EAAKtR,GAAI,CAC9CqN,MAAOwwB,EAAQv+B,OAASu+B,EAAQA,EAAQv+B,OAAS,QAAK0D,EACtD4E,MACAg2B,cAAeh2B,EAAItI,QAAU4T,KAG/BrK,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,OACJkE,EAAM,QAAEskB,GAAU,EAAK,UAAEZ,EAAS,SAAED,EAAQ,uBAAEc,EAAsB,MACpEr8B,GAAQC,EAAAA,EAAAA,OACN2T,EAEEjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKnI,EACH,OASF,IAAI0B,EACJ,GAPApS,EAAQq9B,qBAAqB,CAAEp/B,OAAQ4a,EAAQskB,YAE/CtgC,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBC,WAAYtyB,IACzEkH,EAAAA,EAAAA,IAAUpL,IAGL6T,EAAK4sB,WAAa5sB,EAAK6sB,YAC1BnrB,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEusB,MAAO9sB,EAAK6sB,YAAahB,YAAWD,iBACzE,CACL,MAAM,GAAEl9B,EAAE,WAAEgkB,GAAe1S,EAC3B0B,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CACtC7R,KACAgkB,aACAma,YAAa,GACbhB,YACAD,WACAc,0BAEJ,CAEIhrB,IACFpS,EAAQy9B,iBAAiB,CAAEx/B,OAAQ4a,IACnC7Y,EAAQ09B,gBAAgB,CAAE5+B,OAAQ+Z,IAElChc,GAASwL,EAAAA,EAAAA,MACTxL,GAASk/B,EAAAA,EAAAA,KACPl/B,EACA6T,EAAKtR,GACL,CACEm9B,YACAD,cAGJr0B,EAAAA,EAAAA,IAAUpL,IAGZA,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBM,SAAU3yB,GACvElE,GAAS8gC,EAAAA,EAAAA,KAAsB9gC,EAAQkE,IACvCkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,OAAEkE,GAAWlE,EAEbjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAEhC,IAAKnI,EACH,OAGF,MAAM,GAAEtR,EAAE,WAAEgkB,GAAe1S,QAErBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,KAAIgkB,cAAa,KAGpDpa,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,OAAE7V,EAAM,sBAAEg3B,EAAqB,UAAE8H,GAAcjpB,EAC/CkpB,GAAYnwB,EAAAA,EAAAA,KAAS5O,GAErB4R,EAAOmtB,GAAYltB,EAAAA,EAAAA,KAAW9T,EAAQiC,QAAUsD,EAChDnC,EAAQ49B,OAAyCz7B,GAA7BoC,EAAAA,EAAAA,KAAW3H,EAAQiC,GACvCsc,EAAO1K,GAAQzQ,EACfu7B,GAAgBC,EAAAA,EAAAA,KAAiB5+B,EAAQiC,GAC/C,IAAKsc,GAAMugB,cACT,OAGF,GAAIH,IAAkB1F,IAA0B8H,IAAcpC,EAAcje,YAAa,OAEzF1gB,GAASihC,EAAAA,EAAAA,KAA0BjhC,EAAQiC,GAAQ,IACnDmJ,EAAAA,EAAAA,IAAUpL,GAEVA,GAASwL,EAAAA,EAAAA,MAET,IAAI01B,GAAe5a,EAAAA,EAAAA,KAAmBtmB,EAAQiC,GAC1CyZ,GAAeC,EAAAA,EAAAA,KAAmB3b,EAAQiC,GAC9C,GAAI4R,IAASqtB,EAAc,CACzB,MAAM,GAAE3+B,EAAE,WAAEgkB,GAAe1S,EACrB0B,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,KAAIgkB,eACpD,IAAKhR,GAAQ1B,KACX,OAEFqtB,EAAe3rB,EAAO8Q,QACxB,CAEA,GAAIjjB,IAASsY,EAAc,CACzB,MAAMnG,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiBhR,GAC9C,IAAKmS,GAAQ8Q,SACX,OAGF3K,EAAenG,EAAO8Q,QACxB,CAEA,MAAM8a,EAAeD,GAAgBxlB,EACrC,IAAKylB,EAAc,OAEnB,MAAMhhB,EAASwe,GAAeje,WACxBlL,GAAS2K,GAAU4gB,GAAa9H,EAhQA,QAgQ0D1zB,EAE1FgQ,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDmK,OACA4B,SACA3K,UAEF,IAAKD,IAAWA,EAAO6rB,OACrB,OAGFphC,GAASwL,EAAAA,EAAAA,MAET,MAAM,OACJ41B,EAAM,MAAE3rB,EAAK,aAAEob,GACbtb,EAEJvV,GAASqhC,EAAAA,EAAAA,KAAiBrhC,EAAQiC,EAAQ,CACxCq/B,UAAWF,EACX3rB,QACAiL,WAAYmQ,EACZxK,SAAU8a,EACVlI,2BAGF7tB,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAExC8S,GAEA2T,IAAsB/qB,UACzB,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,cAAe,CAAEwW,UAE9C5qB,GAASwL,EAAAA,EAAAA,MACT,MAAMskB,GAAqB5vB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq9B,WAAW3W,MAEpE,IAAKrV,IAAWua,GAAuBlF,IAAUkF,EAG/C,OAFA9vB,GAASwhC,EAAAA,EAAAA,KAA+BxhC,GAAQ,EAAOkE,QACvDkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM,iBACJiwB,EAAgB,gBAAEC,GAChB3a,EAEEksB,EAAexR,EAAiBnuB,OAAO+O,EAAAA,KACvC6wB,EAAgBxR,EAAgBpuB,OAAO+O,EAAAA,KAE7C7Q,GAASwhC,EAAAA,EAAAA,KAA+BxhC,GAAQ,EAAOkE,GACvDlE,GAAS2hC,EAAAA,EAAAA,KAAiB3hC,EAAQ,CAAEyhC,eAAcC,iBAAiBx9B,IAEnEkH,EAAAA,EAAAA,IAAUpL,EAAO,GACjB,KAGJmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MACE4oB,YAAaC,EAAK,UAAEjB,EAAS,SAAED,EAAQ,MACvCv7B,GAAQC,EAAAA,EAAAA,OACN2T,EAEEvC,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEusB,QAAOjB,YAAWD,aAC7DlqB,GASLpS,EAAQua,SAAS,CAAEnb,GAAIgT,EAAQrR,UAE/BlE,GAASwL,EAAAA,EAAAA,MACTxL,GAAS8gC,EAAAA,EAAAA,KAAsB9gC,EAAQkE,IACvCkH,EAAAA,EAAAA,IAAUpL,IAZRmD,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,qCACnC3pB,SAUa,KAGnBiI,EAAAA,EAAAA,IAAiB,cAAc,CAACnM,EAAQmD,EAAS2U,KAC/C,MAAM,OAAE1W,GAAW0W,EACbyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQoB,GAC3Bmd,IAIAnK,EAAAA,EAAAA,IAAQ,aAAcmK,EAAK,KAGlCpS,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,cACJ8pB,EAAa,kBAAEC,EAAiB,QAAEC,EAAO,MAAE59B,GAAQC,EAAAA,EAAAA,OACjD2T,EAGJ,KAD6BoJ,EAAAA,EAAAA,KAA2BlhB,GAgBtD,OAdI6hC,GACF1+B,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxvB,MAAO,kBAGXzO,eAIJf,EAAQ+f,iBAAiB,CAAEC,eAAgB,eAAgBjf,UAI7D,MAAMqR,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqBwtB,EAAeE,GAEjE,GAAID,EAAmB,CACrB,IAAKtsB,EAWH,YAVApS,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxvB,MAAO,iBAGXzO,UAKJf,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,oBAEbh+B,UAEFf,EAAQgZ,iBAAiB,CACvBnb,QAAS,CACPohC,IAAK,6BAEPC,kBAAmBT,EACnB19B,SAEJ,MAGFiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,QAAE2D,GAAY3D,QAEC1D,EAAAA,EAAAA,IAAQ,mBAAoBqH,KAKjDzb,GAASwL,EAAAA,EAAAA,MACTxL,EAAOu/B,aAAa9jB,QAAQtZ,SAAS6Z,IACnC,MAAM,cAAEsmB,GAAkBtiC,EAAOm8B,MAAM7yB,KAAK0S,IAAW,CAAC,EACpDsmB,IAAkB7mB,EAAQnX,SAAS0X,KACrChc,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQgc,EAAQ,CAClCsmB,mBAAe/8B,IAEnB,IAEFkW,EAAQtZ,SAAS6Z,IACfhc,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQgc,EAAQ,CAClCsmB,eAAe,GACf,KAEJl3B,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,4BAA4BqH,MAAOxT,EAAQmD,EAAS2U,KACnE,MAAM,cACJyqB,EAAa,SAAEC,EAAQ,MAAEC,EAAK,UAAET,EAAS,MAAE99B,GAAQC,EAAAA,EAAAA,OACjD2T,EAEEsK,QAAoBhO,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD8N,WAAY,CAACqgB,KAEVngB,IAAc,IAgBnBpiB,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0iC,qBAAsB,CACpBH,gBACAC,WACAR,YACAS,UAEDv+B,IACHkH,EAAAA,EAAAA,IAAUpL,IAxBJgiC,GACF7+B,EAAQ4+B,gBAAgB,CACtBC,YACAC,MAAO,CACLC,UAAW,sBACXC,UAAW,CACTxvB,MAAO,4BAGXzO,SAeW,IC1fnB,MAAMy+B,GAAkBlrB,EAAAA,IAAUmrB,EAAAA,GAEnB,MAAMC,GAGnBC,WAAAA,CAAoBC,EAA2BC,G,YAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,iQAAA,c,iGAC1E,CAEAC,eAAAA,GACON,KAELO,KAAKC,UAAYne,OAAOC,KAAK,mBAAe1f,EAAW29B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEA/d,IAAAA,CAAKlB,GACH,GAAImf,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAASne,KAAOnB,EAChCmf,KAAKC,UAAWG,aAChBJ,KAAKC,eAAY59B,GAKnB,IAAKo9B,GAAiB,CACpB,MAAMY,EAAQve,OAAOC,KAAKlB,OAAKxe,EAAW29B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,aAAAA,GACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAY59B,CACnB,E,wCCjCK,SAASm+B,GACd1jC,EAAW8qB,EAAkB6Y,GAE1B,QAAAvrB,EAAA9S,UAAAzD,OAAAE,EAAA,IAAA4S,MAAAyD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAtW,EAAAsW,EAAA,GAAA/S,UAAA+S,GAAA,IADCnU,GAAQC,EAAAA,EAAAA,OAAkBpC,EAE9B,MAAM+L,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B4jC,WAAY,IACP91B,EAAS81B,WACZC,WAAY,IACP/1B,EAAS81B,WAAWC,WACvB,CAAC/Y,GAAW6Y,KAGfz/B,EACL,CAEO,SAAS4/B,GACd9jC,EAAW0uB,GAER,QAAAha,EAAApP,UAAAzD,OAAA6L,EAAA,IAAAiH,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlH,EAAAkH,EAAA,GAAAtP,UAAAsP,GAAA,IADC1Q,GAAQC,EAAAA,EAAAA,OAAkBuJ,EAE9B,OAAOK,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B4jC,WAAY,KACP1jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0/B,WACjClV,cAEDxqB,EACL,CAEO,SAAS6/B,GACd/jC,EAAWoiC,EAAa4B,GAErB,QAAAC,EAAA3+B,UAAAzD,OAAA4N,EAAA,IAAAkF,MAAAsvB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAz0B,EAAAy0B,EAAA,GAAA5+B,UAAA4+B,GAAA,IADChgC,GAAQC,EAAAA,EAAAA,OAAkBsL,EAE9B,MAAM00B,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GACzCkgC,EAAgBD,EAAgBE,QAAQD,cAExCE,EAAiBF,EAAchC,GAErC,IAAKkC,EAAgB,OAAOtkC,EAE5B,MAAMukC,EAAe,IAChBD,KACAN,GAGCQ,GAAmBC,EAAAA,GAAAA,IAAaF,GACtC,IAAKC,EAAkB,OAAOxkC,EAE9B,MAAM0kC,EAAeP,EAAgBE,QAAQK,aACvCC,EAAkBD,IAAgBD,EAAAA,GAAAA,IAAaC,GAcrD,OAbS32B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJF,EAAgBE,WAChBG,IAAqBG,GAAmB,CACzCD,aAAcH,GAEhBH,cAAe,IACVA,EACH,CAACI,GAAmBD,KAGvBrgC,EAGL,CA2BO,SAAS0gC,GACd5kC,EAAW6kC,GAGR,IAFHC,IAAmBx/B,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,KAAAA,UAAA,GAASy/B,IAA2Bz/B,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,KAAAA,UAAA,GAAO,QAAA0/B,EAAA1/B,UAAAzD,OAAAgR,EAAA,IAAA8B,MAAAqwB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAApyB,EAAAoyB,EAAA,GAAA3/B,UAAA2/B,GAAA,IAC1D/gC,GAAQC,EAAAA,EAAAA,OAAkB0O,EAE9B,MAAMsxB,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GAEzCk+B,GAAMqC,EAAAA,GAAAA,IAAaI,GAEzB,IAAKzC,EAAK,OAAOpiC,EACjB,MAAMklC,EAAgB,IAAIf,EAAgBE,QAAQc,mBAC7CD,EAAc5gC,SAAS89B,IAAM8C,EAAcr5B,KAAKu2B,GAErD,MAAMgD,EAAiB,IAAIjB,EAAgBE,QAAQgB,aAC9CD,EAAe9gC,SAAS89B,IAAMgD,EAAev5B,KAAKu2B,GAEvD,MAAMgC,EAAgBD,EAAgBE,QAAQD,cAkB9C,OAhBSr2B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJF,EAAgBE,WAChBS,GAAc,CAAEJ,aAAcG,GACjCS,qBAAqB,EACrBC,YAAaR,EACbS,WAAY,YACZpB,cAAe,IACVA,EACH,CAAChC,GAAMyC,GAETM,kBAAmBD,EACnBG,YAAaD,IAEdlhC,EAGL,CAcO,SAASuhC,GACdzlC,EAAWoiC,EAAasD,GAErB,QAAAC,EAAArgC,UAAAzD,OAAAqH,EAAA,IAAAyL,MAAAgxB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA18B,EAAA08B,EAAA,GAAAtgC,UAAAsgC,GAAA,IADC1hC,GAAQC,EAAAA,EAAAA,OAAkB+E,EAE9B,MAAMi7B,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GACzCkgC,EAAgBD,EAAgBE,QAAQD,cACxCS,EAAST,EAAchC,GAC7B,IAAKyC,EAAQ,OAAO7kC,EAEpB,IAAK0lC,GAA2Bb,EAAOgB,qBACrC,OAAO9B,GAAa/jC,EAAQoiC,EAAK,CAAE0D,kBAAkB,GAAQ5hC,GAG/D,MAAM6hC,EAAuB,IAAK3B,GAC5B4B,GAAoBvB,EAAAA,GAAAA,IAAaI,GAEvC,IAAIK,EAAgBf,EAAgBE,QAAQc,kBAExCa,WACKD,EAAqBC,GAC5Bd,EAAgBf,EAAgBE,QAAQc,kBAAkBrjC,QAAQmkC,GAAMA,IAAMD,KAGhF,MAAMtB,EAAeP,EAAgBE,QAAQK,aAEvCwB,EAAqBxB,IAAiBD,EAAAA,GAAAA,IAAaC,MAAkBD,EAAAA,GAAAA,IAAaI,GAElFsB,EAAsBj+B,OAAOC,OAAO49B,GACpCK,EAAqBD,EAAoBtkC,OAiB/C,OAfSkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJF,EAAgBE,WAChB6B,GAAsB,CACvBxB,aAAc0B,EACVD,EAAoBC,EAAqB,QAAK7gC,GAEpD6+B,cAAe2B,EACfZ,kBAAmBD,MACfkB,GAAsB,CACxBf,YAAa,MAGhBnhC,EAGL,CAqDO,SAASmiC,GACdrmC,GACS,QAAAsmC,EAAAhhC,UAAAzD,OAAAi6B,EAAA,IAAAnnB,MAAA2xB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAzK,EAAAyK,EAAA,GAAAjhC,UAAAihC,GAAA,IADMriC,GAAQC,EAAAA,EAAAA,OAAkB23B,EAEzC,OAAO5zB,OAAOsG,MAAKtO,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmgC,QAAQD,eAAeviC,OAAS,CACnF,CAqBO,SAAS2kC,GACdxmC,EAAWymC,GAER,QAAAC,EAAAphC,UAAAzD,OAAA8kC,EAAA,IAAAhyB,MAAA+xB,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAthC,UAAAshC,GAAA,IADC1iC,GAAQC,EAAAA,EAAAA,OAAkBwiC,EAE9B,MAAMxC,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GAC/C,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqkC,QAAS,IACJF,EAAgBE,QACnBkB,YAAakB,IAEdviC,EACL,CClOA,MAEM2iC,IAAwBvzB,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAC1D,IAAIuzB,GAqoCAC,GArTG,SAASC,GACdhnC,EAAWyiC,EAAev+B,EAAe+iC,EAAqBC,GAE9D,MAAMC,EAAiB,CAAE1E,QAAOwE,aAAYC,cAC5C,GAdK,SACLlnC,EAAW6kC,EAAyB3gC,GAEpC,MACMkgC,GADkBlkC,EAAAA,EAAAA,KAAeF,EAAQkE,GACTmgC,QAAQD,cACxChC,GAAMqC,EAAAA,GAAAA,IAAaI,GACzB,QAAKzC,GACEgC,EAAchC,EACvB,CAMMgF,CAAepnC,EAAQmnC,EAAgBjjC,GAAQ,CACjD,MAAMk+B,GAAMqC,EAAAA,GAAAA,IAAa0C,GAKzB,OAJI/E,IACFpiC,EDz0BC,SACLA,EAAWgiC,GAER,QAAAqF,EAAA/hC,UAAAzD,OAAAuO,EAAA,IAAAuE,MAAA0yB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAl3B,EAAAk3B,EAAA,GAAAhiC,UAAAgiC,GAAA,IADCpjC,GAAQC,EAAAA,EAAAA,OAAkBiM,EAE9B,MAAM+zB,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GACzCkgC,EAAgBD,EAAgBE,QAAQD,cAE9C,IAAKA,EAAcpC,GACjB,OAAOhiC,EAGT,MAAMunC,EAAkBnD,EAAcpC,GAWtC,OATSj0B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJF,EAAgBE,QACnBiB,qBAAqB,EACrBZ,aAAc6C,EACd/B,WAAY,cAEbthC,EAGL,CCkzBesjC,CAAqBxnC,EAAQoiC,EAAKl+B,IAC3CkH,EAAAA,EAAAA,IAAUpL,KAEL,CACT,CACA,OAAO,CACT,CA8LA,SAASynC,GACPznC,EACAmD,EACA4gB,EAAaxO,GAEb,QAAA6C,EAAA9S,UAAAzD,OAAAE,EAAA,IAAA4S,MAAAyD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAtW,EAAAsW,EAAA,GAAA/S,UAAA+S,GAAA,IADInU,GAAQC,EAAAA,EAAAA,OAAkBpC,EAE9B,GAAoB,YAAhBwT,EAAOlT,KAAoB,CAC7BrC,GAASwL,EAAAA,EAAAA,MACT,MAAMsC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAAS45B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAEC,EAAG,yBAAEC,GAA6BtyB,EAYlD,OAXAvV,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0nC,QAAS,IACJ55B,EAAS45B,QACZI,QAAS,CACPH,SACAlF,MAAOmF,EAAIrlC,GACXslC,8BAGH3jC,QACHkH,EAAAA,EAAAA,IAAUpL,EAEZ,CAEA,MAAM+nC,EAA0B,aAAhBxyB,EAAOlT,KAAsBkT,EAAOwO,IAAMA,EAC1DiB,OAAOC,KAAK8iB,EAAS,SAAU,YAC/B5kC,EAAQ6kC,kBAAkB,CAAE9jC,SAC9B,CAkEAsP,eAAey0B,GACb7kC,EAAe8kC,EAAiBrhC,EAAsC6S,EAAkBnS,SAElF6M,EAAAA,EAAAA,IAAQ,cAAe,CAC3BhR,OACAyD,YACAyH,KAAM45B,EACNxuB,SACAnS,iBAEJ,CAIAiM,eAAe20B,GACbnoC,EACAmD,EAAgCC,EAAeiE,EAAmBsf,GAElE,IAFiFyhB,EAAM9iC,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAAQ,QAAA2+B,EAAA3+B,UAAAzD,OAAAuO,EAAA,IAAAuE,MAAAsvB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA9zB,EAAA8zB,EAAA,GAAA5+B,UAAA4+B,GAAA,IAC3FhgC,GAAQC,EAAAA,EAAAA,OAAkBiM,EAE9B,MAAM,WACJsW,EAAU,iBAAEvK,EAAgB,QAAEksB,EAAO,SAAEC,GACrCnlC,EAEAilC,IACGrB,KACHA,GAAc,IAAIlE,GAAa,8BAA8B,KAC3D1mB,EAAiB,CAAEnb,QAAS,qCAAsCkD,SAAQ,KAI9E6iC,GAAY9D,mBAGd,MAAM1tB,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDhT,OAAQgC,EAAKb,GACbgkB,WAAYnjB,EAAKmjB,WACjBlf,YACAsf,OACAyhB,WAGF,IAAK7yB,EACH,OAEF,MAAM,QAAEvU,EAASunC,MAAOC,EAAO,IAAEzkB,GAAQxO,EAErCizB,EACF9hB,EAAW,CAAEC,KAAM,CAAE3lB,QAASA,GAAW,SAAWkD,UAC3ClD,EACTmb,EAAiB,CAAEnb,UAASkD,UACnB6f,IACLqkB,EAEErkB,EAAIzf,SAjrCI,6BAkrCVyiC,GAAa9hB,KAAKlB,IAElBgjB,GAAavD,gBACb8E,EAAS,CACPvkB,MAAK3iB,OAAQgC,EAAKb,GAAI8E,YAAWnD,WAIrCmkC,EAAQ,CAAEtkB,MAAK7f,UAGrB,EAxrCAiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,OAAEohC,EAAM,MAAEvkC,GAAQC,EAAAA,EAAAA,OACjC2T,EACE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,GAAKjE,GAASpC,EAId,OAAQynC,EAAOpmC,MACb,IAAK,UACHc,EAAQ8kC,eAAe,CAAEC,QAASO,EAAOn6B,KAAMpK,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAE6f,GAAQ0kB,EAChBtlC,EAAQklC,QAAQ,CAAEtkB,MAAK7f,UACvB,KACF,CACA,IAAK,QACHwkC,EAAAA,EAAAA,IAAoBD,EAAOE,UAC3BxlC,EAAQgZ,iBAAiB,CAAEnb,SAASob,EAAAA,EAAAA,IAAa,kBAAmBqsB,EAAOE,UAAWzkC,UACtF,MAEF,IAAK,WACEikC,GAAqBnoC,EAAQmD,EAASC,EAAMiE,EAAWohC,EAAO9hB,UAAMphB,EAAWrB,GACpF,MAEF,IAAK,cACHf,EAAQylC,cAAc,CAAEC,OAAQJ,EAAOI,OAAQ3kC,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAM2P,EAAO7T,EAAOkC,eAAgB4R,EAAAA,EAAAA,KAAW9T,EAAQA,EAAOkC,oBAAiBqD,EAC/E,IAAKsO,EACH,OAEF1Q,EAAQujB,WAAW,CACjBC,KAAM,CACJ+Z,YAAa7sB,EAAK6sB,YAClBhB,UAAW7rB,EAAK6rB,WAAa,GAC7BD,SAAU5rB,EAAK4rB,UAAY,GAC3BzjB,OAAQnI,EAAKtR,IAEf2B,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,iBAAE4kC,GAAqBL,EAC7BtlC,EAAQ4lC,WAAW,CACjB3nC,OAAQgC,EAAKb,GAAI8E,UAAWyhC,EAAkB5kC,UAEhD,KACF,CACA,IAAK,MACHf,EAAQ6lC,YAAY,CAClB3mC,KAAM,UACNjB,OAAQgC,EAAKb,GACb8E,YACAnD,UAEF,MAEF,IAAK,OACEikC,GAAqBnoC,EAAQmD,EAASC,EAAMiE,OAAW9B,GAAW,EAAMrB,GAC7E,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAE0mB,EAAK,WAAEqe,GAAeR,EAC9BtlC,EAAQ+lC,gBAAgB,CACtBte,QAAOqe,aAAY5hC,YAAWnD,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAE8X,GAAWysB,EACnBtlC,EAAQgmC,iBAAiB,CAAE5mC,GAAIyZ,EAAQ9X,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAE6f,GAAQ0kB,EACVW,GAASC,EAAAA,EAAAA,KAAarpC,EAAQgB,GACpC,IAAKooC,EACH,OAGF,MAAME,GAAQC,EAAAA,GAAAA,KACdpmC,EAAQqmC,qBAAqB,CAC3BzlB,MAAK0e,MAAO2G,EAAO7mC,GAAI+mC,QAAOG,WAAYhB,EAAOn6B,KAAMpK,UAEzD,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAE6f,GAAQ0kB,EACVW,GAASC,EAAAA,EAAAA,KAAarpC,EAAQgB,GAC9ByhC,EAAQzhC,EAAQ0oC,UAAYN,GAAQ7mC,GAC1C,IAAKkgC,EACH,OAEF,MAAM6G,GAAQC,EAAAA,GAAAA,KACdpmC,EAAQwmC,eAAe,CACrB5lB,MACA0e,QACAxgC,OAAQmB,EAAKb,GACb+mC,QACAG,WAAYhB,EAAOn6B,KACnBpK,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAE6f,GAAQ0kB,EAChBtlC,EAAQymC,kBAAkB,CACxBxoC,OAAQgC,EAAKb,GACb8E,YACAwiC,SAAUpB,EAAOoB,SACjB9lB,MACA7f,UAEF,KACF,EACF,KAGFiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,QAAEowB,EAAO,OAAE9mC,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjD1U,EAAOhC,GAASuG,EAAAA,EAAAA,KAAW3H,EAAQoB,IAAU0e,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACvE6I,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAE5D,IAAKd,IAAS2J,EACZ,OAGF,MAAM,SAAE/E,GAAa+E,EACrB5J,EAAQ2mC,oBAAoB,CAAE5lC,UAC9Bf,EAAQwW,oBAAoB,CAAEzV,UAE9B,MAAMqD,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQoD,EAAKb,IAEtD0lC,GACH7kC,EAAM8kC,GAAS/uB,EAAAA,EAAAA,KAAYnZ,EAAQoD,EAAKb,GAAIyF,IAAWnB,WAAWnF,EAAAA,EAAAA,KAAa1B,EAAQoD,EAAKb,IAAKgF,EAClG,KAGH4E,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,GACxC,cAAE5V,GAAkBlC,EACpBoD,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACjC0jC,EAAM1lC,IAAiB6nC,EAAAA,EAAAA,KAAU/pC,EAAQoB,GAC/C,IAAKc,IAAkBkB,IAASwkC,EAC9B,OAGF,MAAMrgC,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQoD,EAAKb,UAEtC6R,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAM+zB,MAKpD5nC,GAASwL,EAAAA,EAAAA,MACTxL,GAASgqC,EAAAA,EAAAA,KAAkBhqC,EAAQ4nC,EAAIrlC,KACvC6I,EAAAA,EAAAA,IAAUpL,GACLioC,GAAe7kC,EAAM,cAAUmC,GAAW7D,EAAAA,EAAAA,KAAa1B,EAAQoB,GAASmG,GAAc,KAG7F4E,EAAAA,EAAAA,IAAiB,qBAAqBqH,UACpC,MAAM,gBAAE6rB,GAAoBr/B,EAAOiqC,cACnC,GAAI5K,IAAmBC,EAAAA,GAAAA,MAAkBD,EA/KR,GAgL/B,OAGF,MAAM9pB,QAAenB,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKmB,EACH,OAGF,MAAM,IAAEpL,GAAQoL,EAEhBvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHiqC,cAAe,IACVjqC,EAAOiqC,cACVxuB,QAAStR,EACTk1B,iBAAiBC,EAAAA,GAAAA,SAGrBl0B,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,UACjC,MAAM,gBAAE6rB,GAAoBr/B,EAAOkqC,WACnC,GAAI7K,IAAmBC,EAAAA,GAAAA,MAAkBD,EAxMR,GAyM/B,OAGF,MAAM9pB,QAAenB,EAAAA,EAAAA,IAAQ,mBAC7B,IAAKmB,EACH,OAGF,MAAM,IAAEpL,GAAQoL,EAEhBvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHkqC,WAAY,IACPlqC,EAAOkqC,WACVzuB,QAAStR,EACTk1B,iBAAiBC,EAAAA,GAAAA,SAGrBl0B,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OACJ1W,EAAM,SAAE0pB,EAAQ,MAAEF,EAAK,OAAEzK,EAAM,MAC/Bjc,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,IAAIqyB,GAAgBjqC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0/B,WAAWC,WAAW/Y,GACxE,IAAsB,IAAlBqf,EAAJ,CAIA,QAAsB5kC,IAAlB4kC,EAA6B,CAC/B,MAAQt2B,KAAMu2B,EAAS,KAAEhnC,SAAegR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE0W,cAAe,CAAC,EAEpF,GADA9qB,GAASwL,EAAAA,EAAAA,OACJ4+B,IAAchnC,EAGjB,OAFApD,EAAS0jC,GAAyB1jC,EAAQ8qB,GAAU,EAAO5mB,QAC3DkH,EAAAA,EAAAA,IAAUpL,GAIZmqC,EAAgB,CACd5nC,GAAI6nC,EAAU7nC,GACdqoB,MAAO,GACPzK,OAAQ,GACRkqB,cAAU9kC,EACV+kC,aAAa,EACb/oC,QAAS,GACTgpC,UAAW,GAGbvqC,EAAS0jC,GAAyB1jC,EAAQ8qB,EAAUqf,EAAejmC,IACnEkH,EAAAA,EAAAA,IAAUpL,EACZ,EAEI4qB,IAAUuf,EAAcvf,OAAUuf,EAAcG,cAI/CzD,IAAsB,MAszB7BrzB,eAAsDxT,EAASyP,GAYhB,IAZkB,SAC/Dqb,EAAQ,cACRqf,EAAa,OACb/oC,EAAM,MACNwpB,EAAK,OACLzK,GAOD1Q,EAAA,QAAAiF,EAAApP,UAAAzD,OAAA6L,EAAA,IAAAiH,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlH,EAAAkH,EAAA,GAAAtP,UAAAsP,GAAA,IAAM1Q,GAAQC,EAAAA,EAAAA,OAAkBuJ,EAC/B1N,GAASwL,EAAAA,EAAAA,MACT,MAAMo8B,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQmqC,EAAc5nC,IACvCa,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKwmC,IAAQxkC,EACX,OAGF,MAAMonC,EAAwBL,EAAcvf,QAAUA,EAEtD5qB,EAAS0jC,GADT1jC,EAAS8jC,GAA2B9jC,GAAQ,EAAMkE,GACR4mB,EAAU,IAC/Cqf,EACHvf,WACI4f,GAAyB,CAAErqB,YAAQ5a,EAAWhE,QAAS,KAC1D2C,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDwzB,MACAxkC,OACAwnB,QACAzK,OAAQqqB,OAAwBjlC,EAAY4a,IAG9CngB,GAASwL,EAAAA,EAAAA,MACT,MAAMi/B,GAAmBvqC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0/B,WAAWC,WAAW/Y,GAE7E,GADA9qB,EAAS8jC,GAA2B9jC,GAAQ,EAAOkE,IAC9CqR,IAAWk1B,GAAoB7f,IAAU6f,EAAiB7f,MAE7D,YADAxf,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM0qC,EAAa,IAAIrgC,KAAKogC,EAAiBlpC,SAAW,IAAImN,KAAKiY,GAASA,EAAKpkB,MACzEooC,EAAap1B,EAAOhU,QAAQO,QAAQ6kB,IAAU+jB,EAAW3/B,IAAI4b,EAAKpkB,MAExEvC,EAAS0jC,GAAyB1jC,EAAQ8qB,EAAU,IAC/C2f,EACHG,KAAMr1B,EAAOq1B,KACbL,UAAW7nC,KAAKC,MAA2B,IAAnB4S,EAAOg1B,aAC3BI,EAAW9oC,QAAU,CAAEgpC,UAAWt1B,EAAOs1B,cACzCt1B,EAAO80B,UAAY,CAAEA,SAAU90B,EAAO80B,aACtC90B,EAAOu1B,eAAiB,CAAEA,cAAev1B,EAAOu1B,eACpDR,YAAa/0B,EAAOhU,QAAQM,OAAS,GAAKsW,QAAQ5C,EAAOmL,YACzDnf,QAAqC,KAA5BkpC,EAAiBtqB,QAAiBsqB,EAAiBtqB,SAAW5K,EAAOmL,WAC1EnL,EAAOhU,SACNkpC,EAAiBlpC,SAAW,IAAIiP,OAAOm6B,GAC5CxqB,OAAQwqB,EAAW9oC,OAAS0T,EAAOmL,WAAa,IAC/Cxc,IAEHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAn3BI+qC,CAAgB/qC,EAAQ,CACtB8qB,WACAqf,cAAeA,EACf/oC,SACAwpB,QACAzK,UACCjc,EAAM,GApCX,CAqCE,KAGJiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MACJ8S,EAAK,WAAEqe,EAAU,UAAE5hC,EAAS,OAAEvF,EAAM,MAAEoC,GAAQC,EAAAA,EAAAA,OAC5C2T,EACJ,IAAI,MACF2qB,GACE3qB,EACJ,MAAM1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACvC,IAAKd,EACH,OAGF,IAAKq/B,GAASp7B,EAAW,CACvB,MAAMrG,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKb,GAAI8E,GACnD,IAAKrG,EACH,OAEF,MAAMooC,GAASC,EAAAA,EAAAA,KAAarpC,EAAQgB,GACpCyhC,EAAQzhC,EAAQ0oC,UAAYN,GAAQ7mC,EACtC,CAEA,IAAKkgC,EACH,OAGF,MAAMuI,GAAYl3B,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAChCuI,GAIL7nC,EAAQ8nC,kBAAkB,CACxB38B,KAAM,CACJA,KAAO,IAAG08B,EAAUE,UAAW,GAAGpgB,YAAYF,KAEhDxpB,OAAQ6nC,EAAa7lC,EAAKb,QAAKgD,EAC/BzD,SACAoC,SAEc,KAGlBiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,GACJvV,EAAE,QAAE4oC,EAAO,SAAEjuB,EAAQ,YAAEjE,EAAW,YAAEJ,EAAW,MAC/C3U,GAAQC,EAAAA,EAAAA,OACN2T,EACJ,IAAKvV,EACH,OAGF,MAAM,OAAEnB,EAAM,SAAE4G,GAAa6Q,EACvBzV,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BkY,GAAiBH,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,IAAWnB,UAExDA,GAAYmN,EAAAA,EAAAA,KAAuBhU,EAAQoB,EAAQ4G,EAAUsR,GAEnEnW,EAAQ2mC,oBAAoB,CAAE5lC,UAC9Bf,EAAQwW,oBAAoB,CAAEzV,WAEzBkQ,EAAAA,EAAAA,IAAQ,sBAAuB,CAClChR,OACAgoC,SAAU7oC,EACV4oC,UACAtkC,YACA6S,QAAQhY,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7B8b,WACAmuB,aAAcpyB,GACd,KAGJ9M,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,SAAEgT,EAAQ,MAAE1hB,EAAK,MAAElF,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEvD,IAAIqyB,GAAgBjqC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0/B,WAAWC,WAAW/Y,GAEnEqf,KAIA/gC,GAAS1G,KAAKC,MAAQwnC,EAAcI,YAEzCJ,EAAgB,CACd5nC,GAAI4nC,EAAc5nC,GAClBqoB,MAAO,GACPzK,OAAQ,GACRkqB,cAAU9kC,EACV+kC,aAAa,EACb/oC,QAAS,GACTgpC,UAAW,GAGbvqC,EAAS0jC,GAAyB1jC,EAAQ8qB,EAAUqf,EAAejmC,IACnEkH,EAAAA,EAAAA,IAAUpL,IAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C8rB,GAAa1jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0/B,WAAWC,WAE5D37B,OAAOsG,KAAKo1B,GAAYzhC,SAAS2oB,IAC/B3nB,EAAQmoC,eAAe,CAAExgB,WAAU5mB,SAAQ,GAC3C,KAGJiI,EAAAA,EAAAA,IAAiB,YAAYqH,MAAOxT,EAAQmD,EAAS2U,KACnD,MAAM,MAAE2qB,EAAK,MAAE8I,GAAUzzB,EAEnB8vB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EACH,OAGF,IAAIvhB,GAAWC,EAAAA,EAAAA,KAAmBtmB,EAAQyiC,GAC1C,IAAKpc,EAAU,CACb,MAAM9Q,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,GAAIqlC,EAAIrlC,GAAIgkB,WAAYqhB,EAAIrhB,aAC5EF,EAAW9Q,GAAQ8Q,QACrB,CAEIA,GAAUmlB,iBACNp3B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAM+zB,UAGjCxzB,EAAAA,EAAAA,IAAQ,WAAY,CACxBwzB,MACA6D,WAAYF,GACZ,KAGJp/B,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE2qB,GAAU3qB,EACZ8vB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EACH,OAGF,IAAIvhB,GAAWC,EAAAA,EAAAA,KAAmBtmB,EAAQyiC,GAC1C,IAAKpc,EAAU,CACb,MAAM9Q,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE7R,GAAIqlC,EAAIrlC,GAAIgkB,WAAYqhB,EAAIrhB,aAC5EF,EAAW9Q,GAAQ8Q,QACrB,CAEIA,GAAUmlB,iBACNp3B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAM+zB,IAGvC5nC,GAASwL,EAAAA,EAAAA,MACT,MAAMpI,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQyiC,GAC1BiJ,GAAc53B,EAAAA,EAAAA,KAAW9T,EAAQA,EAAOkC,eAE9C,IAAKkB,EAAM,OACX,MAAMmE,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQoD,EAAKb,UAErD6R,EAAAA,EAAAA,IAAQ,cAAe,CAC3BhR,OACAuoC,QAAS,CACPt5B,UAAW,UACXqtB,UAAWgM,EAAYhM,WAAa,GACpCD,SAAUiM,EAAYjM,UAAY,GAClCiB,YAAagL,EAAYhL,aAAe,GACxC1kB,OAAQ0vB,EAAYnpC,IAEtBgF,iBACA,KAGJ4E,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,IACJiM,EAAG,MAAE0e,EAAK,MAAE6G,EAAK,WAAEG,EAAU,eAAEmC,EAAc,oBAAEC,EAAmB,WAAEJ,EAAU,MAC9EvnC,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,GAAIkvB,GAAsBhnC,EAAQyiC,EAAOv+B,EAAO6f,GAAM,OAEtD,MAAM6jB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OAEV,KAAKkE,EAAAA,EAAAA,KAAmB9rC,EAAQyiC,GAY9B,OAXAziC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,gBAAiB,CACftJ,QACApgC,KAAM,SACN2pC,UAAW,CACTvhC,OAAQ,uBACRqN,aAGH5T,QACHkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAMisC,QAAmB73B,EAAAA,EAAAA,IAAQ,uBAAwB,CACvD2P,MACA6jB,MACA0B,QACAmC,aACAG,iBACAC,wBAEGI,IAYLjsC,EAAS4kC,GART5kC,GAASwL,EAAAA,EAAAA,MACoB,CAC3By7B,WAAYljB,EACZmoB,QAAStE,EAAIlI,UACb3b,IAAKkoB,EACLxJ,QACAgH,eAEiD,GAAM,EAAMvlC,IAC/DkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,IACJiM,EAAG,MAAE0e,EAAK,OAAExgC,EAAM,MAAEqnC,EAAK,SAAEpsB,EAAQ,WAAEusB,EAAU,cAAE0C,EAAa,WAAEV,EAAU,aAAExoB,EAAY,MACxF/e,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,GAAIkvB,GAAsBhnC,EAAQyiC,EAAOv+B,EAAO6f,GAAM,OAEtD,MAAM6jB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OACV,MAAMrpB,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EAAM,OAEX,KAAKutB,EAAAA,EAAAA,KAAmB9rC,EAAQyiC,GAY9B,OAXAziC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,gBAAiB,CACftJ,QACApgC,KAAM,SACN2pC,UAAW,CACTvhC,OAAQ,iBACRqN,aAGH5T,QACHkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM+M,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAEtD,OAAE9C,EAAM,SAAE4G,EAAWD,EAAAA,IAAmBgF,GAAsB,CAAC,EAC/DuM,EAAiBlY,GAAS+X,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,IAAWnB,eAAYtB,EAC7EsB,EAAYzF,GAAS4S,EAAAA,EAAAA,KAAuBhU,EAAQoB,EAAQ4G,EAAUsR,QAAkB/T,EAExFmU,EAAStY,GAASM,EAAAA,EAAAA,KAAa1B,EAAQoB,QAAUmE,EACjDgQ,QAAenB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C2P,MACA6jB,MACArpB,OACA+qB,QACApsB,WACArW,YACAslC,gBACAV,aACA/xB,SACAuJ,iBAEF,IAAK1N,EACH,OAGF,MAAQwO,IAAKkoB,EAAU,QAAEd,EAAO,aAAEiB,GAAiB72B,EAanDvV,EAAS4kC,GAXT5kC,GAASwL,EAAAA,EAAAA,MACoB,CAC3By7B,WAAYljB,EACZA,IAAKkoB,EACLC,QAAStE,EAAIlI,UACb+C,QACAxgC,SACAkpC,UACAtkC,YACA4iC,eAEiD,GAAM,EAAMvlC,IAC/DkH,EAAAA,EAAAA,IAAUpL,GAENosC,IAAgBC,EAAAA,EAAAA,OAClBlpC,EAAQmpC,uBAAuB,CAAEC,MAAO,aAAcroC,SACxD,KAGFiI,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,MACJ2qB,EAAK,OAAExgC,EAAM,MAAEqnC,EAAK,WAAEmC,EAAU,KAAEe,EAAI,qBAAEC,EAAoB,MAC5DvoC,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,GAAIkvB,GAAsBhnC,EAAQyiC,EAAOv+B,GAAQ,OAEjD,MAAM0jC,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OACV,MAAMrpB,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EAAM,OAEX,KAAKutB,EAAAA,EAAAA,KAAmB9rC,EAAQyiC,GAAQ,CACtC,IAAIgK,EAcF,OAXAzsC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,gBAAiB,CACftJ,QACApgC,KAAM,SACN2pC,UAAW,CACTvhC,OAAQ,qBACRqN,aAGH5T,QACHkH,EAAAA,EAAAA,IAAUpL,GAZVmD,EAAQupC,eAAe,CAAEjK,QAAOkK,gBAAgB,EAAMzoC,SAe1D,CAEA,MAAMqR,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDwzB,MACArpB,OACA+qB,QACAmC,aACAe,SAEF,IAAKj3B,EACH,OAGF,MAAQwO,IAAKkoB,EAAU,QAAEd,EAAO,aAAEloB,GAAiB1N,EAWnDvV,EAAS4kC,GATT5kC,GAASwL,EAAAA,EAAAA,MACoB,CAC3BuY,IAAKkoB,EACLC,QAAStE,EAAIlI,UACb+C,QACAxgC,SACAkpC,UACA1B,WAAY,KAEqC,GAAM,EAAMvlC,IAC/DkH,EAAAA,EAAAA,IAAUpL,GAENijB,IAAgBopB,EAAAA,EAAAA,OAClBlpC,EAAQmpC,uBAAuB,CAAEC,MAAO,aAAcroC,SACxD,KAGFiI,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,MACJ2qB,GACE3qB,EACE8vB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OAEV,MAAMgF,QAAex4B,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDwzB,QAGF5nC,GAASwL,EAAAA,EAAAA,MACLohC,IACF5sC,EAAS,IACJA,EACHm8B,MAAO,IACFn8B,EAAOm8B,MACV0Q,oBAAqB,IAChB7sC,EAAOm8B,MAAM0Q,oBAChB,CAACpK,GAAQmK,MAKfxhC,EAAAA,EAAAA,IAAUpL,GACZ,KAGFmM,EAAAA,EAAAA,IAAiB,qCAAqC,CAACnM,EAAQmD,EAAS2U,KACtE,MAAM,MACJ5T,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEhB,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8sC,qCAAqC,GACpC5oC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sCAAsC,CAACnM,EAAQmD,EAAS2U,KACvE,MAAM,mBAAEi1B,EAAkB,MAAE7oC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAatE,OAXA9X,EAAS,IACJA,EACH64B,SAAU,IACL74B,EAAO64B,SACVmU,MAAO,IACFhtC,EAAO64B,SAASmU,MACnBC,kCAAmC90B,QAAQ40B,OAK1Ch/B,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8sC,yCAAqCvnC,GACpCrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,MACJ2qB,EAAK,QAAEyJ,EAAO,SAAEgB,EAAQ,KAAEV,EAAI,MAAElD,EAAK,eAAEqD,EAAc,cAAEQ,EAAa,0BAAEC,EAAyB,MAC/FlpC,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,GAAIkvB,GAAsBhnC,EAAQyiC,EAAOv+B,EAAOgoC,GAAU,OAE1D,MAAMtE,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OAGV,MAAMyF,EAAuBl1B,QAAQnY,EAAOstC,WAAWC,KAAK3F,EAAIrlC,KAChE,GAAIqlC,EAAI4F,cAAgBL,IAAkBE,EAAsB,CAC9D,MAAM93B,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CwzB,QAEF,GAAIryB,EAAQ,CACVvV,GAASwL,EAAAA,EAAAA,MAET,MAAMiiC,EAAYl4B,EAAOqyB,IAGzB,GAFwB6F,EAAUC,oBAAsBD,EAAUE,iBAAmBF,EAAUG,cAgB7F,OAbA5tC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6tC,0BAA2B,CACzBjG,IAAK6F,EACLzB,UAAW,CACTvhC,OAAQ,oBACRqN,QAAS,IACJA,EACHq1B,eAAe,MAIpBjpC,QACHkH,EAAAA,EAAAA,IAAUpL,EAGd,CACF,CAEA,MAAM8tC,QAAe15B,EAAAA,EAAAA,IAAQ,cAAe,CAC1CwzB,MACAsE,YAIF,GAFAlsC,GAASwL,EAAAA,EAAAA,OAEJsiC,EAEH,YADA3qC,EAAQgZ,iBAAiB,CAAEnb,SAASob,EAAAA,EAAAA,IAAa,8BAA+BlY,UAMlF,IAF+BkpC,IAA8BU,EAAOC,cAAejC,EAAAA,EAAAA,KAAmB9rC,EAAQyiC,IAgB5G,OAbA3qB,EAAQs1B,2BAA4B,EACpCptC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,gBAAiB,CACftJ,QACAoF,yBAA0BiG,EAAOjG,yBACjCxlC,KAAM,SACN2pC,UAAW,CACTvhC,OAAQ,oBACRqN,aAGH5T,QACHkH,EAAAA,EAAAA,IAAUpL,GAIZ,MAAMue,GAAOuB,EAAAA,EAAAA,KAAkB9f,EAAQkE,IAEjC,IAAE6f,EAAG,aAAEd,SAAuB7O,EAAAA,EAAAA,IAAQ,oBAAqB,CAC/DmK,KAAMA,GAAQqpB,EACdoG,IAAKF,EACLrC,WAAYyB,EACZV,OACAG,iBACArD,UAIF,GAFAtpC,GAASwL,EAAAA,EAAAA,OAEJuY,EAAK,OAEV/jB,GAASwL,EAAAA,EAAAA,MAET,MAAMvJ,EAAUsc,EAAOA,EAAKhc,GAAKqlC,EAAKrlC,GAStCvC,EAAS4kC,GAAoB5kC,EAPA,CAC3B+jB,MACAmoB,QAASA,GAAWtE,EAAIlI,UACxBz9B,SACAwgC,QACAgH,WAAY,KAEqC,GAAM,EAAMvlC,IAC/DkH,EAAAA,EAAAA,IAAUpL,GAENijB,IAAgBopB,EAAAA,EAAAA,OAClBlpC,EAAQmpC,uBAAuB,CAAEC,MAAO,aAAcroC,SACxD,KAGFiI,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,MACJ2qB,EAAK,OAAExgC,EAAM,SAAEib,EAAQ,UAAErW,EAAS,QAAEskC,EAAO,MAAEjnC,GAAQC,EAAAA,EAAAA,OACnD2T,EAEE8vB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAC/B,IAAKmF,EAAK,OACV,MAAMrpB,GAAO5W,EAAAA,EAAAA,KAAW3H,EAAQiC,GAChC,IAAKsc,EAAM,OAEX,MAAM7E,GAAShY,EAAAA,EAAAA,KAAa1B,EAAQiC,SAEfmS,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CwzB,MACArpB,OACArB,WACArW,YACAskC,UACAzxB,YAIAvW,EAAQ8qC,kBAAkB,CAAE/pC,SAC9B,KAGFiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,IACJ8vB,EAAG,KAAEjhB,EAAI,WAAE8iB,GACT3xB,GAEJ1D,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBwzB,MACAjhB,OACA8iB,cACA,KAGJt9B,EAAAA,EAAAA,IAAiB,kBAAkBqH,gBA4CnCA,eAAqDxT,EAAW6pB,GAC9D,MAAMtU,QAAenB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEyV,UA5C3CqkB,IA6CN,GAAK34B,EAcL,OAVAvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHstC,WAAY,CACVzjB,KAAMtU,EAAOsU,KACb0jB,KAAMh4B,EAAOg4B,QAGjBniC,EAAAA,EAAAA,IAAUpL,GAEHuV,CACT,CA5DQ24B,CAAeluC,IAErBmuC,EAAAA,GAAAA,GAAqB,CACnB1jC,OAAQ,iBACRqN,aAASvS,GACR6oC,EAAAA,IAAyB,KAG9BjiC,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE2qB,EAAK,eAAEkK,EAAc,UAAE0B,GAAcv2B,EAEvC8vB,GAAM9zB,EAAAA,EAAAA,KAAW9T,EAAQyiC,GAE1BmF,SAECxzB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEwzB,MAAK+E,iBAAgB0B,aAAY,KA+CtEliC,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,IACJ8vB,EAAG,WAAE6D,EAAU,cAAE0B,EAAa,MAAEjpC,GAAQC,EAAAA,EAAAA,OACtC2T,EACE8zB,EAAiB,mBAAoB9zB,GAAWA,EAAQ8zB,eAExDO,GAAiBvE,EACjB0G,GAA4BnC,IAAkBnsC,EAAOstC,WAAWC,KAAK3F,EAAIrlC,KAC1EqlC,GAAKmG,YAAcnG,GAAK8F,mBAE7B,IAAKP,GAAiBmB,EACpB,OAAOvgC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6tC,0BAA2B,CACzBjG,MACAoE,UAAW,CACTvhC,OAAQ,gBACRqN,QAAS,IACJA,EACHq1B,eAAe,MAIpBjpC,GAGL,MAAMolC,GAAQC,EAAAA,GAAAA,KAYd,GAXIqC,GACFzoC,EAAQqmC,qBAAqB,CAC3B/G,MAAOmF,EAAKrlC,GACZknC,WAAY,GACZmC,gBAAgB,EAChBH,aACAnC,QACAplC,UAIA,WAAY4T,EAAS,CACvB,MAAM,OAAE1W,EAAM,SAAE4G,EAAWD,EAAAA,GAAc,IAAEgc,GAAQjM,EACnD3U,EAAQ6iB,WAAW,CAAE5kB,SAAQ4G,WAAU9D,UACvCf,EAAQwmC,eAAe,CACrB5lB,MACA9hB,OAAQb,EACRqhC,MAAQ0J,EAAgB/qC,EAASwmC,EAAIrlC,GACrC+mC,QACAG,WAAY,GACZ0C,gBACAV,aACAvnC,SAEJ,CAEgB,KAGlBiI,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,eAAE60B,EAAc,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAChD,0BAAE+1B,IAA8B3tC,EAAAA,EAAAA,KAAeF,EAAQkE,IAEvD,IAAE0jC,EAAG,UAAEoE,GAAc6B,EAE3B7tC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B6tC,+BAA2BtoC,GAC1BrB,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuuC,GAAUz6B,EAAAA,EAAAA,KAAW9T,EAAQ4nC,EAAIrlC,IACvC,GAAKgsC,IAELprC,EAAQupC,eAAe,CAAEjK,MAAOmF,EAAIrlC,GAAIoqC,iBAAgBzoC,gBAClDkQ,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEwzB,IAAK2G,EAAS5B,iBAAgB0B,WAAW,IACxErC,GAAW,CACb,MAAM,OAAEvhC,EAAQqN,QAAS02B,GAAkBxC,EAE3C7oC,EAAQsH,GAAQ+jC,EAClB,MAGFriC,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ1W,EAAM,SAAEyoC,EAAQ,UAAExiC,EAAS,IAAE0c,EAAG,MAAE7f,GAAQC,EAAAA,EAAAA,OACxC2T,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDhR,OACAymC,WACAxiC,cAGGkO,IACLvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0nC,QAAS,CACP3jB,MACA0kB,OAAQ,CACNoB,WACAxiC,YACAjG,OAAQgC,EAAKb,MAGhB2B,IACHkH,EAAAA,EAAAA,IAAUpL,GACVynC,GAAoBznC,EAAQmD,EAAS4gB,EAAKxO,EAAQrR,GAAM,KAG1DiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,eAAE60B,EAAc,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAChDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAAS45B,SAASe,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAE1kB,GACNjW,EAAS45B,SACP,OAAEtmC,EAAM,UAAEiG,EAAS,SAAEwiC,GAAapB,EAElCrlC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/ChR,OACAiE,YACAwiC,WACA8C,mBAEGp3B,GAELkyB,GADAznC,GAASwL,EAAAA,EAAAA,MACmBrI,EAAS4gB,EAAKxO,EAAQrR,EAAM,KAG1DiI,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,IAAEiM,EAAG,MAAE7f,GAAQC,EAAAA,EAAAA,OAAsB2T,EAErCvC,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE2P,QAChDxO,IACLvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0nC,QAAS,CACP3jB,QAED7f,IACHkH,EAAAA,EAAAA,IAAUpL,GACVynC,GAAoBznC,EAAQmD,EAAS4gB,EAAKxO,EAAQrR,GAAM,KAG1DiI,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,eAAE60B,EAAc,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAChDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAAS45B,SAAS3jB,IAAK,OAC5B,MAAM,IAAEA,GAAQjW,EAAS45B,QAEnBnyB,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE2P,MAAK4oB,mBACpDp3B,GAELkyB,GADAznC,GAASwL,EAAAA,EAAAA,MACmBrI,EAAS4gB,EAAKxO,EAAQrR,EAAM,KAG1DiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0nC,aAASniC,GACRrB,EAAM,KAoKXiI,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,IACJ8vB,EAAG,KAAE6G,EAAMrwB,YAAaswB,EAAK,MAC7BxqC,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,IAAI,SAAE62B,GAAa72B,EACd62B,IAAUA,EAAW3uC,EAAO64B,SAASmU,MAAMze,UAEhD,MAAM,cAAErsB,GAAkBlC,EACrBkC,GAAkB0lC,IAIvB5nC,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBC,WAAYtyB,IACzEkH,EAAAA,EAAAA,IAAUpL,IAENyuC,GAAQC,UACWt6B,EAAAA,EAAAA,IAAQ,aAAc,CACzCwzB,MAAK+G,WAAUF,OAAMC,YAIrB1uC,GAASwL,EAAAA,EAAAA,MACTxL,GAASk/B,EAAAA,EAAAA,KACPl/B,EACA4nC,EAAIrlC,GACJ,CACEm9B,UAAW+O,IAGfzuC,GAASwjB,EAAAA,EAAAA,KAAmBxjB,EAAQ4nC,EAAIrlC,GAAI,CAAEqsC,IAAKF,KACnDtjC,EAAAA,EAAAA,IAAUpL,IAIdA,GAASwL,EAAAA,EAAAA,MACTxL,GAAS42B,EAAAA,EAAAA,KAAyB52B,EAAQu2B,EAAAA,GAAmBM,SAAU3yB,IACvEkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,8BAA8BqH,MAAOxT,EAAQmD,EAAS2U,KACrE,MAAM,MACJyzB,EAAK,MACLrnC,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,IAAKgvB,GAAa,CAChB,MAAM1jC,QAAayrC,EAAAA,EAAAA,IAAoB7uC,EAAQ8uC,EAAAA,KAC/C,IAAK1rC,EACH,OAEF0jC,GAAc1jC,EAAKb,EACrB,CAEIgpC,GACFpoC,EAAQ4rC,SAAS,CAAEtM,MAAOqE,GAAayE,UAGzCpoC,EAAQua,SAAS,CAAEnb,GAAIukC,GAAa5iC,SAAQ,I,UC/yC9CiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,UACnC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,mBACxBmB,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASinB,EAAAA,EAAAA,KAAgBjnB,EAAQ,CAAEgvC,YAAaz5B,EAAOy5B,cACvDhvC,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAEkvC,KAAM35B,EAAO25B,QACpD9jC,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,gBAAEq3B,EAAe,UAAEC,GAAct3B,EAEvC9X,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,EAAM/b,WAAOpN,KAC/D6F,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqvC,QAAkBj7B,EAAAA,EAAAA,IAAQ,gBAAiB+6B,GAEjDnvC,GAASwL,EAAAA,EAAAA,MACTxL,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,KAClDtjB,EAAAA,EAAAA,IAAUpL,GAENqvC,GACFD,GACF,KAGFjjC,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,gBAAEq3B,EAAe,UAAEC,GAAct3B,EAEvC9X,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,EAAM/b,WAAOpN,KAC/D6F,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqvC,QAAkBj7B,EAAAA,EAAAA,IAAQ,gBAAiB+6B,GAEjDnvC,GAASwL,EAAAA,EAAAA,MACTxL,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,KAClDtjB,EAAAA,EAAAA,IAAUpL,GAENqvC,GACFD,GACF,KAGFjjC,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,gBACJq3B,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtCt3B,EAEJ9X,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,EAAM/b,WAAOpN,KAC/D6F,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqvC,QAAkBj7B,EAAAA,EAAAA,IAAQ,iBAAkB+6B,EAAiBG,EAAUJ,EAAMK,GAEnFvvC,GAASwL,EAAAA,EAAAA,MACTxL,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,KAClDtjB,EAAAA,EAAAA,IAAUpL,GAENqvC,GACFD,GACF,KAGFjjC,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,gBACJq3B,EAAe,MAAEI,EAAK,UAAEH,GACtBt3B,EAEJ9X,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,EAAM/b,WAAOpN,KAC/D6F,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqvC,QAAkBj7B,EAAAA,EAAAA,IAAQ,sBAAuB+6B,EAAiBI,GAExEvvC,GAASwL,EAAAA,EAAAA,MACTxL,GAASivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE0uB,WAAW,EAAO8gB,4BAAwBjqC,KACjF6F,EAAAA,EAAAA,IAAUpL,GAENqvC,GACFD,GACF,KAGFjjC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,KAAE23B,GAAS33B,GAEZ1D,EAAAA,EAAAA,IAAQ,2BAA4Bq7B,EAAK,KAGhDtjC,EAAAA,EAAAA,IAAiB,mBAAoBnM,IAC5BivC,EAAAA,EAAAA,KAAoBjvC,EAAQ,CAAE2S,WAAOpN,MC/F9C,MAAMmqC,GAA+C,CACnDC,4BAA6B,CAC3BC,MAAO,aACP5uC,QAAS,yBAEX6uC,eAAgB,CACdD,MAAO,aACP5uC,QAAS,yBAEX8uC,OAAQ,CACNF,MAAO,aACP5uC,QAAS,yBAEX+uC,SAAU,CACRH,MAAO,SACP5uC,QAAS,kBAEXgvC,UAAW,CACTJ,MAAO,SACP5uC,QAAS,mBAEXivC,oBAAqB,CACnBL,MAAO,SACP5uC,QAAS,kBAEXkvC,qBAAsB,CACpBN,MAAO,SACP5uC,QAAS,mBAEXmvC,IAAK,CACHP,MAAO,MACP5uC,QAAS,iBAEXovC,YAAa,CACXR,MAAO,MACP5uC,QAAS,kB,iBCWbmL,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,YAAEu4B,EAAW,SAAEC,EAAQ,MAAEpsC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEvDy4B,GAAeC,EAAAA,EAAAA,KAA0BxwC,EAAQkE,GACvD,IAAKqsC,EACH,OAGF,MAAME,GAAsBC,EAAAA,GAAAA,IAAuB1wC,EAAQuwC,GACtDE,GAiiBPj9B,eACExT,EAAWuwC,EAAsCF,EAAkBM,GAEnE,QAAA1M,EAAA3+B,UAAAzD,OAAA4N,EAAA,IAAAkF,MAAAsvB,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAz0B,EAAAy0B,EAAA,GAAA5+B,UAAA4+B,GAAA,IADIhgC,GAAQC,EAAAA,EAAAA,OAAkBsL,EAE9B,MAAM8F,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDm8B,eAAcF,cAAaM,eAE7B,IAAKp7B,EACH,OAGF,MAAM,GAAEhT,EAAE,gBAAEquC,GAAoBr7B,EAChCvV,GAASwL,EAAAA,EAAAA,MAETxL,GAAS6wC,EAAAA,EAAAA,KAAiB7wC,EAAQuC,EAAI2B,GAClC0sC,GAAiB/uC,QACnB7B,GAAS8wC,EAAAA,EAAAA,KAAsB9wC,EAAQ4wC,EAAiB1sC,GACxDlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYC,SAAU/sC,IAEtDlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYE,SAAUhtC,IAExDkH,EAAAA,EAAAA,IAAUpL,EACZ,CAnjBEmxC,CAAsBnxC,EAAQywC,EAAqBJ,EAAaC,EAAUpsC,EAAM,KAGlFiI,EAAAA,EAAAA,IAAiB,eAAeqH,MAAOxT,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,SAAsBosC,GAAiBz4B,EAEjD24B,GAAsBC,EAAAA,GAAAA,IAAuB1wC,EAAQuwC,GAC3D,IAAKE,EACH,OAGFzwC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoxC,sBAAsB,GACrBltC,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMspC,GAAQC,EAAAA,GAAAA,KACR8H,QAAaj9B,EAAAA,EAAAA,IAAQ,iBAAkBq8B,EAAqBnH,GAE7D+H,IAILrxC,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoxC,sBAAsB,GACrBltC,GAEC,UAAWmtC,IAKG,YAAdA,EAAKhvC,OACPrC,GAASsxC,EAAAA,EAAAA,KAActxC,EAAQ,CAC7BuwC,aAAcz4B,EACdu5B,OACAE,oBAAoB,EACpBC,gBAAkB15B,EAAgB05B,gBAClCC,YAAQlsC,GACPrB,GACHlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYE,SAAUhtC,IAGtC,UAAdmtC,EAAKhvC,OACPrC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0xC,aAAc,CACZnB,eACAc,OACAI,OAAQ,YAETvtC,MAtBHkH,EAAAA,EAAAA,IAAUpL,GAyBK,KAGnBmM,EAAAA,EAAAA,IAAiB,gBAAgBqH,MAAOxT,EAAQmD,EAAS2U,KACvD,MAAM,KACJ65B,EAAI,OAAE31B,EAAM,QAAEhb,EAAO,eAAE4wC,EAAc,MAAE1tC,GAAQC,EAAAA,EAAAA,OAC7C2T,EAEE+5B,EAAU7xC,EAAO8xC,OAAOD,QAE9B,QAAgBtsC,IAAZssC,EAAuB,OAE3B,GAAIA,EAAUF,EAAKG,MAEjB,YADA3uC,EAAQ4uC,sBAAsB,CAAE7tC,UAIlC,MAAMqsC,EAAwC,CAC5CluC,KAAM,WACN2Z,SACAg2B,OAAQL,EAAKpvC,GACbvB,UACA4wC,kBAEInB,GAAsBC,EAAAA,GAAAA,IAAuB1wC,EAAQuwC,GAC3D,IAAKE,EACH,OAGFzwC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoxC,sBAAsB,GACrBltC,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMspC,GAAQC,EAAAA,GAAAA,KACR8H,QAAaj9B,EAAAA,EAAAA,IAAQ,iBAAkBq8B,EAAqBnH,GAE7D+H,IAILrxC,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BoxC,sBAAsB,GACrBltC,IACHkH,EAAAA,EAAAA,IAAUpL,GAEN,UAAWqxC,GAIfluC,EAAQ8uC,oBAAoB,CAC1BC,SAAU,CACR3B,eACA4B,OAAQd,EAAKc,QAEfjuC,UACA,KAGJiI,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OACzB2T,EACE1U,EAAOhC,IAAUuG,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1C,IAAKiG,IAAcjE,EACjB,OAGF,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,aAAchR,EAAMiE,GAC5CkO,IAILvV,GAASwL,EAAAA,EAAAA,MAEPxL,EAD0B,UAAxBuV,EAAO68B,QAAQ/vC,MACRgwC,EAAAA,EAAAA,KAAgCryC,EAAQuV,EAAO68B,QAASluC,IAExDouC,EAAAA,EAAAA,KAAWtyC,EAAQuV,EAAO68B,QAASluC,IAE9CkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BuyC,QAAS,KACJryC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACjC5/B,WAAOpN,IAERrB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BuyC,QAAS,KACJryC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACjCH,aAAS7sC,IAEVrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,YAAE06B,EAAW,MAAEtuC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAE7C,eAAE26B,IAAmBvyC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QAAQlB,MAC3D,KAAE1qB,GAAS6rB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,KAA6B3yC,EAAQkE,GAC5D,IAAKwuC,EACH,QAmHNl/B,eACExT,EACA2mB,EACA+rB,GAEA,QAAAt6B,EAAA9S,UAAAzD,OAAAE,EAAA,IAAA4S,MAAAyD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAtW,EAAAsW,EAAA,GAAA/S,UAAA+S,GAAA,IADInU,GAAQC,EAAAA,EAAAA,OAAkBpC,EAE9B,MAAM6oB,EC/VD,SAA0BjE,GAC/B,MAAMiE,EAAQ1iB,OAAOsG,KAAKmY,GAAMjY,KAAKu3B,GAAO,GAAEA,KAAKtf,EAAKsf,OAAM5pB,KAAK,KACnE,OAAOuO,EAAM/oB,OAAS,EAAK,IAAG+oB,IAAU,EAC1C,CD4VgBgoB,CAAiB,CAC7B,eAAgBjsB,EAAKksB,WACrB,kBAAmBlsB,EAAKmsB,YACxB,iBAAkBnsB,EAAKosB,WACvB,YAAapsB,EAAKqsB,IAClB,oBAAqBrsB,EAAKssB,IAC1B,wBAAyBtsB,EAAKusB,UAG1B50B,QAAiB60B,MAAO,mCAAkCvoB,IAAS,CACvEwoB,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASZ,OAGvBn9B,QAAe+I,EAASi1B,OAC9B,GAAIh+B,EAAO5C,MAAO,CAChB,MAAMA,EDzUH,SAAwBA,GAK7B,MAAQ3R,QAASod,EAAW,KAAEqxB,EAAI,MAAElE,GAAU54B,GACxC,MAAEi9B,EAAK,QAAE5uC,GAAYuqC,EAAQmE,GAAcnE,GAASmE,GAAcD,GAExE,MAAO,CAAEG,QAAO5uC,UAASod,cAC3B,CCgUkBo1B,CAAej+B,EAAO5C,OAYpC,OAXA3S,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BuyC,QAAS,KACJryC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACjCd,OAAQ,SACR9+B,MAAO,IACFA,KAGNzO,QACHkH,EAAAA,EAAAA,IAAUpL,EAEZ,CACAA,GAASwL,EAAAA,EAAAA,MACTxL,GAASyzC,EAAAA,EAAAA,KAAkBzzC,EAAQ,CACjCqC,KAAMkT,EAAOlT,KACbE,GAAIgT,EAAOhT,IACV2B,GACHlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYE,SAAUhtC,IACtDkH,EAAAA,EAAAA,IAAUpL,EACZ,CA/JS0zC,CAAsB1zC,EAAQ2mB,EAAM+rB,EAAgBxuC,EAC3D,MAAO,GAAuB,gBAAnBuuC,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,KAA0B5zC,EAAQkE,GACtD,IAAKyvC,EACH,QA6JNngC,eACExT,EACA2mB,EACAgtB,GAEA,QAAAj/B,EAAApP,UAAAzD,OAAA6L,EAAA,IAAAiH,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlH,EAAAkH,EAAA,GAAAtP,UAAAsP,GAAA,IADI1Q,GAAQC,EAAAA,EAAAA,OAAkBuJ,EAE9B,MAAMwJ,EAAS,CACb28B,KAAM,CACJ/D,OAAQnpB,EAAKksB,WAAW5e,QAAQ,OAAQ,IACxC6f,iBAAkBntB,EAAKmsB,YACvBiB,gBAAiBptB,EAAKosB,WACtBiB,cAAertB,EAAKqsB,IAAI/e,QAAQ,OAAQ,MAItCggB,GAAc/zC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QAAQlB,MAAM6C,aAAaD,YAE7E,IAAIlwB,EAEFA,EADEowB,EAAAA,IACI,+DAEA,oDAGJF,GAAaG,WAAW,aACrBH,EAAYI,SAAS,4CAC1BtwB,EAAMkwB,GAGR,MAAM31B,QAAiB60B,MAAMpvB,EAAK,CAChCqvB,OAAQ,OACRC,QAAS,CACPiB,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBX,GAEpBY,KAAMC,KAAKC,UAAUv9B,KAEjB3B,QAAe+I,EAASi1B,OAE9B,GAAsB,OAAlBh+B,EAAOk8B,OAAiB,CAE1B,MAAM9+B,EAAQ,CAAEyL,YAAa,iBAY7B,OAXApe,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BuyC,QAAS,KACJryC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACjCd,OAAQ,SACR9+B,MAAO,IACFA,KAGNzO,QACHkH,EAAAA,EAAAA,IAAUpL,EAEZ,CAEAA,GAASwL,EAAAA,EAAAA,MACTxL,GAAS00C,EAAAA,EAAAA,KAAuB10C,EAAQ,CACtCqC,KAAM,OACNsyC,MAAOp/B,EAAOoR,KAAKguB,OAClBzwC,GACHlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYE,SAAUhtC,IACtDkH,EAAAA,EAAAA,IAAUpL,EACZ,CA3NS40C,CAA2B50C,EAAQ2mB,EAAMgtB,EAAazvC,EAC7D,MAGFiI,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,iBACJ+8B,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D9wC,GAAQC,EAAAA,EAAAA,OACN2T,EACEm9B,GAAgBC,EAAAA,EAAAA,KAAuBl1C,EAAQkE,GAC/CixC,GAAej1C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,SAC7C,KAAElB,EAAI,kBAAE+D,EAAiB,aAAE7E,GAAiB4E,EAElD,IAAK5E,IAAiBc,EACpB,OAGF,MAAM,eAAEoB,EAAc,OAAEN,GAAWd,EAE7BZ,GAAsBC,EAAAA,GAAAA,IAAuB1wC,EAAQuwC,GAC3D,IAAKE,EACH,OAGFzwC,GAASsxC,EAAAA,EAAAA,KAActxC,EAAQ,CAAEyxC,OAAQ,WAAavtC,IACtDkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMwyC,EAAc,CAClB6C,KAAMP,EACNnuB,KAAyB,WAAnB8rB,GACF6C,EAAAA,EAAAA,KAAwBt1C,EAAQkE,IAASqxC,EAAAA,EAAAA,KAA6Bv1C,EAAQkE,UAE/DkQ,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9Cm8B,aAAcE,EACd0B,SACAK,cACAgD,gBAAiBP,EACjBJ,mBACAE,oBACAK,kBAAmBA,GAAmB3O,MACtCuO,gBAOFh1C,GAASwL,EAAAA,EAAAA,MACTxL,GAASsxC,EAAAA,EAAAA,KAActxC,EAAQ,CAAEyxC,OAAQ,QAAUvtC,GACnDlE,GAASy1C,EAAAA,EAAAA,KAAaz1C,EAAQkE,IAC9BkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQuZ,UAAU,CAChB,QAAS,8BACTy4B,eACAjxC,UACA,KAGJiI,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,SAAEo6B,EAAQ,MAAEhuC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC1C49B,GAAcC,EAAAA,EAAAA,KAAmB31C,EAAQkE,GACzCqsC,EAAemF,GAAanF,cAAgB2B,GAAU3B,aAC5D,IAAKA,EAAc,OAEnB,MAAME,GAAsBC,EAAAA,GAAAA,IAAuB1wC,EAAQuwC,GAC3D,IAAKE,EACH,OAGF,MAAM0B,EAAUuD,EAAYrE,MAAMc,QAAUuD,EAAYE,kBAAkBC,oBAAsB3D,GAAUC,OAE1GnyC,GAAS81C,EAAAA,EAAAA,KAAmB91C,EAAQ,CAAEyxC,OAAQ,WAAavtC,IAC3DkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDm8B,aAAcE,EACd0B,WAGF,IAAK58B,EAMH,OALAvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS81C,EAAAA,EAAAA,KAAmB91C,EAAQ,CAAEyxC,OAAQ,UAAYvtC,IAC1DkH,EAAAA,EAAAA,IAAUpL,GACVmD,EAAQ4yC,uBAAuB,CAAE7xC,eACjCf,EAAQ6yC,eAAe,CAAE9xC,UAI3BlE,GAASwL,EAAAA,EAAAA,MACTxL,GAAS81C,EAAAA,EAAAA,KAAmB91C,EAAQ,CAAEyxC,OAAQ,QAAUvtC,IACxDkH,EAAAA,EAAAA,IAAUpL,GACVmD,EAAQ4yC,uBAAuB,CAAE7xC,UACjCf,EAAQ6yC,eAAe,CAAE9xC,UAErB,cAAeqR,GACjBpS,EAAQua,SAAS,CAAEnb,GAAIgT,EAAO7D,UAAWxN,UAG3Cf,EAAQuZ,UAAU,CAChB,QAAS,kCACTy4B,aAAcjD,EAAW,CAAE3B,gBAAiBmF,EAC5CxxC,UAEFf,EAAQ8yC,gBAAgB,KAqH1B9pC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,MAAiB,KAAE9B,EAAI,MAAEsyC,GAAU78B,EACnD,OAAO48B,EAAAA,EAAAA,KAAuB10C,EAAQ,CACpCqC,OACAsyC,SACCzwC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,KAAEo+B,EAAI,MAAEhyC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC5C,OAAOi5B,EAAAA,EAAAA,KAAe/wC,EAAQk2C,GAAQlF,EAAAA,GAAYE,SAAUhtC,EAAM,KAGpEiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAK4J,EAASqoC,aACd,OAAOpoC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm2C,aAAc,CACZC,MAAOtoC,EAASqoC,aAAaC,MAC7BC,QAAQ,IAETnyC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,eACJqL,EAAc,WAAEmzB,EAAU,UAAEjH,EAAS,OAAEkH,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrEvyC,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEhB3U,EAAQuzC,sBAER,MAAMnhC,QAAenB,EAAAA,EAAAA,IAAQ,qBACxBmB,IAELvV,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm2C,aAAc,CACZC,MAAO7gC,EAAO6gC,MACdjzB,iBACAkzB,QAAQ,EACRC,aACAG,WACAF,SACAC,eACAnH,cAEDnrC,IACHkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQwzC,oBAAoB,CAAEzyC,UAAQ,KAGxCiI,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ1W,EAAM,gBAAEw1C,EAAe,MACvB1yC,GAAQC,EAAAA,EAAAA,OACN2T,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDhR,SAGIyzC,QAAoBziC,EAAAA,EAAAA,IAAQ,6BAE7BmB,GAAWshC,IAIhB72C,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B82C,cAAe,CACb11C,SACA21C,MAAOxhC,EACP8gC,QAAQ,EACRO,kBACAC,gBAED3yC,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,UACJk/B,EAAS,MAAE9yC,GAAQC,EAAAA,EAAAA,OACjB2T,EAEEi/B,QAAc3iC,EAAAA,EAAAA,IAAQ,4BAA6B,CAAC,GACrD2iC,IAEL/2C,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bi3C,UAAW,CACTD,YACAD,UAED7yC,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,UACJk/B,EAAS,MACT9yC,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEVo/B,QAAyB9iC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC,GAE/DpU,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm3C,eAAgB,CACdd,QAAQ,EACRW,YACAE,qBAEDhzC,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,SAAEw3B,EAAQ,MAAEprC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC1CvC,QAAenB,EAAAA,EAAAA,IAAQ,gCAAiCk7B,GAE9DtvC,GAASwL,EAAAA,EAAAA,MAKPxL,EAHGuV,EAEM,UAAWA,GACX+7B,EAAAA,EAAAA,KAActxC,EAAQ,CAAE2S,MAAO,CAAE3R,QAASuU,EAAO5C,MAAOi9B,MAAO,aAAgB1rC,IAE/EotC,EAAAA,EAAAA,KAActxC,EAAQ,CAAEo1C,kBAAmB7/B,EAAQ2gC,KAAMlF,EAAAA,GAAYE,UAAYhtC,IAJjFotC,EAAAA,EAAAA,KAActxC,EAAQ,CAAE2S,MAAO,CAAE3R,QAAS,gBAAiB4uC,MAAO,aAAgB1rC,IAO7FkH,EAAAA,EAAAA,IAAUpL,EAAO,KA2BnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EACxC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,KAAUia,EAAAA,EAAAA,KAAcja,MAASkmB,EAAAA,EAAAA,KAAiBlmB,GAAQ,OAE/DpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,CACVh2C,WAED8C,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/ChR,SAGF,IAAKmS,EAEH,YADApS,EAAQk0C,gBAAgB,CAAEnzC,UAI5BlE,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,CACVh2C,SACAk2C,YAAa/hC,IAEdrR,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMu3C,QAAiBnjC,EAAAA,EAAAA,IAAQ,iBAE/B,IAAKmjC,EAAU,OAEfv3C,GAASwL,EAAAA,EAAAA,MACT,MAAMsC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACnC4J,EAASspC,aAEdp3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,IACPtpC,EAASspC,WACZG,SAAUA,EAASC,SAEpBtzC,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EAExC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEXpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By3C,gBAAiB,CACfr2C,WAED8C,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAO03C,EAAiBC,EACtBC,SAA2B97B,QAAQC,IAAI,EACvC3H,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhR,UAC5BgR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhR,OAAMy0C,SAAS,KAC3CzjC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhR,WAIhC,GADApD,GAASwL,EAAAA,EAAAA,OACJksC,IAAoBC,IAAwBC,EAK/C,OAJA53C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By3C,qBAAiBlyC,GAChBrB,QACHkH,EAAAA,EAAAA,IAAUpL,GAIZA,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By3C,gBAAiB,CACfr2C,SACAk2C,YAAaM,EACbl3B,WAAYg3B,EAAgBh3B,WAC5B82B,OAAQ,CACN/hC,MAAOiiC,EAAgBjiC,MACvBqiC,KAAMJ,EAAgBK,WAExBC,aAAc,CACZviC,MAAOkiC,GAAqBliC,MAC5BqiC,KAAMH,GAAqBI,aAG9B7zC,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,GAEjCnQ,EAAAA,EAAAA,KAAW3H,EAAQoB,KAGhCpB,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bi4C,uBAAwB,CACtB72C,WAED8C,IACHkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,QAAE+/B,EAAO,MAAE3zC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC3D,IAAIhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACtC,IAAK4J,EAAS2pC,gBAAiB,OAE/B,MAAMr0C,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ8N,EAAS2pC,gBAAgBr2C,QACzD,IAAKgC,EAAM,OAEXpD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By3C,gBAAiB,IACZ3pC,EAAS2pC,gBACZS,mBAAmB,IAEpBh0C,IACHkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7ChR,OACA+c,OAAQrS,EAAS2pC,gBAAgB/2B,WACjCm3B,YAEF,IAAKtiC,EAAQ,OAKb,GAHAvV,GAASwL,EAAAA,EAAAA,MAETsC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,IAC7B4J,EAAS2pC,gBAAiB,OAE/B,MAAMU,GAAoBN,EACtB/pC,EAAS2pC,gBAAgBO,cAAcF,MAAQ,GAC/ChqC,EAAS2pC,gBAAgBD,QAAQM,MAAQ,IAAItnC,OAAO+E,EAAOwiC,WAE/D/3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By3C,gBAAiB,IACZ3pC,EAAS2pC,gBACZ/2B,WAAYnL,EAAOmL,WACnBw3B,mBAAmB,EACnB,CAACL,EAAU,eAAiB,UAAW,CACrCpiC,MAAOF,EAAOE,MACdqiC,KAAMK,KAGTj0C,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,cAAcqH,MAAOxT,EAAQmD,EAAS2U,KACrD,MAAM,OAAE1W,EAAM,MAAEg3C,EAAK,MAAEl0C,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE/C1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMi1C,GAAkB18B,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC7Ck3C,EAAmBD,GAAiBE,eAAiB,EAErDC,EAAqBJ,EAAMv2C,OAEjC,IAAIiM,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACtC,MAAMu0C,EAAY3qC,EAASspC,YAAYE,YAEvC,GAAImB,EAAW,CACb,MAAMC,EAAiBD,EAAUE,gBAAkBF,EAAUE,gBAAkBF,EAAUG,mBAAqB,EACxGC,EAAYJ,EAAUjB,OAASgB,EAC/BM,EAAYL,EAAUE,iBAAmBE,GAAaJ,EAAUE,gBAChEI,EAAwBD,EAAYL,EAAUE,gBAAmBF,EAAUG,mBAC3EI,EAAqBF,EAAYL,EAAUE,gBAAmBD,EAAiBD,EAAUE,gBAE/F34C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,IACPtpC,EAASspC,WACZE,YAAa,IACRmB,EACHQ,MAAOH,EAAYL,EAAUQ,MAAQ,EAAIR,EAAUQ,MACnDL,mBAAoBG,EACpBJ,gBAAiBK,EACjBE,YAAY,EACZ1B,OAAQqB,KAGX30C,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAEAA,GAASwL,EAAAA,EAAAA,MACTsC,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAClC,MAAMi1C,EAAcrrC,EAASspC,YAAYG,SAEzC,GAAI4B,EAAa,CACf,MAAMC,EAAUz4C,KAAK8B,MAAMC,KAAKC,MAAQ,KAClC02C,EAAcF,EAAYzqC,KAAK4qC,GAC/BlB,EAAM9zC,SAASg1C,EAAMC,MAChB,IACFD,EACHl4C,SACA8S,KAAMklC,EACNI,cAAeJ,EA/wBI,OAkxBhBE,IAGTt5C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,IACPtpC,EAASspC,WACZG,SAAU8B,IAEXn1C,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAEA,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,aAAc,CACzCgkC,QACAh1C,SAKF,GAFApD,GAASwL,EAAAA,EAAAA,MAEJ+J,EAgBLzH,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAC9Bm0C,IACFr4C,GAASyiB,EAAAA,EAAAA,KAAmBziB,EAAQoB,EAAQ,CAC1Cm3C,cAAeD,EAAmBF,EAAMv2C,UAIxCiM,EAASspC,aACXp3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,IACPtpC,EAASspC,WACZG,SAAUhiC,EAAOiiC,SAElBtzC,KAELkH,EAAAA,EAAAA,IAAUpL,OA/BV,CAEE,MAAMo3C,GAAal3C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOkzC,WAC7CA,IACFp3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bo3C,WAAY,IACPA,EACHE,YAAamB,EACblB,SAAU4B,IAEXj1C,IACHkH,EAAAA,EAAAA,IAAUpL,GAGd,CAiBiB,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,KAAE2hC,EAAI,QAAEz4C,EAAO,MAAEkD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE/CvC,QAAenB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CqlC,SAGGlkC,GAQLvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B05C,cAAe,CACbD,OACAE,KAAMpkC,EAAOk6B,KACbzuC,YAEDkD,IACHkH,EAAAA,EAAAA,IAAUpL,IAfRmD,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,yBACnC3pB,SAaa,KAGnBiI,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,KAAE2hC,EAAI,MAAEv1C,GAAQC,EAAAA,EAAAA,OAAsB2T,QAEvB1D,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CqlC,WAMFt2C,EAAQy2C,gBAAgB,CAAEC,WAAW,EAAM31C,UAC3Cf,EAAQ22C,mBAAmB,CAAE51C,UAAQ,KAGvCiI,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,OACJ1W,EAAM,WAAE24C,EAAU,eAAEC,EAAc,MAAE91C,GAAQC,EAAAA,EAAAA,OAC1C2T,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM62C,EAAqBD,GAAgBE,sBAAsBxrC,KAAKnM,IAAOoF,EAAAA,EAAAA,KAAW3H,EAAQuC,KAAKT,OAAOqW,eAEvF/D,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhR,OACA22C,aACAC,eAAgB,CACd33C,KAAM,WACNe,OACA+2C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBC,OAAQR,EAAeQ,WAQ3Br3C,EAAQs3C,oBAAoB,CAAEr5C,SAAQ8C,SAAQ,KAGhDiI,EAAAA,EAAAA,IAAiB,8BAA8BqH,MAAOxT,EAAQmD,EAAS2U,KACrE,MAAM,OACJ1W,EAAM,WAAE24C,EAAU,eAAEC,EAAc,MAAE91C,GAAQC,EAAAA,EAAAA,OAC1C2T,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM62C,EAAqBD,GAAgBE,sBAAsBxrC,KAAKnM,IAAOoF,EAAAA,EAAAA,KAAW3H,EAAQuC,KAAKT,OAAOqW,eAEvF/D,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhR,OACA22C,aACAC,eAAgB,CACd33C,KAAM,gBACNe,OACA+2C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBC,OAAQR,EAAeQ,OACvB1I,MAAOkI,EAAelI,MACtB3V,MAAO6d,EAAe7d,UAQ1Bh5B,EAAQs3C,oBAAoB,CAAEr5C,SAAQ8C,SAAQ,KE58BhDiI,EAAAA,EAAAA,IAAiB,kBAAkBqH,UACjC,MAAMknC,EAAgB16C,EAAO8xC,MACvB6I,GAAqBD,GAAeE,cAEnCnJ,EAAQmJ,SAAsB9+B,QAAQC,IAAI,EAC/C3H,EAAAA,EAAAA,IAAQ,oBACRumC,GAAoBvmC,EAAAA,EAAAA,IAAQ,+BAA4B7O,KAGrDksC,GAAWkJ,IAAsBC,IAItC56C,GAASwL,EAAAA,EAAAA,MAETxL,EAAS,IACJA,EACH8xC,MAAO,IACF4I,EACH7I,QAASJ,EAAOI,QAChB+I,aAAcA,GAAgBF,EAAeE,aAC7CC,QAAS,CACP9+B,SAAKxW,EACLu1C,aAASv1C,EACTw1C,cAAUx1C,GAEZy1C,mBAAez1C,IAIfksC,EAAOoJ,UACT76C,GAASi7C,EAAAA,EAAAA,KAAwBj7C,EAAQ,MAAOyxC,EAAOoJ,QAASpJ,EAAOyJ,oBAGrEzJ,EAAOuJ,gBACTh7C,GAASm7C,EAAAA,EAAAA,KAAyBn7C,EAAQyxC,EAAOuJ,cAAevJ,EAAO2J,0BAGzEhwC,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,KAAEzV,GAASyV,EAEX+iC,EAAU76C,EAAO8xC,OAAO+I,QAAQx4C,GAChC8d,EAAS06B,GAASn6B,WACxB,GAAIm6B,IAAY16B,EAAQ,OAExB,MAAM5K,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDinC,UAAoB,YAATh5C,QAAsBkD,EACjC+1C,WAAqB,aAATj5C,QAAuBkD,EACnC4a,OAAQA,GAAU,KAGf5K,IAILvV,GAASwL,EAAAA,EAAAA,MAETxL,GAASu7C,EAAAA,EAAAA,KAAmBv7C,EAAQuV,EAAOs8B,SACvCt8B,EAAOslC,UACT76C,GAASi7C,EAAAA,EAAAA,KAAwBj7C,EAAQqC,EAAMkT,EAAOslC,QAAStlC,EAAOmL,cAExEtV,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,UAChC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,kBAE7B,IAAKmB,EACH,OAGF,MAAM,MAAEwhC,EAAK,SAAEhtB,GAAaxU,EAEtBimC,GAAgBzsC,EAAAA,EAAAA,IAAqBgoC,EAAO,MAE5C0E,EAA+D,CACnE1/B,IAAK,GACL2/B,QAAS,IAGLC,EAAiBzzC,OAAOsG,KAAKgtC,GAC7BI,EAAe1zC,OAAOC,OAAOqzC,GAE7BK,EAAqBD,EAAaltC,KACrCijC,GACQA,EAAKmK,UAAYnK,EAAKpvC,QAAKgD,IAEpCzD,OAAOqW,SAETsjC,EAAyB1/B,IAAM4/B,EAC/BF,EAAyBC,QAAUG,EAEnCD,EAAaz5C,SAASwvC,IACpB,MAAMoK,EAAgBpK,EAAKG,MACtB2J,EAAyBM,KAC5BN,EAAyBM,GAAiB,IAE5CN,EAAyBM,GAAelwC,KAAK8lC,EAAKpvC,GAAG,IAGvDvC,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHw7C,gBACAC,2BACA1xB,SAAU,IACL/pB,EAAO+pB,SACViyB,UAAW,CACTjyB,eAIN3e,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,OAAEkE,EAAM,cAAEigC,GAAkBnkC,EAE5BjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAChC,IAAKnI,EAAM,OAEX,MAAMqoC,EAAel8C,EAAOm8B,MAAMggB,UAAUngC,GACtCogC,EAAkBF,GAAcx7B,WAEtC,IAAKu7B,GAAiBC,IAAiBE,EAAiB,OAExD,MAAM7mC,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDP,OACAsM,OAAS87B,EAAkC,GAAlBG,IAG3B,IAAK7mC,EACH,OAGFvV,GAASwL,EAAAA,EAAAA,MAET,MAAM6wC,EAAWH,IAAiBD,EAAgBC,EAAanF,MAAMvmC,OAAO+E,EAAOwhC,OAASxhC,EAAOwhC,MAEnG/2C,EAAS,IACJA,EACHm8B,MAAO,IACFn8B,EAAOm8B,MACVggB,UAAW,IACNn8C,EAAOm8B,MAAMggB,UAChB,CAACngC,GAAS,CACR+6B,MAAOsF,EACP37B,WAAYnL,EAAOmL,gBAK3BtV,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,UACzC,MAAMwnC,EAAgBh7C,EAAO8xC,OAAOkJ,cAC9B76B,EAAS66B,GAAet6B,WAC9B,GAAIs6B,IAAkB76B,EAAQ,OAE9B,MAAM5K,QAAenB,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD+L,OAAQA,GAAU,KAGf5K,IAILvV,GAASwL,EAAAA,EAAAA,MAETxL,GAASu7C,EAAAA,EAAAA,KAAmBv7C,EAAQuV,EAAOs8B,SAC3C7xC,GAASm7C,EAAAA,EAAAA,KAAyBn7C,EAAQuV,EAAOylC,cAAezlC,EAAOmL,aACvEtV,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,OAAE7V,EAAM,GAAEM,EAAE,YAAE+5C,GAAgBxkC,EAE9ByG,EAAOtc,GAASsd,EAAAA,EAAAA,KAAWvf,EAAQiC,QAAUsD,EAE/CtD,IAAWsc,UAETnK,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCmK,OACAg+B,eAAgBh6C,EAChB+5C,gBAGFn5C,EAAQ8yC,iBAAgB,KAG1B9pC,EAAAA,EAAAA,IAAiB,4BAA4BqH,MAAOxT,EAAQmD,EAAS2U,KACnE,MAAM,OAAE7V,EAAM,GAAEM,GAAOuV,EAEjByG,EAAOtc,GAASsd,EAAAA,EAAAA,KAAWvf,EAAQiC,QAAUsD,EAE/CtD,IAAWsc,UAETnK,EAAAA,EAAAA,IAAQ,2BAA4B,CACxCmK,OACAg+B,eAAgBh6C,IAGlBY,EAAQ8yC,iBAAgB,KAG1B9pC,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OAAEkE,EAAM,UAAE3U,EAAS,aAAEmmB,GAAiB1V,EAEtCjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAC3BnI,SAEgBO,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CP,OACAxM,YACAmmB,kBAOFrqB,EAAQq5C,cAAc,CAAExgC,OAAQhc,EAAOkC,cAAgB+5C,eAAe,GAAO,KAG/E9vC,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAEkE,EAAM,UAAE3U,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEnDjE,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAC3BnI,SAEgBO,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CP,OACAxM,gBAOFlE,EAAQq5C,cAAc,CAAExgC,OAAQhc,EAAOkC,cAAgB+5C,eAAe,IACtE94C,EAAQ4uC,sBAAsB,CAAE7tC,UAAQ,I,gBC7N1C,IAAIu4C,GAAqB,GAEzBtwC,EAAAA,EAAAA,IAAiB,0BAA0BqH,UACzC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,2BACxBmB,IAKLA,EAAOpT,SAASu6C,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBp6C,KAAMs6C,EAAAA,GAAeC,SAEjFJ,EAAkBK,YACpBH,GAAAA,GAAmB,UAASF,EAAkBK,WAAWx6C,KAAMs6C,EAAAA,GAAeC,SAE5EJ,EAAkBM,iBACpBJ,GAAAA,GAAmB,UAASF,EAAkBM,gBAAgBz6C,KAAMs6C,EAAAA,GAAeC,SAEjFJ,EAAkBO,iBACpBL,GAAAA,IAAkBM,EAAAA,EAAAA,KAAqBR,EAAkBO,gBAAiB,QAAUJ,EAAAA,GAAeC,QACrG,IAGF98C,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACV67C,mBAAoB5nC,KAGxBnK,EAAAA,EAAAA,IAAUpL,IAEVmuC,EAAAA,GAAAA,GAAqB,CACnB1jC,OAAQ,yBACRqN,aAASvS,GACR6oC,EAAAA,KAAyB,KAG9BjiC,EAAAA,EAAAA,IAAiB,wBAAwBqH,UACvC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,yBAC7B,IAAKmB,EACH,OAGF,MAAM,QAAEsX,EAAO,OAAED,EAAM,SAAE7C,GAAaxU,EAChCjU,EAA+B,GAE/B87C,GAAaruC,EAAAA,EAAAA,IAAqB8d,EAAS,MAEjD,IAAK,MAAMwwB,KAAUxwB,EACnB,GAAIwwB,EAAOC,kBAAmB,CAC5B,MAAMl7C,EAA6B,CACjCC,KAAM,QACNk7C,SAAUF,EAAOE,UAEnBj8C,EAAUuK,KAAKzJ,EACjB,CAGFpC,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHw9C,oBAAqBJ,EACrBrzB,SAAU,IACL/pB,EAAO+pB,SACVszB,OAAQ,CACNtzB,WACA6C,WAGJtrB,UAAW,IACNtB,EAAOsB,UACVm8C,gBAAiBn8C,KAGrB8J,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MACJjK,EAAK,EAAE5N,EAAC,EAAEy9C,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAE15C,GAAQC,EAAAA,EAAAA,OAC1C2T,EAEE+lC,EAAyB,CAC7Bt7C,GAAIk6C,KACJvuC,eAAgBL,EAChB5N,EAAGF,EAA6BC,EAAQC,GA1FV,GA0FeU,KAAKsN,SAClB6vC,GAChCJ,EAAGA,EA5F2B,GA4FvB/8C,KAAKsN,SAAuC6vC,GACnDH,YACAC,cAGF,OAAO7vC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,wBAAyB,KAAK9N,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO8J,yBAA2B,GAAK6vC,IAC3F35C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,UACJzQ,EAAS,OAAEjG,EAAM,MAAEyM,EAAK,aAAEkwC,GACxBjmC,EACJ,GAA+B,yBAA3B9X,EAAOof,gBAA4C,OAEvD,MAAMhc,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE3BgC,GAASyK,KAAS1M,EAAAA,EAAAA,KAAqBnB,EAAQoB,KAI/CgT,EAAAA,EAAAA,IAAQ,uBAAwB,CACnChR,OACAiE,YACAk2C,SAAU1vC,EACVmwC,WAAYD,GACZ,KAGJ5xC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OACzB2T,EACE1V,GAAW67C,EAAAA,EAAAA,KAAsBj+C,EAAQoB,GACzCJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAE7CjF,GAAapB,KAAW8H,EAAAA,EAAAA,KAAe9H,IAE5CmC,EAAQ+6C,eAAe,CACrB98C,SACAiG,YACAjF,WACA8B,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OACJ1W,EAAM,SACNgB,EAAQ,kBACR+7C,EAAiB,MACjBj6C,GAAQC,EAAAA,EAAAA,OACN2T,EACJ,IAAI,UAAEzQ,GAAcyQ,EAEpB,MAAM1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAIJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAEhD,IAAKjE,IAASpC,EACZ,OAGF,MAAMo9C,GAAYj9C,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAEzCi9C,EAAoBlmC,QAAQnX,EAAQ+Z,aAAe/Z,EAAQs9C,UAC3DC,EAA8BF,GAChCG,EAAAA,EAAAA,KAA0Bx+C,EAAQoB,EAAQJ,EAAQ+Z,WAAa,QAC/DxV,EACJvE,EAAUq9C,IACNv5C,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQm9C,IAClCv9C,EACJqG,EAAYrG,GAASuB,IAAM8E,EAE3B,MAAMpG,GAAgBw9C,EAAAA,EAAAA,KAAiBz9C,GACjC09C,EAAcz9C,EAAco6B,MAAMsjB,IAAiB7qB,EAAAA,EAAAA,KAAe6qB,EAAcv8C,KAEhFw8C,EAAmBF,EACrBz9C,EAAca,QAAQ68C,KAAkB7qB,EAAAA,EAAAA,KAAe6qB,EAAcv8C,KAAa,IAAInB,EAAemB,GAEnGoT,GAAQqpC,EAAAA,EAAAA,KAAuB7+C,IAC9B8+C,EAAeC,IAAoBv9B,EAAAA,EAAAA,IAAUo9B,GAAmBn7C,GAAiB,SAAXA,EAAEpB,OACzE28C,EAA0BD,EAAiBjoC,OAAOtB,GAClDypC,EAAiB,IAAIH,KAAkBE,GACvCl7C,GAAaC,EAAAA,EAAAA,IAAc/C,IAE7B6C,EAAAA,EAAAA,KAA+B7D,EAAQ,qBACrC0+C,EACFv7C,EAAQ+7C,mBAAmB,CAAEj7C,YAAaH,EAAY1B,WAAU8B,UAEhEf,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY1B,WAAU8B,WAIrElE,EAASe,EAAmBf,EAAQgB,EAASi+C,IAC7C7zC,EAAAA,EAAAA,IAAUpL,GAEV,UACQoU,EAAAA,EAAAA,IAAQ,eAAgB,CAC5BhR,OACAiE,YACA/F,UAAW09C,EACXb,sBAGEC,GACFj7C,EAAQg8C,uBAEZ,CAAE,MAAOxsC,GAEP3S,EAASe,EADTf,GAASwL,EAAAA,EAAAA,MAC2BxK,EAASC,IAC7CmK,EAAAA,EAAAA,IAAUpL,EACZ,MAGFmM,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,MAAEoO,EAAK,UAAEurB,EAAS,MAAE98B,GAAQC,EAAAA,EAAAA,OAC3C2T,EACE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAElD,IAAKjE,IAASpC,EACZ,OAGF,MAAMK,EAAmBL,EAAQM,WAAWC,SAAW,GACjD69C,GAAez7C,EAAAA,EAAAA,KAAgBtC,EAAkBoU,EAAOurB,GAC9DhhC,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQgB,EAAQI,OAAQJ,EAAQuB,GAAI,CAC7DjB,UAAW,IACND,EACHE,QAAS69C,MAGbh0C,EAAAA,EAAAA,IAAUpL,GAEV,MAAM8D,GAAaC,EAAAA,EAAAA,IAAc/C,IAC7B6C,EAAAA,EAAAA,KAA+B7D,EAAQ,oBACzCmD,EAAQa,oBAAoB,CAC1BC,YAAaH,EACb1B,SAAU,CACRC,KAAM,QAER6B,SAEJ,KAGFiI,EAAAA,EAAAA,IAAiB,oBAAoBqH,MAAOxT,EAAQmD,EAAS2U,KAC3D,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,aAAEg4C,EAAY,MAAEn7C,GAAQC,EAAAA,EAAAA,OACvC2T,EACE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAElD,IAAKjE,IAASpC,EACZ,OAGF,MAAMs+C,EAAet+C,EAAQM,WAAWC,SAASiC,MAAMC,GAA0B,SAApBA,EAAErB,SAASC,OAClEoT,EAAQ4pC,GAAgBC,GAAc57C,aAAe,EAC3D,GAAK+R,EAAL,CAGAtS,EAAQo8C,wBAAwB,CAAEn+C,SAAQiG,cAE1C,UACQ+M,EAAAA,EAAAA,IAAQ,mBAAoB,CAChChR,OACAiE,YACAoO,QACAurB,UAAWse,GAAcE,gBAE7B,CAAE,MAAO7sC,GAC6B,oBAA/BA,EAAmB3R,SACtBmC,EAAQ4uC,sBAAsB,CAAE0N,eAAgB,CAAEr+C,SAAQiG,YAAWmzC,OAAQ/kC,GAASvR,SAE1F,CAdA,CAcA,KAGFiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,YAAE7T,EAAW,SAAE7B,EAAQ,MAAE8B,GAAQC,EAAAA,EAAAA,OAAsB2T,EACvDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,KAAKL,EAAAA,EAAAA,KAA+B7D,EAAQ,mBAAoB,OAEhE,MAAM0/C,EAAyB5xC,EAAS6xC,gBAAgB17C,IAAgB,GACxE,GAAIy7C,EAAuBrkB,MAAMukB,IAAW9rB,EAAAA,EAAAA,KAAe8rB,EAAQx9C,KACjE,OAGF,MAAMy9C,EAAqBH,EAAuBlvC,OAAOpO,GAEzD,OAAO2L,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2/C,gBAAiB,IACZ7xC,EAAS6xC,gBACZ,CAAC17C,GAAc47C,IAEhB37C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,YAAE7T,EAAW,SAAE7B,EAAQ,MAAE8B,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEvDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAElCw7C,EAAyB5xC,EAAS6xC,gBAAgB17C,IAAgB,GAElE67C,EAA4B19C,EAC9Bs9C,EAAuB59C,QAAQ89C,KAAY9rB,EAAAA,EAAAA,KAAe8rB,EAAQx9C,KAAa,GAE7Ey9C,EAAqBC,EAA0Bj+C,OAAS,IACzDiM,EAAS6xC,gBACZ,CAAC17C,GAAc67C,IACbvwC,EAAAA,EAAAA,IAAKzB,EAAS6xC,gBAAiB,CAAC17C,IAEpC,OAAO8J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2/C,gBAAiBE,GAChB37C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,SAAE1V,GAAa0V,QAEA1D,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEhS,gBAKrDpC,GAASwL,EAAAA,EAAAA,OAEGiZ,QAKZzkB,EAAS,IACJA,EACHykB,OAAQ,IACHzkB,EAAOykB,OACVs7B,gBAAiB39C,KAGrBgJ,EAAAA,EAAAA,IAAUpL,IAXRmD,EAAQ68C,aAWO,KAGnB7zC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,GAAEvV,EAAE,MAAE2B,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE1C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,yBAAyB9N,EAAAA,EAAAA,KAAeF,EAAQkE,GAC7C8J,yBAAyBlM,QAAQ89C,GAAWA,EAAOr9C,KAAOA,KAC5D2B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gBAAgBqH,MAAOxT,EAAQmD,EAAS2U,KACvD,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,SAAEjF,GAAa0V,EAClC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKjE,IAASpC,EACZ,OAGF,MAAMmf,EAASnf,EAAQi/C,UAAUv/B,WAC3BnL,QAAenB,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDhS,WACAgB,OACAiE,YACA8Y,WAGG5K,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4C,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CACpD44C,SAAU1qC,KAEZnK,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,IAAE3N,EAAG,OAAE/I,GAAW0W,EAElB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE3BgC,GAAmC,yBAA3BpD,EAAOof,kBAIpBhL,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEjK,MAAK/G,QAAO,KAGjD+I,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQmD,EAAS2U,KACjE,MAAM,OACJ1W,EAAM,SAAEm8C,EAAQ,EAAEt9C,EAAC,EAAEy9C,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAEr7C,EAAE,MAAE2B,GAAQC,EAAAA,EAAAA,OACzD2T,EAEE1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE1B0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAKd,GAAS0K,EAASE,yBAAyBqtB,MAAM6kB,GAAgBA,EAAY39C,KAAOA,OACpFpB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAQlC,MAJ+B,yBAA3BpB,EAAOof,kBACThL,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEhR,OAAMm6C,cAG3CxvC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgO,wBAAyBF,EAASE,wBAAwBU,KAAKmvC,GACzDA,EAAuBt7C,KAAOA,EACzB,IACFs7C,EACH59C,EAAGF,EAA6BC,EAAQC,GACxCy9C,IACAC,YACAC,cAGGC,KAER35C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OAAE1W,EAAM,SAAEiT,GAAayD,EACvB1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMmS,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEhR,OAAMiR,WAAUQ,UAAWR,GAAY,OAAI9O,IAGlG,IAAKgQ,IAAWA,EAAOxF,SAASlO,OAO9B,OALA7B,EAAS6C,EADT7C,GAASwL,EAAAA,EAAAA,MAC8BpK,EAAQ,CAC7CqD,qBAAsB,SAGxB2G,EAAAA,EAAAA,IAAUpL,GAIZ,MAAM,SAAE+P,GAAawF,EAEfjM,GAAOyF,EAAAA,EAAAA,IAAqBgB,EAAU,MACtC5F,EAAMjC,OAAOsG,KAAKlF,GAAMoF,IAAIzD,QAElCjL,GAASwL,EAAAA,EAAAA,MAETxL,EAAS6C,EADT7C,GAAS8V,EAAAA,EAAAA,KAAoB9V,EAAQoD,EAAKb,GAAI+G,GACPlI,EAAQ,CAC7CiD,iBAAiB6H,EAAAA,EAAAA,IAAO,IAAK9I,EAAKiB,iBAAmB,MAAQ8F,IAAMzF,MAAK,CAACC,EAAGC,IAAMA,EAAID,OAGxFyG,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,WAAElJ,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACvC,IAAKd,EAAM,OAEX,IAAKA,EAAKqB,qBACR,OAAO5B,EAAsB7C,EAAQoD,EAAKb,GAAI,CAC5C8B,gBAAiB,KAIrB,MAAMI,EAAuB9D,KAAKE,IAAIuC,EAAKqB,qBAAuBmK,EAAW/M,OAAQ,GAC/EwC,GAAmBjB,EAAKiB,iBAAmB,IAAIvC,QAAQS,IAAQqM,EAAWtK,SAAS/B,KAEzFvC,EAAS6C,EAAsB7C,EAAQoD,EAAKb,GAAI,CAC9C8B,kBACAI,0BAGF2G,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQwgB,iBAAiB,CAAE/U,aAAYiR,4BAA4B,EAAM3b,WAEpEL,EAAAA,EAAAA,KAA+B7D,EAAQ,qBAE5CA,GAASwL,EAAAA,EAAAA,MAEToD,EAAWzM,SAASI,IAClB,MAAMvB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKb,GAAIA,GACnD,IAAKvB,EAAS,OAEd,MAAM,SAAEoB,EAAQ,MAAEJ,EAAK,SAAE4B,GAAa5C,EAAQM,WAAWM,kBAAkB,IAAM,CAAC,EAClF,GAAIQ,GAAYwB,IAAa5B,EAAO,CAClC,MAAM8B,GAAaC,EAAAA,EAAAA,IAAc/C,GACjCmC,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY1B,WAAU8B,OAAOC,EAAAA,EAAAA,OAC1E,KAGc,KAGlBgI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAEvC,IAAKd,GAAMiB,gBACT,OAAIjB,GAAMqB,sBACD1B,EAAAA,EAAAA,KAAW/C,EAAQoD,EAAKb,GAAI,CACjCkC,qBAAsB,SAG1B,EAGFtB,EAAQ8J,aAAa,CACnB7L,OAAQgC,EAAKb,GAAI8E,UAAWjE,EAAKiB,gBAAgB,GAAIH,QAAOi8C,qBAAsB,QAEpFh9C,EAAQwgB,iBAAiB,CAAE/U,WAAY,CAACxL,EAAKiB,gBAAgB,IAAKH,SAClD,KAGlBiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GACvC,GAAKd,EAIL,OAFAgR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhR,SAEvBP,EAAsB7C,EAAQoD,EAAKb,GAAI,CAC5CkC,0BAAsBc,EACtBlB,qBAAiBkB,GACjB,KAGJ4G,EAAAA,EAAAA,IAAiB,oBAAoBqH,UACnC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDyV,KAAM7pB,EAAOsB,UAAUuoB,KAAKu2B,eAEzB7qC,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACV8+C,aAAc7qC,EAAOjU,UACrBuoB,KAAM,IACD7pB,EAAOsB,UAAUuoB,KACpBu2B,aAAc7qC,EAAOsU,SAI3Bze,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuBqH,UACtC,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDyV,KAAM7pB,EAAOsB,UAAUuoB,KAAKjoB,kBAEzB2T,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB2T,EAAOjU,UACxBuoB,KAAM,IACD7pB,EAAOsB,UAAUuoB,KACpBjoB,gBAAiB2T,EAAOsU,SAI9Bze,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,gBAClBY,EAAAA,EAAAA,IAAQ,0BAK7BpU,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB,MAGrBwJ,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2BqH,UAC1C,MAAM+B,QAAenB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDyV,KAAM7pB,EAAOsB,UAAUuoB,KAAKw2B,cAEzB9qC,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACV++C,YAAa9qC,EAAOjU,UACpBuoB,KAAM,IACD7pB,EAAOsB,UAAUuoB,KACpBw2B,YAAa9qC,EAAOsU,SAI1Bze,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,UACxC,MAAM,KAAEqW,GAAS7pB,EAAOsgD,mBAAqB,CAAC,EAExC/qC,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEyV,SACzD,IAAKtU,EACH,OAGFvV,GAASwL,EAAAA,EAAAA,MAET,MAAM+0C,GAAYC,EAAAA,EAAAA,IAA0BjrC,EAAOkrC,MAAOC,GAAS,EAACC,EAAAA,EAAAA,KAAeD,EAAIt+C,UAAWs+C,KAElG1gD,EAAS,IACJA,EACHsgD,kBAAmB,CACjBz2B,KAAMtU,EAAOsU,KACbmjB,MAAOuT,KAGXn1C,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,SAAE1V,EAAQ,MAAE4c,GAAUlH,EAI5B,UAFqB1D,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhS,WAAU4c,UAGjE,OAGFhf,GAASwL,EAAAA,EAAAA,MACT,MAAM+0C,EAAYvgD,EAAOsgD,mBAAmBtT,MAC5C,IAAKuT,EAAW,OAEhB,MAAMne,GAAMue,EAAAA,EAAAA,KAAev+C,GAGrBw+C,EAAS,IAFHL,EAAUne,GAIpBpjB,SAGFhf,EAAS,IACJA,EACHsgD,kBAAmB,IACdtgD,EAAOsgD,kBACVtT,MAAO,IACFuT,EACH,CAACne,GAAMwe,MAIbx1C,EAAAA,EAAAA,IAAUpL,EAAO,KCzqBnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,QAAEy/C,EAAO,MAAE38C,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjD1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BilB,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKgC,IAASijB,EACZ,OAGF,MAAM9Q,QAAenB,EAAAA,EAAAA,IACnBysC,EAAU,uBAAyB,yBACnC,CAAEz9C,OAAM09C,KAAMz6B,EAAS06B,iBAEzB,IAAKxrC,EACH,OAGF,MAAM,MAAEyrC,GAAUzrC,EAClBvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASihD,EAAAA,EAAAA,KAAiBjhD,EAAQoB,EAAQ4/C,EAAO98C,IACjDkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qCAAqCqH,MAAOxT,EAAQmD,EAAS2U,KAC5E,MAAM,OACJ7V,EAAM,MAAEiC,GAAQC,EAAAA,EAAAA,OACd2T,EACEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1ByZ,GAAeC,EAAAA,EAAAA,KAAmB3b,EAAQiC,GAChD,IAAKsc,EACH,OAGF,MAAMuiC,EAAOplC,GAAcqlC,eACrBC,QAAc5sC,EAAAA,EAAAA,IAAQ,qCAAsC,CAAEmK,OAAMuiC,SAErEE,IAILhhD,GAASwL,EAAAA,EAAAA,MACTxL,GAASkhD,EAAAA,EAAAA,KAAoClhD,EAAQghD,EAAO98C,IAC5DkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,yBAAyBqH,MAAOxT,EAAQmD,EAAS2U,KAChE,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EACnD1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BilB,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKgC,IAASijB,EACZ,OAGF,MAAMy6B,EAAOz6B,EAAS06B,eACtB,IAAIxrC,QAAenB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhR,OAAMiE,YAAWy5C,SACnEvrC,IACHA,EAAS,CAAC,GAGZvV,GAASwL,EAAAA,EAAAA,MAET,MAAM,WACJ6c,EAAU,cACVE,EAAa,UACbjnB,IACE0I,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAAQiG,IAAc,CAAC,EACtDkO,EAAO8S,WAAaA,EACpB9S,EAAOgT,cAAgBA,EACvBhT,EAAO4rC,eAAiB7/C,GAAWC,QAC/BD,GAAWC,QAAQ6Y,QAAO,CAACC,EAAKjY,IAAaiY,EAAMjY,EAASqT,OAAO,QACnElQ,EAEJvF,GAASohD,EAAAA,EAAAA,KAAwBphD,EAAQuV,EAAQrR,IACjDkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQk+C,0BAA0B,CAChCjgD,SACAiG,YACAnD,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,6BAA6BqH,MAAOxT,EAAQmD,EAAS2U,KACpE,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EACnD1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BilB,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKgC,IAASijB,EACZ,OAGF,MAAMy6B,EAAOz6B,EAAS06B,eAChBC,GAAQ9gD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo9C,WAAW97C,gBAAkB,CAAC,EAE1E,GAAIw7C,GAAOO,iBAAmBP,EAAMtgC,WAAY,OAEhD,MAAM6gC,QAAuBntC,EAAAA,EAAAA,IAAQ,6BAA8B,CACjEhR,OAAMiE,YAAWy5C,OAAM3gC,OAAQ6gC,EAAMtgC,cAEjC,SACJ8H,EAAQ,WACR9H,EAAU,MACVjL,GACE8rC,GAAkB,CAAC,EAGjBC,EAAyBR,EAAMS,oBAAoB5/C,QAAU2mB,GAAU3mB,SACxEyB,EAAAA,EAAAA,GAAa09C,EAAMS,mBAAmBT,EAAMS,mBAAmB5/C,OAAS,GAAI2mB,EAAS,IAE1FxoB,GAASwL,EAAAA,EAAAA,MACTxL,GAASohD,EAAAA,EAAAA,KAAwBphD,EAAQ,IACpCghD,EACHO,eAAgB9rC,GAAS+S,GAAU3mB,OACnC4/C,oBAAqBT,EAAMS,oBAAsB,IAAIjxC,OACnDgxC,EAAyBh5B,EAAS1R,MAAM,GAAM0R,GAAY,IAE5D9H,cACCxc,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,4BAA4BqH,MAAOxT,EAAQmD,EAAS2U,KACnE,MAAM,OACJ1W,EAAM,MAAEuzC,EAAK,KAAElG,EAAI,aAAEiT,EAAY,MAAEx9C,GAAQC,EAAAA,EAAAA,OACzC2T,EACEuO,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKilB,EACH,OAGF,MAAMy6B,EAAOz6B,EAAS06B,eAChBxrC,QAAenB,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEugC,QAAOmM,OAAMY,iBAEpEnsC,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS2hD,EAAAA,EAAAA,KAAsB3hD,EAAQoB,EAAQqtC,EAAMl5B,EAAQrR,IAC7DkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,OAAE1W,EAAM,QAAEyL,EAAO,MAAE3I,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjD1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BilB,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKgC,IAASijB,EACZ,OAGF,MAAMy6B,EAAOz6B,EAAS06B,eACtB,IAAIxrC,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEhR,OAAMyJ,UAASi0C,SAC/DvrC,IACHA,EAAS,CAAC,GAEZvV,GAASwL,EAAAA,EAAAA,MAET,MAAMqb,GAAQC,EAAAA,EAAAA,KAAgB9mB,EAAQoB,EAAQyL,IACxC,cACJ0b,EAAgB,EAAC,WACjBF,EAAa,EAAC,eACd84B,EAAiB,GACft6B,GAAS,UAAWA,GAASA,EAAMyB,MAAQzB,EAAMyB,MAAQ,CAAC,EAC9D/S,EAAO8S,WAAaA,EACpB9S,EAAOgT,cAAgBA,EACvBhT,EAAO4rC,eAAiBA,EACxBnhD,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4hD,EAAAA,EAAAA,KAAsB5hD,EAAQuV,EAAQrR,IAC/CkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ0+C,wBAAwB,CAC9BzgD,SACAyL,UACA3I,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,2BAA2BqH,MAAOxT,EAAQmD,EAAS2U,KAClE,MAAM,OAAE1W,EAAM,QAAEyL,EAAO,MAAE3I,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjD1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BilB,GAAW1K,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC5C,IAAKgC,IAASijB,EACZ,OAGF,MAAMy6B,EAAOz6B,EAAS06B,eAChBC,GAAQ9gD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo9C,WAAWQ,cAAgB,CAAC,EAExE,GAAId,GAAOO,iBAAmBP,EAAMtgC,WAAY,OAEhD,MAAM,eACJ6gC,EAAc,MACd9rC,EAAK,WACLiL,SACQtM,EAAAA,EAAAA,IAAQ,2BAA4B,CAC5ChR,OAAMyJ,UAASi0C,OAAM3gC,OAAQ6gC,EAAMtgC,cAC/B,CAAC,EAEP1gB,GAASwL,EAAAA,EAAAA,MACTxL,GAAS4hD,EAAAA,EAAAA,KAAsB5hD,EAAQ,IAClCghD,EACHO,eAAgB9rC,GAAS8rC,GAAgB1/C,OACzC4/C,oBAAqBT,EAAMS,oBAAsB,IAAIjxC,OACnD+wC,GAAkB,IAEpB7gC,cACCxc,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wCAAwCqH,MAAOxT,EAAQmD,EAAS2U,KAC/E,MAAM,OACJ7V,EAAM,gBAAEktC,EAAe,UAAEC,EAAS,MAAElrC,GAAQC,EAAAA,EAAAA,OAC1C2T,EAEJ9X,GAAS+hD,EAAAA,EAAAA,KAAuB/hD,EAAQ,CAAE0uB,WAAW,EAAM/b,WAAOpN,KAClE6F,EAAAA,EAAAA,IAAUpL,GAEV,MAAMue,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,uCAAwC,CAAEmK,OAAM4wB,oBAExE55B,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+hD,EAAAA,EAAAA,KAAuB/hD,EAAQ,CAAE0uB,WAAW,KACrDtjB,EAAAA,EAAAA,IAAUpL,GAENuV,IACF65B,IACAjsC,EAAQklC,QAAQ,CACdtkB,IAAKxO,EAAOwO,IACZC,iBAAiB,EACjB9f,QACA+f,iBAAiB,KAErB,KAGF9X,EAAAA,EAAAA,IAAiB,yBAA0BnM,IAClC+hD,EAAAA,EAAAA,KAAuB/hD,EAAQ,CAAE2S,WAAOpN,OCvOjD4G,EAAAA,EAAAA,IAAiB,kBAAkBqH,UACjC,IAAItO,EAAI,EAER,KAAOlF,EAAOgiD,QAAQC,SAAS,CAC7B,GAAI/8C,KANqB,IAYvB,YALIo0B,EAAAA,KAEFC,QAAQ5mB,MAAM,qDAMlB3S,GAASwL,EAAAA,EAAAA,MACT,MAAM,UAAE02C,EAAS,QAAED,GAAYjiD,EAAOgiD,QACtC,GAAIE,IAAcD,EAChB,OAGF,MAAM1sC,QAAenB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C+tC,gBAAiBD,EACjBA,cAGF,IAAK3sC,EACH,QAGFvV,GAASwL,EAAAA,EAAAA,OACFw2C,QAAQE,UAAY3sC,EAAOg3B,MAE9B,gBAAiBh3B,IACnBvV,GAASoiD,EAAAA,EAAAA,KAAWpiD,EAAQuV,EAAO8sC,aACnCriD,GAASsiD,EAAAA,EAAAA,KAAuBtiD,EAAQuV,EAAO8sC,cAC/CriD,GAASuiD,EAAAA,EAAAA,KAAkBviD,EAAQuV,EAAOitC,cACnCR,QAAQC,QAAU1sC,EAAOktC,UAGlCr3C,EAAAA,EAAAA,IAAUpL,EACZ,MAGFmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,UACvC,IAAItO,EAAI,EAER,KAAOlF,EAAOgiD,QAAQU,kBAAkB,CACtC,GAAIx9C,KAhDqB,IAsDvB,YALIo0B,EAAAA,KAEFC,QAAQ5mB,MAAM,2DAMlB3S,GAASwL,EAAAA,EAAAA,MACT,MAAM,iBAAEm3C,EAAgB,iBAAED,GAAqB1iD,EAAOgiD,QACtD,GAAIW,IAAqBD,EACvB,OAGF,MAAMntC,QAAenB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C+tC,gBAAiBQ,EACjBT,UAAWS,EACXC,UAAU,IAGZ,IAAKrtC,EACH,QAGFvV,GAASwL,EAAAA,EAAAA,OACFw2C,QAAQW,iBAAmBptC,EAAOg3B,MAErC,gBAAiBh3B,IACnBvV,GAASoiD,EAAAA,EAAAA,KAAWpiD,EAAQuV,EAAO8sC,aACnCriD,GAASsiD,EAAAA,EAAAA,KAAuBtiD,EAAQuV,EAAO8sC,cAC/CriD,GAASuiD,EAAAA,EAAAA,KAAkBviD,EAAQuV,EAAOitC,cACnCR,QAAQU,iBAAmBntC,EAAOktC,UAG3Cr3C,EAAAA,EAAAA,IAAUpL,EACZ,MAGFmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,OAAE7V,GAAW6V,EACbyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BogD,GAAcQ,EAAAA,EAAAA,KAAkB7iD,EAAQiC,GAC9C,IAAKsc,IAAS8jC,EACZ,OAEF,MAAMS,EAAkB56C,OAAOC,OAAOk6C,EAAY/4C,MAAM8Q,QAAO,CAACC,EAAKwM,KAC7D,YAAaA,GACjBxM,EAAIxO,KAAKgb,EAAMtkB,IAGV8X,IACN,IAEH,GAA+B,IAA3ByoC,EAAgBjhD,OAClB,OAGF,MAAM0T,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDmK,OACApU,IAAK24C,IAGFvtC,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,QAASzsC,EAAOlF,YAClEjF,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,aAAaqH,MAAOxT,EAAQmD,EAAS2U,KACpD,MAAM,OAAE7V,EAAM,QAAE4K,EAAO,MAAE3I,GAAQC,EAAAA,EAAAA,OAAsB2T,EACjDyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1B4kB,GAAQC,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQ4K,GAC9C,IAAK0R,IAASsI,KAAW,YAAaA,GACpC,OAGF7mB,GAASgjD,EAAAA,EAAAA,KAA6BhjD,EAAQiC,EAAQ4K,EAAS3I,IAC/DkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMijD,GAAa3jB,EAAAA,GAAAA,MAEfzY,EAAM6Q,WAAaurB,GAAcp8B,EAAMq8B,cACpC9uC,EAAAA,EAAAA,IAAQ,YAAa,CAAEmK,OAAM1R,aAGlB7M,EAAOgiD,QAAQmB,SAASlhD,GAAQmhD,YAAc,GAAKv8B,EAAMtkB,UAKtD6R,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CmK,OACA1R,cAOF7M,GAASwL,EAAAA,EAAAA,MACTxL,GAASqjD,EAAAA,EAAAA,KAA2BrjD,EAAQiC,EAAQ4K,IACpDzB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,eAAeqH,MAAOxT,EAAQmD,EAAS2U,KACtD,MAAM,OAAE7V,EAAM,QAAE4K,GAAYiL,EAEtByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC3Bsc,SAIgBnK,EAAAA,EAAAA,IAAQ,cAAe,CAAEmK,OAAM1R,cAMpD7M,GAASwL,EAAAA,EAAAA,MACTxL,GAASsjD,EAAAA,EAAAA,KAAgBtjD,EAAQiC,EAAQ4K,IACzCzB,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OAAE7V,EAAM,QAAE4K,EAAO,YAAEq2C,GAAgBprC,EAEnCyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMsI,GAAQC,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQ4K,GACxC02C,EAAkB18B,GAAS,YAAaA,EAAQA,EAAMq8B,iBAAc39C,EAC1EvF,GAASwjD,EAAAA,EAAAA,KAAgBxjD,EAAQiC,EAAQ4K,EAAS,CAAEq2C,gBACpDljD,GAASyjD,EAAAA,EAAAA,KAAuBzjD,EAAQiC,EAAQ4K,EAASq2C,IACzD93C,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEmK,OAAM1R,UAASq2C,gBACjE3tC,GAAQ1T,SACX7B,GAASwL,EAAAA,EAAAA,MACTxL,GAASwjD,EAAAA,EAAAA,KAAgBxjD,EAAQiC,EAAQ4K,EAAS,CAAEq2C,YAAaK,IACjEvjD,GAASyjD,EAAAA,EAAAA,KAAuBzjD,EAAQiC,EAAQ4K,EAAS02C,IACzDn4C,EAAAA,EAAAA,IAAUpL,GACZ,KAGFmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,OAAE7V,EAAM,QAAE4K,GAAYiL,EACtByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BogD,GAAcQ,EAAAA,EAAAA,KAAkB7iD,EAAQiC,GAC9C,IAAKsc,IAAS8jC,EACZ,OAGF,MAAMqB,GAAeC,EAAAA,EAAAA,KAAoB3jD,EAAQiC,IAASyM,KAAKk1C,GAAMA,EAAErhD,MAAO,GAExEgO,EADamzC,EAAap/C,SAASuI,GACP62C,EAAa5hD,QAAQS,GAAOA,IAAOsK,IAAW,IAAI62C,EAAc72C,GAElG7M,EAAS,KACJwL,EAAAA,EAAAA,MACHw2C,QAAS,KACJx2C,EAAAA,EAAAA,MAAYw2C,QACfmB,SAAU,KACL33C,EAAAA,EAAAA,MAAYw2C,QAAQmB,SACvB,CAAClhD,GAAS,IACLogD,EACHhyC,UAAWE,EAAa7L,MAAK,CAACC,EAAGC,IAAMA,EAAID,SAKnDyG,EAAAA,EAAAA,IAAUpL,SACWoU,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEmK,OAAMslC,SAAUtzC,MAGvEvQ,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHgiD,QAAS,IACJhiD,EAAOgiD,QACVmB,SAAU,IACLnjD,EAAOgiD,QAAQmB,SAClB,CAAClhD,GAAS,IACLogD,EACHhyC,UAAWqzC,OAKnBt4C,EAAAA,EAAAA,IAAUpL,GACZ,KAGFmM,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,OAAE7V,GAAW6V,EACbyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EAAM,OAEX,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEmK,SAC9ChJ,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,SAC9CzsC,EAAOuuC,kBACT9jD,GAASqjD,EAAAA,EAAAA,KAA2BrjD,EAAQiC,EAAQsT,EAAOuuC,mBAE7D14C,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0BqH,MAAOxT,EAAQmD,EAAS2U,KACjE,MAAM,OAAE7V,EAAM,SAAEoS,GAAayD,EACvByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BogD,GAAcQ,EAAAA,EAAAA,KAAkB7iD,EAAQiC,GAC9C,IAAKsc,GAAQ8jC,GAAaliB,cACxB,OAGF,MAAM5qB,QAAenB,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEmK,OAAMlK,aAC3DkB,IAILvV,GAASwL,EAAAA,EAAAA,MACoC,IAAzCtD,OAAOC,OAAOoN,EAAOysC,SAASngD,SAChC7B,GAAS+jD,EAAAA,EAAAA,KAA6B/jD,EAAQiC,GAAQ,IAGxDjC,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,QAASzsC,EAAOlF,YAClEjF,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsBqH,MAAOxT,EAAQmD,EAAS2U,KAC7D,MAAM,OAAE7V,EAAM,SAAEoS,GAAayD,EACvByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC1BogD,GAAcQ,EAAAA,EAAAA,KAAkB7iD,EAAQiC,GAC9C,IAAKsc,GAAQ8jC,GAAa2B,qBAAsB,OAEhD,MAAMzuC,QAAenB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEmK,OAAMlK,aACvDkB,IAILvV,GAASwL,EAAAA,EAAAA,MACoC,IAAzCtD,OAAOC,OAAOoN,EAAOysC,SAASngD,SAChC7B,GAAS+jD,EAAAA,EAAAA,KAA6B/jD,EAAQiC,GAAQ,GAAM,IAE9DjC,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,aAASz8C,GAAW,IACtE6F,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,wBAAwBqH,MAAOxT,EAAQmD,EAAS2U,KAC/D,MAAM,OAAE7V,EAAM,SAAE4hD,GAAa/rC,EACvByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEmK,OAAMpU,IAAK05C,IAC9DtuC,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,UAClD52C,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,kBAAkBqH,MAAOxT,EAAQmD,EAAS2U,KACzD,MAAM,OAAE7V,EAAM,QAAE4K,GAAYiL,EACtByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMhJ,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEmK,OAAMslC,SAAU,CAACh3C,KAEhE0I,IAILvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASikD,EAAAA,EAAAA,KAAqBjkD,EAAQiC,EAAQ4K,EAAS0I,EAAO+S,QAC9Dld,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ7V,EAAM,QACN4K,EAAO,OACPsT,EAAM,kBACN+jC,EAAiB,gBACjBC,EAAe,MACfv5B,EAAK,MACLpV,EAAK,MACLtR,GAAQC,EAAAA,EAAAA,OACN2T,EAEEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGFve,GAASokD,EAAAA,EAAAA,KAAwBpkD,GAAQ,EAAMkE,IAC/CkH,EAAAA,EAAAA,IAAUpL,GAEV,MAAMuV,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDmK,OACA1R,UACAsT,SACA+jC,oBACAC,kBACA3uC,QACAoV,UAEF,IAAKrV,EAIH,OAHAvV,GAASwL,EAAAA,EAAAA,MACTxL,GAASokD,EAAAA,EAAAA,KAAwBpkD,GAAQ,EAAOkE,QAChDkH,EAAAA,EAAAA,IAAUpL,GAIZA,GAASwL,EAAAA,EAAAA,MACTxL,GAASqkD,EAAAA,EAAAA,KAAiBrkD,EAAQ6M,EAAS0I,EAAO+S,MAAO/S,EAAOmL,WAAYxc,IAC5EkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,eAAeqH,MAAOxT,EAAQmD,EAAS2U,KACtD,MAAM,OACJ7V,EAAM,QACN4K,EAAO,YACPuR,EAAc,GAAE,OAChBC,EAAS,GAAE,MACXna,GAAQC,EAAAA,EAAAA,OACN2T,EACEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMD,QAAiBlK,EAAAA,EAAAA,IAAQ,cAAe,CAC5CmK,OACA1R,UACAuR,cACAC,WAGF,IAAKC,EAAU,OAEf,MAAM,OAAE/I,EAAM,MAAE5C,GAAU2L,EAE1B,GAAI3L,IAAU6L,EAAAA,IAMZ,OALArb,EAAQgZ,iBAAiB,CACvBnb,SAASob,EAAAA,EAAAA,IAAa,qCACtBlY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAKqR,EAAL,CAEA,GAAoB,aAAhBA,EAAOlT,KAQT,OAPAc,EAAQgZ,iBAAiB,CACvBnb,QAASuU,GACL6G,EAAAA,EAAAA,IAAa,2BACb,2EACJlY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAoB,iBAAhBqR,EAAOlT,KAAyB,CAClCrC,GAASwL,EAAAA,EAAAA,MACT,MAAMkT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIgQ,SAASrO,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBC,MAAOzJ,EAAOyJ,MACdnN,QAAS0D,EAAO1D,QAChBoN,SAAUJ,GAAgBvQ,MAE5BtO,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2e,YAAa,CACX/P,WAAY,CAAC/B,GACbqS,QAAS,QACTjd,SACAmc,cACAQ,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CAEA,GAAoB,YAAhBuV,EAAOlT,KAAoB,CAC7BrC,GAASwL,EAAAA,EAAAA,MACT,MAAMkT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIgQ,SAASrO,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBI,WAAY5J,EAAO4J,WACnBd,OAAQ9I,EAAO8I,OACfW,MAAOH,GAAgBvQ,MAEzBtO,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2e,YAAa,CACX/P,WAAY,CAAC/B,GACbuR,cACAnc,SACAid,QAAS,QACTN,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACHkH,EAAAA,EAAAA,IAAUpL,EACZ,CArDmB,CAqDnB,KAGFmM,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,OACJ7V,EAAM,QACN4K,EAAO,QACPy3C,GACExsC,EAEEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMgmC,EAAa,IAAID,EAAQE,gBAAiBF,EAAQG,cAClDC,EAAa,IAAIJ,EAAQK,gBAAiBL,EAAQM,cAElDC,GAAeC,EAAAA,EAAAA,KAA0B9kD,EAAQ,CACrD+kD,WAAYT,EAAQS,WACpBC,cAAeV,EAAQU,cACvBT,aACAG,gBAGGtwC,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/BmK,OACAhc,GAAIsK,EACJy3C,QAASO,GACT,KAGJ14C,EAAAA,EAAAA,IAAiB,uBAAuBqH,MAAOxT,EAAQmD,EAAS2U,KAC9D,MAAM,OAAE7V,EAAM,SAAE2gD,GAAa9qC,EACvByG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAC3Bsc,SAEgBnK,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEmK,OAAMqkC,eAG5D5iD,GAASwL,EAAAA,EAAAA,MACTxL,GAASilD,EAAAA,EAAAA,KAAwBjlD,EAAQiC,EAAQ2gD,IACjDx3C,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,QAAEuY,GAAYvY,EACdotC,EAAQ70B,EAAQ3hB,KAAKzM,IAAWsd,EAAAA,EAAAA,KAAWvf,EAAQiC,KAASH,OAAOqW,SACzE,IAAK+sC,EAAMrjD,OAAQ,OAEnB,MAAM0T,QAAenB,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE8wC,UACrD,IAAK3vC,EAAQ,OAEb,MAAM4vC,EAA0B,GAEhCnlD,GAASwL,EAAAA,EAAAA,MACT+J,EAAOpT,SAAQ,CAACyN,EAAO1K,KACrB,MAAMqZ,EAAO2mC,EAAMhgD,GACnBlF,GAASolD,EAAAA,EAAAA,KAAWplD,EAAQue,EAAKhc,GAAI,CACnC8iD,WAAYz1C,EACZ01C,WAAsB,IAAV11C,IAGA,IAAVA,GACFu1C,EAAct5C,KAAK0S,EAAKhc,GAC1B,KAEF6I,EAAAA,EAAAA,IAAUpL,GAEVmlD,GAAehjD,SAASF,GAAWkB,EAAQ09B,gBAAgB,CAAE5+B,YAAU,KAGzEkK,EAAAA,EAAAA,IAAiB,qBAAqBqH,MAAOxT,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ7V,EAAM,QAAE4K,EAAO,YAAE5I,EAAW,SAAE7B,EAAQ,kBAAE+7C,EAAiB,MAAEj6C,GAAQC,EAAAA,EAAAA,OACjE2T,EACEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EAAM,OAEX,MAAMsI,GAAQC,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQ4K,GAC9C,IAAKga,KAAW,YAAaA,GAAQ,OAErC,MAAM0+B,EAAmB1+B,EAAM2+B,aAC/BxlD,GAASylD,EAAAA,EAAAA,KAAwBzlD,EAAQiC,EAAQ4K,EAASzK,IAC1DgJ,EAAAA,EAAAA,IAAUpL,GAENoC,EACFe,EAAQa,oBAAoB,CAAEC,cAAa7B,WAAU8B,UAErDf,EAAQ+7C,mBAAmB,CAAEj7C,cAAaC,UAG5C,MAAMqR,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDmK,OAAM1R,UAASzK,WAAU+7C,sBAG3Bn+C,GAASwL,EAAAA,EAAAA,MACJ+J,IACHvV,GAASylD,EAAAA,EAAAA,KAAwBzlD,EAAQiC,EAAQ4K,EAAS04C,KAE5Dn6C,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,UAAE4tC,GAAY,EAAI,YAAEC,GAAc,GAAS7tC,GAAW,CAAC,GAE7D1D,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEsxC,UAAWA,IAAa,EAAMC,YAAaA,IAAe,GAAO,I,0BC7kBpGx5C,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ1W,EAAM,SACN4G,EAAWD,EAAAA,GAAc,KACzB1F,EAAO,SAAQ,qBACfujD,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjB5hD,GAAQC,EAAAA,EAAAA,OACN2T,EAEE/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAEtD4J,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GA8CxC,GA7CI4J,EAASqoC,cAAcC,OAAStoC,EAASqoC,cAAcE,SACzDr2C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm2C,aAAc,IACTroC,EAASqoC,aACZE,QAAQ,IAETnyC,IAELf,EAAQ4iD,qBAAqB,CAAE7hD,UAE/Bf,EAAQkhB,iBAAiB,CAAEngB,UAC3Bf,EAAQ6iD,uBAAuB,CAAE9hD,UACjCf,EAAQ6iD,uBAAuB,CAAE9hD,UACjCf,EAAQ8iD,2BAA2B,CAAE/hD,UAEhC6I,GACHA,EAAmB3L,SAAWA,GAC3B2L,EAAmB/E,WAAaA,GAChC+E,EAAmB1K,OAASA,IAE3BjB,IACFpB,GAASkmD,EAAAA,EAAAA,KAAsBlmD,EAAQoB,EAAQ4G,EAAU,aAAc,GAAI9D,GAE3ElE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2/C,gBAAiB,CAAC,EAClBwG,gCAAgC,GAC/BjiD,GAEHlE,GAASomD,EAAAA,EAAAA,KAAkBpmD,EAAQoB,EAAQ4G,EAAU9D,IAGvDlE,GAASkmB,EAAAA,EAAAA,KAAsBlmB,EAAQkE,GAEvClE,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqmD,mBAAmB,EACnBpO,4BAAwB1yC,EACxBkyC,qBAAiBlyC,EACjB2T,0BAAsB3T,KAClBnE,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBAAgBuH,UAAY,CACvEvH,gBAAiB,CAAC,EAClBsI,0BAA0B,IAE3Bzd,IAGD9C,EAAQ,CACV,MAAMgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE5BgC,GAAMsG,UAAYo8C,EACpB3iD,EAAQmjD,eAAe,CAAEllD,SAAQ8C,UACxB9C,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqiD,kBAClDpjD,EAAQqjD,gBAAgB,CAAEtiD,SAE9B,CAIA,OAFAf,EAAQsjD,gBAAgB,CAAEviD,WAEnBwiD,EAAAA,EAAAA,KAAyB1mD,EAAQoB,EAAQ4G,EAAU3F,EAAMujD,EAAsBC,EAAmB3hD,EAAM,KAGjHiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,OAAE1W,EAAM,SAAE4G,EAAWD,EAAAA,IAAmB+P,EAExC6uC,GAAUC,EAAAA,GAAAA,IAAqBxlD,EAAQ,SAAU4G,GAEnD6+C,EAAAA,GACF7hC,OAAO8hC,SAAUC,cAAcJ,GAE/B3hC,OAAOC,KAAK0hC,EAAS,SACvB,KAGFx6C,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OADA3U,EAAQsjD,gBAAgB,CAAEviD,WACnBwiD,EAAAA,EAAAA,KAAyB1mD,OAAQuF,OAAWA,OAAWA,OAAWA,OAAWA,EAAWrB,EAAM,KAGvGiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,WAAEkvC,EAAU,sBAAEC,GAAwB,EAAK,MAAE/iD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEjF9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQkE,GAC1BgjD,iBAAiB,EACjBC,eAAgBH,EAChBC,yBACC/iD,GACHlE,EAAS,IAAKA,EAAQonD,qBAAqB,IAC3Ch8C,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQua,SAAS,IAAK5F,EAAS5T,SAAQ,KAGzCiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtC9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQkE,GAC1BgjD,iBAAiB,GAChBhjD,GACHlE,EAAS,IAAKA,EAAQonD,qBAAqB,IAC3Ch8C,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ6iB,WAAW,IAAKlO,EAAS5T,SAAQ,KAG3CiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,KAAEkN,EAAI,SAAEtG,EAAWD,EAAAA,GAAc,MAAEs/C,EAAK,OAAEvlD,EAAM,MAAEoC,GAAQC,EAAAA,EAAAA,OAC9D2T,EAMJ,OAJI1W,GACF+B,EAAQ6iB,WAAW,CAAE5kB,SAAQ4G,WAAU9D,WAGlC6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsnD,eAAgB,CACdlmD,SACAkN,OACA+4C,QACAvlD,WAEDoC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BunD,kBAAchiD,GACbrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQmD,EAAS2U,KACjE,MAAM,uBAAE0vC,EAAsB,MAAEtjD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC9D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwnD,0BACCtjD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,iBAAE2vC,EAAgB,WAAEC,EAAU,MAAExjD,GAAQC,EAAAA,EAAAA,OAAsB2T,GAE9D,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EAEH,YADA+B,EAAQua,SAAS,CAAEnb,GAAImlD,EAAW,GAAIxjD,UAIxC,MAAMyjD,EAAWD,EAAWtyB,QAAQh0B,GAEpC,IAAkB,IAAdumD,EACF,OAEF,MAAMC,EAASF,EAAWC,EAAWF,GAErCtkD,EAAQua,SAAS,CAAEnb,GAAIqlD,EAAQhC,sBAAsB,EAAM1hD,SAAQ,KAGrEiI,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6nD,6BAAyBtiD,GACxBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8nD,mBAAeviD,GACdrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,OAAE1W,EAAM,eAAE4R,EAAc,MAAE9O,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC9D,OAAOiwC,EAAAA,EAAAA,KAA+B/nD,EAAQoB,EAAQ4R,EAAgB9O,EAAM,KAG9EiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgoD,qBAAiBziD,GAChBrB,EAAM,KChMXiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,OACJ+sB,EAAM,MAAE3gC,GAAQC,EAAAA,EAAAA,OACd2T,EAEC+sB,IAGL7kC,EAAS4kC,GADT5kC,GAASwL,EAAAA,EAAAA,MAC4Bq5B,GAAQ,GAAM,EAAM3gC,IACzDkH,EAAAA,EAAAA,IAAUpL,GAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,IACJsqB,EAAG,OAAEt/B,EAAM,MAAEoB,GAAQC,EAAAA,EAAAA,OACnB2T,EACJ,OAAOisB,GAAa/jC,EAAQoiC,EAAKt/B,EAAQoB,EAAM,KAGjDiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAGlD,OADA9X,EX+FK,SACLA,GACG,QAAAioD,EAAA3iD,UAAAzD,OAAAwG,EAAA,IAAAsM,MAAAszC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA7/C,EAAA6/C,EAAA,GAAA5iD,UAAA4iD,GAAA,IADYhkD,GAAQC,EAAAA,EAAAA,OAAkBkE,EAEzC,MAAM87B,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GAE/C,OAAKigC,EAAgBE,QAAQK,aAItBe,GAAyBzlC,GAFpBykC,EAAAA,GAAAA,IAAaN,EAAgBE,QAAQK,eAEJ,EAAOxgC,GAJFlE,CAKpD,CWzGWmoD,CAA+BnoD,EAAQkE,GAC3CmiC,GAAiBrmC,EAAQkE,GAEvBlE,EAFsCwmC,GAAyBxmC,GAAQ,EAAOkE,EAExE,KAGfiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GASxC,OARS6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJv2B,EAASu2B,QACZK,kBAAcn/B,EACd+/B,qBAAqB,IAEtBphC,EAEU,KAGfiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAElCkgC,EAAgBt2B,EAASu2B,QAAQD,cAEjC+B,EAAsBj+B,OAAOC,OAAOi8B,GACpCgC,EAAqBD,EAAoBtkC,OAW/C,OATSkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqkC,QAAS,IACJv2B,EAASu2B,QACZiB,qBAAqB,EACrBZ,aAAc0B,EAAqBD,EAAoBC,EAAqB,QAAK7gC,EACjFggC,YAAaa,EAAqB,IAEnCliC,EAEU,KAGfiI,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,IAAEsqB,EAAG,wBAAEsD,EAAuB,MAAExhC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAGhF,OAAKuuB,GADLrmC,EAASylC,GAAyBzlC,EAAQoiC,EAAKsD,EAAyBxhC,GAC1CA,GAEvBlE,EAFsCwmC,GAAyBxmC,GAAQ,EAAOkE,EAExE,KAGfiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,uBAAEswC,EAAsB,MAAElkD,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAEpEuwC,GAA0BD,IAC5BpoD,EAAO64B,SAASmU,MAAMC,mCX4JrB,SACLjtC,GACS,QAAAsoD,EAAAhjD,UAAAzD,OAAAy6B,EAAA,IAAA3nB,MAAA2zC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAjsB,EAAAisB,EAAA,GAAAjjD,UAAAijD,GAAA,IADMrkD,GAAQC,EAAAA,EAAAA,OAAkBm4B,EAEzC,OAAOp0B,OAAOsG,MAAKtO,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmgC,QAAQD,eAAeviC,OAAS,CACnF,CWhKiE2mD,CAA4BxoD,EAAQkE,GAEnG,OAAImkD,GACFllD,EAAQslD,kCAAkC,CAAEvkD,UACrClE,IAGTA,EX4FK,SACLA,GAEG,QAAA0oD,EAAApjD,UAAAzD,OAAA45B,EAAA,IAAA9mB,MAAA+zC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAltB,EAAAktB,EAAA,GAAArjD,UAAAqjD,GAAA,IADCzkD,GAAQC,EAAAA,EAAAA,OAAkBs3B,EAE9B,MAAM0I,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GAEzC0kD,EAA2B1gD,OAAO2gD,YACtC3gD,OAAOiI,QAAQg0B,EAAgBE,QAAQD,eAAetiC,QAEpD85B,IAAA,IAAE7X,EAAK8gB,GAAOjJ,EAAA,OAAKiJ,EAAOgB,oBAAoB,KAI5CijB,EAAiC5gD,OAAOC,OAAOygD,GAGrD,KAFiCE,EAA+BjnD,OAAS,GAGvE,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqkC,QAAS,IACJF,EAAgBE,QACnBK,kBAAcn/B,EACd6+B,cAAe,CAAC,EAChBe,kBAAmB,GACnBE,YAAa,KAEdnhC,GAGL,MAAM6kD,EAAsB5kB,EAAgBE,QAAQK,aAE9C6C,EAAkBwhB,GAAqBljB,qBACzCkjB,EAAsBD,EAA+B,GAEzDvhB,EAAgBzB,kBAAmB,EAEnC,MAAM1D,GAAMqC,EAAAA,GAAAA,IAAa8C,GAErBnF,IAAKwmB,EAAyBxmB,GAAOmF,GACzC,MAAMrC,EAAgBf,EAAgBE,QAAQc,kBAAkBrjC,QAAQmkC,GAAMA,KAAK2iB,IAEnF,OAAO76C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqkC,QAAS,IACJF,EAAgBE,QACnBK,aAAc6C,EACdjC,qBAAqB,EACrBlB,cAAewkB,EACfzjB,kBAAmBD,IAEpBhhC,EACL,CW7IW8kD,CAAmBhpD,EAAQkE,GAC/BmiC,GAAiBrmC,EAAQkE,GAEvBlE,EAFsCwmC,GAAyBxmC,GAAQ,EAAOkE,GAExE,KAGfiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAEy0B,EAAK,MAAEroC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7C,OXkJK,SACL9X,EAAWwlC,GAER,QAAAyjB,EAAA3jD,UAAAzD,OAAA46B,EAAA,IAAA9nB,MAAAs0C,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAzsB,EAAAysB,EAAA,GAAA5jD,UAAA4jD,GAAA,IADChlD,GAAQC,EAAAA,EAAAA,OAAkBs4B,EAE9B,MAAM0H,GAAkBjkC,EAAAA,EAAAA,KAAeF,EAAQkE,GAC/C,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqkC,QAAS,IACJF,EAAgBE,QACnBmB,eAEDthC,EACL,CW7JSilD,CAAwBnpD,EAAQusC,EAAOroC,EAAM,KAGtDiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEhC4sB,GADWxkC,EAAAA,EAAAA,KAAeF,EAAQkE,GACVmgC,QAAQK,aACtC,GAAKA,GAAc3gB,IAInB,OAAOggB,GAAa/jC,GAFRykC,EAAAA,EAAAA,KAAaC,GAEQ,CAAE+U,KAAM3hC,EAAQ2hC,MAAQv1C,EAAM,KAGjEiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+rC,qBAAiBxmC,GAChBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE2qB,EAAK,eAAEkK,EAAc,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsB2T,GACvD,cAAEsxC,GAAkBppD,EAEpBqpD,EAAmB,IAAIh/C,IAAI++C,GACjCC,EAAiB/+C,IAAIm4B,GAErBziC,EAAS,IACJA,EACHopD,cAAez0C,MAAMiC,KAAKyyC,IAG5B,MAAMv7C,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAI4J,EAASi+B,iBAAiBC,UAAW,CACvC,MAAM,OAAEvhC,EAAQqN,QAASwxC,GAAoBx7C,EAASi+B,gBAAgBC,UAEtE7oC,EAAQsH,GAAQ,IACV6+C,EACJ3c,kBAEJ,CAEA3sC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,qBAAiBxmC,GAChBrB,IAEHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAEmqB,EAAK,UAAED,EAAS,MAAE99B,GAAQC,EAAAA,EAAAA,OAAsB2T,EAClD+sB,GAAS0kB,EAAAA,EAAAA,KAAavpD,EAAQgiC,EAAW99B,GAC/C,IAAK2gC,EAAQ,OAAO7kC,EAEpB,MAAMwpD,EAAmB3kB,EAAO4kB,cAAgB,IAAI5kB,EAAO4kB,cAAexnB,GAAS,CAACA,GAUpF,OARA9+B,EAAQ4gC,aAAa,CACnB3B,IAAKJ,EACLl/B,OAAQ,CACN2mD,cAAeD,GAEjBtlD,UAGKlE,CAAM,KAGfmM,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6tC,+BAA2BtoC,GAC1BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,IACJ8vB,EAAG,OAAE9lC,EAAM,WAAE2pC,EAAU,MAAEvnC,GAAQC,EAAAA,EAAAA,OAC/B2T,EACEnK,GAAgBX,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAQ9C,OAEzDsoD,EAAmB9hB,EAAI+hB,qBAAqB7nD,QAAQO,GAC/C,SAATA,GAAmBP,EAAOwC,SAASjC,KAGhCqnD,GAAkB7nD,QAUvB7B,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B4pD,yBAA0B,CACxBhiB,MACA9lC,OAAQ4nD,EACRje,eAEDvnC,IACHkH,EAAAA,EAAAA,IAAUpL,IAhBRmD,EAAQ0mD,cAAc,CACpBzoD,OAAQuM,GAAiBi6B,EAAIrlC,GAC7BqlC,MACA6D,aACAvnC,SAYa,KAGnBiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B4pD,8BAA0BrkD,GACzBrB,EAAM,I,+DCnJX,MACM4lD,GAA8BC,EAAAA,IAAsBC,EAAAA,IAK1D,IAAIC,GA84BJ,SAASC,GAAoBlqD,EAAqBoB,EAAgBwN,GAChE,MAAQvM,KAAMia,EAAe,SAAEtU,IAAagF,EAAAA,EAAAA,KAAyBhN,IAAW,CAAC,EAC3EmqD,EAAOt8B,EAAAA,GAEPzqB,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE1B8P,EAAmC,cAApBoL,GACjB7N,EAAAA,EAAAA,KAA4BzO,EAAQoB,IACpC4I,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAE/B,IAAKgC,IAAS8N,IAAiBlJ,EAAU,OAEzC,MAAM+H,EAAWnB,EACdF,KAAKnM,GAAO2O,EAAa3O,KACzBT,QAAQd,IAAYopD,EAAAA,EAAAA,KAAgCpqD,EAAQgB,EAASgH,GAAUqiD,UAC/E3lD,MAAK,CAAC4lD,EAAUC,IAAaD,EAAS/nD,GAAKgoD,EAAShoD,KAEjDioD,EAAuB,GACvBC,EAAuB,GAE7B16C,EAAS5N,SAASnB,IAChB,MAAMooC,GAAS/rB,EAAAA,EAAAA,KAAcja,GAAQA,GAAOimC,EAAAA,EAAAA,KAAarpC,EAAQgB,GAC3D0pD,EAAe,KAAIthB,GAASuhB,EAAAA,EAAAA,KAAeR,EAAM/gB,GAAUpoC,EAAQ4pD,aAAaC,gBAAkB,MAClGC,GAAkBC,EAAAA,EAAAA,KAA0B/qD,EAAQgB,GAE1DwpD,EAAW3+C,KAAK6+C,GAChBF,EAAW3+C,KAAM,GCl/Bd,SACLs+C,EACAnpD,GAEA,MAAMhB,GAASwL,EAAAA,EAAAA,MACTqC,GAAQm9C,EAAAA,GAAAA,IAAuBhqD,GAC/BiqD,EAAiBp9C,EAAS,GAAEA,KAAW,GACvCS,GAAO48C,EAAAA,GAAAA,GACX,CAAElqD,UAASmqD,oBAAoB,KAC9B9uC,KAAK,IAEFyuC,GAAkBC,EAAAA,GAAAA,IAA0B/qD,EAAQgB,GAI1D,MAAQ,GAAEiqD,KAFUG,EAAAA,GAAAA,IAA6BjB,EAAMnpD,EAAS8pD,EAAiBx8C,GAAM,IAGzF,CDk+BuB+8C,CAAyBlB,EAAMnpD,QAElDypD,EAAW5+C,KAAK6+C,GAChBD,EAAW5+C,KAAM,IAAEy/C,EAAAA,GAAAA,IAAsBnB,EAAMnpD,EAAS8pD,GAAiB,EAAO,GAAG,OAAU,KAG/FS,EAAAA,EAAAA,GAAoBf,EAAWnuC,KAAK,MAAOouC,EAAWpuC,KAAK,MAC7D,EA76BAlQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,aAAEwjD,EAAY,MAAEtnD,GAAQC,EAAAA,EAAAA,OACtC2T,EAIJ,OAFA9X,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,mBAAoBwjD,IAEnEtF,EAAAA,EAAAA,KAAsBlmD,EAAQoB,EAAQ4G,EAAU,eAAgBwjD,EAActnD,EAAM,KAG7FiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,UAAEzQ,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC3C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,EAAQ,KAAE3F,GAAS0K,EAC7B0+C,EAAqB,cAATppD,EAAuB,qBAAuB,YAEhE,OAAOwG,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAUyjD,EAAWpkD,EAAU,KAG3E8E,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,KACJxJ,EAAI,OAAElN,EAAM,SAAE4G,EAAQ,KAAE3F,GACtByV,EAEE2zC,EAAqB,cAATppD,EAAuB,wBAA0B,eAEnE,OAAOwG,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAUyjD,EAAWn9C,EAAK,KAGtEnC,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW4G,EACd,OAGF,MAAMkJ,GAAelH,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAC1C8W,GAActP,EAAAA,EAAAA,KAAkB5I,EAAQoB,EAAQ4G,EAAU9D,GAChE,IAAKgN,IAAiBgH,EACpB,OAGF,MAAMwzC,GAA2BC,EAAAA,EAAAA,IAASzzC,GAAc3V,GAC/C4V,QAAQjH,EAAa3O,KAAO6nD,EAAAA,EAAAA,KAAgCpqD,EAAQkR,EAAa3O,GAAKyF,GAAU4jD,WAGzG,OAAKF,GAIE7iD,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,EAAU,YAAa0jD,QAJjE,CAI0F,KAG5Fv/C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,iBAAE2vC,EAAgB,MAAEvjD,GAAQC,EAAAA,EAAAA,OAAsB2T,GAClD,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW4G,EACd,OAGF,MAAMkJ,GAAelH,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAC1C8W,GAActP,EAAAA,EAAAA,KAAkB5I,EAAQoB,EAAQ4G,EAAU9D,GAChE,IAAKgN,IAAiBgH,EACpB,OAGF,MAAMrR,GAAYsS,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,IAAWnB,UAGzD,IAAIQ,EAEJ,IAJiBiB,EAAAA,EAAAA,KAAuBtI,EAAQoB,EAAQ4G,EAAU9D,IAIhD2C,GAAWI,aAQtB,CACL,MAAM4kD,EAAkB3jD,OAAOsG,KAAK0C,GAE9B46C,EADiBD,EAAgBz2B,QAAQvuB,EAAUI,aAAa6mB,YACpC25B,EAClCpgD,EAAYykD,GAAYD,EAAgBhqD,OAAS,GAAKiqD,GAAY,EAC9D7gD,OAAO4gD,EAAgBC,SACvBvmD,CACN,MAdE,GAAIyC,IAAaD,EAAAA,GACfV,GAAYmC,EAAAA,EAAAA,KAAwBxJ,EAAQoB,OACvC,CACL,MAAM2F,GAAa+D,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GAEpDX,EAAYN,GAAYQ,aAC1B,CASFpE,EAAQiK,qBAAqB,CAC3BnG,aAAcI,EAAWue,mBAAergB,EAAWsgB,eAAWtgB,EAAWrB,UAE3Ef,EAAQ8J,aAAa,CACnB7L,SACA4G,WACAX,UAAWA,EACXnD,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,UAAEX,EAAS,OAAE0kD,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAE3rB,EAAO,MAClEp8B,GAAQC,EAAAA,EAAAA,OACN2T,EAEEhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,CACXx7B,SACA4G,WACAX,YACA0kD,OAAQA,GAAUj+C,EAAS8uB,YAAYmvB,OACvCC,OAAQA,GAAUl+C,EAAS8uB,YAAYovB,OACvCC,aAAcA,GAAgBn+C,EAAS8uB,YAAYqvB,cAAgBjsD,EAAO48B,YAAYsvB,iBACtFC,0BAAqE5mD,IAA9CuI,EAAS8uB,YAAYuvB,qBACxCnsD,EAAO48B,YAAYwvB,yBACnBt+C,EAAS8uB,YAAYuvB,qBACzB7rB,QAASA,GAAWxyB,EAAS8uB,YAAY0D,UAE1Cp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OACJk0C,EAAM,MAAE9nD,GAAQC,EAAAA,EAAAA,OACd2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCovB,SACA1rB,SAAS,IAEVp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,aACJm0C,EAAY,qBAAEE,EAAoB,MAAEjoD,GAAQC,EAAAA,EAAAA,OAC1C2T,EAWJ,OATA9X,EAAS,IACJA,EACH48B,YAAa,IACR58B,EAAO48B,YACVsvB,iBAAkBD,EAClBG,yBAA0BD,KAIvBp+C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCqvB,eACAE,yBAEDjoD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,QACJwoB,EAAO,MAAEp8B,GAAQC,EAAAA,EAAAA,OACf2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjC0D,YAEDp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OACJi0C,EAAM,MAAE7nD,GAAQC,EAAAA,EAAAA,OACd2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCmvB,WAED7nD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B48B,YAAa,CACXovB,OAAQl+C,EAAS8uB,YAAYovB,OAC7BC,aAAcn+C,EAAS8uB,YAAYqvB,aACnCE,qBAAsBr+C,EAAS8uB,YAAYuvB,qBAC3C7rB,QAASxyB,EAAS8uB,YAAY0D,UAE/Bp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEnDu0C,GAAsBC,EAAAA,EAAAA,KAAyBtsD,GAAQI,EAAAA,EAAAA,MAAe8D,GACtE4J,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,GAAKmoD,GAaE,GAAIjrD,IAAW0M,EAASuS,YAAYjf,QAAUiG,IAAcyG,EAASuS,YAAYhZ,UACtF,OAAO0G,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqgB,YAAa,CACXjf,SACAiG,YACAiZ,OAAQ,CAAC,IAEVpc,QAnBH8gB,OAAOzZ,YAAW,KAChBvL,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqgB,YAAa,CACXjf,SACAiG,YACAiZ,OAAQ,CAAC,IAEVpc,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,GAhOW,IA4OhB,KAGlBmM,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqgB,YAAa,CAAC,GACbnc,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,EAAQ,KAAE3F,GAAS0K,EAE7BsI,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAEhE,IAAIqF,EACJ,GAAIS,IAAaD,EAAAA,GACf,GAAa,WAAT1F,EAAmB,CACrB,MAAMkqD,GAAmBj8C,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ2G,EAAAA,IACzD,IAAKwkD,GAAkB1qD,OACrB,OAGF0F,EAAgBglD,EAAiBA,EAAiB1qD,OAAS,EAC7D,KAAO,CACL0F,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQoB,GAEhD,MAAM8P,GAAelH,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAE1CorD,EAAkBtkD,OAAOC,OAAO+I,GAAcu7C,UAAU,GAC1DllD,IAAiBmlD,EAAAA,EAAAA,KAAuBF,IAAoBA,EAAgBjqD,GAAKgF,IACnFA,EAAgBilD,EAAgBjqD,GAEpC,MACK,GAAI8S,EACT9N,GAAgBiC,EAAAA,EAAAA,KAAwBxJ,EAAQiM,OAAOjE,GAAW,aAC7D,CACL,MAAMjB,GAAa+D,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GAEpDT,EAAgBR,GAAYQ,aAC9B,CAEKA,GAILpE,EAAQ8J,aAAa,CACnB7L,SACA4G,WACAsU,gBAAiBja,EACjBgF,UAAWE,EACX2F,aAAa,EACb44C,mBAAmB,EACnB5hD,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,GAAa+E,EAEvB4/C,GAAaC,EAAAA,EAAAA,KAAiB5sD,EAAQoB,EAAQ4G,EAAU9D,GAE9D,GAAKyoD,GAAoC,IAAtBA,EAAW9qD,OAEvB,CACL,MAAMwF,EAAYslD,EAAWE,MAE7B7sD,GAASkmD,EAAAA,EAAAA,KAAsBlmD,EAAQoB,EAAQ4G,EAAU,aAAc,IAAI2kD,GAAazoD,IAExFkH,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ8J,aAAa,CACnB7L,SACA4G,WACAX,UAAWA,EACXnD,QACA4hD,mBAAmB,GAEvB,MAfE3iD,EAAQ2pD,iBAAiB,CAAE5oD,SAiBb,KAGlBiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,OACJ1W,EAAM,SAAE4G,EAAWD,EAAAA,GAAc,gBAAEuU,EAAkB,SAAQ,YAAEpP,EAAW,UAAE6N,EAAS,cAAEgyC,EAAa,eACpGC,EAAc,oBAAE7/C,EAAmB,qBAAEy4C,EAAoB,kBAAEE,EAAiB,MAAEmH,EAAK,qBAAE9M,EAAoB,MACzGj8C,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,IAAI,UAAEzQ,GAAcyQ,EAGpB,KADanQ,EAAAA,EAAAA,KAAW3H,EAAQoB,GAG9B,YADA+B,EAAQgZ,iBAAiB,CAAEnb,SAASob,EAAAA,EAAAA,IAAa,yCAA0ClY,UAI7F,QAAkBqB,IAAdwV,EAAyB,CAC3B,MAAM5Q,GAAM+iD,EAAAA,EAAAA,KAAmCltD,EAAQ+sD,EAAgBhyC,GACnE5Q,GAAKtI,UACLwF,IAAa8lD,EAAAA,EAAAA,IAAQhjD,GAE3B,CAEA,MAAM4C,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GACtDkpD,GAAoBrgD,GACxB3L,IAAW2L,EAAmB3L,QAC3B4G,IAAa+E,EAAmB/E,UAChCsU,IAAoBvP,EAAmB1K,KA0B5C,GAvBI4nD,KACFviC,aAAauiC,IACbA,QAAc1kD,GAEhB0kD,GAAcjlC,OAAOzZ,YAAW,KAC9BvL,GAASwL,EAAAA,EAAAA,MACTxL,GAASqtD,EAAAA,EAAAA,KAAqB,CAAErtD,UAAUkE,GAC1ClE,GAASstD,EAAAA,EAAAA,KAAqBttD,OAAQuF,EAAWrB,IACjDkH,EAAAA,EAAAA,IAAUpL,EAAO,GAChBkN,EAAc48C,GAnXI,MAqXrB9pD,GAASqtD,EAAAA,EAAAA,KAAqB,CAC5BrtD,SACAoB,SACAiG,YACAW,WACAkF,cACAC,sBACA8/C,QACA9M,wBACCj8C,GACHlE,GAASstD,EAAAA,EAAAA,KAAqBttD,OAAQuF,EAAWrB,GAE7C8oD,EAAgB,CAClB,MAAML,GAAaC,EAAAA,EAAAA,KAAiB5sD,EAAQoB,EAAQ4G,EAAU9D,IAAU,GACxElE,GAASkmD,EAAAA,EAAAA,KAAsBlmD,EAAQoB,EAAQ4G,EAAU,aAAc,IAAI2kD,EAAYK,GAAiB9oD,EAC1G,CAEIkpD,IACFptD,GAASstD,EAAAA,EAAAA,KAAqBttD,EAAQutD,EAAAA,GAAeC,OAAQtpD,IAG/D,MAAMgU,GAActP,EAAAA,EAAAA,KAAkB5I,EAAQoB,EAAQ4G,EAAU9D,GAChE,GAAIgU,GAAeA,EAAY5T,SAAS+C,GAUtC,OATA+D,EAAAA,EAAAA,IAAUpL,EAAQ,CAAEyY,uBAAuB,SAC3CtV,EAAQ6iB,WAAW,CACjB5kB,SACA4G,WACA3F,KAAMia,EACNspC,uBACAE,oBACA5hD,UASJ,GAJIkpD,IACFptD,GAASkmD,EAAAA,EAAAA,KAAsBlmD,EAAQoB,EAAQ4G,EAAU,mBAAezC,EAAWrB,IAGjFgU,IAAgBk1C,EAAkB,CACpC,MAAM94C,EAAYjN,EAAY6Q,EAAY,GAAKq1C,EAAAA,GAAeE,KAAOF,EAAAA,GAAeG,GACpF1tD,GAASstD,EAAAA,EAAAA,KAAqBttD,EAAQsU,EAAWpQ,EACnD,EAEIypD,EAAAA,GAAAA,QACFC,EAAAA,GAAAA,OAGFxiD,EAAAA,EAAAA,IAAUpL,EAAQ,CAAEyY,uBAAuB,IAE3CtV,EAAQ6iB,WAAW,CACjB5kB,SACA4G,WACA3F,KAAMia,EACNspC,uBACAE,oBACA5hD,UAEFf,EAAQ4N,qBAAqB,CAC3B3P,SACA4G,WACA9D,QACA6T,mBAAmB,GAEL,KAGlB5L,EAAAA,EAAAA,IAAiB,qCAAqC,CAACnM,EAAQmD,EAAS2U,KACtE,MAAM,+BAAEquC,EAA8B,MAAEjiD,GAAQC,EAAAA,EAAAA,OAAsB2T,EACtE,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BmmD,kCACCjiD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,WACJ6I,EAAU,UAAEtZ,EAAS,UAAEwe,EAAS,MAAE3hB,GAAQC,EAAAA,EAAAA,OACxC2T,EACJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwlB,gBAAiB,CACf7E,aACAtZ,YACAwe,aAEFlE,0BAA0B,GACzBzd,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,WACJ6I,EAAU,WAAE/R,EAAU,QAAE/B,EAAO,UAAEkO,EAAS,YAAE8F,EAAW,MAAE3c,GAAQC,EAAAA,EAAAA,OAC/D2T,EACJ,IAAI+1C,EAIJ,OAHI9yC,IACF8yC,GAAoBrP,EAAAA,EAAAA,KAA0Bx+C,EAAQ2gB,EAAY5F,KAE7DhN,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqZ,gBAAiB,CACfsH,aACA/R,WAAYi/C,GAAqBj/C,EACjC/B,UACAgU,eAEFc,0BAA0B,GACzBzd,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqZ,gBAAiB,KACZnZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBACjCuH,cAAUrb,EACVub,WAAW,EACXC,YAAY,GAEdY,0BAA0B,GACzBzd,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,UAAEgJ,EAAS,MAAE5c,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC3ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqZ,gBAAiB,IACZvL,EAASuL,gBACZyH,YAEAC,WAAYD,GAAahT,EAASuL,gBAAgB0H,aAEnD7c,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,WAAEiJ,EAAU,MAAE7c,GAAQC,EAAAA,EAAAA,OAAsB2T,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqZ,gBAAiB,KACZnZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmV,gBACjC0H,aACAD,UAAWC,IAEZ7c,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B2hB,0BAA0B,EAC1BtI,gBAAiB,CAAC,EAClBmM,gBAAiB,CAAC,GACjBthB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sCAAsC,CAACnM,EAAQmD,EAAS2U,KACvE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAASggD,iBACZ,OAGF,MAAQ1sD,OAAQuf,EAAU,WAAE/R,GAAed,EAASggD,iBAEpD3qD,EAAQ4qD,gBAAgB,CAAEptC,aAAY/R,aAAY1K,SAAQ,KAG5DiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE1F,EAAK,MAAElO,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEvC+R,GAAOmkC,EAAAA,EAAAA,KAAa57C,EAAO,YACjC,GAAKyX,EAGL,OADSokC,EAAAA,EAAAA,KAA2BjuD,EAAQ,CAAC6pB,GAAO3lB,EACvC,KAGfiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,YAAEo2C,EAAW,MAAEhqD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAInD,OAFSm2C,EAAAA,EAAAA,KAA2BjuD,EAAQkuD,EAAahqD,EAE5C,KAGfiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,MAAE1F,EAAK,cAAElL,EAAa,MAAEhD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtD+R,GAAOmkC,EAAAA,EAAAA,KAAa57C,EAAO,YACjC,IAAKyX,EAAM,OAEX,MACMskC,EAAW,CACfC,KAFW,SAAUh8C,EAAQA,EAAMg8C,KAAO,EAG1CC,QAAQC,EAAAA,EAAAA,KAAel8C,EAAO,YAC9Bm8C,UAAUC,EAAAA,EAAAA,KAAiBp8C,GAC3Bq8C,aAAcvnD,GAAe9F,OAC7BstD,gBAAiBxnD,GAAe3E,IAGlC,OAAOosD,EAAAA,EAAAA,KAAuB3uD,EAAQ6pB,EAAMskC,EAAUjqD,EAAM,KAG9DiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAASggD,iBACZ,OAGF,MAAM,OAAE1sD,EAAM,WAAEwN,GAAed,EAASggD,kBAClC,SAAE9lD,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE3DgN,GAAelH,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAC3C8P,GAAiBlJ,GACL4G,EAAWF,KAAKnM,GAAO2O,EAAa3O,KAClDT,QAAQd,IAAYopD,EAAAA,EAAAA,KAAgCpqD,EAAQgB,EAASgH,GAAU4mD,cACzEzsD,SAASnB,IAChB,MAAMoR,GAAQy8C,EAAAA,EAAAA,KAA4B7tD,GACrCoR,GACLjP,EAAQ2rD,cAAc,CAAE18C,QAAOlL,cAAelG,EAASkD,SAAQ,GAC/D,KAGJiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,UAAEzQ,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EACvD4F,GAAWoC,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAC3C,OAAKwZ,GAIEqxC,EAAAA,EAAAA,KAAuB/uD,EAAQ0d,EAASnb,GAAI8E,EAAWnD,GAHrDlE,CAG2D,KAGtEmM,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,UACJzQ,EAAS,UACT0T,EAAS,gBACTi0C,EAAe,UACfC,EAAS,MACT/qD,GAAQC,EAAAA,EAAAA,OACN2T,EACE/K,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAGF,MAAM,OAAE3L,EAAM,SAAE4G,EAAU3F,KAAMia,GAAoBvP,EAEpD/M,GAASkvD,EAAAA,EAAAA,KACPlvD,EAAQoB,EAAQ4G,EAAUsU,EAAiBjV,EAAW0T,EAAWi0C,EAAiBC,EAAW/qD,IAG/FkH,EAAAA,EAAAA,IAAUpL,GAENA,EAAOmvD,4BACThsD,EAAQisD,yBACRjsD,EAAQgZ,iBAAiB,CAEvBnb,QAAU,mDAAkDquD,EAAAA,GAAe,WAAa,8BACxFnrD,UAEJ,KAGFiI,EAAAA,EAAAA,IAAiB,0BAA2BnM,IAC1C,GAAKA,EAAOmvD,0BAIZ,MAAO,IACFnvD,EACHmvD,2BAA2B,EAC5B,KAGHhjD,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAOoO,EAAAA,EAAAA,KAAsBlmB,EAAQkE,EAAM,KAG7CiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,OAAE+wB,EAAM,MAAE3kC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE1D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsvD,UAAW,CACTjZ,QAAQ,EACRxN,WAED3kC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsvD,UAAW,CACTjZ,QAAQ,IAETnyC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,KACpD,GAAIosD,EAAAA,KAAoB7sD,KAAKC,MAAQsI,OAAOskD,EAAAA,KAjqBR,OAkqBlC,OAGF,MAAMC,EAAiBC,UAAY50C,MAAM,KAAK/D,MAAM,EAAG,GAAGuF,KAAK,MACzD,qBAAEhL,GAAyBrR,EAEjC,GAAIqR,EAAqB7N,MAAKzB,IAAA,IAAC,QAAE6sB,GAAS7sB,EAAA,OAAK6sB,IAAY4gC,CAAc,IACvE,OAGF,MAAMxuD,EAAkC,CACtCI,OAAQgQ,EAAAA,IACR8C,MAAMorB,EAAAA,GAAAA,MACN55B,QAAS,CACP4I,MAAMohD,EAAAA,GAAAA,I,k8GAA8C,IAEtDrsD,YAAY,GAGdF,EAAQ6O,0BAA0B,CAChChR,QAASA,EACT4tB,QAAS4gC,GACT,KAGJrjD,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,QAAE9W,EAAO,QAAE4tB,GAAY9W,GACvB,qBAAEzG,GAAyBrR,EAE3B4P,EAAQjP,KAAKE,KACjB2I,EAAAA,EAAAA,KAAwBxJ,EAAQoR,EAAAA,MAAkC,KAC/DC,EAAqB3C,KAAIhB,IAAA,IAAC,GAAEnL,GAAImL,EAAA,OAAKnL,CAAE,KAEtCotD,GAAkBt+C,EAAqBxP,OAAS,GAlsBf,IAosBjCU,EAAK5B,KAAK8B,MAAMmN,GAAS+/C,EAE/B3uD,EAAQ8I,gBAAkB9I,EAAQuB,GAClCvB,EAAQuB,GAAKA,EAEb,MAAMqtD,EAAsB,CAC1BrtD,KACAvB,UACA4tB,UACAhrB,UAAU,GAGZ5D,EAAS,IACJA,EACHqR,qBAAsB,IACjBA,EAAqByF,OAntBW,KAotBnC84C,KAGJxkD,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQuZ,UAAU,CAChB,QAAS,aACTna,GAAIvB,EAAQuB,GACZnB,OAAQJ,EAAQI,OAChBJ,WACA,KAGJmL,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEzD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6vD,aAAc,CAAEzuD,SAAQiG,cACvBnD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B6vD,kBAActqD,GACbrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEzD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8vD,YAAa,CAAE1uD,SAAQiG,cACtBnD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B8vD,iBAAavqD,GACZrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kCAAkC,CAACnM,EAAQmD,EAAS2U,KACnE,MAAM,OAAE1W,EAAM,WAAE2uD,EAAU,MAAE7rD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE1D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgwD,2BAA4B,CAAE5uD,SAAQ2uD,eACrC7rD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mCAAmC,CAACnM,EAAQmD,EAAS2U,KACpE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BgwD,gCAA4BzqD,GAC3BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEnDm4C,EAAiB5oD,GACnB6oD,EAAAA,EAAAA,KAA0ClwD,EAAQoB,EAAQiG,EAAWnD,IACrEisD,EAAAA,EAAAA,KAAuCnwD,EAAQoB,EAAQ8C,GAE3D,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BowD,kBAAmB,CAAEhvD,SAAQiG,YAAW4oD,mBACvC/rD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BowD,uBAAmB7qD,GAClBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAK4J,EAASggD,iBACZ,OAGF,MAAM,OAAE1sD,EAAM,WAAEwN,GAAed,EAASggD,iBACxC5D,GAAoBlqD,EAAQoB,EAAQwN,EAAW,KAGjDzC,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,WAAElJ,EAAU,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC5C1U,GAAO0c,EAAAA,EAAAA,KAAkB9f,EAAQkE,GAClC0K,GAAoC,IAAtBA,EAAW/M,QAAiBuB,GAI/C8mD,GAAoBlqD,EAAQoD,EAAKb,GAAIqM,EAAW,KAGlDzC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,QAAE9W,EAAO,MAAEkD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC/C9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqwD,kBAAmB,CACjBrvD,YAEDkD,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD9X,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BqwD,uBAAmB9qD,GAClBrB,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsjB,mBAAe/d,GACdrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2e,iBAAapZ,GACZrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5CwL,GAAgBpjB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOof,cACpD,GAAKA,EAAL,CAIA,GAAsC,IAAlCA,EAAc1E,SAAS/c,OAK3B,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsjB,cAAe,IACVA,EACH1E,SAAU0E,EAAc1E,SAAS9H,MAAM,GAAI,KAE5C5S,GATDf,EAAQigB,mBAAmB,CAAElf,SAH/B,CAYS,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5C6G,GAAcze,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,YAClD,GAAKA,EAAL,CAIA,GAAoC,IAAhCA,EAAYC,SAAS/c,OAKzB,OAAOkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B2e,YAAa,IACRA,EACHC,SAAUD,EAAYC,SAAS9H,MAAM,GAAI,KAE1C5S,GATDf,EAAQsb,iBAAiB,CAAEva,SAH7B,CAYS,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,OAAE1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAAsB2T,EACzD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BswD,kBAAmB,CAAElvD,SAAQiG,cAC5BnD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BswD,uBAAmB/qD,GAClBrB,EAAM,KAsCXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,QACJ9W,EAAO,WAAEuvD,EAAU,MAAEC,EAAK,MAC1BtsD,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ9X,GAASwL,EAAAA,EAAAA,MAETxL,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9BywD,mBAAoB,CAClBF,aACAC,QACAxvD,YAEDkD,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BywD,wBAAoBlrD,GACnBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE1D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0wD,cAAe,CACbtvD,WAED8C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0wD,mBAAenrD,GACdrB,EAAM,KEliCXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,GACvC,OAAE1W,EAAM,eAAEuvD,IAAmBzwD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2rB,aAE3D+gC,EAAiBhmC,GAAS+lC,IAAmBE,EAAAA,GAAoBC,QACnE,CAAEznD,OAAQjI,EAAQ2O,UAAU,QAASxK,EAEzC,OAAO4qB,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAChCswB,cAAe,CAAC,EAChBF,aAAc,CAAC,EACfM,mBAAenrB,EACfqrD,iBACAhmC,SACC1mB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,MAAiB,UAAE4sD,GAAcj5C,GAAW,CAAC,EAC7D,OAAOqY,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAChC+wD,aACC7sD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,GAAEvV,GAAOuV,GACT,qBAAEk5C,GAAyBhxD,EAEjC,IAAKgxD,EACH,MAAO,IACFhxD,EACHgxD,qBAAsB,CAACzuD,IAI3B,MAAM0uD,EAAeD,EAAqBlvD,QAAQV,GAAWA,IAAWmB,IAMxE,OALA0uD,EAAa3uD,QAAQC,GACjB0uD,EAAapvD,OAtCY,IAuC3BovD,EAAapE,MAGR,IACF7sD,EACHgxD,qBAAsBC,EACvB,KAGH9kD,EAAAA,EAAAA,IAAiB,2BAA4BnM,IACpC,IACFA,EACHgxD,0BAAsBzrD,OAI1B4G,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,QAAEpS,EAAO,MAAExB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE/C,OAAOo5C,EAAAA,EAAAA,IAA0BlxD,EAAQ0F,EAASxB,EAAM,KAG1DiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,GAAEvV,EAAE,MAAE2B,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE1C,OAAOqY,EAAAA,EAAAA,KAAmBnwB,EAAQ,CAAEoB,OAAQmB,EAAIqoB,WAAOrlB,EAAWmrB,mBAAenrB,GAAarB,EAAM,KC3DtGiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW4G,EAIhB,OAAOqrB,EAAAA,EAAAA,KAAmBrzB,EAAQoB,EAAQ4G,EAAU,CAAC,EAAG9D,EAAM,KAGhEiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW4G,EAIhB,OAAOo+C,EAAAA,EAAAA,KAAkBpmD,EAAQoB,EAAQ4G,EAAU9D,EAAM,KAG3DiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,OACJhV,EAAM,MAAEoB,GAAQC,EAAAA,EAAAA,OACd2T,EAEJ,IAAI1W,EACA4G,EACJ,GAAI8P,EAAQ1W,OACVA,EAAS0W,EAAQ1W,OACjB4G,EAAW8P,EAAQ9P,UAAYD,EAAAA,OAC1B,CACL,MAAMgF,GAAqBC,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAC5D,IAAK6I,EACH,OAEF3L,EAAS2L,EAAmB3L,OAC5B4G,EAAW+E,EAAmB/E,QAChC,CAIA,OAFSqrB,EAAAA,EAAAA,KAAmBrzB,EAAQoB,EAAQ4G,EAAUlF,EAAQoB,EAEjD,KAGfiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW4G,EAIhB,OAAOmpD,EAAAA,EAAAA,KAAkBnxD,EAAQoB,EAAQ4G,EAAU9D,EAAM,KAG3DiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,UAAEzF,EAAS,MAAEnO,GAAQC,EAAAA,EAAAA,OAAsB2T,GAC3C,OAAE1W,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW4G,EAIhB,OAAOopD,EAAAA,EAAAA,KAA4BpxD,EAAQoB,EAAQ4G,EAAUqK,EAAWnO,EAAM,KCpEhFiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqxD,cAAe,CACbzmC,QACAkE,eAAWvpB,IAEZrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE8S,EAAK,MAAE1mB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BkvB,UAAW,CACTtE,QACAzK,YAAQ5a,EAERhE,aAASgE,IAEVrB,EAAM,KCpBXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MACJ8S,EAAK,MACL1mB,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO6pB,EAAAA,EAAAA,KAAiB3hC,EAAQ,CAC9B0hC,mBAAen8B,EACfk8B,kBAAcl8B,EACdqrD,eAAgBz4C,QAAQyS,GACxBA,SACC1mB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAEkE,EAAM,MAAE9X,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE9C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsxD,WAAY,CAAEt1C,WACb9X,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BsxD,WAAY,CACVC,iBAAiB,IAElBrtD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAOgpB,EAAAA,EAAAA,KAAsB9gC,EAAQkE,EAAM,KAG7CiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0iC,0BAAsBn9B,GACrBrB,EAAM,I,yBClDX,MAAMstD,GAAoB,qB,4BCAX,SAASC,GAAWC,GACjC3rD,SAAS4rD,iBAAkC,gDACxCxvD,SAAS0vB,IACJ6/B,EACG7/B,EAAK3M,KAAK5gB,SAAS,oBACtButB,EAAK3M,KAAO2M,EAAK3M,KAAK+O,QAAQ,UAAW,mBAG3CpC,EAAK3M,KAAO2M,EAAK3M,KAAK+O,QAAQ,iBAAkB,UAClD,GAEN,CCJO,SAAS29B,GAAoBC,GAC9BhL,EAAAA,GACF7hC,OAAO8hC,SAAUgL,eAAeD,GAK9B9rD,SAASiZ,QAAU6yC,IACrB9rD,SAASiZ,MAAQ6yC,EAErB,CAGO,MAAME,IAAez+C,EAAAA,EAAAA,IAASs+C,GAjBV,KAiBmD,GC+sB9E,IAAII,GA4IAC,IAl0BJ9lD,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE1O,EAAK,MAAElF,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EACnDovC,OAA4B3hD,IAAV6D,EAAsBA,IAASlJ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOgjD,gBAKrF,OAHAlnD,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAAEknD,mBAAmBhjD,GAC5C,IAAKlE,EAAQonD,oBAAqBF,EAE9B,KAGf/6C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,gBAAEzX,GAAoByX,EAE5B,MAAO,IACF9X,EACHK,kBACD,KAGH8L,EAAAA,EAAAA,IAAiB,wBAAyBnM,IACjC,IACFA,EACHK,qBAAiBkF,OAIrB4G,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE1O,EAAK,MAAElF,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GACnD,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs2B,WAAY,CACVnlB,SAAU,IACLrD,EAASwoB,WAAWnlB,SACvB,CAAC/P,GAAS,IACL0M,EAASwoB,WAAWnlB,SAAS/P,GAChC8wD,cAAoB3sD,IAAV6D,EAAsBA,IAAU0E,EAASwoB,WAAWnlB,SAAS/P,IAAW,CAAC,GAAG8wD,aAI3FhuD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,+BAA+B,CAACnM,EAAQmD,EAAS2U,KAChE,MAAM,OAAEq6C,EAAM,MAAEjuD,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GACpD,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs2B,WAAY,CACVnlB,SAAU,IACLrD,EAASwoB,WAAWnlB,SACvB,CAAC/P,GAAS,IACL0M,EAASwoB,WAAWnlB,SAAS/P,GAChC8wD,UAAU,EACVE,WAAYD,MAIjBjuD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAM0M,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs2B,WAAY,CACVnlB,SAAU,IACLrD,EAASwoB,WAAWnlB,SACvB,CAAC/P,GAAS,IACL0M,EAASwoB,WAAWnlB,SAAS/P,GAChC8wD,UAAU,MAIfhuD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EACtC,IAAK1X,EAAAA,EAAAA,QAAkBiyD,EAAAA,EAAAA,MAIvB,OAAOtkD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BG,kBAAyE,KAAtDD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOouD,aAAazwD,QAC7DqC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OAAE1W,IAAW4L,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EAE/D,GAAK9C,EAIL,OAAO2M,EAAAA,EAAAA,GAAe/N,EAAQ,CAAEmnD,oBAAgB5hD,EAAW0hD,uBAAuB,GAAS/iD,EAAM,KAGnGiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BqmD,mBAAoBv4C,EAASu4C,kBAC7B/E,WAAY,IACPxzC,EAASwzC,WACZrsB,sBAAkB1vB,EAClBgtD,oBAAgBhtD,IAEjBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,MAAiB,UAAEkD,GAAcyQ,GAAW,CAAC,EAC7D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BshD,WAAY,KACPphD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo9C,WACjCrsB,iBAAkB5tB,EAClBkrD,oBAAgBhtD,IAEjBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,MAAiB,QAAE0I,GAAYiL,GAAW,CAAC,EAC3D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BshD,WAAY,KACPphD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo9C,WACjCiR,eAAgB1lD,EAChBooB,sBAAkB1vB,IAEnBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BG,oBAAoBD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO/D,mBACjD+D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAEjK,GAAUiK,GACZ,aAAE06C,GAAiBxyD,EACzB,IAAKwyD,EACH,MAAO,IACFxyD,EACHwyD,aAAc,CAAC3kD,IAInB,MAAM4kD,EAAYD,EAAa1wD,QAAQ4wD,GAAMA,IAAM7kD,IAMnD,OALA4kD,EAAUnwD,QAAQuL,GACd4kD,EAAU5wD,OA9KU,IA+KtB4wD,EAAU5F,MAGL,IACF7sD,EACHwyD,aAAcC,EACf,KAGHtmD,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,QAAEhS,GAAYgS,GACd,OAAEkS,GAAWhqB,EAAO+pB,SAC1B,IAAKC,EACH,MAAO,IACFhqB,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVC,OAAQ,CACNH,KAAM,IACNE,SAAU,CAACjkB,MAMnB,MAAM6sD,EAAc3oC,EAAOD,SAASjoB,QAAQ8hD,GAAMA,EAAErhD,KAAOuD,EAAQvD,KAGnE,OAFAowD,EAAYrwD,QAAQwD,GAEb,IACF9F,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVC,OAAQ,IACHA,EACHD,SAAU4oC,IAGf,KAGHxmD,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,WAAEoK,GAAepK,GACjB,mBAAE0T,GAAuBxrB,EAC/B,IAAKwrB,EACH,MAAO,IACFxrB,EACHwrB,mBAAoB,CAACtJ,IAIzB,MAAMuwC,EAAYjnC,EAAmB1pB,QAAQS,GAAOA,IAAO2f,IAM3D,OALAuwC,EAAUnwD,QAAQ4f,GACduwC,EAAU5wD,OAnOU,IAoOtB4wD,EAAU5F,MAGL,IACF7sD,EACHwrB,mBAAoBinC,EACrB,KAGHtmD,EAAAA,EAAAA,IAAiB,0BAA2BnM,IACnC,IACFA,EACHwrB,mBAAoB,QAIxBrf,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE86C,EAAK,cAAEC,GAAkB/6C,EACjC,MAAO,IACF9X,EACH+pB,SAAU,IACL/pB,EAAO+pB,SACVoB,MAAO,CACLM,OAAUonC,EAAwB7yD,EAAO+pB,SAASoB,MAAMM,OAA9BmnC,IAG9BzwC,aAAc,IACTniB,EAAOmiB,aACVgJ,MAAO,CACLM,OAASonC,EAAgBD,EAAQ5yD,EAAOmiB,aAAagJ,MAAMM,SAGhE,KAGHtf,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,SAAsBmN,GAAiBwG,EACjDg7C,EAAaxhD,EAAanC,QAChCmC,EAAanC,UAAbmC,EAAanC,SAAY4jD,EAAAA,GAAAA,MAEzB,MAAMC,EAAmB,KAAI9yD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO+uD,eACrDC,EAA4BF,EAAiBv8C,WAAW08C,GAC5DL,EAAaK,EAAEhkD,UAAYmC,EAAanC,QAAUgkD,EAAEnyD,UAAYsQ,EAAatQ,UAQ/E,OANmC,IAA/BkyD,GACFF,EAAiBj+B,OAAOm+B,EAA2B,GAGrDF,EAAiBnnD,KAAKyF,IAEfvD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BizD,cAAeD,GACd9uD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uCAAuC,CAACnM,EAAQmD,EAAS2U,KACxE,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EAExC1U,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAMsY,GAAeC,EAAAA,EAAAA,KAAmB3b,EAAQoB,IAE1C,iBACJgyD,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,KAA4BxwD,EAAMsY,GAChCm4C,GAAiB1G,EAAAA,EAAAA,IAAQ,CAC7BiG,EAAmB,uCAAoC7tD,EACvD8tD,EAAgB,wCAAqC9tD,EACrD+tD,EAAgB,wCAAqC/tD,EACrDouD,EAAgB,+CAA4CpuD,EAC5DmuD,EAAqB,+CAA4CnuD,EACjEguD,EAAmB,uCAAoChuD,EACvDiuD,EAAgB,wCAAqCjuD,EACrDkuD,EAAkB,0CAAuCluD,IACxDmJ,KAAKgR,GAAMmO,EAAAA,GAA0BnO,KAExC,IAAKm0C,EAAehyD,OAKlB,YAJAsB,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,2BACnC3pB,UAKJ,MAAM4vD,EAAgBjmC,EAAAA,GAA0B,sCAC1CkmC,EAAuBF,EAAex3C,KAAK,MAAM4X,QAAQ,YAAc,GAAE6/B,OAE/E3wD,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,8BAA+BkmC,GAClE7vD,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EAChCk7C,GAAmB9yD,EAAAA,EAAAA,KAAeF,EAAQkE,GAC7C+uD,cAAcnxD,QAAOC,IAAA,IAAC,QAAEoN,GAASpN,EAAA,OAAKoN,IAAY2I,EAAQ3I,OAAO,IAEpE,OAAOpB,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BizD,cAAeD,GACd9uD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,cAAc,CAACnM,EAAQmD,EAAS2U,KAC/C,MAAM,KAAE6O,EAAI,MAAEziB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAG5C,GAAI,YAAa6O,GAAQA,EAAKqtC,eAAgBC,EAAAA,GAAAA,IAAqBttC,GACjE,OAAO3mB,EAGT,MAAMk0D,EAAa,KAAIh0D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOiwD,SACrD,GAAI,YAAaxtC,EAAM,CACrB,MAAMytC,EAAqBF,EAAWz9C,WAAW49C,GAASA,EAAiBrzD,UAAY2lB,EAAK3lB,WAChE,IAAxBozD,GACFF,EAAWn/B,OAAOq/B,EAAoB,EAE1C,CAIA,OAFAF,EAAWroD,KAAK8a,IAET5Y,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm0D,QAASD,GACRhwD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5Co8C,EAAa,KAAIh0D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOiwD,SAIrD,OAFAD,EAAWrH,OAEJ9+C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm0D,QAASD,GACRhwD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAQiM,IAAKuwC,EAAgB,MAAEpwD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7D,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs0D,oBACCpwD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,WAAEy8C,EAAU,MAAErwD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bw0D,0BAA2BD,GAC1BrwD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bw0D,+BAA2BjvD,GAC1BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,YAAY,CAACnM,EAAQmD,EAAS2U,KAC7C,MAAM,IACJiM,EAAG,OAAE3iB,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OAC9B2T,EAEE9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,EAAS,OAEd,MAAMyhC,EAAQzhC,EAAQ0oC,WAAYL,EAAAA,EAAAA,KAAarpC,EAAQgB,IAAUuB,GACjE,GAAKkgC,EAAL,CAEA,KAAKqJ,EAAAA,EAAAA,KAAmB9rC,EAAQyiC,GAY9B,OAXAziC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B+rC,gBAAiB,CACftJ,QACApgC,KAAM,OACN2pC,UAAW,CACTvhC,OAAQ,WACRqN,aAGH5T,QACHkH,EAAAA,EAAAA,IAAUpL,GAIZA,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9By0D,WAAY,CACV1wC,MACA3iB,SACAiG,cAEDnD,IACHkH,EAAAA,EAAAA,IAAUpL,EAxBQ,CAwBD,KAGnBmM,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAAS2U,KAC9C,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By0D,gBAAYlvD,GACXrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MACJ5T,GAAQC,EAAAA,EAAAA,SAAsBuwD,GAC5B58C,EAEJ,IAAK68C,EAAAA,EAAAA,KAA0B30D,GAE/B,OAAO+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B40D,SAAU,CACRC,iBAAkBnyD,KAAKC,SACpB+xD,IAEJxwD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,OACJg9C,EAAM,OAAEC,EAAM,MAAE7wD,GAAQC,EAAAA,EAAAA,OACtB2T,EAEJ,IAAKk9C,EAAAA,MAAgCL,EAAAA,EAAAA,KAA0B30D,GAAS,OAExE,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAClC+wD,EAAkBnnD,EAASonD,MAAMC,cAAgB,EACvD,OAAIzyD,KAAKC,MAAQsyD,EAAkBG,EAAAA,SAAnC,GAEOrnD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk1D,KAAM,CACJC,aAAczyD,KAAKC,MACnBmyD,SACAC,WAED7wD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,eACJu9C,EAAc,kBAAEC,EAAiB,gBAAEC,EAAe,iBAAEC,GAClD19C,EAEJ,MAAO,IACF9X,EACHy1D,mBAAoB,CAClBJ,eAAgBA,GAAkBr1D,EAAOy1D,mBAAmBJ,eAC5DC,kBAAmBA,GAAqBt1D,EAAOy1D,mBAAmBH,kBAClEC,kBACAC,oBAEH,KAGHrpD,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtC,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B01D,4BAA4B,GAC3BxxD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtC,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B01D,gCAA4BnwD,GAC3BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,OACJ1W,EAAM,SAAE4G,EAAQ,SAAE5F,EAAQ,MAAE8B,GAAQC,EAAAA,EAAAA,OAClC2T,EAEEylC,EAA8B,UAAnBn7C,GAAUC,MAAoBD,EAASm7C,SACxD,IAAKA,EAAU,OAEf,MAAMF,EAASn1C,OAAOC,OAAOnI,EAAOw9C,qBACjCh6C,MAAMmyD,GAAkBA,EAAcrY,mBAAqBqY,EAAcpY,WAAaA,IAEnF3gC,EAAWygC,GAAQ96C,GAEnB0e,GAAuBC,EAAAA,EAAAA,KAA2BlhB,IACpDq9C,GAAQzvB,WAAc3M,EAQrBrE,IAELzZ,EAAQyyD,wBAAwB,CAAE1xD,UAElCf,EAAQ0yD,kBAAkB,CAAEz0D,SAAQ4G,WAAU4U,cAX5CzZ,EAAQ+f,iBAAiB,CACvBC,eAAgB,UAChBjf,SASqD,KAG3DiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAEtC,EAAK,MAAEtR,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B81D,kBAAmB,CACjBtgD,UAEDtR,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B81D,uBAAmBvwD,GAClBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BoqB,+BAA2B7kB,GAC1BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,OAAE2T,EAAM,MAAEvnB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC9C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+1D,wBAAyBtqC,GACxBvnB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+1D,6BAAyBxwD,GACxBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kCAAkC,CAACnM,EAAQmD,EAAS2U,KACnE,MAAM,IAAE3N,GAAQ2N,GACV,aAAEk+C,GAAiBh2D,EAAOmiB,aAEhC,MAAO,IACFniB,EACHmiB,aAAc,IACTniB,EAAOmiB,aACV6zC,cAAc9pD,EAAAA,EAAAA,IAAO,IAAI8pD,KAAiB7rD,IAAM2M,MAAM,EAAGm/C,EAAAA,MAE5D,KAGH9pD,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OAAE1W,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsB2T,EAM9C,OAHoBgI,EAAAA,EAAAA,KAAkB9f,EAAQkE,IAC5Bf,EAAQua,SAAS,CAAEnb,GAAInB,EAAQ8C,WAE1C6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk2D,iBAAkB,CAChB90D,WAED8C,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bk2D,sBAAkB3wD,GACjBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,OAAE1W,EAAM,QAAE+J,EAAO,MAAEjH,GAAQC,EAAAA,EAAAA,OAAsB2T,EAMvD,OAHoBgI,EAAAA,EAAAA,KAAkB9f,EAAQkE,IAC5Bf,EAAQua,SAAS,CAAEnb,GAAInB,EAAQ8C,WAE1C6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm2D,eAAgB,CACd/0D,SACA+J,YAEDjH,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm2D,oBAAgB5wD,GACfrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,gBAAEs+C,GAAoBp2D,GACtB,SAAE4iD,EAAWwT,EAAgBxT,SAAQ,YAAEyT,EAAcD,EAAgBC,aAAgBv+C,EAE3F,MAAO,IACF9X,EACHo2D,gBAAiB,CACfxT,WACAyT,eAEH,KAGHlqD,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAM,SAAEw+C,EAAQ,KAAEC,EAAI,MAAEryD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEtD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bw2D,SAAU,CACRC,MAAOH,EACPC,SAEDryD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bw2D,cAAUjxD,GACTrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAoBnM,IACnCmzC,MAAO,eAAqBzwC,KAAKC,SAC9Bod,MAAMzB,GAAaA,EAAShQ,SAC5ByR,MAAM6O,KH/rBI,SAA8B8nC,EAAuBC,EAAoBC,GACtF,MAAMC,EAAyBH,EAAcI,OAE7C,QAAKtF,GAAkBuF,KAAKF,IAQrBA,IAA2BF,CACpC,EGsrBUK,CAFJpoC,EAAUA,EAAQkoC,OAEgBrH,aAChCzvD,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHi3D,sBAAsB,IAExB7rD,EAAAA,EAAAA,IAAUpL,GACZ,IAEDk3D,OAAO7C,IACF/6B,EAAAA,KAEFC,QAAQ5mB,MAAM,4BAA6B0hD,EAC7C,GACA,KAGNloD,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQyK,EAAQqN,KAChE9X,GAASwL,EAAAA,EAAAA,MACTxL,EAAS,IACJA,EACHm3D,0BAA2Bh/C,QAAQL,KAErC1M,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,eAAgBnM,KAC1BE,EAAAA,EAAAA,KAAeF,GAAQmE,EAAAA,EAAAA,OAAmBizD,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3BlrD,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,UAAEw/C,EAAS,MAAEpzD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAmBjD,OAjBIw/C,GACEtF,IAAsBuF,cAAcvF,IAExCA,GAAuBhtC,OAAOwyC,aAAY,KACxCr0D,EAAQsjD,gBAAgB,CACtBviD,SACA,GAXsB,OAc1BqzD,cAAcvF,IACdA,QAAuBzsD,GAGzBvF,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs3D,aACCpzD,GAEI,IACFlE,EACHy3D,2BAA4BH,GAAYI,EAAAA,GAAAA,WAA6BnyD,EACtE,KAGH4G,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,sBAAE6/C,GAA0B33D,EAAO64B,SAASmU,MAC5C9qC,EAAgBlC,EAAOkC,cACvB01D,EAAe53D,EAAOykB,QAAQmzC,aAC9BC,EAASD,EAAe,OAAS,GAEvC,GAAI7xD,SAASiZ,MAAM1a,SAASwzD,EAAAA,KAG1B,OAFArG,IAAW,QACXG,GAAqB,GAAEiG,IAASE,EAAAA,OAAcD,EAAAA,OAIhD,GAAI93D,EAAOy3D,4BAA8B92D,KAAKwU,MAAMzS,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEMq1D,GAFoBN,EAAAA,GAAAA,MAEY13D,EAAOy3D,2BAE7C,GAAIO,EAAY,EAGd,OAFApG,GAAqB,GAAEiG,IAASG,iBAAyBA,EAAY,EAAI,IAAM,WAC/EvG,IAAW,EAGf,CAEAA,IAAW,GAEX,MAAM54C,GAAc7L,EAAAA,EAAAA,KAAyBhN,EAAQkE,GAErD,GAAI2U,GAAe8+C,IAA0B33D,EAAOi4D,SAASC,eAAgB,CAC3E,MAAM,OAAE92D,EAAM,SAAE4G,GAAa6Q,EACvB4M,GAAc9d,EAAAA,EAAAA,KAAW3H,EAAQoB,GACvC,GAAIqkB,EAAa,CACf,MAAMzG,GAAQm5C,EAAAA,EAAAA,KAAatqC,EAAAA,GAA2BpI,EAAarkB,IAAWc,GACxEuH,GAAQc,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQ4G,GAC1C,OAAIyd,EAAY/b,SAAWD,OACzBsoD,GAAc,GAAE8F,IAAS74C,OAAWvV,EAAMuV,cAI5C+yC,GAAc,GAAE8F,IAAS74C,IAE3B,CACF,CAEA4yC,GAAoB/K,EAAAA,GAAc,GAAM,GAAEgR,IAASE,EAAAA,MAAa,KAGlE5rD,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo4D,wBAAoB7yD,GACnBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bq4D,0BAAsB9yD,GACrBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,MAAE2uB,EAAK,MAAEviC,GAAQC,EAAAA,EAAAA,OAAsB2T,EAC7C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs4D,uBAAwB7xB,GACvBviC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,MAC7DygD,EAAAA,GAAAA,IAAiBzgD,EAAQ62B,SAAS,KAGpCxiC,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,SAAE0gD,GAAa1gD,GACf,gCACJ2gD,EAA+B,8BAC/BC,EAA6B,6BAC7BC,GACE34D,EAAOwkB,WAAa,CAAC,GACjBo0C,oCAAqCC,GAAmB74D,EAAO64B,SAEvE,GAAK4/B,GAAoCC,GAAkCC,KAGvEE,GAAkBn2D,KAAKC,MAAQk2D,EAAgD,IAA/BF,GAgBpD,OAdwBzwD,OAAOC,OAAOnI,EAAOoI,SAAStG,QAAQ4d,IAAOA,EAAE43C,YAAW5oD,KAAKgR,GAAMA,EAAEnd,KAE/EJ,SAAS+B,IACvBf,EAAQgZ,iBAAiB,CACvB6C,MAAO6O,EAAAA,GAA0B2qC,EAAW,qBAAuB,wBACnEx3D,QAAS6sB,EAAAA,GACP2qC,EAAW,4BAA8B,8BACzCA,EAAWE,EAAgCD,GAE7Cj2B,SAvzB2C,IAwzB3Ct+B,SACA,IAGG,IACFlE,EACH64B,SAAU,IACL74B,EAAO64B,SACV+/B,oCAAqCl2D,KAAKC,OAE7C,IAIH,IACIm2D,GADAC,GAA+B,GAGnC/7B,EAAAA,GAAAA,KAAah9B,IAEX,MAAM,gBAAEymD,EAAe,eAAEuS,IAAmBpxC,EAAAA,EAAAA,MAEtCqxC,EAAkBj5D,EAAOi4D,SAASC,iBAAmBjG,GACrDiH,EAAmBhxD,OAAOC,OAAOnI,EAAOoI,SAAStG,QAAQ4d,GAAMA,EAAE43C,YAAWz1D,OAC5Eq7B,GAAch9B,EAAAA,EAAAA,KAAeF,GAAQmE,EAAAA,EAAAA,OAAmB+4B,YAE1D+7B,GACFxS,IAGEyS,IAAqBH,IAAwB77B,IAC3C47B,IAAepxC,aAAaoxC,IAEhCA,GAAgB9zC,OAAOzZ,YAAW,KAChCvL,GAASwL,EAAAA,EAAAA,MACT,MAAM2tD,EAAsBjxD,OAAOC,OAAOnI,EAAOoI,SAAStG,QAAQ4d,GAAMA,EAAE43C,YAAWz1D,OACrFm3D,EAAeG,KAAwBC,EAAAA,EAAAA,MAAuBv3D,OAAO,GAnBpD,MAuBrBowD,GAAqBjyD,EAAOi4D,SAASC,eACrCa,GAAuBG,CAAgB,KC93BzC/sD,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5C25B,GADUvxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACvBd,QAAU,YAC3B4nB,GAAoBn5D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOm1D,kBAaxD,OAXAl2D,EAAQm2D,0BAA0B,CAChCC,WAAYF,EACZ5nB,SACAvtC,UAGFlE,GAASw5D,EAAAA,EAAAA,KAAax5D,EAAQkE,IACrBotC,EAAAA,EAAAA,KAActxC,EAAQ,CAC7ByxC,UACCvtC,EAEU,KAGfiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAIlD,OAFA9X,GAASsxC,EAAAA,EAAAA,KAActxC,EAAQ,CAAEyxC,YAAQlsC,GAAarB,IAC7C4xC,EAAAA,EAAAA,KAAmB91C,EAAQ,CAAEyxC,YAAQlsC,GAAarB,EAC9C,KAGfiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAEnF,EAAK,MAAEzO,GAAQC,EAAAA,EAAAA,OAAsB2T,EAE7C,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BuyC,QAAS,KACJryC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOquC,QACjCd,OAAQ,SACR9+B,UAEDzO,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B82C,mBAAevxC,GACdrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B05C,mBAAen0C,GACdrB,EAAM,I,iBCzDXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OACJ1W,EAAM,SAAE4G,EAAWD,EAAAA,GAAc,UAAEV,EAAS,WAAEoyD,EAAU,aAAEC,EAAY,mBAAEC,EAAkB,OAAE5N,EAAM,mBAClG6N,EAAkB,gBAAEC,EAAe,MAAE31D,GAAQC,EAAAA,EAAAA,OAC3C2T,EAEEhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,IACRhsD,EAASgsD,YACZ14D,SACA4G,WACAX,YACAoyD,WAAYA,GAAc,EAC1BC,eACAC,qBACA5N,SACA8N,kBACAjX,UAAU,EACVgX,sBAEFvgD,gBAAiB,CAAC,EAClBsI,0BAA0B,GACzBzd,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,OACJk0C,EAAM,QAAE1rB,EAAO,aAAE2rB,EAAY,SAAErJ,IAC7B1iD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO41D,YAElC,OAAO/rD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,CACX9N,SACA1rB,UACAsiB,WACAqJ,iBAED/nD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,OACJk0C,EAAM,MACN9nD,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,KACR55D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO41D,YACjC9N,SACA1rB,SAAS,IAEVp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,aACJm0C,EAAY,MACZ/nD,GAAQC,EAAAA,EAAAA,OACN2T,EAUJ,OARA9X,EAAS,IACJA,EACH85D,YAAa,IACR95D,EAAO85D,YACV5N,iBAAkBD,KAIfl+C,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,KACR55D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO41D,YACjC7N,iBAED/nD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,QACJwoB,EAAO,MACPp8B,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,KACR55D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO41D,YACjCx5B,YAEDp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,SAAE8qC,EAAQ,MAAE1+C,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEhD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B85D,YAAa,KACR55D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO41D,YACjClX,aAED1+C,EAAM,I,oDC/FX,IAAI61D,IAAiB,GACrBC,EAAAA,EAAAA,KAAe,KAEb,MAAMh6D,GAASwL,EAAAA,EAAAA,MACVxL,EAAOi6D,UACRj6D,EAAOi4D,SAASiC,cAAgBH,IAAyD,IAAvC7xD,OAAOsG,KAAKxO,EAAOoI,SAASvG,SAChFs4D,EAAAA,GAAAA,KACF,KAGFhuD,EAAAA,EAAAA,IAAiB,eAAeqH,MAAOxT,EAAQmD,EAAS2U,KACtD,MAAM,SAAEmgD,EAAQ,MAAE/zD,GAAQC,EAAAA,EAAAA,OAAsB2T,EAChD9X,GAASo6D,EAAAA,EAAAA,KAAuBp6D,EAAQ,CACtC0uB,WAAW,KAEbtjB,EAAAA,EAAAA,IAAUpL,SACJq6D,EAAAA,GAAAA,IAAcpC,GAEpB,MAAMqC,EAAc9lB,KAAKC,UAAU,KAAK8lB,EAAAA,GAAAA,MAAqBv+C,OAAQhc,EAAOkC,gBAC5ElC,GAASwL,EAAAA,EAAAA,MACT,MAAMgvD,GAAaC,EAAAA,GAAAA,KAAgBL,EAAAA,EAAAA,KAAuBp6D,EAAQ,CAChEk6D,aAAa,EACbvnD,WAAOpN,EACPmpB,WAAW,KAGb,UACQgsC,EAAAA,GAAAA,IAAeJ,EAAaE,IAElCG,EAAAA,EAAAA,MACA36D,GAASwL,EAAAA,EAAAA,MACTxL,GAASo6D,EAAAA,EAAAA,KAAuBp6D,EAAQ,CACtCk6D,aAAa,EACbvnD,WAAOpN,EACPmpB,WAAW,KAEbtjB,EAAAA,EAAAA,IAAUpL,IAEV46D,EAAAA,GAAAA,KAAiB,EACnB,CAAE,MAAOvG,IACPwG,EAAAA,GAAAA,KAEA76D,GAASwL,EAAAA,EAAAA,MACTxL,GAASo6D,EAAAA,EAAAA,KAAuBp6D,EAAQ,CACtC0uB,WAAW,KAEbtjB,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQgZ,iBAAiB,CACvBnb,QAAS,yBACTkD,UAEFf,EAAQ23D,0BAA0B,CAAE3I,OAAQ4I,EAAAA,GAAgBC,iBAAkB92D,SAChF,MAGFiI,EAAAA,EAAAA,IAAiB,iBAAkBnM,KAC5Bi7D,EAAAA,GAAAA,OAEEC,EAAAA,EAAAA,KAAsBl7D,OAG/BmM,EAAAA,EAAAA,IAAiB,gBAAgB,CAACnM,EAAQmD,EAAS2U,KACjD,MAAMqjD,EAAkBjzD,OAAOC,OAAOnI,EAAOoI,UACvC,YAAEkyD,EAAW,WAAEE,GAAe1iD,EAC9BsjD,EAAU5mB,KAAK6mB,MAAMf,IAC3BgB,EAAAA,GAAAA,IAAaF,EAASA,EAAQp/C,QAE9B,MAAMod,EAAiBp5B,GACvBA,EAASw0C,KAAK6mB,MAAMb,IACbpyD,QAAUgxB,EAAehxB,SAChCmzD,EAAAA,GAAAA,GAAav7D,GAAQw7D,EAAAA,EAAAA,IAAUC,GAAAA,KAE/Bz7D,GAASo6D,EAAAA,EAAAA,KACPp6D,EACA,CACEk4D,gBAAgB,EAChBvlD,WAAOpN,EACPm2D,qBAAsB,KAG1BtwD,EAAAA,EAAAA,IAAUpL,IAEV26D,EAAAA,EAAAA,MAEAQ,EAAgBh5D,SAAQJ,IAAA,IAAGQ,GAAI2B,EAAK,YAAEg5B,GAAan7B,EAAA,OAAKoB,EAAQw4D,KAAK,CAAEz3D,QAAOg5B,eAAc,IAC5F/5B,EAAQy4D,SAAS,KAMnBzvD,EAAAA,EAAAA,IAAiB,2BAA4BnM,IAC3C,MAAM07D,GAAwB17D,EAAOi4D,UAAUyD,sBAAwB,GAAK,EAE5E,OAAOtB,EAAAA,EAAAA,KAAuBp6D,EAAQ,CACpC07D,uBACAG,aAAeH,GARU,EASrBh5D,KAAKC,MAR6B,UAQe4C,GACrD,KAGJ4G,EAAAA,EAAAA,IAAiB,8BAA+BnM,IACvCo6D,EAAAA,EAAAA,KAAuBp6D,EAAQ,CACpC07D,qBAAsB,EACtBG,kBAAct2D,OAIlB4G,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAEnF,GAAUmF,EAElB,OAAOsiD,EAAAA,EAAAA,KAAuBp6D,EAAQ,CAAE2S,SAAQ,KAGlDxG,EAAAA,EAAAA,IAAiB,sBAAuBnM,IAC/Bo6D,EAAAA,EAAAA,KAAuBp6D,EAAQ,CAAE2S,WAAOpN,OAGjD4G,EAAAA,EAAAA,IAAiB,oBAAoB,KACnC4tD,IAAiB,CAAI,KC1HvB5tD,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,WAAEyhD,EAAU,OAAE9nB,EAAM,MAAEvtC,GAAQC,EAAAA,EAAAA,OAAsB2T,GACpD,mBACJgkD,EAAkB,eAAErc,EAAc,WAAEsc,EAAU,MAAEC,GAC9CzC,GAAc,CAAC,EAEnB,IAAKuC,GAAuBrc,GAAmBsc,GAAeC,KAI9D74D,EAAQ6iD,uBAAuB,CAAE9hD,UAElB,SAAXutC,GA2BJ,OAtBIqqB,IACF97D,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9B0xC,aAAcoqB,GACb53D,IAGDu7C,GACFt8C,EAAQ84D,iBAAiB,CACvB76D,OAAQq+C,EAAer+C,OACvBiG,UAAWo4C,EAAep4C,UAC1Bg4C,aAAcI,EAAejF,OAC7Bt2C,UAIA63D,GACF54D,EAAQ+4D,aAAa,IAChBH,EACH73D,UAIGlE,CAAM,KAGfmM,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MACJ5T,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEhB,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm8D,2BAA2B,GAC1Bj4D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,4BAA4B,CAACnM,EAAQmD,EAAS2U,KAC7D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm8D,+BAA2B52D,GAC1BrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,+BAA+B,CAACnM,EAAQmD,EAAS2U,KAChE,MAAM,MACJ5T,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEhB,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo8D,wBAAyB,CACvB/lB,QAAQ,IAETnyC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQmD,EAAS2U,KACjE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo8D,6BAAyB72D,GACxBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,yCAAyC,CAACnM,EAAQmD,EAAS2U,KAC1E,MAAM,OACJ1W,EAAM,UACNiG,EAAS,MACTnD,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEV9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,EAAS,OAEd,MAAMq7D,GAAcC,EAAAA,GAAAA,IAAqCt7D,GACzD,OAAKq7D,GAEEE,EAAAA,EAAAA,KAA0Bv8D,EAAQq8D,EAAan4D,QAFtD,CAE4D,KAG9DiI,EAAAA,EAAAA,IAAiB,yBAAyB,CAACnM,EAAQmD,EAAS2U,KAC1D,MAAM,mBACJgkD,EAAkB,eAClBrc,EAAc,WACdsc,EAAU,MACVC,EAAK,oBACLQ,EAAmB,MACnBt4D,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEV2kD,EAAcz8D,EAAO8xC,OAAOD,QAElC,MAAK2qB,GAAuBC,GAAeT,GAASA,EAAMU,eAAiBD,GAmB3E,OALAz8D,GAAS28D,EAAAA,EAAAA,KAAiB38D,EAAQkE,GAGlCf,EAAQ8yC,kBAEDloC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bq5D,kBAAmB,CACjByC,qBACArc,iBACAsc,aACAC,UAED93D,GAzBDf,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,wBACnC+uC,WAAY/uC,EAAAA,GAA0B,6BACtCpjB,OAAQ,CACNA,OAAQ,wBACRqN,QAAS,CAAEkkD,QAAOQ,qBAAqB,EAAMt4D,UAE/C24D,KAAM,OACN34D,SAiBK,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bq5D,uBAAmB9zD,GAClBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAE5C45B,GAAeiE,EAAAA,EAAAA,KAAmB31C,EAAQkE,GAChD,IAAIutC,EAASC,GAAcD,OAK3B,OAJKA,GAAqB,YAAXA,IACbA,EAAS,cAGJ1jC,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B0xC,aAAc,CACZD,WAEDvtC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,YAAEukD,EAAW,MAAEn4D,GAAQC,EAAAA,EAAAA,OAAsB2T,EACnD,OAAOykD,EAAAA,EAAAA,KAA0Bv8D,EAAQq8D,EAAan4D,EAAM,KAG9DiI,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQmD,EAAS2U,KACjE,MAAM,OACJ1W,EAAM,UACNiG,EAAS,MACTnD,GAAQC,EAAAA,EAAAA,OACN2T,GAAW,CAAC,EAEV9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,EAAS,OAEd,MAAMq7D,GAAcS,EAAAA,GAAAA,IAA4B97D,GAChD,OAAKq7D,GAEEE,EAAAA,EAAAA,KAA0Bv8D,EAAQq8D,EAAan4D,QAFtD,CAE4D,KAG9DiI,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B+8D,2BAAuBx3D,GACtBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,8BAA8B,CAACnM,EAAQmD,EAAS2U,KAC/D,MAAM,aAAEklD,EAAY,MAAE94D,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEpD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi9D,uBAAwB,CACtBD,iBAED94D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,+BAA+B,CAACnM,EAAQmD,EAAS2U,KAChE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi9D,4BAAwB13D,GACvBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,kBAAkB,CAACnM,EAAQmD,EAAS2U,KACnD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi3C,eAAW1xC,GACVrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAClD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bm3C,eAAgB,CAAEd,QAAQ,IACzBnyC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,gCAAgC,CAACnM,EAAQmD,EAAS2U,KACjE,MAAM,OACJ1W,EAAM,UAAEiG,EAAS,MAAEnD,GAAQC,EAAAA,EAAAA,OACzB2T,EAEE9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,IAAYA,EAAQ0E,QAAQ+E,OAAQ,OAEzC,MAAMA,EAASzJ,EAAQ0E,QAAQ+E,OAC/B,GAAoB,aAAhBA,EAAOpI,KAAqB,OAChC,MAAM6vC,EAAWznC,EAAOynC,SAElBgrB,EAAiBl8D,EAAQqC,WAAarC,EAAQI,OAASpB,EAAOkC,cAE9DyvC,EAAO,CACXz9B,KAAMlT,EAAQkT,KACdy9B,KAAMO,EAASP,KACf3wC,QAASkxC,EAASlxC,QAClBm8D,eAAgBjrB,EAASirB,eACzBC,aAAclrB,EAASkrB,aACvBC,WAAYnrB,EAASorB,QACrBC,OAAQv8D,EAAQqC,WAAarD,EAAOkC,cAAgBlB,EAAQI,OAC5DiG,UAAarG,EAAQqC,YAAcjC,IAAWpB,EAAOkC,mBAA8BqD,EAAbvE,EAAQuB,GAC9Ei7D,YAAatrB,EAASsrB,aAGxBr6D,EAAQs6D,kBAAkB,CAAEzhD,OAAQkhD,EAAgBvrB,OAAMztC,SAAQ,KAGpEiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,KACJ65B,EAAI,MAAEztC,GAAQC,EAAAA,EAAAA,OACZ2T,EAEEkE,EAAS,WAAYlE,EAAUA,EAAQkE,YAASzW,EAEtD,OAAOwI,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B09D,cAAe,CACb1hD,SACA21B,SAEDztC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B09D,mBAAen4D,GACdrB,EAAM,KCnRXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ1W,EAAM,MACN8C,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAI1W,GACK2M,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,eAAgB,CACdv8D,SACAiG,eAAW9B,EACXoiD,cAAUpiD,IAEXrB,IAGE6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,oBAAgBp4D,GACfrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,6BAA6B,CAACnM,EAAQmD,EAAS2U,KAC9D,MAAM,OACJ1W,EAAM,UACNiG,EAAS,SACTsgD,EAAQ,MACRzjD,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,eAAgB,CACdv8D,SACAiG,YACAsgD,aAEDzjD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,OACJ7V,EAAM,QACN4K,EAAO,SACP86C,EAAQ,cACRiW,EAAa,MACb15D,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,eAAgB,CACd7kD,YAAa7W,EACb4K,UACA+wD,gBACAjW,aAEDzjD,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,SACJ6vC,EAAQ,OACRvmD,EAAM,MACN8C,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,eAAgB,CACdhW,WACAvmD,SACAy8D,cAAc,IAEf35D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5B29D,eAAgB,IACX7vD,EAAS6vD,eACZt2D,eAAW9B,EACXoiD,cAAUpiD,EACVsH,aAAStH,EACTuT,iBAAavT,EACbs4D,kBAAct4D,IAEfrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,OAAE1W,EAAM,UAAEiG,GAAcyQ,EACxB9W,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,GAClD,IAAKrG,EACH,OAGF,MAAM,UAAEM,GAAcN,EAEtB,IAAKM,EACH,OAGF,MAAMw8D,EAAiBx8D,EAAUC,QAAQmN,KAAKtM,IAC5C,GAAIA,EAASsB,YAAa,CACxB,IAAKtB,EAASqT,MAAO,OACrB,MAAO,IACFrT,EACHsB,iBAAa6B,EACbw4D,8BAA0Bx4D,EAC1By4D,YAAa57D,EAAS27D,yBAE1B,CACA,OAAO37D,CAAQ,IACdN,OAAOqW,SAUV,OARAjQ,OAAOC,OAAOnI,EAAOoI,SAClBjG,SAAQJ,IAAmB,IAAhBQ,GAAI2B,GAAOnC,EACrBoB,EAAQ86D,oBAAoB,CAC1B9uD,SAASpL,EAAAA,EAAAA,IAAc/C,GACvBkD,SACA,KAGCtB,EAAAA,EAAAA,KAAkB5C,EAAQoB,EAAQiG,EAAW,CAClD/F,UAAW,IACNA,EACHC,QAASu8D,IAEX,KCpHJ3xD,EAAAA,EAAAA,IAAiB,mBAAmBqH,MAAOxT,EAAQmD,EAAS2U,KAC1D,MAAM,OACJ7V,EAAM,QAAE4K,EAAO,aAAEqxD,EAAY,cAAEC,EAAa,UAAEn9B,EAAS,UAAEo9B,EAAS,OAAErS,EAAM,MAAE7nD,GAAQC,EAAAA,EAAAA,OAClF2T,EAEEyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMzQ,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAClCm+C,GAAcQ,EAAAA,EAAAA,KAAkB7iD,EAAQiC,GAE9C,GAAI4K,KAAaw1C,IAAgBA,EAAY/4C,KAAKuD,IAAW,CAC3D,MAAM0I,QAAenB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEmK,OAAMpU,IAAK,CAAC0C,KAEpE,IAAK0I,EACH,OAEFvV,GAASwL,EAAAA,EAAAA,MACTxL,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQiC,EAAQsT,EAAOysC,QACpD,CAEA,MAAMqc,EAAYvwD,EAASwwD,YAAYD,YAClCE,EAAAA,EAAAA,KAAyBv+D,EAAQiC,EAAQ4K,EAASsxD,EAAeD,EAAcl9B,EAAWo9B,GAE/Fp+D,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs+D,YAAa,IACRxwD,EAASwwD,YACZr8D,SACA4K,QAASA,IAAW2xD,EAAAA,EAAAA,KAA6Bx+D,EAAQiC,KAAWw8D,EAAAA,EAAAA,KAAuBz+D,EAAQiC,GACnGi8D,eACAl9B,YACAo9B,YACAD,gBACAO,eAAWn5D,EACXwmD,SACAsS,cAEDn6D,IACHkH,EAAAA,EAAAA,IAAUpL,EAAO,KAGnBmM,EAAAA,EAAAA,IAAiB,6BAA6BqH,MAAOxT,EAAQmD,EAAS2U,KACpE,MAAM,SACJgT,EAAQ,QAAEje,EAAO,OAAEk/C,EAAM,MAAE7nD,GAAQC,EAAAA,EAAAA,OACjC2T,EAEE1U,QAAayrC,EAAAA,EAAAA,IAAoB7uC,EAAQ8qB,GAE1C1nB,GAILD,EAAQw7D,gBAAgB,CACtB18D,OAAQmB,EAAKb,GACbsK,UACAqxD,cAAc,EACdC,eAAe,EACfpS,SACA7nD,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACnM,EAAQmD,EAAS2U,KACrD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,GAC5C,QACJwoB,EAAO,cAAEs+B,EAAa,sBAAEC,EAAqB,QAAEhyD,IAC7C3M,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo6D,YAElC,OAAKzxD,EAEL7M,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bs+D,YAAa,CACXh+B,UACAs+B,gBACAC,wBACAC,yBAAqBv5D,EACrB84D,eAAW94D,IAEZrB,GAVkBlE,CAYR,KAGfmM,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,QACJwoB,EAAO,MACPp8B,GAAQC,EAAAA,EAAAA,OACN2T,EAEJ,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,KACRp+D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo6D,YACjCh+B,YAEDp8B,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,QAAEinD,EAAO,WAAE1wC,EAAU,MAAEnqB,GAAQC,EAAAA,EAAAA,OAAsB2T,EAErD4vC,EAAa1nD,EAAOgiD,QAAQgd,eAAe3wC,EAAa,WAAa,UAC3E,OAAKq5B,GAAY7lD,QAIVkM,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,KACRp+D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOo6D,YACjC,CAACjwC,EAAa,wBAA0B,iBAAkB0wC,IAE3D76D,GARMlE,CAQA,KAGXmM,EAAAA,EAAAA,IAAiB,qBAAqB,CAACnM,EAAQmD,EAAS2U,KACtD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,OACJjC,EAAM,QAAE4K,EAAO,aAAEqxD,EAAY,cAAEC,EAAa,UAAEE,GAC5CvwD,EAASwwD,YAEb,GAAIH,IAAkBE,EAEpB,YADAl7D,EAAQkhB,iBAAiB,CAAEngB,UAI7B,IAAKjC,IAAW4K,EACd,OAGF,MAAM0R,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAEhC,KADoB4gD,EAAAA,EAAAA,KAAkB7iD,EAAQiC,KACzBsc,EACnB,OAGF,MAAQ8R,QAAS2uC,EAAc,iBAAEC,GAAqBZ,EAEhDa,GADeD,EAAiBh9D,IAAW,IACVmzB,QAAQvoB,GAC/C,IAAIsyD,EACAC,EAEJ,GAAIF,EAAoB,EACtBC,EAAqBD,EAAoB,EACzCE,EAAiBn9D,MACZ,CACL,MAAMo9D,EAAsBL,EAAe5pC,QAAQnzB,GAAU,EAC7D,GAAIi8D,GAAgBmB,EAAsB,EACxC,OAGFD,EAAiBJ,EAAeK,GAChCF,GAAsBF,IAAmBG,IAAiBv9D,QAAU,GAAK,CAC3E,CAEA,MAAMy9D,EAAkBL,IAAmBG,KAAkBD,GAC7D,OAAKG,GAIEvxD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZr8D,OAAQm9D,EACRvyD,QAASyyD,IAEVp7D,QAVH,CAUS,KAGXiI,EAAAA,EAAAA,IAAiB,iBAAiB,CAACnM,EAAQmD,EAAS2U,KAClD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,OACJjC,EAAM,QAAE4K,EAAO,aAAEqxD,EAAY,cAAEC,EAAa,UAAEE,GAC5CvwD,EAASwwD,YACb,GAAIH,IAAkBE,EAEpB,YADAl7D,EAAQkhB,iBAAiB,CAAEngB,UAI7B,IAAKjC,IAAW4K,EACd,OAGF,MAAM0R,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAEhC,KADoB4gD,EAAAA,EAAAA,KAAkB7iD,EAAQiC,KACzBsc,EACnB,OAGF,MAAQ8R,QAAS2uC,EAAc,iBAAEC,GAAqBZ,EAChDkB,EAAeN,EAAiBh9D,IAAW,GAC3Ci9D,EAAoBK,EAAanqC,QAAQvoB,GAC/C,IAAI2yD,EACAC,EAEJ,GAAIP,EAAoBK,EAAa19D,OAAS,EAC5C29D,EAAiBN,EAAoB,EACrCO,EAAax9D,MACR,CACL,MAAMy9D,EAAkBV,EAAe5pC,QAAQnzB,GAAU,EACzD,GAAIi8D,GAAgBwB,EAAkBV,EAAen9D,OAAS,EAE5D,YADAsB,EAAQkhB,iBAAiB,CAAEngB,UAI7Bu7D,EAAaT,EAAeU,GAC5BF,EAAiB,CACnB,CAEA,MAAMG,EAAcV,IAAmBQ,KAAcD,GACrD,OAAKG,GAIE5xD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZr8D,OAAQw9D,EACR5yD,QAAS8yD,IAEVz7D,QAVH,CAUS,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,QAAEjL,EAAO,MAAE3I,GAAQC,EAAAA,EAAAA,OAAsB2T,EACzChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZI,UAAW,CACT7xD,UACA6T,WAAY,GACZgO,WAAW,KAGdxqB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,uBAAuB,CAACnM,EAAQmD,EAAS2U,KACxD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,aAAa/uD,EAAAA,EAAAA,IAAKzB,EAASwwD,YAAa,CAAC,eACxCp6D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,iBAAiBqH,MAAOxT,EAAQmD,EAAS2U,KACxD,MAAM,OAAE7V,EAAM,QAAE4K,EAAO,MAAE3I,GAAQC,EAAAA,EAAAA,OAAsB2T,EAEjDyG,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGF,MAAMsT,QAAazd,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEmK,OAAM1R,YAChDglB,KAIL6W,EAAAA,EAAAA,IAAoB7W,GACpB1uB,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,cACnC3pB,UACA,KAGJiI,EAAAA,EAAAA,IAAiB,eAAe,CAACnM,EAAQmD,EAAS2U,KAChD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAChC,QAAEjL,EAAS5K,OAAQ6W,IAAgBC,EAAAA,EAAAA,KAAyB/Y,EAAQkE,GAG1E,IAFqBiU,QAAQtL,GAAWiM,GAGtC,OAGF,MAAM,IAAEyU,EAAG,QAAEznB,EAAO,WAAEb,GAAe6S,EAErC,IAAI9W,EAEFA,EADEusB,EACQ,wBACDznB,EACC,4BACDb,EACC,6BAEA,4BAGZ9B,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B7sB,GACnC47D,WAAY/uC,EAAAA,GAA0B,yBACtCpjB,OAAQ,CAAC,CACPA,OAAQ,mBACRqN,aAASvS,GACR,CACDkF,OAAQ,WACRqN,QAAS,CAAEvV,GAAIuW,KAEjB5U,SACA,KAGJiI,EAAAA,EAAAA,IAAiB,0BAA0B,CAACnM,EAAQmD,EAAS2U,KAC3D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZsB,oBAAoB,IAErB17D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,2BAA2B,CAACnM,EAAQmD,EAAS2U,KAC5D,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAC5ChK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZsB,oBAAoB,IAErB17D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,sBAAsB,CAACnM,EAAQmD,EAAS2U,KACvD,MAAM,OAAEu+B,EAAM,MAAEnyC,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EACpDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO6J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZuB,mBAAoBxpB,IAErBnyC,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,UAAE4W,EAAS,MAAExqB,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAEvDhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAK4J,EAASwwD,YAAYI,WAEnB3wD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZI,UAAW,IACN5wD,EAASwwD,YAAYI,UACxBp2C,WAAO/iB,EACPmpB,YACAhO,WAAY,MAGfxc,GAZyClE,CAYnC,KAGXmM,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,OACJkE,EAAM,cAAE8jD,EAAa,kBAAEC,EAAiB,MAAE77D,GAAQC,EAAAA,EAAAA,OAChD2T,EAEEhK,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,UAAEw6D,GAAc5wD,EAASwwD,YAC/B,IAAKI,GAAW7xD,QAAS,OAEzB,MAAMmzD,EAAetB,GAAWp2C,OAAO5Z,KAAKuxD,GACtCA,EAAKh+D,SAAW+Z,EACX,IACFikD,EACHH,cAAeA,QAAiBv6D,EAChCw6D,kBAAmBA,QAAqBx6D,GAIrC06D,IAGT,OAAOlyD,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bs+D,YAAa,IACRxwD,EAASwwD,YACZI,UAAW,IACNA,EACHp2C,MAAO03C,KAGV97D,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,mBAAmB,CAACnM,EAAQmD,EAAS2U,KACpD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bo3C,gBAAY7xC,GACXrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,wBAAwB,CAACnM,EAAQmD,EAAS2U,KACzD,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5By3C,qBAAiBlyC,GAChBrB,EAAM,KAGXiI,EAAAA,EAAAA,IAAiB,+BAA+B,CAACnM,EAAQmD,EAAS2U,KAChE,MAAM,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsB2T,GAAW,CAAC,EAElD,OAAO/J,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5Bi4C,4BAAwB1yC,GACvBrB,EAAM,I,SCtYXiI,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAMivB,GAAYpqB,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAOP,KACpCmH,QAASw2D,EAAW,wBAAEC,GAA4BpuC,GAAa,CAAC,EAEpEjvB,EAAOM,KAAK+8D,yBAA2BA,GACtCr9D,EAAOM,KAAK+8D,wBAA0BA,IACzCr9D,EAAS,IACJA,EACHM,MAAMmM,EAAAA,EAAAA,IAAKzM,EAAOM,KAAM,CAAC,6BAI7BpD,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQ8C,EAAOP,GAAIO,EAAOM,MAE1C2uB,GAAWquC,mBAAqBt9D,EAAOM,KAAKg9D,mBAC9CpgE,GAASilD,EAAAA,EAAAA,KAAwBjlD,EAAQ8C,EAAOP,GAAIO,EAAOM,KAAKg9D,mBAAoB,KAGtFh1D,EAAAA,EAAAA,IAAUpL,GAEV,MAAMqgE,GAAc14D,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAOP,IA2B9C,OA1BKO,EAAOw9D,oBAAqBD,IAAgB/yD,EAAAA,EAAAA,KAAmBtN,EAAQ8C,EAAOP,KAC3E89D,EAAYE,aAElBp9D,EAAQoK,eAGNzK,EAAOM,KAAKb,KACdi+D,EAAAA,EAAAA,IAA0B,CACxBp/D,OAAQ0B,EAAOM,KAAKb,GACpBsN,uBAAwB/M,EAAOM,KAAKyM,8BAIxC3H,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQJ,IAAmB,IAAhBQ,GAAI2B,GAAOnC,EAClD,MAAQX,OAAQuM,IAAkBX,EAAAA,EAAAA,KAAyBhN,EAAQkE,IAAU,CAAC,EACxEu8D,EAAa39D,EAEf6K,IAAkB8yD,EAAWl+D,IAC5B,YAAak+D,EAAWr9D,MAAQ88D,IAAgBO,EAAWr9D,KAAKsG,UAC/Dw2D,GACF/8D,EAAQqjD,gBAAgB,CAAEtiD,UAE5Bf,EAAQua,SAAS,CAAEnb,GAAIoL,EAAezJ,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAM61B,GAAW2mC,EAAAA,EAAAA,KAAmB1gE,EAAQ8C,EAAOP,IAC7Ca,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAOP,IAWvC,GATAvC,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQ8C,EAAOP,GAAI,CAAEg+D,aAAa,KACtDn1D,EAAAA,EAAAA,IAAUpL,GAENoD,GACFD,EAAQyH,kBAAkB,CAAExJ,OAAQgC,EAAKb,KAG3CY,EAAQ2N,aAAa,CAAE1P,OAAQ0B,EAAOP,GAAI6G,OAAO,KAE5C2wB,EACH,OAOF,OAJA/5B,GAASwL,EAAAA,EAAAA,MACTxL,GAAS2gE,EAAAA,EAAAA,KAAkB3gE,EAAQ+5B,EAAU,CAACj3B,EAAOP,UACrD6I,EAAAA,EAAAA,IAAUpL,EAGZ,CAEA,IAAK,kBAAmB,CACtBA,GAAS4gE,EAAAA,EAAAA,KAAU5gE,EAAQ8C,EAAOP,IAClC,MAAMa,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAOP,IACvC,GAAIa,IAAQia,EAAAA,EAAAA,KAAcja,GAAO,CAC/B,MAAM8N,GAAelH,EAAAA,EAAAA,KAAmBhK,EAAQ8C,EAAOP,IACvD,GAAI2O,EAAc,CAChB,MAAM2vD,EAAkB34D,OAAOsG,KAAK0C,GAAcxC,IAAIzD,QAAQnJ,OAAO6D,EAAAA,IACrE3F,GAASyL,EAAAA,EAAAA,KAAmBzL,EAAQoD,EAAKb,GAAIs+D,EAC/C,CACF,CAEA,OAAO7gE,CACT,CAEA,IAAK,kBACH,OAAO+C,EAAAA,EAAAA,KAAW/C,EAAQ8C,EAAOP,GAAIO,EAAOM,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEb,EAAE,SAAEyF,EAAWD,EAAAA,GAAc,aAAE+4D,GAAiBh+D,EAaxD,OAZA9C,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQuC,EAAIyF,EAAU,eAAgB84D,IAClE11D,EAAAA,EAAAA,IAAUpL,QAEVuL,YAAW,KACTvL,GAASwL,EAAAA,EAAAA,MACT,MAAMu1D,GAAsBC,EAAAA,EAAAA,KAAkBhhE,EAAQuC,EAAIyF,EAAU,gBAChE84D,GAAgBC,GAAuBD,EAAazqC,YAAc0qC,EAAoB1qC,YACxFr2B,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQuC,EAAIyF,EAAU,oBAAgBzC,IAClE6F,EAAAA,EAAAA,IAAUpL,GACZ,GA3G0B,IA+G9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEgB,GAAY8B,EAEpB,GAAI9B,EAAQigE,WAAajhE,EAAOkC,gBAAkBlB,EAAQkgE,gBACxD,OAGF,MAAM99D,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAO1B,QACvC,IAAKgC,EACH,OAGF,MAAM+9D,EAAahpD,QAAQrV,EAAO9B,QAAQuB,IAAMO,EAAO9B,QAAQogE,kBAE/DphE,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQ8C,EAAO1B,OAAQ,CACzCyG,YAAazE,EAAKyE,YAAczE,EAAKyE,YAAc,EAAI,IAGrDs5D,IACFnhE,GAAS6X,EAAAA,EAAAA,KAAkB7X,EAAQ8C,EAAO1B,OAAQgC,EAAM,CAACN,EAAO9B,QAAQuB,KAAM,IAGhF,MAAMkH,EAAQrG,EAAKsG,SAAUC,EAAAA,EAAAA,KAAuB3J,EAAQgB,QAAyBuE,EAcrF,OAbIkE,IACFzJ,GAAS4J,EAAAA,EAAAA,KAAY5J,EAAQ8C,EAAO1B,OAAQqI,EAAMlH,GAAI,CACpDsF,YAAa4B,EAAM5B,YAAc4B,EAAM5B,YAAc,EAAI,MAI7DuD,EAAAA,EAAAA,IAAUpL,QAEVgF,EAAAA,EAAAA,IAAmB,CACjB5B,OACApC,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEmJ,EAAG,cAAE/E,GAAkBtC,EAmB/B,OAjBAqH,EAAIhI,SAASI,IACX,MAAMnB,EAAU,cAAe0B,EAASA,EAAO4O,WAAY9F,EAAAA,EAAAA,KAAsB5L,EAAQuC,GACnFa,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE5BgE,EAAc9D,WAAa8B,GAAMqB,wBAC7BD,EAAAA,EAAAA,KAA0BxE,EAAQoF,EAAc9D,aACtDtB,EAAS6C,EAAsB7C,EAAQoB,EAAQ,CAC7CqD,qBAAsB9D,KAAKE,IAAIuC,EAAKqB,qBAAuB,EAAG,SAAMc,EACpElB,gBAAiBjB,EAAKiB,iBAAiBvC,QAAQoD,GAAMA,IAAM3C,QAI1D6C,EAAcg8D,kBAAoBh+D,GAAM0gB,sBAC3C9jB,GAAS0jB,EAAAA,EAAAA,KAAqB1jB,EAAQoB,EAAQgC,EAAM,CAACb,IAAK,GAC5D,IAGKvC,CACT,CAEA,IAAK,qBACH,OAAOyiB,EAAAA,EAAAA,KAAmBziB,EAAQ8C,EAAOP,GAAIO,EAAOujB,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAElc,EAAG,SAAEk3D,GAAav+D,EACpBi3B,EAAWsnC,IAAaC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFthE,EACHqJ,MAAO,IACFrJ,EAAOqJ,MACVk4D,iBAAkB,IACbvhE,EAAOqJ,MAAMk4D,iBAChB,CAACxnC,GAAW5vB,EAAItI,OAASsI,OAAM5E,IAIvC,CAEA,IAAK,6BAA8B,CACjC,MAAM,IAAE4E,GAAQrH,EAEhB,MAAO,IACF9C,EACHqJ,MAAO,IACFrJ,EAAOqJ,MACVk4D,iBAAkB,IACbvhE,EAAOqJ,MAAMk4D,iBAChBl0C,MAAOljB,EAAItI,OAASsI,OAAM5E,IAIlC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEhD,EAAE,SAAEuN,GAAahN,EACnBi3B,GAAW2mC,EAAAA,EAAAA,KAAmB1gE,EAAQuC,GAC5C,IAAKw3B,EACH,OAGF,MAAQ,CAACA,GAAWwnC,GAAqBvhE,EAAOqJ,MAAMk4D,iBAEtD,IAAIC,EAAsBD,GAAoB,GAC9C,GAAKzxD,GAEE,IAAK0xD,EAAoBl9D,SAAS/B,GAAK,CAK5C,GAAiB,WAAbw3B,GAAyBynC,EAAoB3/D,QAAU4/D,EAAAA,IAAyB,CAClF,MAAMC,EAAU1hE,EAAOqJ,MAAMq4D,QAAQ9hB,OACrC4hB,EAAsBA,EAAoB1/D,QAAQ6/D,GAAaD,GAAWA,EAAQp9D,SAASq9D,IAC7F,CAEAH,EAAsB,CAACj/D,KAAOi/D,EAChC,OAZEA,EAAsBA,EAAoB1/D,QAAQ6/D,GAAaA,IAAap/D,IAc9E,MAAO,IACFvC,EACHqJ,MAAO,IACFrJ,EAAOqJ,MACVk4D,iBAAkB,IACbvhE,EAAOqJ,MAAMk4D,iBAChB,CAACxnC,GAAWynC,EAAoB3/D,OAAS2/D,OAAsBj8D,IAIvE,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEhD,EAAE,SAAEuN,GAAahN,GAEjBuqB,MAAOk0C,GAAqBvhE,EAAOqJ,MAAMk4D,iBAEjD,IAAIC,EAAsBD,GAAoB,GAO9C,OANKzxD,EAEO0xD,EAAoBl9D,SAAS/B,KACvCi/D,EAAsB,CAACj/D,KAAOi/D,IAF9BA,EAAsBA,EAAoB1/D,QAAQ6/D,GAAaA,IAAap/D,IAKvE,IACFvC,EACHqJ,MAAO,IACFrJ,EAAOqJ,MACVk4D,iBAAkB,IACbvhE,EAAOqJ,MAAMk4D,iBAChBl0C,MAAOm0C,EAAoB3/D,OAAS2/D,OAAsBj8D,IAIlE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEhD,EAAE,SAAE8+D,GAAav+D,EAEzB,OAAO8+D,EAAAA,EAAAA,KAAmB5hE,EAAQuC,EAAI8+D,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE9+D,EAAE,OAAEsb,GAAW/a,GACfwG,KAAMu4D,EAAe,WAAEna,GAAe1nD,EAAO4d,YAE/CrM,OAAuBhM,IAAXsY,EAElB3V,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQuL,IAAmB,IAAhBnL,GAAI2B,GAAOwJ,EAClD,MAAMI,GAAW5N,EAAAA,EAAAA,KAAeF,EAAQkE,GACjBgE,OAAOC,OAAO05D,GAAiB/zD,EAASg0D,iBAAmB,IAAIv/D,KAAOA,IAG3FvC,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAAE8hE,iBAAkB,GAAK59D,GAC3D,IAGF,MAAM69D,EAAsBxwD,GAAmDhC,EAAAA,EAAAA,IAAKsyD,EAAiB,CAACt/D,IAA9D,IAAKs/D,EAAiB,CAACt/D,GAAKsb,GAC9DmkD,EAAiBzwD,EAEnBm2C,GAAY5lD,QAAQmgE,GAAcA,IAAc1/D,IADhDmlD,GAAYpjD,SAAS/B,GAAMmlD,EAAa,IAAKA,GAAc,GAAKnlD,GAGpE,MAAO,IACFvC,EACH4d,YAAa,IACR5d,EAAO4d,YACVtU,KAAMy4D,EACNra,WAAYsa,EACZxqC,SAASjoB,EAAAA,EAAAA,IAAKvP,EAAO4d,YAAY4Z,QAAS,CAACj1B,KAGjD,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEmlD,GAAe5kD,EAEvB,MAAO,IACF9C,EACH4d,YAAa,IACR5d,EAAO4d,YACV8pC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAE/pC,GAAY7a,EAEpB,MAAO,IACF9C,EACH4d,YAAa,IACR5d,EAAO4d,YACVskD,YAAavkD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMwkD,GAAqBxmD,EAAAA,EAAAA,KAAmB3b,EAAQ8C,EAAOP,KACvD,gBAAE6/D,EAAe,YAAEC,EAAW,gBAAEC,GAAoBx/D,EAC1D,IAAKq/D,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQ3gE,QACL2gE,EAAQnnC,MAAM5Z,GAAMA,EAAEzF,SAAWqmD,EAAYrmD,WAEjDwmD,EAAQ32D,KAAKw2D,GACbE,GAAe,QAEZ,GAAIC,EAAQ3gE,QAAUygE,EAAiB,CAC5C,MAAMG,EAAcD,EAAQ/rD,WAAWgL,GAAMA,EAAEzF,SAAWsmD,IACtDG,GAAe,IACjBD,EAAQ1rD,MAAM2rD,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQ1gE,QAAO2N,IAAA,IAAC,QAAEkzD,EAAO,QAAEC,GAASnzD,EAAA,OAAKkzD,GAAWC,CAAO,IAShF,OANA5iE,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQ8C,EAAOP,GAAI,CAAEsgE,aAAcL,EAAQ3gE,SAC/D7B,GAASyiB,EAAAA,EAAAA,KAAmBziB,EAAQ8C,EAAOP,GAAI,CAC7CigE,UACAM,kBAAkB/zD,EAAAA,EAAAA,IAAqB2zD,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJthE,EAAM,SAAE4G,EAAQ,MAAE0L,GAChB5Q,EAEJ,IADa9C,EAAOqJ,MAAMC,KAAKlI,GAE7B,OAKF,OAFApB,GAAS6I,EAAAA,EAAAA,KAAmB7I,EAAQoB,EAAQ4G,GAAYD,EAAAA,GAAgB,QAAS2L,GACjF1T,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAE+S,UAAWT,GAAOQ,MAE1D,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE9S,EAAM,gBAAEw3B,EAAe,mBAAED,GAAuB71B,EAExD,IADa9C,EAAOqJ,MAAMC,KAAKlI,GAE7B,OAUF,OAPApB,GAASyiB,EAAAA,EAAAA,KAAmBziB,EAAQoB,EAAQ,CAC1Cw3B,kBACAD,wBAEFvtB,EAAAA,EAAAA,IAAUpL,QAEVmD,EAAQ4/D,qBAAqB,CAAE3hE,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE+J,EAAO,SAAE2E,GAAahN,EAGtC,IADa9C,EAAOqJ,MAAMC,KAAKlI,GAE7B,OAQF,OALApB,GAAS4J,EAAAA,EAAAA,KAAY5J,EAAQoB,EAAQ+J,EAAS,CAC5C2E,kBAEF1E,EAAAA,EAAAA,IAAUpL,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,MAAEwxD,GAAU9vD,EAG1B,IADa9C,EAAOqJ,MAAMC,KAAKlI,GACpB,OAKX,OAHApB,GAASgjE,EAAAA,EAAAA,KAAsBhjE,EAAQoB,EAAQwxD,QAC/CxnD,EAAAA,EAAAA,IAAUpL,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEoB,EAAM,QAAE+J,GAAYrI,EAEtBM,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,GAAMsG,QAAS,OAIpB,YAFAvG,EAAQ+H,cAAc,CAAE9J,SAAQ+J,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE/J,GAAW0B,EAEbM,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,GAAMsG,QAAS,OAIpB,YAFAvG,EAAQi5B,WAAW,CAAEh7B,SAAQgI,OAAO,GAGtC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEhI,EAAM,UAAEitC,GAAcvrC,EAExBM,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,GAAMsG,QAAS,OAEpB1J,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClC6hE,kBAAmB50B,KAErBjjC,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEiC,EAAM,MAAE2D,GAAU9C,EAE1B9C,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQiC,EAAQ,CAClC68B,cAAel5B,EAAMrD,MAEvB6I,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ61B,sBAAsB,CAAE/2B,SAAQg3B,uBAAuB,IAE/D,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAEh3B,EAAM,QAAEihE,GAAYpgE,EAEtByb,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAChC,IAAKsc,EACH,OAGG2kD,GAAW3kD,EAAKugB,gBAAkBokC,EAMrCljE,GAAS0K,EAAAA,EAAAA,KAAgB1K,EAAQiC,EAAQihE,IALzCljE,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQiC,EAAQ,CAClC68B,mBAAev5B,IAEjBvF,GAASmjE,EAAAA,EAAAA,KAAkBnjE,EAAQiC,OAAQsD,KAI7C6F,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ61B,sBAAsB,CAAE/2B,SAAQg3B,uBAAuB,IAE/D,KACF,EAGc,IC1hBlB,MAAMmqC,IAA4BC,E,QAAAA,KAIlC,WAEE,IAAIrjE,GAASwL,EAAAA,EAAAA,MAEbxL,GAASgpB,EAAAA,EAAAA,KAAoBhpB,EAAQ,IAChCA,EAAOm8B,MAAMgD,gBACbmkC,MAELl4D,EAAAA,EAAAA,IAAUpL,GAEVsjE,GAAuB,CAAC,CAC1B,IAbA,IAAIA,GAAsD,CAAC,GAe3Dn3D,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOygE,EAAAA,EAAAA,KAAcvjE,EAAQ8C,EAAOP,IAGtC,IAAK,aAAc,CACjB2F,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQJ,IAAmB,IAAhBQ,GAAI2B,GAAOnC,GAC9CZ,EAAAA,EAAAA,KAAqBnB,EAAQ8C,EAAOP,KAAOO,EAAO+Q,KAAK+Z,aAAc1M,EAAAA,EAAAA,KAA2BlhB,KAC9F8C,EAAO+Q,KAAK+Z,WAAa5tB,EAAOoI,QAAQlE,GAAOiyC,cACjDhzC,EAAQ+f,iBAAiB,CAAEmsB,WAAW,EAAMnrC,UAI9ClE,EAAS,IACJA,EACHiT,aAAc,CACZ9B,SAAU,CAAC,IAGjB,IAGF,MAAMqyD,GAAY1vD,EAAAA,EAAAA,KAAW9T,EAAQ8C,EAAOP,IAW5C,OATAvC,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQ8C,EAAOP,GAAIO,EAAO+Q,MAC1C/Q,EAAOujB,WACTrmB,GAASwjB,EAAAA,EAAAA,KAAmBxjB,EAAQ8C,EAAOP,GAAIO,EAAOujB,WAGpDm9C,GAAWpD,mBAAqBt9D,EAAO+Q,KAAKusD,mBAC9CpgE,GAASilD,EAAAA,EAAAA,KAAwBjlD,EAAQ8C,EAAOP,GAAIO,EAAO+Q,KAAKusD,mBAAoB,IAG/EpgE,CACT,CAEA,IAAK,0BACHmD,EAAQsgE,aAAa,CAAEznD,OAAQlZ,EAAOP,KACtC,MAGF,IAAK,wBACH,OAAO28B,EAAAA,EAAAA,KAAWl/B,EAAQ8C,EAAOkZ,OAAQ,CAAE0nD,YAAa5gE,EAAO4gE,cAGjE,IAAK,mBAIH,OAFAJ,GAAqBxgE,EAAOkZ,QAAUlZ,EAAO2uC,YAC7C2xB,KAIF,IAAK,qBAAsB,CACzB,MAAM,GAAE7gE,EAAE,SAAE8jB,GAAavjB,EAEzB,OAAO0gB,EAAAA,EAAAA,KAAmBxjB,EAAQuC,EAAI8jB,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAEoc,EAAK,OAAEgG,GAAW3lC,EAEpB6gE,GAAqBr9C,EAAAA,EAAAA,KAAmBtmB,EAAQyiC,GACtD,IAAKkhC,GAAoBC,QACvB,OAGF,OAAOpgD,EAAAA,EAAAA,KAAmBxjB,EAAQyiC,EAAO,CACvCmhC,QAAS,IACJD,EAAmBC,QACtBC,WAAYp7B,IAGlB,EAGc,KCzGlBt8B,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAO0nB,EAAAA,EAAAA,KAAiBxqB,EAAQ8C,EAAOP,GAAIO,EAAOqnB,WAItC,KCWlBhe,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,iBAAkB,CACrB,MAAM,MACJq5B,EAAK,MAAE9yB,EAAK,YAAEy6D,EAAW,MAAEC,GACzBjhE,EACAq5B,IAAOn8B,GAASgkE,EAAAA,EAAAA,KAAShkE,EAAQm8B,IACjC9yB,IAAOrJ,GAASikE,EAAAA,EAAAA,KAASjkE,EAAQqJ,IACjCy6D,IAAa9jE,GAASyQ,EAAAA,EAAAA,KAAkBzQ,EAAQ8jE,IAChDC,GACFA,EAAM5hE,SAASmK,IACbtM,GAASqN,EAAAA,EAAAA,KAAWrN,EAAQsM,EAAK/J,GAAI+J,EAAK,KAG9ClB,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,oBACH,OAAI8C,EAAO0oC,WACF04B,EAAAA,EAAAA,KAAelkE,EAAQ8C,EAAOP,IAC5BO,EAAOqhE,qBACTnkE,GAEAgqC,EAAAA,EAAAA,KAAkBhqC,EAAQ8C,EAAOP,IAG5C,IAAK,yBACHvC,EAAS,IACJA,EACHu/B,YAAa,CACX9jB,QAAS,MAGbrQ,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,eACHmD,EAAQ68C,aACR,MAEF,IAAK,yBAEH78C,EAAQihE,qBACR,MAGF,IAAK,yBACHjhE,EAAQkhE,uBACR,MAEF,IAAK,uBACHlhE,EAAQymB,qBACR,MAEF,IAAK,wBACHzmB,EAAQmhE,sBACR,MAEF,IAAK,4BACHnhE,EAAQohE,0BACR,MAEF,IAAK,0BACHphE,EAAQg8C,wBACR,MAEF,IAAK,4BAA6B,CAChC,MAAMqlB,EAAW1hE,EAAO+vD,cAAgB7yD,EAAOmiB,aAAagJ,MAAMM,OAASzrB,EAAO+pB,SAASoB,MAAMM,OACjG,IAAK+4C,EAAU,OAAOxkE,EACtB,MAAMykE,EAAW,CAAC3hE,EAAOP,MAAOiiE,EAAS1iE,QAAQS,GAAOA,IAAOO,EAAOP,MACtEY,EAAQuhE,mBAAmB,CAAE9R,MAAO6R,EAAU5R,cAAe/vD,EAAO+vD,gBACpE,KACF,CAEA,IAAK,oBACH1vD,EAAQwhE,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM/R,EAAQ9vD,EAAO8vD,MAAM9wD,QAAQ8iE,GAAUzsD,QAAQnY,EAAO+pB,SAAS4B,SAASi5C,MAE9EzhE,EAAQuhE,mBAAmB,CAAE9R,QAAOC,cAAe/vD,EAAO+vD,gBAC1D,KACF,CAEA,IAAK,kBACH1vD,EAAQ0hE,gBACR,MAEF,IAAK,gBACH7kE,EAAS,IACJA,EACH64B,SAAU,IACL74B,EAAO64B,SACVyrB,QAAS,IACJtkD,EAAO64B,SAASyrB,QACnB,CAACxhD,EAAOs/B,KAAMt/B,EAAOgiE,UAI3B15D,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,kCACHkI,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAQJ,IAAmB,IAAhBQ,GAAI2B,GAAOnC,EAClD/B,GAAS+kE,EAAAA,EAAAA,KAAqB/kE,EAAQ8C,EAAOihB,IAAK7f,GAClDlE,GAAS+wC,EAAAA,EAAAA,KAAe/wC,EAAQgxC,EAAAA,GAAYg0B,eAAgB9gE,EAAM,KAEpEkH,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,0BACHkI,OAAOC,OAAOnI,EAAOoI,SAASjG,SAAS2L,IACjCA,EAASu2B,QAAQK,cAAcyG,UAAYroC,EAAOqoC,UACpDhoC,EAAQ2mC,oBAAoB,CAAE5lC,MAAO4J,EAASvL,KAC9CY,EAAQ8qC,kBAAkB,CAAE/pC,MAAO4J,EAASvL,KAC9C,IAEF,MAEF,IAAK,cACHvC,GAAS+iD,EAAAA,EAAAA,KAAkB/iD,EAAQ8C,EAAOb,OAAQ,CAAE,CAACa,EAAO+jB,MAAMtkB,IAAKO,EAAO+jB,QAC9E7mB,GAASsiD,EAAAA,EAAAA,KAAuBtiD,EAAQ,CAAE,CAAC8C,EAAOb,SAAS4gD,EAAAA,EAAAA,KAAkB7iD,EAAQ8C,EAAOb,WAC5FmJ,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,cACHA,GAASsjD,EAAAA,EAAAA,KAAgBtjD,EAAQ8C,EAAOb,OAAQa,EAAO+J,UACvDzB,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,oBACHA,GAASqjD,EAAAA,EAAAA,KAA2BrjD,EAAQ8C,EAAOb,OAAQa,EAAOsgD,aAClEh4C,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,0BAA2B,CAC9B,MAAM,OAAEiC,EAAM,QAAE4K,EAAO,SAAEzK,GAAaU,EAEtC,KADcgkB,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQ4K,GAClC,OAAO7M,EACnBA,GAASwjD,EAAAA,EAAAA,KAAgBxjD,EAAQiC,EAAQ4K,EAAS,CAAE24C,aAAcpjD,KAClEgJ,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,oBACHA,GAASuiD,EAAAA,EAAAA,KAAkBviD,EAAQ8C,EAAO0/C,cAC1Cp3C,EAAAA,EAAAA,IAAUpL,GACV,MAEF,IAAK,uBACHmD,EAAQ+qC,iBACR,MAEF,IAAK,yBACH/qC,EAAQ8hE,wBAAwB,CAC9BzM,SAAU11D,EAAO01D,WAEnB,MAGF,IAAK,4BACHx4D,EAAS,IACJA,EACH64B,SAAU,IACL74B,EAAO64B,SACVqsC,oBAAqBpiE,EAAOk+B,aAGhC51B,EAAAA,EAAAA,IAAUpL,GACV,MAGF,IAAK,yBACHmlE,EAAAA,GAAAA,IAA0BriE,EAAO6rC,UACjC,MAGF,IAAK,kBACHy2B,EAAAA,GAAAA,IAAwBtiE,EAAO8rB,QAAS9rB,EAAOuiE,QAASviE,EAAOwiE,cAInD,KCxMlBn5D,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOyiE,EAAAA,EAAAA,KAAqBvlE,EAAQ8C,EAAO0iE,SAAU1iE,EAAOoa,SAAUpa,EAAO2iE,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJrkE,EAAM,QAAEk/B,EAAO,SAAEpjB,EAAQ,mBAAEuoD,GACzB3iE,EACS9C,EAAOqJ,MAAMC,KAAKlI,KAG7BpB,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAAEk/B,aAGxCtgC,GAAS0lE,EAAAA,EAAAA,KAAmB1lE,EAAQoB,EAAQ,CAAEk/B,UAASpjB,WAAUuoD,wBACjEr6D,EAAAA,EAAAA,IAAUpL,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJoB,EAAM,QAAE+J,EAAO,QAAEm1B,GACfx9B,EAEJ9C,GAAS4J,EAAAA,EAAAA,KAAY5J,EAAQoB,EAAQ+J,EAAS,CAAEm1B,aAEhDl1B,EAAAA,EAAAA,IAAUpL,GACV,KACF,EAGc,KCrClBmM,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF9C,EACH2lE,cAAe,IACV3lE,EAAO2lE,cACVj3C,WAAW,EACX8gB,uBAAwB1sC,EAAOjB,SAKrC,IAAK,mBACH,MAAO,IACF7B,EACH2lE,cAAe,IACV3lE,EAAO2lE,cACVhzD,MAAO7P,EAAO9B,UAMN,KCxBlBmL,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,GACO,wBADCA,EAAO,SAEX,MAAO,IACF9C,EACH4lE,iBAAkB,IACb5lE,EAAO4lE,iBACVl3C,WAAW,EACX/b,MAAO7P,EAAO6P,OAMN,I,6BCHlBxG,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAO+iE,KAAKzmD,gBACd,OAAIpf,EAAO8lE,WAAWC,uBAChB,mBAAoB5iE,GAASA,EAAQ6iE,eAAe,CAAEC,cAAc,EAAM/hE,OAAOC,EAAAA,EAAAA,UAG9E+hE,EAAAA,GAAAA,IAAgBlmE,EAAQ8C,EAAO+iE,KAAKtjE,IAI/C,MAAM4jE,GAAYC,EAAAA,GAAAA,IAAgBpmE,EAAQ8C,EAAO+iE,KAAKtjE,IAChDnB,EAAS+kE,GAAW/kE,OAO1B,OANIA,IACFpB,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCilE,eAAiBF,EAAUG,kBAAoB,GAAKnuD,QAAQguD,EAAUI,cAAc1kE,YAIjF2kE,EAAAA,GAAAA,IACLxmE,EACA8C,EAAO+iE,KAAKtjE,IACZgN,EAAAA,EAAAA,IAAKzM,EAAO+iE,KAAM,CAAC,yBACnBtgE,EACAzC,EAAO+iE,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANa3+D,EAAAA,EAAAA,KAAW3H,EAAQ8C,EAAO1B,UAErCpB,GAASyiB,EAAAA,EAAAA,KAAmBziB,EAAQ8C,EAAO1B,OAAQ,CACjDqlE,YAAa3jE,EAAO+iE,KAAKtjE,MAGtBvC,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEymE,EAAW,aAAEF,EAAY,WAAE7lD,GAAe5d,GAC5C,cAAEZ,GAAkBlC,EAG1BA,GAASwL,EAAAA,EAAAA,MACT+6D,EAAapkE,SAASukE,IAChBA,EAAYnkE,KACdvC,GAAS2mE,EAAAA,GAAAA,IACP3mE,EAAQymE,EAAaC,EAAYnkE,GAAImkE,EAAavuD,QAAQuI,IAAexe,IAAkBwkE,EAAYnkE,IAE3G,IAEEme,IACF1gB,GAASwmE,EAAAA,GAAAA,IAAgBxmE,EAAQymE,EAAa,CAC5C/lD,gBAIJ,MAAMylD,GAAYC,EAAAA,GAAAA,IAAgBpmE,EAAQymE,GACpCrlE,EAAS+kE,GAAW/kE,OAM1B,OALIA,IACFpB,GAAS+C,EAAAA,EAAAA,KAAW/C,EAAQoB,EAAQ,CAClCilE,eAAiBF,EAAUG,kBAAoB,GAAKnuD,QAAQguD,EAAUI,cAAc1kE,WAGjF7B,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK4mE,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACT3kE,GACElC,GAEE,KAAE6lE,GAAS/iE,EAEjB,GAAI+jE,EACF,MAAmB,cAAfhB,EAAKt5B,OACPppC,EAAQ2jE,mBAAmB,CAAEC,MAAO,QAChC,WAAY5jE,GAASA,EAAQ6jE,OAAO,CAAE9iE,OAAOC,EAAAA,EAAAA,QAE1C,IACFnE,KACC6lE,EAAKoB,YAAc,CAAEC,gBAAiBrB,UAI9C,EAKF,GAFmBA,GAAMxuC,UAAYn1B,GAEH,cAAf2jE,EAAKt5B,MAgBtB,OAfAxnC,EAAAA,EAAAA,KAAU,KACR/E,GAASwL,EAAAA,EAAAA,OACT27D,EAAAA,EAAAA,IAAgB,CACdtB,OACAhyD,MAAMuzD,EAAAA,GAAAA,IAAoBpnE,IAC1B,KAGJqnE,EAAAA,GAAAA,OACKC,EAAAA,GAAAA,IAAmCtnE,EAAQmD,EAAS0iE,EAAK0B,SAASpjE,EAAAA,EAAAA,OACvEnE,EAAS,IACJA,EACH6mE,UAAWhB,IAGN93D,EAAAA,EAAAA,GAAe/N,EAAQ,CAC5BwnE,oBAAoB,IACnBrjE,EAAAA,EAAAA,MAEP,EAGc,I,iBCxHlBgI,EAAAA,EAAAA,IAAiB,aAAa,CAACnM,EAAQmD,EAASL,KAC9C,OAAQA,EAAO,UACb,IAAK,8BAA+B,CAClC,MAAM,aAAEqyC,EAAY,MAAEjxC,GAAUpB,EAC1BuuC,EAAO8D,EAAa9D,MACpB,QAAEl/B,GAAYk/B,GAEd,YAAEo2B,EAAW,SAAEltB,GAAapoC,EAEM,UAApCgjC,EAAa5E,cAAcluC,MAC7Bc,EAAQ6iD,uBAAuB,CAAE9hD,UACjCf,EAAQgZ,iBAAiB,CACvBnb,QAAS6sB,EAAAA,GAA0B,oBAAqBsnB,EAAa5E,aAAauB,OAClF9yB,MAAO6O,EAAAA,GAA0B,iBACjCgvC,KAAM,OACN34D,UAEFf,EAAQy2C,gBAAgB,CAAEC,WAAW,EAAM31C,WAE3Cf,EAAQgZ,iBAAiB,CACvBjY,QACAlD,QAAS6sB,EAAAA,GAA0B,kBAAmB,EACpD65C,EAAAA,GAAAA,GAAuBD,EAAaltB,EAAU1sB,EAAAA,KAAgC4hB,MAC9E4B,EAAKryB,WAKX5T,EAAAA,EAAAA,IAAUpL,GAEV,KACF,CAEA,IAAK,kCAAmC,CACtC,MAAM,aAAEm1C,EAAY,MAAEjxC,GAAUpB,GAC1B,aAAEytC,EAAY,iBAAEqF,GAAqBT,EAC3C,GAA2B,2BAAvB5E,GAAcluC,MAAqCuzC,EAAkB,CACvE,MAAM4E,EAAS5E,EAAiB+xB,oBAAqBntB,OAErDr3C,EAAQgZ,iBAAiB,CACvBjY,QACA8a,MAAO6O,EAAAA,GAA0B,8BACjC7sB,QAAS6sB,EAAAA,GAA0B,iCAAkC,CACnE2sB,EACA5E,EAAiB52B,YAChBzZ,EAAWi1C,GACdqiB,KAAM,QAEV,CAEA,GAA2B,aAAvBtsB,GAAcluC,KAAqB,CACrC,IAAKkuC,EAAa90B,QAChB,OAEF,MAAMmsD,GAAiB1nE,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO+yC,UAEjD2wB,GAAkBr3B,EAAa90B,QAAQ,KAAOmsD,EAAe5wB,YAC/Dh3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bi3C,UAAW,IACN2wB,EACHC,aAAa,IAEd3jE,GAEP,CAEA,GAA2B,cAAvBqsC,GAAcluC,KAAsB,CACtC,IAAKkuC,EAAav0B,OAChB,OAEF,MAAM8rD,GAAkB5nE,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOizC,eAElD2wB,GAAiBzxB,QAAU9F,EAAav0B,SAAW8rD,EAAgB9wB,YACrEh3C,GAAS+N,EAAAA,EAAAA,GAAe/N,EAAQ,CAC9Bm3C,eAAgB,IACX2wB,EACHD,aAAa,IAEd3jE,IAGLf,EAAQy2C,gBAAgB,CAAEC,WAAW,EAAM31C,SAC7C,CACA,KACF,CAEA,IAAK,qBAEH,IADclE,EAAO8xC,MAEnB,OAGF9xC,GAASu7C,EAAAA,EAAAA,KAAmBv7C,EAAQ8C,EAAO+uC,UAE3CzmC,EAAAA,EAAAA,IAAUpL,GAEVmD,EAAQ8yC,iBAGZ,I,gKCxGF,MAAM8xB,GAAehiE,SAASiiE,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAazV,GACpBA,EAAE0V,gBACJ,C,4EC9BA,MAOA,GAP6CC,IAC3C,MAAM,SAAEnW,GAAamW,EACfC,GAAmBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,oBAAqBvW,GAE7E,OAAOoW,EAAmBI,GAAAA,GAAAC,cAACL,EAAgB,WAAM/iE,CAAS,ECE5D,GARsC8iE,IACpC,MAAM,YAAE5B,GAAgB4B,EAClBO,GAAYL,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAchC,GAG/D,OAAOmC,EAAYF,GAAAA,GAAAC,cAACC,EAAcP,QAAY9iE,CAAS,ECIzD,GAPsC8iE,IACpC,MAAM,SAAEnW,GAAamW,EACfQ,GAAYN,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAcvW,GAE/D,OAAO2W,EAAYH,GAAAA,GAAAC,cAACE,EAAS,WAAMtjE,CAAS,ECE9C,GAR+C8iE,IAC7C,MAAM,OAAEhyB,GAAWgyB,EACbS,GAAqBP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuBpyB,GAGjF,OAAOyyB,EAAqBJ,GAAAA,GAAAC,cAACG,EAAuBT,QAAY9iE,CAAS,ECG3E,GARiD8iE,IAC/C,MAAM,kBAAEx8C,GAAsBw8C,EACxBU,GAAuBR,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyBn9C,GAGrF,OAAOk9C,EAAuBL,GAAAA,GAAAC,cAACI,EAAyBV,QAAY9iE,CAAS,ECG/E,GAR+C8iE,IAC7C,MAAM,OAAEhyB,GAAWgyB,EACbY,GAAqBV,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,sBAAuB3yB,GAGjF,OAAO4yB,EAAqBP,GAAAA,GAAAC,cAACM,EAAuBZ,QAAY9iE,CAAS,ECG3E,GAR4C8iE,IAC1C,MAAM,OAAEhyB,GAAWgyB,EACba,GAAkBX,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoB3yB,GAG3E,OAAO6yB,EAAkBR,GAAAA,GAAAC,cAACO,EAAoBb,QAAY9iE,CAAS,E,wCCDrE,MAmBA,IAAe4jE,EAAAA,GAAAA,KAnBqBpnE,IAAuB,IAAtB,cAAEqnE,GAAernE,GACpDsnE,EAAAA,GAAAA,MACA,MAAMC,GAA2B5R,EAAAA,GAAAA,MAQjC,IANA6R,EAAAA,GAAAA,KAAU,KACJH,IACFI,EAAAA,GAAAA,GAAeF,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEZ,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wBAAuB07C,EAAAA,GAAAA,IAAqBH,GAAgC,I,mGCjB/F,MAOA,GAP0CjB,IACxC,MAAMqB,GAAgBnB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAGrD,OAAOU,EAAgBhB,GAAAA,GAAAC,cAACe,EAAkBrB,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,4ECOnE,MAgEA,GAhEoC5nE,IAK9B,IAL+B,QACnCg9D,EAAO,iBACP6K,EAAgB,aAChBC,EAAY,WACZC,GACD/nE,EACC,MAAOgoE,EAAYC,IAAiBC,EAAAA,GAAAA,KAAS,IAE7CV,EAAAA,GAAAA,KAAU,KACHxK,GACHiL,GAAc,EAChB,GACC,CAACjL,IAEJ,MAAM5U,GAAO+f,EAAAA,GAAAA,KAEPC,GAAeC,EAAAA,GAAAA,GACnB,gBACArL,GAAW,WACXgL,GAAc,gBAGVM,GAAmBC,EAAAA,GAAAA,KAAY,KACnCN,GAAeD,EAAW,GACzB,CAACA,IAEEQ,GAAcD,EAAAA,GAAAA,KAAY,KAC9BN,GAAc,EAAM,GACnB,IAEGQ,GAAYC,EAAAA,GAAAA,KAAQ,IACxB/B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,UAAU+N,QAASf,GAAe1f,EAAK,eACtDue,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,QAAQ+N,QAASd,GAAa3f,EAAK,aAClDue,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,OAAO+N,QAAShB,GAAmBzf,EAAK,sBAExD,CAACA,EAAM0f,EAAcC,EAAYF,IAEpC,OACElB,GAAAA,GAAAC,cAAA,OAAK56C,UAAWo8C,EAAcU,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GACtDmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,UACNj9C,UAAWg8C,EAAa,SAAW,GACnCa,QAASP,EACTY,UAAW9gB,EAAK4f,EAAa,QAAU,mBACvCmB,UAAW,GAEXxC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,8BACb26C,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAEf26C,GAAAA,GAAAC,cAACwC,GAAAA,EAAI,CACH90B,OAAQ0zB,EACRqB,UAAWjhB,EAAK2gB,MAAQ,OAAS,QACjCO,UAAU,SACVC,WAAS,EACTC,QAAShB,GAERC,GAEC,EChEV,GAPuCnC,IACrC,MAAMmD,GAAajD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAOwC,EAAa9C,GAAAA,GAAAC,cAAC6C,EAAenD,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,wFC4C7D,MAuSA,IAAeR,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MACE4d,aACEtU,KAAMu4D,EACNna,WAAYgkB,EACZl0C,QAASm0C,GAEXtiE,OACEq4D,SAAS,SACPkK,IAGJ5pB,SACEgd,gBACE4M,SAAUC,IAGdxuC,gBACEC,OAAQwuC,GACT,cACD5pE,EAAa,gBACbk0D,GACEp2D,GACE,4BAAE+rE,EAA2B,iBAAEjK,IAAqB5hE,EAAAA,EAAAA,KAAeF,IACjEs+D,aAAeM,cAAeoN,KAAyB9rE,EAAAA,EAAAA,KAAeF,GAE9E,MAAO,CACL6hE,kBACA8J,oBACAD,mBACA5J,mBACA5/D,gBACA6pE,8BACAE,iBAAkB9zD,QAAQyzD,GAAU/pE,QACpCqqE,mBAAoB/zD,QAAQ0zD,GAAiBhqE,QAC7CsqE,YAAY1+C,EAAAA,GAAAA,GAAmBztB,EAAQ,iBACvCosE,kBAAkB3+C,EAAAA,GAAAA,GAAmBztB,EAAQ,mBAC7CqsE,cAAc5+C,EAAAA,GAAAA,GAAmBztB,EAAQ,kBACzCo2D,kBACA4V,qBACAF,WACD,GA1CeL,EApS2B1pE,IAoBzC,IApB0C,gBAC9CuqE,EAAe,uBACfC,EAAsB,0BACtBC,EAAyB,gBACzB3K,EAAe,iBACf6J,EAAgB,iBAChB5J,EAAgB,cAChB5/D,EAAa,iBACbuqE,EAAgB,4BAChBV,EAA2B,WAC3BI,EAAU,aACVE,EAAY,qBACZK,EAAoB,kBACpBf,EAAiB,iBACjBS,EAAgB,iBAChBH,EAAgB,mBAChBC,EAAkB,gBAClB9V,EAAe,mBACf4V,EAAkB,SAClBF,GACD/pE,EACC,MAAM,gBACJ4qE,EAAe,oBACfC,EAAmB,SACnBlvD,EAAQ,yBACRmvD,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClBh2C,IACEnP,EAAAA,EAAAA,MAGEolD,GAAgBC,EAAAA,GAAAA,IAAuB,MAEvC9iB,GAAO+f,EAAAA,GAAAA,MAEbX,EAAAA,GAAAA,KAAU,KACRoD,GAAiB,GAChB,IAEH,MAAM,IACJO,EACAC,aAAcC,EACdC,aAAcC,IACZC,EAAAA,GAAAA,GAAkB,CACpBl3B,OAAQ21B,EACRj+C,WAAW,EACXy/C,kBAAkB,IAEdC,GAAuBC,EAAAA,GAAAA,GAAgBJ,GAEvCK,GAAgClD,EAAAA,GAAAA,KAAQ,KACrC,CACLloE,GAAIqrE,EAAAA,IACJ5uD,MAAO0sD,IAAmB,KAAOkC,EAAAA,IAAgBzjB,EAAK,uBAAyBA,EAAK,kBACpFrsC,gBAAiB+vD,GAAAA,EACjBC,gBAAiBD,GAAAA,KAElB,CAACnC,EAAkBvhB,IAEhB4jB,GAAmBtD,EAAAA,GAAAA,KAAQ,IACxBiB,EACHA,EAAiBh9D,KAAKnM,GAClBA,IAAOqrE,EAAAA,IACFD,EAGF9L,EAAgBt/D,IAAO,CAAC,IAC9BT,OAAOqW,cACR5S,GACH,CAACs8D,EAAiB8L,EAAgBjC,IAE/BsC,EAAsBD,GAAkBt3D,WAAWoH,GAAWA,EAAOtb,KAAOqrE,EAAAA,MAC5EK,EAAqBD,IAAwBlM,EAC7CoM,EA5EmB,IA4EsBpM,EAEzCqM,GAAqB9E,EAAAA,GAAAA,MACrB+E,GAAa3D,EAAAA,GAAAA,KAAQ,KACzB,GAAKsD,GAAqBA,EAAiBlsE,OAI3C,OAAOksE,EAAiBr/D,KAAI,CAACmP,EAAQ3Y,KACnC,MAAM,GAAE3C,EAAE,MAAEyc,GAAUnB,EAChB2tB,EAAYjpC,IAAOqrE,EAAAA,KAAiB1oE,EAAIinE,EAAa,EAErDkC,EAA0C,GAiDhD,OAlDuBC,EAAAA,EAAAA,MAAqB9iE,EAAAA,EAAAA,MAAajJ,IAIvD8rE,EAAexiE,KAAK,CAClBmT,MAAOmrC,EAAK,6BACZ0S,KAAM,OACN0R,QAASA,KACermE,OAAOC,OAAO05D,GAAiBznD,QAAO,CAACC,EAAKujB,IAAOvjB,GAAOujB,EAAG4wC,WAAa,EAAI,IAAI,IACnFnC,IAAiBxuD,EAAO2wD,WAC3Cz3C,EAAsB,CACpBvhB,MAAO,mBAMPm2D,EAAkBppE,IAAKV,QAAUuqE,EACnCr1C,EAAsB,CACpBvhB,MAAO,oBAKXq3D,EAAyB,CACvBxL,SAAU9+D,GACV,IAKJA,IAAOqrE,EAAAA,MACTS,EAAexiE,KAAK,CAClBmT,MAAOmrC,EAAK,cACZ0S,KAAM,OACN0R,QAASA,KACPxB,EAAmB,CAAE1L,SAAU9+D,GAAK,IAIxC8rE,EAAexiE,KAAK,CAClBmT,MAAOmrC,EAAK,oBACZ0S,KAAM,SACN4R,aAAa,EACbF,QAASA,KACPzB,EAA0B,CAAEzL,SAAU9+D,GAAK,KAK1C,CACLA,KACAyc,QACA0vD,WAAYP,EAAmB5rE,IAAKosE,WACpCC,cAAez2D,QAAQg2D,EAAmB5rE,IAAKssE,oBAC/CrjC,YACA6iC,eAAgBA,GAAgBxsE,OAASwsE,OAAiB9oE,EAC3D,GACD,GACD,CACDwoE,EAAkB5B,EAAYgC,EAAoBhkB,EAAM0X,EAAiBwK,EAAcV,EACvFS,IAGI0C,GAAkBC,EAAAA,GAAAA,IAAiBv4D,IACvCo2D,EAAoB,CAAE9K,iBAAkBtrD,GAAS,CAAEiC,uBAAuB,GAAO,KAInF8wD,EAAAA,GAAAA,KAAU,KACH6E,GAAYvsE,QAIbigE,GAAoBsM,EAAWvsE,QACjC+qE,EAAoB,CAAE9K,iBAlKD,GAmKvB,GACC,CAACA,EAAkBsM,EAAYxB,KAElCrD,EAAAA,GAAAA,KAAU,KACR,GAAKla,EAAAA,IAAiB+e,GAAYvsE,SAAU4qE,EAI5C,OAAOuC,EAAAA,GAAAA,IAAchC,EAAc/+C,QAAU,CAC3CghD,wBAAyB,aACzBC,QAAUA,CAACxc,EAAGp+C,IACRA,IAAc66D,GAAAA,GAAeC,MAC/BxC,EACE,CAAE9K,iBAAkBnhE,KAAKC,IAAIkhE,EAAmB,EAAGsM,EAAWvsE,OAAS,IACvE,CAAE4W,uBAAuB,KAEpB,GACEnE,IAAc66D,GAAAA,GAAeE,QACtCzC,EAAoB,CAAE9K,iBAAkBnhE,KAAKE,IAAI,EAAGihE,EAAmB,IAAM,CAAErpD,uBAAuB,KAC/F,IAKX,GACD,CAACqpD,EAAkBsM,EAAY3B,EAAkBG,IAEpD,MAAM0C,GAAwBrC,EAAAA,GAAAA,MAC9BqC,EAAsBrhD,SAAWigD,GACjC3E,EAAAA,GAAAA,KAAU,IAAO+F,EAAsBrhD,SAAUshD,EAAAA,GAAAA,IAAsB,KACjED,EAAsBrhD,SACxB2+C,EAAoB,CAAE9K,iBAlMD,GAmMvB,SACGv8D,GAAY,CAACu8D,EAAkB8K,KAEpC4C,EAAAA,GAAAA,GAAe,CACbtd,UAAWgc,EACXuB,OAAQA,IAAM7C,EAAoB,CAAE9K,iBAxMb,GAwMqD,CAAErpD,uBAAuB,OAGvG8wD,EAAAA,GAAAA,KAAU,KACR,MAAMmG,EAAiBhd,IACrB,GAAIA,EAAEid,SAAWjd,EAAEkd,UAAYld,EAAEjjB,KAAK2E,WAAW,UAAYg6B,EAAY,CACvE,MAAO,CAAEyB,GAASnd,EAAEjjB,KAAK78B,MAAM,cAAgB,GAC/C,IAAKi9D,EAAO,OAEZ,GAlNsB,MAkNlBA,EAEF,YADAnyD,EAAS,CAAEnb,GAAIL,EAAe0jD,sBAAsB,IAItD,MAAM/nC,EAAS5S,OAAO4kE,GAAS,EAC/B,GAAIhyD,EAASuwD,EAAWvsE,OAAS,EAAG,OAEpC+qE,EAAoB,CAAE9K,iBAAkBjkD,GAAU,CAAEpF,uBAAuB,IAC3Ei6C,EAAE0V,gBACJ,GAKF,OAFAriE,SAAS+pE,iBAAiB,UAAWJ,GAAe,GAE7C,KACL3pE,SAASgqE,oBAAoB,UAAWL,GAAe,EAAK,CAC7D,GACA,CAACxtE,EAAeksE,EAAY1wD,EAAUkvD,IAEzC,MACEM,IAAK8C,EACL7C,aAAc8C,IACZ1C,EAAAA,GAAAA,GAAkB,CACpBl3B,QAASq1B,EACTwE,mBAAmB,EACnB1C,kBAAkB,IAGpB,SAAS2C,EAAiBje,GACxB,MAAMke,EAAeloE,OAAOC,OAAO05D,GAChCr+D,MAAKkK,IAAA,IAAC,GAAEnL,GAAImL,EAAA,OAAKnL,IAAO6rE,EAAYtM,GAAkBv/D,EAAE,IACrD8tE,EAAWD,IAAiBnC,EAElC,OACEvF,GAAAA,GAAAC,cAAC2H,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClChP,SAAUgP,EAAWD,EAAa7tE,QAAKgD,EACvC2sD,SAAUA,EACVua,iBAAkBA,EAClBH,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BgE,mBAAoBvE,GAAoBC,KAAwB9V,EAAgBxT,SAChFwT,gBAAiBA,EACjB0V,SAAUA,GAGhB,CAEA,MAAM2E,EAAsBrC,GAAcA,EAAWvsE,OAAS,EAE9D,OACE6mE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,WAAWq8C,EAAAA,GAAAA,GACT,cACAqG,GAAuB/D,GAAwB,2BAC/CU,GAA2B,sBAG5BA,GAA2B1E,GAAAA,GAAAC,cAAC+H,GAAAA,EAAW,CAAC3f,UAAW0c,IACnDgD,EACC/H,GAAAA,GAAAC,cAACgI,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMzC,EACN0C,UAAWhP,EACXiP,YAAajC,EACbkC,YAAU,IAEVf,EACFvH,GAAAA,GAAAC,cAAA,OAAKuE,IAAK8C,EAAgBjiD,UAAU,0BAClCxoB,EACJmjE,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACT/D,IAAKF,EACLv+B,KAAMs9B,EAA8B,OAAS5hB,EAAK2gB,MAAQ,oBAAsB,iBAChFoG,UAAWpP,EACXqP,YAAaV,EAAsBrC,EAAWvsE,YAAS0D,GAEtD4qE,GAEC,KC5UV,GAPwC9H,IACtC,MAAM+I,GAAc7I,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAGnD,OAAOoI,EAAc1I,GAAAA,GAAAC,cAACyI,EAAgB/I,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,gBCVxD,IAAK0H,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBnnB,EACA/qC,EACAqa,EACA83C,EACAlb,EACAmb,GAEA,IAAI//B,EAUAkW,EAWAr5C,EAWJ,OA3BEmjC,EC5BW,WACb,MAAOggC,EAAUC,IAAezH,EAAAA,GAAAA,IAASjlD,OAAO2sD,UAAUC,QAgB1D,OAdArI,EAAAA,GAAAA,KAAU,KACR,SAASsI,IACPH,EAAY1sD,OAAO2sD,UAAUC,OAC/B,CAKA,OAHA5sD,OAAO8qD,iBAAiB,SAAU+B,GAClC7sD,OAAO8qD,iBAAiB,UAAW+B,GAE5B,KACL7sD,OAAO+qD,oBAAoB,UAAW8B,GACtC7sD,OAAO+qD,oBAAoB,SAAU8B,EAAa,CACnD,GACA,IAEIJ,CACT,CDM0BK,IACoB,8BAApB1yD,EAEbqa,EACA43C,GAAiBU,QAEjBV,GAAiBW,OAJjBX,GAAiBY,kBAS1BtqB,EADElW,IAAW4/B,GAAiBW,QAAUR,EAC7B,OACFD,EACE,eACFlb,EACE,YAEA,UAIT5kB,IAAW4/B,GAAiBY,kBAC9B3jE,EAAO67C,EAAK,qBACH1Y,IAAW4/B,GAAiBU,UACrCzjE,EAAO67C,EAAK,aAGG,iBAAbxC,IACFr5C,EAAOA,EAAM4jE,cAAcj+C,QAAQ,OAAQ,KAGtC,CACLk+C,iBAAkB1gC,EAClB2gC,yBAA0BzqB,EAC1B0qB,qBAAsB/jE,EAE1B,C,gHE3CA,MA0BA,IAAe66D,EAAAA,GAAAA,KA1B+BpnE,IAIxC,IAJyC,iBAC7CowE,EAAgB,qBAChBE,EAAoB,QACpBzH,GACD7oE,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,KAEb,OACExB,GAAAA,GAAAC,cAAA,OAAKpmE,GAAG,0BAA0BsoE,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,EAAWqlE,QAASA,GAC9ElC,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CAACtH,MAAM,UACftC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,cACb26C,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CAACC,UAAWiB,EAAkB1jC,KAAK,aAC3C4jC,IAGL3J,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLi5C,KAAK,OACL4c,MAAM,qBAENtC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,qBAEd,I,6DCWV,MA4LA,IAAeo7C,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAC1B,cACJkC,EAAa,gBAAEk0D,GACbp2D,GACE,eAAEuyE,GAAmBvyE,EAAO64B,SAASmU,MACrCwlC,EAAaxyE,EAAOstC,WAAWC,KAErC,MAAO,CACLrrC,gBACAonC,OAAOmpC,EAAAA,EAAAA,KAAYzyE,GACnBuyE,iBACAG,WAAYv6D,QAAQrK,EAAS4kE,YAC7Btc,kBACAoc,aACD,GAhBe/G,EA5LM1pE,IAYG,IAZF,cACzBG,EAAa,gBACbk0D,EAAe,eACfmc,EAAc,MACdjpC,EAAK,WACLopC,EAAU,WACVF,EAAU,iBACVG,EAAgB,iBAChBC,EAAgB,iBAChBC,EAAgB,gBAChBC,EAAe,gBACfC,GACsBhxE,EACtB,MAAM,SACJ2b,EAAQ,iBACRs1D,EAAgB,0BAChBC,EAAyB,mBACzBC,EAAkB,QAClB7qC,EAAO,iBACPc,IACEvhB,EAAAA,EAAAA,MACEurD,GAAUjJ,EAAAA,GAAAA,KACV/f,GAAOipB,EAAAA,GAAAA,KAEPC,EAAsBd,IAAmBe,EAAAA,IAC1Cf,IAAmBgB,EAAAA,IAAsB,MAAQ,MAAS,MAEzDC,GAAqB3sB,EAAAA,KAAgB7hC,OAAOqe,SAASve,WAAa2uD,EAAAA,KAAuBC,EAAAA,KAEzFC,GAA2BtK,EAAAA,GAAAA,MAAoC/H,EAAAA,MAAqBqN,YAAc,EAElGphC,GAAOk9B,EAAAA,GAAAA,KAAQ,IAAMviE,OAAOC,OAAOqqE,GAAY1wE,QAAQ8lC,GAAQA,EAAIgG,iBAAgB,CAAC4kC,IAEpFoB,GAAoB7E,EAAAA,GAAAA,IAAgB,KACxCrxD,EAAS,CAAEnb,GAAIL,EAAe0jD,sBAAsB,GAAO,IAGvDiuB,GAAuB9E,EAAAA,GAAAA,IAAiBrc,IAC5CA,EAAEohB,kBAGFd,EAAiB,CAAE1pC,MAFQ,UAAVA,EAAoB,OAAS,UAG9C0pC,EAAiB,CAAEe,sBAAsB,GAAQ,IAG7CC,GAA6BjF,EAAAA,GAAAA,IAAiBrc,IAClDA,EAAEohB,kBAEF,IAAIG,EAAW1B,EAAiB,EAC5B0B,EAAWV,EAAAA,MACbU,EAAWX,EAAAA,KAEb,MAAMY,EAAsBD,IAAaX,EAAAA,IACrCa,GAAAA,GACCF,IAAaV,EAAAA,IAAsBa,GAAAA,GAAgCC,GAAAA,GAExErB,EAAiB,CAAET,eAAgB0B,IACnChB,EAA0BiB,EAAoB,IAG1CI,GAAuBvF,EAAAA,GAAAA,IAAgB,KAC3C/pD,OAAOC,KAAKsvD,EAAAA,IAAoB,SAAU,WAAW,IAGjDC,GAAqBzF,EAAAA,GAAAA,IAAgB,MACzC0F,EAAAA,GAAAA,IAA0B,IAAI,IAG1BC,GAAqB3F,EAAAA,GAAAA,IAAgB,KACzCmE,EAAmB,CAAEpoD,SAAUqoD,EAAQ,0BAA2B,IAG9DwB,GAAuB5F,EAAAA,GAAAA,IAAgB,KAC3C1mC,EAAQ,CAAEtkB,IAAK6wD,EAAAA,KAAe,IAG1BC,GAAsB9F,EAAAA,GAAAA,IAAgB,KAC1C5lC,EAAiB,CAAE5mC,GAAIL,EAAe0jD,sBAAsB,EAAMoB,WAAY,WAAY,IAG5F,OACE0hB,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,iBACL+N,QAASgJ,GAERT,EAAQ,kBAEV/c,EAAgBxT,UACf8lB,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,UACL+N,QAAS+H,GAETjK,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,kBAAkBolD,EAAQ,kBACzCQ,EAA2B,GAC1BjL,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eAAe4lD,IAIpCjL,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,OACL+N,QAASgI,GAERO,EAAQ,aAEV5lC,EAAK7+B,KAAKk5B,GACT8gC,GAAAA,GAAAC,cAACmM,GAAAA,EAAa,CACZltC,IAAKA,EACL0B,MAAOA,EACPyrC,cAAY,EACZC,YAAU,EACVC,aAAcnC,EACdoC,aAAcnC,MAGlBrK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,aACL+N,QAASiK,GAER1B,EAAQ,uBAEXzK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,WACL+N,QAASiI,GAERM,EAAQ,aAEXzK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,WACL+N,QAASiJ,GAETnL,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,kBAAkBolD,EAAQ,wBAC1CzK,GAAAA,GAAAC,cAACwM,GAAAA,EAAQ,CACP5yE,GAAG,WACH6yE,MAAOjC,EAAkB,SAAV7pC,EAAmB,mCAAqC,mCACvE+rC,QAAmB,SAAV/rC,EACTgsC,aAAW,KAGf5M,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,aACL+N,QAASoJ,GAETtL,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,6BAA6BolD,EAAQ,yBAAyBjB,eAC9ExJ,GAAAA,GAAAC,cAAC4M,GAAAA,EAAM,CAAC9uC,MAAO4sC,KAEjB3K,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,OACL+N,QAAS8J,GAERvB,EAAQ,qBAEXzK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,MACL+N,QAAS+J,GAERxqB,EAAK,kBAEPqrB,EAAAA,KACC9M,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,cACL+N,QAAS0J,GAERnqB,EAAK,sBAGTqpB,GACC9K,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,IACL4Y,YAAU,EACVvwD,KAAO,GAAEwwD,EAAAA,OACT9K,QAAS4J,GAERrqB,EAAK,kBAGTuoB,GACChK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACP9N,KAAK,UACL+N,SAAS+K,EAAAA,GAAAA,MAERxrB,EAAK,mBAGT,K,mDCnOP,MAQA,GAR6Cke,IAC3C,MAAM,OAAEhyB,GAAWgyB,EACbuN,GAAmBrN,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqB3yB,GAG7E,OAAOu/B,EAAmBlN,GAAAA,GAAAC,cAACiN,EAAqBvN,QAAY9iE,CAAS,ECkFvE,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAYzrE,IAC9B,MAAM,cAAEkC,GAAkBlC,EACpB0rC,EAAcxpC,GAAgB4R,EAAAA,EAAAA,KAAW9T,EAAQkC,QAAiBqD,EAExE,MAAO,CACLm+D,YAAah4B,GAAag4B,YAC3B,GANiB+H,EApEiB1pE,IAAqB,IAApB,YAAE2hE,GAAa3hE,EACnD,MAAM,eAAE8zE,EAAc,gBAAEC,IAAoBluD,EAAAA,EAAAA,MAGtCmuD,GAAY9I,EAAAA,GAAAA,IAA0B,OACrC+I,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQlT,GAAamT,MAAgD,KAAvCnT,EAAYmT,OAAQv3C,EAAAA,GAAAA,YAA0B/5B,GAClFuxE,EAAAA,GAAAA,GAAWhB,EAAiBc,IAE5BG,EAAAA,GAAAA,IAAsBrpE,IAAuB,IAArBspE,GAAgBtpE,EAClCsoE,GAAoBtS,GAAesT,GAAmBtT,EAAYxhD,aAAe80D,EAAgB90D,aACnGm0D,IACAH,IACF,GACC,CAACxS,EAAasS,EAAkBK,EAAYH,IAE/C,MAAMe,GAAuB3M,EAAAA,GAAAA,KAAaxkE,IACxCmwE,IACAJ,EAAe,CAAEj0C,cAAe97B,EAAQvD,IAAK,GAC5C,CAAC0zE,EAAsBJ,KAE1BiB,EAAAA,GAAAA,GAAWR,EAAYF,EA5BE,UA4BmC7wE,GAE5D,MAAM2xE,GAAyB5M,EAAAA,GAAAA,KAAY,KACzCkM,GAAkB,GACjB,CAACA,IAEJ,OACE9N,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACZ5V,QAAQi+D,GAAiB1S,IACxBgF,GAAAA,GAAAC,cAACwO,GAAAA,EAAiB,CAChB/0E,SAAUshE,EACV0T,UAAQ,EACRrpD,UAAU,wBAGd26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL+3D,IAAK6I,EACLsB,QAASX,EACTtoB,KAAK,UACL4c,MAAM,cACNj9C,UAAU,eACV68C,QAASsM,GAERxT,EACCgF,GAAAA,GAAAC,cAAC2O,GAAAA,EAAW,CACVl1C,IAAKshC,EAAYxhD,WACjBA,WAAYwhD,EAAYxhD,WACxBksC,KAvDc,GAwDdmpB,UAAWC,EAAAA,MAEX9O,GAAAA,GAAAC,cAAC8O,GAAAA,EAAQ,OAEf/O,GAAAA,GAAAC,cAACiN,GAAgB,CACf8B,gBAAiB3B,EACjB1/B,OAAQkgC,EACRoB,oBAAqBV,EACrB1L,QAASkL,IAEP,KCbJmB,GAA0B,CAAE1jE,UAAM3O,GAClCsyE,GAA0B,CAAEt1E,QAAIgD,GAsPtC,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9B4qB,MAAOktD,EAAW,eAAElnB,EAAc,OAAExvD,EAAM,QAAEqvB,GAC1C3iB,EAAS+hB,cACP,gBACJzQ,EAAe,UAAEqa,EAAS,qBAAEsD,GAC1B/8B,GACE,4BAAE+3E,GAAgC/3E,EAAO64B,SAASmU,MAExD,MAAO,CACL8qC,cACAppD,YAAWkiC,GAAiBz4C,QAAQy4C,EAAevnD,OAASunD,EAAe7gD,UAC3EioE,mBAAoB52E,EACpB62E,WAAYxnD,EACZ6Y,OAAOmpC,EAAAA,EAAAA,KAAYzyE,GACnBof,kBACAqa,YACAsD,uBACAm7C,kBAAmB//D,SAAQnL,EAAAA,EAAAA,KAAyBhN,IACpD+3E,8BACA92D,sBAAsBC,EAAAA,EAAAA,KAA2BlhB,GACjDm4E,eAAgBhgE,QAAQnY,EAAOqJ,MAAMq4D,QAAQ9hB,QAC7Csa,YAAa/hD,QAAQnY,EAAOi4D,SAASiC,aACrCke,gBAAgBC,EAAAA,EAAAA,KAAqBr4E,GACtC,GA1BeyrE,EApP8B1pE,IAyB5C,IAzB6C,iBACjDu2E,EAAgB,QAChB5yE,EAAO,eACP6yE,EAAc,gBACdC,EAAe,YACfV,EAAW,UACXppD,EAAS,qBACTzN,EAAoB,qBACpBw3D,EAAoB,mBACpBT,EAAkB,WAClBC,EAAU,MACV3uC,EAAK,gBACLlqB,EAAe,UACfqa,EAAS,qBACTsD,EAAoB,kBACpBm7C,EAAiB,4BACjBH,EAA2B,eAC3BI,EAAc,YACdje,EAAW,eACXke,EAAc,cACdM,EAAa,iBACb7F,EAAgB,iBAChBD,EAAgB,iBAChBD,EAAgB,QAChBgG,GACD52E,EACC,MAAM,oBACJ62E,EAAmB,iBACnB5F,EAAgB,sBAChB6F,EAAqB,WACrBC,EAAU,0BACVhe,IACElzC,EAAAA,EAAAA,MAEEurD,GAAUjJ,EAAAA,GAAAA,KACV/f,GAAOipB,EAAAA,GAAAA,MACP,SAAEsD,EAAQ,UAAEqC,IAAcpC,EAAAA,EAAAA,OAEzBqC,EAAeC,EAAiBC,IAAqB/C,EAAAA,GAAAA,KAEtDgD,EAAUzzE,IAAY0zE,EAAAA,GAAkB9I,SACxC+I,GAAqB5O,EAAAA,GAAAA,KAAQ,IAC1BwN,GACHqB,EAAAA,GAAAA,GAAmB,IAAI52E,KAAkB,IAAbu1E,SAC5B1yE,GACH,CAAC0yE,KAEE,iBAAE9F,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6Bd,GAC3E6B,EACA/zD,EACAqa,GAAasD,EACbm7C,EACAH,GACCI,GAGGoB,GAAyBxK,EAAAA,GAAAA,IAAiBrc,IAC9CA,EAAE0V,iBACF1V,EAAEohB,kBACE5Z,EACF4e,IAEAhe,EAA0B,CAAE3I,OAAQ4I,EAAAA,GAAgBC,kBACtD,KAGFwe,EAAAA,GAAAA,IAAW/O,EAAAA,GAAAA,KAAQ,IAAO2N,EAAiB,CACzC,eAAgBmB,EAChB,cAAeA,EACf,eAAgBA,KACZE,EAAAA,IAAU,CAAE,QAASF,SACvBh0E,GAAY,CAAC6yE,KAEjB,MAAMsB,GAA8DjP,EAAAA,GAAAA,KAAQ,IACnE/8D,IAAA,IAAC,UAAEisE,EAAS,OAAEtjC,GAAQ3oC,EAAA,OAC3Bg7D,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,OAAQ8B,IAAYzC,EACpBtoB,KAAK,UACL4c,MAAM,cACNj9C,UAAWsoB,EAAS,SAAW,GAE/Bu0B,QAASuO,EAAUQ,EAAY,IAAMhB,IACrC1N,UAAWkO,EAAUhG,EAAQ,qBAAuB,uBAEpDzK,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GACd,sBACC+O,GAAW,aACZV,GAAwB,kBAGnB,GAEV,CAACU,EAASzC,EAAUvD,EAASwF,EAASF,IAEnCmB,GAAoB7K,EAAAA,GAAAA,IAAgB,KACnC+I,GACHY,EAAc,GAChB,IAGImB,GAAyB9K,EAAAA,GAAAA,IAAgB,KAC7CiE,EAAiB,CAAE+E,6BAA8BA,GAA8B,IAG3E+B,GAAmB/K,EAAAA,GAAAA,IAAgB,KACvC+J,GAAY,IAGRiB,GAAoBhB,IAAcb,IACtC//D,QAAQ6/D,IACLtyE,IAAY0zE,EAAAA,GAAkBY,cAC9Bt0E,IAAY0zE,EAAAA,GAAkBa,WAGnC1Q,EAAAA,GAAAA,KAAU,IAAOwQ,GAAkBxK,EAAAA,GAAAA,IAAsB,IAAMoJ,WAAapzE,GAAY,CAACw0E,EAAiBpB,IAE1G,MAAMuB,EAAyBx0E,IAAY0zE,EAAAA,GAAkBa,SACzD9vB,EAAK,iBACLA,EAAK,UAEHgwB,GAAgB3E,EAAAA,IAAW,wBAA0Cl8C,EAAAA,IAAQ8gD,SAAe3qB,UAE5FxsC,IAAeo3D,EAAAA,GAAAA,OAGf,uCACJC,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsClC,GAGpCmC,IAAYxN,EAAAA,GAAAA,IAAuB,OACzCyN,EAAAA,GAAAA,GAAgBD,IAEhB,MAAME,IAAgBlQ,EAAAA,GAAAA,KAAQ,IAE1B/B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACG2O,GACC3Q,GAAAA,GAAAC,cAACiS,GAAAA,EAAkB,CACjB/d,KAAK,WACL79C,MAAOq6D,EACPwB,OAAK,EACLC,UAAQ,EACRzkB,YAAal+C,QAAQ6/D,GACrBjqD,UAAU,sCACV68C,QAASgO,EACTmC,SAAUnD,KAGbI,GACCtP,GAAAA,GAAAC,cAACiS,GAAAA,EAAkB,CACjB7sD,UAAU,0BACV9rB,OAAQ+1E,EACRpN,QAASiO,EACTgC,OAAK,EACLC,UAAQ,EACRzkB,aAAW,EACX0kB,SAAUlD,OAKjB,CAACG,EAAoBqB,IAExB,OACE3Q,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBACb26C,GAAAA,GAAAC,cAAA,OAAKpmE,GAAG,iBAAiBwrB,UAAU,cAAcm/C,IAAKuN,IACnDtH,EAAQrI,OAASpC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBACjC26C,GAAAA,GAAAC,cAACqS,GAAAA,EAAY,CACXC,QAASvB,EACTwB,OAAS,GAAEC,EAAAA,OAAYhB,KACvBpsD,WAAWq8C,EAAAA,GAAAA,GACT,YACA+I,EAAQrI,OAAS,MACjBwN,GAAoBnF,EAAQrI,OAAS,gBACrCwP,GAAuCrsD,SAAWklD,EAAQrI,OAAS,sBAErEsQ,UAAWpC,EACX5N,UAAWkN,GAAoBnF,EAAQrI,MAAQ,QAAU,OACzDuQ,iBAAkBx0B,EAAAA,IAAey0B,EAAAA,KAAcr4D,GAAe,QAAK1d,EACnEg2E,gBAAiBpI,EAAQrI,MAAQyP,QAAkCh1E,GAEnEmjE,GAAAA,GAAAC,cAAC6S,GAAiB,CAChB7I,iBAAkBA,EAClBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,gBAAiBmG,EACjBlG,gBAAiBmG,KAGrBxQ,GAAAA,GAAAC,cAAC8S,GAAAA,EAAW,CACVC,QAAQ,wBACRC,oBAAoB,+BACpB5tD,WAAWq8C,EAAAA,GAAAA,GACR4N,GAAsBC,EAAc,wBAAqB1yE,EAC1D+yE,GAAoB,uBAEtB7xC,MAAO+xC,OAAkBjzE,EAAagzE,GAAkBT,EACxD8D,QAAS7B,EACTrrD,UAAWA,GAA0C,cAA7B0jD,EACxByJ,aAA2C,cAA7BzJ,EAA2C,cAAW7sE,EACpEu2E,uBAAqD,cAA7B1J,GAAsD,UAAV9oC,EAAoB,aAAU/jC,EAClGw2E,YAAa7B,EACb8B,aAAa,MACblB,SAAU3iE,QAAQ6/D,GAAsBC,GACxCgE,SAAUvD,EACVC,QAASA,EACTuD,QAAStC,EACTuC,eAA6C,cAA7B/J,EAA2CyH,OAAyBt0E,GAEnFo1E,GACDjS,GAAAA,GAAAC,cAACyT,GAAAA,EAAY,CAACC,SAAUtC,IAAoBV,IAAuBrB,KAEpE/2D,GAAwBynD,GAAAA,GAAAC,cAAC2T,GAAY,MACrCpiB,GACCwO,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,QAASX,EACTtoB,KAAK,UACL4c,MAAM,cACNC,UAAY,GAAEkI,EAAQ,8DACtBvI,QAASkP,EACT/rD,WAAWq8C,EAAAA,GAAAA,IAAgBnpD,GAAwB,kBAEnDynD,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,oBAGjB26C,GAAAA,GAAAC,cAAC4T,GAAAA,EAAc,CACblmC,OAAqC,YAA7B+7B,EACRoK,UAAQ,EACRzuD,UAAU,4BAEV26C,GAAAA,GAAAC,cAAC8T,GAAuB,CACtBtK,iBAAkBA,EAClBE,qBAAsBA,EACtBzH,QAASiP,MAIX,KClRJ6C,GAA0Bx0E,OAAOsG,KAAK4qE,EAAAA,IAAmBv3E,OAAS,EAGxE,IAAI86E,GAEJ,MAqMA,IAAexT,EAAAA,GAAAA,KArMgBpnE,IAgBzB,IAhB0B,QAC9B2D,EAAO,YACPoyE,EAAW,WACXG,EAAU,gBACVO,EAAe,eACfD,EAAc,qBACdE,EAAoB,gBACpBnM,EAAe,qBACfrV,EAAoB,0BACpBE,EAAyB,iBACzBsV,EAAgB,cAChBiM,EAAa,gBACbkE,EAAe,uBACfrQ,EAAsB,QACtBoM,EAAO,cACPkE,GACD96E,EACC,MAAM,gBAAEykD,IAAoB5+B,EAAAA,EAAAA,OACrBk1D,EAAsBC,IAA2B9S,EAAAA,GAAAA,IAAS5a,EAAAA,KAC1D2tB,EAA6BC,IAAkChT,EAAAA,GAAAA,KAAS,IAE/EV,EAAAA,GAAAA,KAAU,KACRvkD,OAAO8hC,UAAUo2B,yBAAyBn9D,KAAKk9D,EAA+B,GAC7E,IAEH,MAAM,uBACJE,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoB9Q,GAClB+Q,EAAuB/Q,GAAoB/mE,IAAY0zE,EAAAA,GAAkB9I,SACzEmN,EAAsBD,GAAwBF,GAGlDnQ,aAAcuQ,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,GAA4B5mB,GAAwBE,GAElD2mB,GAAgB7Q,EAAAA,GAAAA,KAAO,GAEvB8Q,GAAmBhP,EAAAA,GAAAA,IAAgB,KACnCrpE,IAAY0zE,EAAAA,GAAkB9I,WAGlCwN,EAAc7vD,SAAU,EACxB8uD,GAAwB,GAAK,IAGzBiB,GAAmBjP,EAAAA,GAAAA,IAAgB,KACvC+O,EAAc7vD,SAAU,EAEpB0uD,KACFj1D,aAAai1D,IACbA,QAAep3E,GAGjBo3E,GAAe33D,OAAOzZ,YAAW,KAC1BuyE,EAAc7vD,SACjB8uD,GAAwB,EAC1B,GA9DwB,IA+DD,IAGrBkB,GAAuBlP,EAAAA,GAAAA,IAAgB,KAC3C6N,EAAgBxD,EAAAA,GAAkB8E,SAAS,IAGvCC,GAAuBpP,EAAAA,GAAAA,IAAgB,KAC3C6N,EAAgBxD,EAAAA,GAAkBa,SAAS,IAGvCmE,GAAuBrP,EAAAA,GAAAA,IAAgB,KAC3C6N,EAAgBxD,EAAAA,GAAkBiF,UAClC73B,GAAiB,IAGb83B,GAAoBvP,EAAAA,GAAAA,IAAgB,KACpCloB,EAAAA,KAAgBm2B,EAClBh4D,OAAOC,KAAM,GAAEs5D,EAAAA,UAAsB,SAAU,YACtCpnB,EACTnyC,OAAO8hC,UAAU03B,gBAEjBx5D,OAAOqe,SAASo7C,QAClB,IAGIC,GAAyB3P,EAAAA,GAAAA,IAAgB,KAC7C6N,EAAgBxD,EAAAA,GAAkBuF,gBAAgB,IAG9CC,GAAuB7P,EAAAA,GAAAA,IAAgB,KAC3C6N,EAAgBxD,EAAAA,GAAkByF,cAAc,KAGlDtV,EAAAA,GAAAA,KAAU,KACR,IAAIuV,EASJ,OARIp5E,IAAY0zE,EAAAA,GAAkB9I,SAChCwO,EAAmB95D,OAAOzZ,YAAW,KACnCwxE,GAAwB,EAAM,GArGR,MAuGfe,EAAc7vD,SAAWohC,EAAAA,KAClC0tB,GAAwB,GAGnB,KACD+B,IACFp3D,aAAao3D,GACbA,OAAmBv5E,EACrB,CACD,GACA,CAACG,IAEJ,MAAMykD,GAAO+f,EAAAA,GAAAA,KAEb,OACExB,GAAAA,GAAAC,cAAA,OACEpmE,GAAG,kBACHw8E,aAAe1vB,EAAAA,QAAkC9pD,EAAnBw4E,EAC9BiB,aAAe3vB,EAAAA,QAAkC9pD,EAAnBy4E,GAE9BtV,GAAAA,GAAAC,cAACsW,GAAc,CACb3G,iBAAkBmF,EAClB/3E,QAASA,EACT6yE,eAAgBA,EAChBG,cAAeA,EACf7F,iBAAkBoL,EAClBrL,iBAAkBuL,EAClBxL,iBAAkByL,EAClBzF,QAASA,EACTF,qBAAsBA,EACtBD,gBAAiBA,IAEnB9P,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTxiC,KAAMgqC,EAAuB,OAAS,WACtCtH,YAAauL,GACbxL,UAAWxrE,EACXw5E,eAAa,EACbC,oBAAqB/F,EAAAA,GAAkB9I,SACvC8O,YAAU,EACVC,iBAAkBjG,EAAAA,GAAkB9I,WAElCpe,IACA,OAAQxsD,GACN,KAAK0zE,EAAAA,GAAkB9I,SACrB,OACE5H,GAAAA,GAAAC,cAAC2W,GAAW,CACV5S,qBAAsB+Q,EACtBlR,uBAAwBA,EACxBC,0BAA2BoQ,EAC3BtQ,gBAAiBA,EACjBG,iBAAkBgR,IAGxB,KAAKrE,EAAAA,GAAkBY,aACrB,OACEtR,GAAAA,GAAAC,cAAC6C,GAAU,CACTsM,YAAaA,EACbG,WAAYA,EACZ/lB,SAAUA,EACVymB,QAASA,IAGf,KAAKS,EAAAA,GAAkBa,SACrB,OAAOvR,GAAAA,GAAAC,cAACyI,GAAW,CAACtvE,OAAQy2E,EAAgBrmB,SAAUA,EAAUymB,QAASA,IAC3E,QACE,OACJ,IAGH+E,GACChV,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL8P,OAAK,EACL0E,OAAK,EACLxxD,WAAWq8C,EAAAA,GAAAA,GAAe,aAAcwT,GACxChT,QAAS0T,GAERn0B,EAAK,wBAGTgzB,GACCzU,GAAAA,GAAAC,cAAC6W,GAAAA,EAAU,CACTnpC,OAAQo2B,EACR7pB,UAAW46B,EACXX,cAAeA,EACf4C,qBAAsBpC,EACtBqC,oBAAqBtC,IAGzB1U,GAAAA,GAAAC,cAACgX,GAAa,CACZ5gB,QAAS+d,EACTlT,iBAAkBuU,EAClBtU,aAAc6U,EACd5U,WAAY8U,IAEV,ICpOV,GAPoCvW,IAClC,MAAMuX,GAAUrX,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,WAG/C,OAAO4W,EAAUlX,GAAAA,GAAAC,cAACiX,EAAYvX,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECGvD,GAPqCtB,IACnC,MAAM6V,GAAW3V,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,YAGhD,OAAOkV,EAAWxV,GAAAA,GAAAC,cAACuV,EAAa7V,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECgB9B,IAyBtBkW,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAe53E,OAAOsG,KAAKqxE,IAAah+E,OAAS,EA6evD,IAAesnE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9B6vB,cAAc,MACZjF,EAAK,QACL6F,GACD,4BACDs7C,EAA2B,iBAC3BjK,EAAgB,mBAChBie,EAAkB,kBAClBC,EACA1hB,aAAa,sBACXO,IAEA/wD,GACE,cACJ5L,EACA+1D,UAAU,YACRiC,GACD,qBACDjD,EAAoB,0BACpBE,EAAyB,gBACzBf,GACEp2D,EAEEylB,GAAc3F,EAAAA,EAAAA,KAAkB9f,GAKtC,MAAO,CACL83E,YAAaltD,EACbqtD,WAAYxnD,EACZwvD,wBAA8C,IAArBne,EACzBiK,8BACA7pE,gBACAg4D,cACA6lB,qBACAC,oBACAE,WAbiB/nE,QAAQsN,GAAaljB,IActC00D,uBACAE,4BACAsV,kBAfuB0T,EAAAA,EAAAA,KAAuBngF,GAgB9CumD,iBAfuBz4C,EAASy4C,iBAgBhCiyB,gBAAiB1qE,EAAS+hB,aAAakhC,UACvCqF,kBACAgqB,2BAA4BvhB,EAC7B,GAhDe4M,EA1epB,SAAmB1pE,GAkBO,IAlBN,IAClBmrE,EAAG,YACH4K,EAAW,WACXG,EAAU,wBACVgI,EAAuB,4BACvBlU,EAA2B,cAC3B7pE,EAAa,YACbg4D,EAAW,mBACX6lB,EAAkB,kBAClBC,EAAiB,WACjBE,EAAU,qBACVjpB,EAAoB,0BACpBE,EAAyB,iBACzBsV,EAAgB,iBAChBlmB,EAAgB,gBAChBiyB,EAAe,gBACfpiB,EAAe,2BACfgqB,GACsBr+E,EACtB,MAAM,qBACJs+E,EAAoB,uBACpBC,EAAsB,sBACtBzH,EAAqB,kBACrB0H,EAAiB,oBACjB3H,EAAmB,iBACnB4H,EAAgB,gBAChBC,EAAe,SACf/iE,EAAQ,0BACRo9C,IACElzC,EAAAA,EAAAA,OAEGliB,EAASg7E,IAAczW,EAAAA,GAAAA,IAA4BmP,EAAAA,GAAkB9I,WACrEqQ,EAAgBC,IAAqB3W,EAAAA,GAAAA,IAASlP,EAAAA,GAAgB8lB,OAC9DtI,EAAgBuI,IAAqB7W,EAAAA,GAAAA,IAAiB,KACtD8W,EAAczU,IAAmB0U,EAAAA,GAAAA,MAGjCC,EAAeC,IAAoBjX,EAAAA,GAAAA,IAAiB,GAE3D,IAAIkX,EAA2BtB,GAAYgB,KAC3C,OAAQn7E,GACN,KAAK0zE,EAAAA,GAAkBiF,SACrB8C,EAActB,GAAYxB,SAC1B,MACF,KAAKjF,EAAAA,GAAkB8E,SACrBiD,EAActB,GAAY3B,SAC1B,MACF,KAAK9E,EAAAA,GAAkBuF,gBACvB,KAAKvF,EAAAA,GAAkBgI,gBACrBD,EAActB,GAAYwB,WAC1B,MACF,KAAKjI,EAAAA,GAAkByF,cACvB,KAAKzF,EAAAA,GAAkBkI,cACrBH,EAActB,GAAY0B,SAI9B,MAAMC,GAAczS,EAAAA,GAAAA,IAAiB0S,IACnC,SAASC,IACPhB,EAAWtH,EAAAA,GAAkB9I,UAC7BsQ,EAAkB7lB,EAAAA,GAAgB8lB,MAClCC,EAAkB,IAClBR,EAAuB,CAAEvvB,WAAW,IACpCwvB,IACAh1E,YAAW,KACT80E,EAAqB,CAAEz1D,MAAO,KAC9BguD,EAAoB,CAAE1kE,UAAM3O,IAC5BszE,EAAsB,CAAEt2E,QAAIgD,IAC5B+6E,EAAuB,CAAEvvB,WAAW,IACpCmwB,EAAiBx+E,KAAKC,MAAM,GAvEF,IAyE9B,CAEA,IAA8B,IAA1B8+E,EAKJ,GAAI/7E,IAAY0zE,EAAAA,GAAkBkI,cAKlC,GAAI57E,IAAY0zE,EAAAA,GAAkBgI,gBAAlC,CAKA,GAAI17E,IAAY0zE,EAAAA,GAAkByF,cAAe,CAC/C,MAAM8C,EAAoB57E,SAAS67E,eAAe,2BAC9CD,GACFA,EAAkBv+C,MAEtB,CAEA,GAAI19B,IAAY0zE,EAAAA,GAAkB8E,SAChC,OAAQyC,GACN,KAAK5lB,EAAAA,GAAgB8mB,YACrB,KAAK9mB,EAAAA,GAAgB+mB,QACrB,KAAK/mB,EAAAA,GAAgBgnB,QACrB,KAAKhnB,EAAAA,GAAgBinB,cACrB,KAAKjnB,EAAAA,GAAgBknB,YACrB,KAAKlnB,EAAAA,GAAgBmnB,QACrB,KAAKnnB,EAAAA,GAAgBonB,YACrB,KAAKpnB,EAAAA,GAAgBqnB,eACrB,KAAKrnB,EAAAA,GAAgBsnB,SACrB,KAAKtnB,EAAAA,GAAgBunB,SACrB,KAAKvnB,EAAAA,GAAgBwnB,aAEnB,YADA3B,EAAkB7lB,EAAAA,GAAgB8lB,MAGpC,KAAK9lB,EAAAA,GAAgBynB,sBAEnB,YADA5B,EAAkB7lB,EAAAA,GAAgBgnB,SAEpC,KAAKhnB,EAAAA,GAAgB0nB,2BAEnB,YADA7B,EAAkB7lB,EAAAA,GAAgBynB,uBAGpC,KAAKznB,EAAAA,GAAgB2nB,mBACrB,KAAK3nB,EAAAA,GAAgB4nB,kBACrB,KAAK5nB,EAAAA,GAAgB6nB,gBACrB,KAAK7nB,EAAAA,GAAgB8nB,oBACrB,KAAK9nB,EAAAA,GAAgB+nB,WACrB,KAAK/nB,EAAAA,GAAgBgoB,gBACrB,KAAKhoB,EAAAA,GAAgBioB,iBACrB,KAAKjoB,EAAAA,GAAgBkoB,gBACrB,KAAKloB,EAAAA,GAAgBmoB,kBACrB,KAAKnoB,EAAAA,GAAgBooB,kBACrB,KAAKpoB,EAAAA,GAAgBqoB,qBACrB,KAAKroB,EAAAA,GAAgBsoB,gBACrB,KAAKtoB,EAAAA,GAAgBuoB,oBACrB,KAAKvoB,EAAAA,GAAgBwoB,eACrB,KAAKxoB,EAAAA,GAAgByoB,cACrB,KAAKzoB,EAAAA,GAAgB0oB,aACrB,KAAK1oB,EAAAA,GAAgB2oB,qBACrB,KAAK3oB,EAAAA,GAAgBC,iBACrB,KAAKD,EAAAA,GAAgB4oB,gBACrB,KAAK5oB,EAAAA,GAAgB6oB,wBAEnB,YADAhD,EAAkB7lB,EAAAA,GAAgBmnB,SAGpC,KAAKnnB,EAAAA,GAAgB8oB,oBAEnB,YADAjD,EAAkB1mB,EAAca,EAAAA,GAAgB4oB,gBAAkB5oB,EAAAA,GAAgBC,kBAGpF,KAAKD,EAAAA,GAAgB+oB,8BACrB,KAAK/oB,EAAAA,GAAgBgpB,gBAEnB,YADAnD,EAAkB7lB,EAAAA,GAAgB4oB,iBAGpC,KAAK5oB,EAAAA,GAAgBipB,2BAEnB,YADApD,EAAkB7lB,EAAAA,GAAgB8oB,qBAGpC,KAAK9oB,EAAAA,GAAgBkpB,0BAEnB,YADArD,EAAkB7lB,EAAAA,GAAgB+oB,+BAGpC,KAAK/oB,EAAAA,GAAgBmpB,8BAEnB,YADAtD,EAAkB7lB,EAAAA,GAAgBkpB,2BAGpC,KAAKlpB,EAAAA,GAAgBopB,kCACrB,KAAKppB,EAAAA,GAAgBqpB,iCAEnB,YADAxD,EAAkB7lB,EAAAA,GAAgB2nB,oBAEpC,KAAK3nB,EAAAA,GAAgBspB,+BACrB,KAAKtpB,EAAAA,GAAgBupB,8BAEnB,YADA1D,EAAkB7lB,EAAAA,GAAgB6nB,iBAEpC,KAAK7nB,EAAAA,GAAgBwpB,mCACrB,KAAKxpB,EAAAA,GAAgBypB,kCAEnB,YADA5D,EAAkB7lB,EAAAA,GAAgB8nB,qBAEpC,KAAK9nB,EAAAA,GAAgB0pB,0BACrB,KAAK1pB,EAAAA,GAAgB2pB,yBAEnB,YADA9D,EAAkB7lB,EAAAA,GAAgB+nB,YAEpC,KAAK/nB,EAAAA,GAAgB4pB,+BACrB,KAAK5pB,EAAAA,GAAgB6pB,8BAEnB,YADAhE,EAAkB7lB,EAAAA,GAAgBgoB,iBAEpC,KAAKhoB,EAAAA,GAAgB8pB,gCACrB,KAAK9pB,EAAAA,GAAgB+pB,+BAEnB,YADAlE,EAAkB7lB,EAAAA,GAAgBioB,kBAEpC,KAAKjoB,EAAAA,GAAgBgqB,+BACrB,KAAKhqB,EAAAA,GAAgBiqB,8BAEnB,YADApE,EAAkB7lB,EAAAA,GAAgBkoB,iBAEpC,KAAKloB,EAAAA,GAAgBkqB,iCACrB,KAAKlqB,EAAAA,GAAgBmqB,gCAEnB,YADAtE,EAAkB7lB,EAAAA,GAAgBmoB,mBAEpC,KAAKnoB,EAAAA,GAAgBoqB,oCACrB,KAAKpqB,EAAAA,GAAgBqqB,mCAEnB,YADAxE,EAAkB7lB,EAAAA,GAAgBqoB,sBAEpC,KAAKroB,EAAAA,GAAgBsqB,iCACrB,KAAKtqB,EAAAA,GAAgBuqB,gCAEnB,YADA1E,EAAkB7lB,EAAAA,GAAgBooB,mBAEpC,KAAKpoB,EAAAA,GAAgBwqB,iBAEnB,YADA3E,EAAkB7lB,EAAAA,GAAgByoB,eAEpC,KAAKzoB,EAAAA,GAAgByqB,wBAEnB,YADA5E,EAAkB7lB,EAAAA,GAAgBwqB,kBAEpC,KAAKxqB,EAAAA,GAAgB0qB,qBAEnB,YADA7E,EAAkB7lB,EAAAA,GAAgByqB,yBAEpC,KAAKzqB,EAAAA,GAAgB2qB,sBAEnB,YADA9E,EAAkB7lB,EAAAA,GAAgB0qB,sBAEpC,KAAK1qB,EAAAA,GAAgB4qB,0BAEnB,YADA/E,EAAkB7lB,EAAAA,GAAgB2qB,uBAEpC,KAAK3qB,EAAAA,GAAgB6qB,2BACrB,KAAK7qB,EAAAA,GAAgB8qB,aACrB,KAAK9qB,EAAAA,GAAgB+qB,kCAEnB,YADAlF,EAAkB7lB,EAAAA,GAAgB0oB,cAEpC,KAAK1oB,EAAAA,GAAgBgrB,uBAEnB,YADAnF,EAAkB7lB,EAAAA,GAAgB6qB,4BAEpC,KAAK7qB,EAAAA,GAAgBirB,2BAEnB,YADApF,EAAkB7lB,EAAAA,GAAgBgrB,wBAEpC,KAAKhrB,EAAAA,GAAgBkrB,wBAEnB,YADArF,EAAkB7lB,EAAAA,GAAgBirB,4BAEpC,KAAKjrB,EAAAA,GAAgBmrB,mBAEnB,YADAtF,EAAkB7lB,EAAAA,GAAgB+qB,mCAEpC,KAAK/qB,EAAAA,GAAgBorB,uBAEnB,YADAvF,EAAkB7lB,EAAAA,GAAgBmrB,oBAGpC,KAAKnrB,EAAAA,GAAgBqrB,oBACrB,KAAKrrB,EAAAA,GAAgBsrB,kBAEnB,YADAzF,EAAkB7lB,EAAAA,GAAgB+mB,SAGpC,KAAK/mB,EAAAA,GAAgBurB,aAEnB,YADA1F,EAAkB7lB,EAAAA,GAAgBsrB,mBAGpC,KAAKtrB,EAAAA,GAAgBwrB,iCACrB,KAAKxrB,EAAAA,GAAgByrB,iCAEnB,YADA5F,EAAkB7lB,EAAAA,GAAgB0rB,+BAGpC,KAAK1rB,EAAAA,GAAgB0rB,8BACrB,KAAK1rB,EAAAA,GAAgB2rB,yBAGnB,OAFAhG,EAAWtH,EAAAA,GAAkB9I,eAC7BsQ,EAAkB7lB,EAAAA,GAAgB8lB,MAGpC,KAAK9lB,EAAAA,GAAgB4rB,cACrB,KAAK5rB,EAAAA,GAAgBuc,YAEnB,YADAsJ,EAAkB7lB,EAAAA,GAAgBunB,UAGpC,KAAKvnB,EAAAA,GAAgB6rB,eAEnB,YADAhG,EAAkB7lB,EAAAA,GAAgBsnB,UAOpC38E,IAAY0zE,EAAAA,GAAkB9I,UAAY2P,EAC5CS,EAAWtH,EAAAA,GAAkBY,cAK/B0H,GA/LA,MAFEhB,EAAWtH,EAAAA,GAAkBuF,sBAL7B+B,EAAWtH,EAAAA,GAAkByF,oBAL7B6C,GA2MS,IAGPmF,GAAoB9X,EAAAA,GAAAA,IAAiBnkD,IACrCllB,IAAY0zE,EAAAA,GAAkBa,UAKlCyG,EAAWtH,EAAAA,GAAkBY,cAEzBpvD,IAAUktD,GACZuI,EAAqB,CAAEz1D,WAPvBk2D,EAAkBl2D,EAQpB,IAGIk8D,GAAoB/X,EAAAA,GAAAA,IAAgB,KACxC2R,EAAWtH,EAAAA,GAAkBY,cAC7BqG,EAAqB,CAAEz1D,MAAO,KAC9BiuD,EAAsB,CAAEt2E,GAAIgkD,GAAmB,KAGjDgjB,EAAAA,GAAAA,KACE,KACE,MAAMl7C,EAAa3oB,IAAY0zE,EAAAA,GAAkBiF,SAC3C7P,EAAa9oE,IAAY0zE,EAAAA,GAAkB9I,SAC3CyW,GAAqB7G,IAAezT,EAK1C,OAAKp+C,GAAc04D,IAAwBvY,IAAengD,GACpD4xD,GAA2B8G,GACxBxX,EAAAA,GAAAA,IAAsB,KAC3BiS,GAAa,SAGf,CACF,GAEF,CAACvB,EAAyBv6E,EAAS87E,EAAatB,EAAYzT,IAG9D,MAAMua,GAAqBjY,EAAAA,GAAAA,IAAiBrc,IACtChtD,IAAY0zE,EAAAA,GAAkBY,eAIlCtnB,EAAE0V,iBACFsY,EAAWtH,EAAAA,GAAkBY,cAAa,IAGtCiN,GAA4BlY,EAAAA,GAAAA,IAAiBrc,IACjDA,EAAE0V,iBACF1qD,EAAS,CAAEnb,GAAIL,EAAe0jD,sBAAsB,GAAO,IAGvDshC,GAAsBnY,EAAAA,GAAAA,IAAiBrc,IAC3CA,EAAE0V,iBACFsY,EAAWtH,EAAAA,GAAkBiF,SAAS,IAGlC8I,GAAuBpY,EAAAA,GAAAA,IAAiBrc,IAC5CA,EAAE0V,iBACFsY,EAAWtH,EAAAA,GAAkB8E,SAAS,KAGxC1E,EAAAA,GAAAA,IAAW/O,EAAAA,GAAAA,KAAQ,KAAM,CACvB,cAAeuc,MAEVI,EAAAA,IAAc,CACjB,cAAeH,MAEbxN,EAAAA,IAAU,CACZ,QAASwN,EACT,QAASC,MAEP5L,EAAAA,IAAa7B,EAAAA,IAAU,CAAE,QAAS0N,MACpC,MAEJ5d,EAAAA,GAAAA,KAAU,KACRkX,IAEIE,IAAmB5lB,EAAAA,GAAgBmnB,SACrC1B,GACF,GACC,CAACC,EAAiBD,EAAkBG,KAEvC0G,EAAAA,GAAAA,IAAc,UACe9hF,IAAvBw6E,IACFW,EAAWtH,EAAAA,GAAkB8E,UAC7B0C,EAAkBb,GAClBjlB,EAA0B,CAAE3I,YAAQ5sD,KAGlCy6E,GACF1T,EAAgB0T,EAClB,GACC,CAAC1T,EAAiB0T,EAAmBD,EAAoBjlB,IAE5D,MAAMwsB,GAA6BvY,EAAAA,GAAAA,IAAiB5c,IAClDuuB,EAAWtH,EAAAA,GAAkB8E,UAC7B0C,EAAkBzuB,EAAO,IAGrBo1B,GAAwBC,EAAAA,GAAAA,IAAYC,EAAAA,GAAAA,GAAYtG,IAAgBtB,GAAY3B,SAAWyC,GAAkB,IAkB/G,SAAS+G,EAAcx1B,GACrB,OAAQivB,GACN,KAAKtB,GAAYxB,SACf,OACE3V,GAAAA,GAAAC,cAACe,GAAa,CACZxX,SAAUA,EACVymB,QAAS6I,EACT3E,cAAeiK,EACfxa,gBAAiBA,EACjBC,uBAAwB+a,EACxB9a,0BAA2BkU,EAC3BjU,iBAAkBA,EAClBrW,gBAAiBA,EACjB4V,mBAAoBoU,IAG1B,KAAKP,GAAY3B,SACf,OACExV,GAAAA,GAAAC,cAACuV,GAAQ,CACPhsB,SAAUA,EACVy1B,cAAehH,EACfI,aAAcA,EACdzU,gBAAiBA,EACjBmM,qBAAsB1M,EACtB6b,eAAgBN,EAChB3O,QAAS6I,IAGf,KAAK3B,GAAYwB,WACf,OACE3Y,GAAAA,GAAAC,cAACiX,GAAO,CACNx9C,IAAK6+C,EACL/uB,SAAUA,EACV21B,WAAS,EACTniF,QAASA,EACTk3E,gBAAiB8D,EACjB/H,QAAS6I,IAGf,KAAK3B,GAAY0B,SACf,OACE7Y,GAAAA,GAAAC,cAACiX,GAAO,CACNx9C,IAAK6+C,EACL/uB,SAAUA,EACVxsD,QAASA,EACTk3E,gBAAiB8D,EACjB/H,QAAS6I,IAGf,QACE,OACE9Y,GAAAA,GAAAC,cAACmf,GAAQ,CACPpiF,QAASA,EACT8yE,gBAAiBA,EACjBV,YAAaA,EACbG,WAAYA,EACZM,eAAgBA,EAChBjM,gBAAiBA,EACjBsQ,gBAAiB8D,EACjBhI,cAAemO,EACfta,uBAAwB+a,EACxB3O,QAAS6I,EACT/I,qBAAsB1M,EACtB9U,qBAAsBA,EACtBE,0BAA2BA,EAC3BsV,iBAAkBA,EAClBoQ,cAAeiK,IAIzB,CAEA,OAxFAvd,EAAAA,GAAAA,KAAU,KACR,GAAKla,EAAAA,GAIL,OAAO04B,EAAAA,GAAAA,GAAuB7a,EAAIj/C,QAAU,CAC1C+5D,wBAAyB,2CACzB/Y,wBAAyB,2BACzBgZ,kBAAmBzG,EACnB0G,SAAUA,KACRxH,EAAWtH,EAAAA,GAAkB8E,UAC7BoJ,EAA2BC,EAAsBt5D,QAAS,GAE5D,GACD,CAACs5D,EAAuBra,IA2EzBxE,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACT/D,IAAKA,EACLz+B,KAAMs9B,EAA8B,OAASoc,EAAAA,GAC7ChX,YAAa2O,GACb5O,UAAWiQ,EACXjC,eAAa,EACbC,oBAAqBU,GAAYgB,KACjCzB,YAAU,EACVC,iBAAkBQ,GAAYgB,KAC9Bt+E,GAAG,aACH6lF,kBAAgB,GAEfV,EAGP,KC7hBA,GANuC3lF,IAAgB,IAAf,OAAEs0C,GAAQt0C,EAChD,MAAMsmF,GAAc9f,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgB3yB,GAEnE,OAAOgyC,EAAc3f,GAAAA,GAAAC,cAAC0f,EAAW,WAAM9iF,CAAS,ECGlD,GAR2C8iE,IACzC,MAAM,OAAEhyB,GAAWgyB,EACbigB,GAAiB/f,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,kBAAmB3yB,GAGzE,OAAOiyC,EAAiB5f,GAAAA,GAAAC,cAAC2f,EAAmBjgB,QAAY9iE,CAAS,E,uOCGnE,MA6BA,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACQ,CACLsyD,cAAcpyD,EAAAA,EAAAA,KAAeF,GAAQsyD,gBAHvBmZ,EA7B8B1pE,IAAsB,IAArB,aAAEuwD,GAAcvwD,EACjE,MAAM,SAAE2b,IAAakK,EAAAA,EAAAA,MAEf2gE,EAAYA,KAChB7qE,EAAS,CAAEnb,QAAIgD,GAAa,CAAEijF,gBAAgB,GAAO,EAGjDC,EAA8C/6E,IAAgC,IAA/B,OAAEtM,EAAM,KAAEiB,EAAI,SAAE2F,GAAU0F,GAC7E8hE,EAAAA,GAAAA,GAAe,CACbtd,UAAU,EACVroC,MAAM6+D,EAAAA,GAAAA,IAAmBtnF,EAAQiB,EAAM2F,GACvCynE,OAAQ8Y,GACR,EAGJ,OACE7f,GAAAA,GAAAC,cAAA,WACGrW,GAAc5jD,KAAI,CAACmK,EAAa3T,IAC/BwjE,GAAAA,GAAAC,cAAC8f,EACCE,GAAA,CACAvmD,IAAM,GAAEvpB,EAAYzX,UAAUyX,EAAY7Q,YAAY6Q,EAAYxW,QAAQ6C,KAEtE2T,MAGJ,K,wGCxBV,IAAI+vE,GACAC,G,gBCVJ,MAQA,GARuDxgB,IACrD,MAAM,OAAEhyB,GAAWgyB,EACbygB,GAA6BvgB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,8BAA+B3yB,GAGjG,OAAOyyC,EAA6BpgB,GAAAA,GAAAC,cAACmgB,EAA+BzgB,QAAY9iE,CAAS,ECG3F,GARwC8iE,IACtC,MAAM,OAAEhyB,GAAWgyB,EACb0gB,GAAcxgB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgB3yB,GAGnE,OAAO0yC,EAAcrgB,GAAAA,GAAAC,cAACogB,EAAgB1gB,QAAY9iE,CAAS,ECG7D,GARkD8iE,IAChD,MAAM,OAAEhyB,GAAWgyB,EACb2gB,GAAwBzgB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,yBAA0B3yB,GAGvF,OAAO2yC,EAAwBtgB,GAAAA,GAAAC,cAACqgB,EAA0B3gB,QAAY9iE,CAAS,ECGjF,GAR8C8iE,IAC5C,MAAM,OAAEhyB,GAAWgyB,EACb4gB,GAAoB1gB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAAsB3yB,GAG/E,OAAO4yC,EAAoBvgB,GAAAA,GAAAC,cAACsgB,EAAsB5gB,QAAY9iE,CAAS,E,gBCLzE,MAUA,GAVsD8iE,IACpD,MAAM,uBAAExqB,GAA2BwqB,EAC7B6gB,GAA4B3gB,EAAAA,GAAAA,GAChCC,GAAAA,GAAQQ,MAAO,6BAA8BnrB,GAI/C,OAAOqrC,EAA4BxgB,GAAAA,GAAAC,cAACugB,EAA8B7gB,QAAY9iE,CAAS,E,gBCfzF,MCyEA,IAAe4jE,EAAAA,GAAAA,KAhDwBpnE,IAOjC,IAPkC,KACtC86D,EAAI,cACJssB,EAAa,YACbthF,EAAW,QACX+iE,EAAO,UACPwe,EAAS,UACTr7D,GACDhsB,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,KAGPgD,GAAMD,EAAAA,GAAAA,IAAuB,OAC7B,kBACJoc,EAAiB,kBACjBC,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBvc,GAAMkc,GAEjC,OACE1gB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GD7CG,WC6CyBr8C,GAAYm/C,IAAKA,GAC3DxE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLC,MAAM,YACN71D,OAAK,EACL4Y,UDjDmC,WCkDnC68C,QAASA,EACT8e,cAAeJ,EACfre,UAAW9gB,EAAKg/B,IAEhBzgB,GAAAA,GAAAC,cAAA,KAAG56C,WAAWq8C,EAAAA,GAAAA,GDtDuC,WCsDX,OAAS,QAAOvN,QAE3D1kD,QAAQtQ,IAAgB6gE,GAAAA,GAAAC,cAAA,OAAK56C,UDxD4E,aCwD5C07C,EAAAA,GAAAA,IAAqB5hE,IAClFuhF,GACC1gB,GAAAA,GAAAC,cAACwC,GAAAA,EAAI,CACH90B,OAAQgzC,EACR9d,QAASge,EACT7J,oBAAqB8J,EACrBle,WAAS,EACTF,UAAU,QACVC,UAAU,UAEV3C,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,YAAY+N,QAASwe,GAAYj/B,EAAK,mBAGrD,ICrEV,GAA2C,WCiJ3C,IAAegf,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MAAM+M,GAAqBC,EAAAA,EAAAA,KAAyBhN,GACpD,IAAK+M,EACH,MAAO,CAAC,EAGV,MAAM,OAAE3L,EAAM,SAAE4G,EAAU3F,KAAMia,GAAoBvP,EAC9C3J,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BuoF,EAAwBxxE,SAAQib,EAAAA,EAAAA,KAA0BpzB,IAE1D4pF,EAAkBxmF,GAAQ4E,IAAaD,EAAAA,IAAsC,WAApBuU,IACzDqtE,EAEN,MAAO,CACLrtE,kBACAlb,SACA+/C,eAAgByoC,EAAkBxmF,EAAKqB,0BAAuBc,EAC9DlB,gBAAiBulF,EAAkBxmF,EAAKiB,qBAAkBkB,EAC1Dqe,eAAgBgmE,EAAkBxmF,EAAKwgB,oBAAiBre,EACxDskF,cAAeD,EAAkBxmF,EAAK0gB,yBAAsBve,EAC5DsC,YAAa+hF,EAAkBxmF,EAAKyE,iBAActC,EACnD,GAtBekmE,EA/GqC1pE,IAWnD,IAXoD,eACxD+nF,EAAc,QACdC,EAAO,gBACPztE,EAAe,OACflb,EAAM,YACNyG,EAAW,gBACXxD,EAAe,eACfuf,EAAc,eACdu9B,EAAc,cACd0oC,EAAa,eACbG,GACDjoF,EACC,MAAM,eACJkoF,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAEnqE,EAAoB,gBACzEoqE,EAAe,iBAAEC,EAAgB,oBAAEzyE,IACjCgQ,EAAAA,EAAAA,MAGE0iE,GAAard,EAAAA,GAAAA,IAAuB,MAEpCsd,EAAqBpyE,QAAQgpC,GAC7BqpC,EAAoBryE,QAAQ0xE,IAElCtgB,EAAAA,GAAAA,KAAU,KACJghB,GAAsBnpF,IAAWiD,GAAiBxC,QACpDme,EAAqB,CAAE5e,UACzB,GACC,CAACA,EAAQ4e,EAAsBuqE,EAAoBlmF,GAAiBxC,UAEvE0nE,EAAAA,GAAAA,KAAU,KACJghB,GAAsBnpF,GACxB4e,EAAqB,CAAE5e,UACzB,GACC,CAACA,EAAQ4e,EAAsBuqE,KAElChhB,EAAAA,GAAAA,KAAU,KACJihB,GAAqBppF,IAAWwiB,GAAgB/hB,QAClD+V,EAAoB,CAAExW,UACxB,GACC,CAACA,EAAQwW,EAAqB4yE,EAAmB5mE,GAAgB/hB,UAEpE0nE,EAAAA,GAAAA,KAAU,KACJihB,GAAqBppF,GACvBwW,EAAoB,CAAExW,UACxB,GACC,CAACA,EAAQwW,EAAqB4yE,IAEjC,MAAMC,GAAwB1b,EAAAA,GAAAA,IAAgB,KAC5C,GAAK+a,EAIL,GAAwB,WAApBxtE,EACF2tE,QACK,CACL,MAAMS,EAAoBJ,EAAWr8D,QAAS08D,cAAe3iB,cAC3D,2CAEI4iB,EAAkBF,EAAkB/4B,iBAAiC,sBACrEk5B,EAAqBD,EAAgBA,EAAgB/oF,OAAS,GACpE,IAAKgpF,EACH,QAGFC,EAAAA,GAAAA,IAAcJ,EAAmBG,EAAoB,MAlEtC,GAmEjB,KAGI1gB,GAAeC,EAAAA,GAAAA,GDtGA,YCwGlB0f,GAAkB3xE,QAAQgpC,IAAmBhpC,QAAQ0xE,KDxGyG,YCyG9J1xE,QAAQgpC,IAAmBhpC,QAAQ0xE,MAAoBC,GDzGwQ,YC0G/TC,GD1G+M,YC2G/MC,GD3GqQ,YC8GxQ,OACEthB,GAAAA,GAAAC,cAAA,OAAKuE,IAAKod,EAAYv8D,UAAWo8C,GAC/BzB,GAAAA,GAAAC,cAACoiB,GAAgB,CACfluB,KAAK,gBACLssB,cAAc,8BACdve,QAASsf,EACTd,UAAWiB,EACXxiF,YAAas5C,EACbpzB,WAAWq8C,EAAAA,GAAAA,GDtH+C,YCwHvDmgB,GAAsBS,IACtBR,GDzH8G,cC6HnH9hB,GAAAA,GAAAC,cAACoiB,GAAgB,CACfluB,KAAK,UACLssB,cAAc,sBACdve,QAASuf,EACTf,UAAWgB,EACXviF,YAAagiF,EACb97D,WAAYy8D,GAAqBQ,KAGnCtiB,GAAAA,GAAAC,cAACoiB,GAAgB,CACfluB,KAAK,aACLssB,cAAc,mBACdve,QAAS6f,EACT5iF,YAAaA,EACbkmB,UD3IqI,aC6InI,K,eC9HH,SAASk9D,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GACdp7E,EAAwBxH,EAAwB6iF,EAAuBC,GAEvE,IAMIC,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAc17E,EAAS,GAAGmE,KAC1Bw3E,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB57E,EAAS,GAAGmE,MACpC03E,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAmFxC,OAjFAz7E,EAAS5N,SAAQ,CAACnB,EAASwV,KACrBxV,EAAQs9C,UACLgtC,GAQHA,EAAav7E,SAASlE,KAAK7K,GACvBA,EAAQ8qF,cACVR,EAAaS,gBAAkB/qF,GAE7BA,EAAQ0E,QAAQ4I,OAASg9E,EAAaU,sBACpCV,EAAaW,gBACfX,EAAaU,qBAAsB,EACnCV,EAAaW,oBAAiB1mF,GAE9B+lF,EAAaW,eAAiBjrF,IAhBlCsqF,EAAe,CACbY,QAASlrF,EAAQ+Z,UACjBhL,SAAU,CAAC/O,GACXmrF,YAAanrF,EACbgrF,qBAAqB,IAgBfhrF,EAAQ0E,QAAQ4M,WAAWL,cAAcpQ,QAAU,GAAK,EAClE0pF,EAAmB1/E,KAAK,CACtBqgF,QAAU,QAAOlrF,EAAQuB,KACzBwN,SAAU,CAAC/O,GACXmrF,YAAanrF,EACbgrF,qBAAqB,EACrBI,aAAa,IAGfb,EAAmB1/E,KAAK7K,GAG1B,MAAMqrF,EAAct8E,EAASyG,EAAQ,IAGnC80E,GACKe,GAAgBA,EAAYtxE,WAAasxE,EAAYtxE,YAAcuwE,EAAaY,UAErFX,EAAmB1/E,KAAKy/E,GACxBA,OAAe/lF,GAGjB,MAAM+mF,EAAsBf,EAAmBA,EAAmB1pF,OAAS,GAC3E,GAAIwqF,EAAa,CACf,MAAME,GAAyBZ,EAAAA,GAAAA,IAAiC,IAAnBU,EAAYn4E,MACrDs3E,EAAiBE,WAAaa,GAChCf,EAAmB,CACjBC,aAAcY,EAAYn4E,KAC1Bw3E,SAAUa,EACVX,aAAc,IAEhBC,EAAWhgF,KAAK2/E,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAa//E,KAAK0/E,KAEnCc,EAAY9pF,KAAOgG,GAChBvH,EAAQigE,WAAaorB,EAAYprB,UACjCjgE,EAAQqC,aAAegpF,EAAYhpF,YACnCrC,EAAQwrF,kBAAoBH,EAAYG,kBACvCzjF,EAAAA,EAAAA,KAAgB/H,KAAaA,EAAQ0E,QAAQ+E,QAAQo8D,YACrD99D,EAAAA,EAAAA,KAAgBsjF,KAAiBA,EAAY3mF,QAAQ+E,QAAQo8D,WAC9D7lE,EAAQyrF,eACRJ,EAAYI,eACXJ,EAAYn4E,KAAOlT,EAAQkT,KA5FR,KA6FnBk3E,IACEpqF,EAAQuB,KAAO6oF,GACbkB,GACC,gBAAiBA,GAAuBA,EAAoBH,aAAa5pF,KAAO6oF,IACpFiB,EAAY9pF,KAAO6oF,GACpBC,GAAkBrqF,EAAQ4pD,aAAa2S,SAAW8uB,EAAYzhC,aAAa2S,UAE/EguB,EAAqB,GACrBC,EAAiBI,aAAa//E,KAAK0/E,GAEvC,KAGKM,CACT,C,oFClHA,MC2HA,IAAe1iB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEsO,GAAQtO,EACjB,MAAM,SAAEqc,GAAa/pB,EAAO+pB,SAASoC,SAC/B/oB,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQgc,GAChC,IAAK5Y,EACH,MAAO,CAAC,EAGV,MAAMyQ,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAC1BqK,GAAWC,EAAAA,EAAAA,KAAmBtmB,EAAQgc,GAEtCxO,GAAck/E,EAAAA,EAAAA,KAAsB1sF,EAAQoD,EAAKb,IAEvD,MAAO,CACLoqF,gBAAiB5iE,EACjB6iE,oBAAqBp/E,GAAeA,EAAYjL,KAAOa,EAAKyM,uBACxDrC,EAAYjL,QACZgD,EACJ6Z,gBAAiBpf,EAAOof,gBACxBrS,oBAAoBC,EAAAA,EAAAA,KAAyBhN,GAC7C6sF,cAAexmE,GAAUwmE,cACzBh5E,OACD,GAtBe43D,EApF+B1pE,IAO7C,IAP8C,gBAClD4qF,EAAe,gBACfvtE,EAAe,oBACfwtE,EAAmB,mBACnB7/E,EAAkB,cAClB8/E,EAAa,KACbh5E,GACD9R,EACC,MAAM,qBACJ+qF,EAAoB,YACpB71E,EAAW,oBACXtH,IACEiY,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,KAGP6iB,GAAe9f,EAAAA,GAAAA,IAAuB,MAEtCnnE,GAAU2kE,EAAAA,GAAAA,KAAQ,KACtB,GAAIoiB,GAAe/mF,QAAS,OAAO+mF,EAAc/mF,QACjD,IAAK6mF,GAAiB9qF,OAAQ,OAE9B,MAAMmrF,EAAcrsF,KAAK8B,MAAM9B,KAAKsN,SAAW0+E,EAAgB9qF,QAC/D,OAAO8qF,EAAgBK,EAAY,GAClC,CAACH,GAAe/mF,QAAS6mF,KAE5BpjB,EAAAA,GAAAA,KAAU,KACJojB,GAAiB9qF,QAA8B,yBAApBud,GAI/B0tE,GAAsB,GACrB,CAAC1tE,EAAiB0tE,EAAsBH,KAE3CpjB,EAAAA,GAAAA,KAAU,KACgB,yBAApBnqD,GAA8CwtE,GAChDj9E,EAAoB,CAAEC,MAAOg9E,GAC/B,GACC,CAACxtE,EAAiBzP,EAAqBi9E,IAE1C,MAAMK,GAAsBle,EAAAA,GAAAA,IAAgB,KACrChiE,GAILkK,EAAY,CACVnR,QAAS,IACJA,EACHS,qBAAqB,GAEvBsS,YAAa9L,GACb,IAGEiS,EAAQ6tE,GAAe7tE,OAASmrC,EAAK,iCACrC/rC,EAAcyuE,GAAezuE,aAAe+rC,EAAK,6BAEvD,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UDlGc,YCmGjB26C,GAAAA,GAAAC,cAAA,OAAK56C,UDnGiC,YCoGpC26C,GAAAA,GAAAC,cAAA,KAAG56C,UDpG2E,WCoGlD88C,IAAI,QAAQ7rD,GACxC0pD,GAAAA,GAAAC,cAAA,KAAG56C,UDrGoG,WCqGrE88C,IAAI,QAAQzsD,GAE9CsqD,GAAAA,GAAAC,cAAA,OAAKuE,IAAK6f,EAAch/D,UDvGoG,WCuGzE68C,QAASqiB,GACzDnnF,GACC4iE,GAAAA,GAAAC,cAACukB,GAAAA,EAAW,CACVH,aAAcA,EACdjnF,QAASA,EACTsoD,KAAM,IACN++B,YAAU,MAKjBN,GACCnkB,GAAAA,GAAAC,cAAA,OAAK56C,UDnHsD,YCoHxDo8B,EAAK,8BAA8BjuC,EAAAA,EAAAA,KAAgBrI,KAGpD,K,mDCvHV,SAAoI,WAApI,GAA6M,WCkH7M,IAAes1D,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAAiB,IAAf,OAAEtM,GAAQsM,EACjB,MAAM0/E,GAAUrjD,EAAAA,EAAAA,KAAU/pC,EAAQoB,GAClC,IACIwiE,EADAypB,GAAmB,EAEvB,GAAID,EAAS,CACX,MAAME,GAAkBhnE,EAAAA,EAAAA,KAAmBtmB,EAAQotF,EAAQ7qF,IACvD+qF,EACF1pB,EAAU0pB,EAAgB1pB,QAE1BypB,GAAmB,CAEvB,CACA,MAAO,CACLzpB,UACAypB,mBACD,GAhBe5hB,EA/EkC1pE,IAKhD,IALiD,OACrDX,EAAM,QACNwiE,EAAO,iBACPypB,EAAgB,gBAChBE,GACDxrF,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,KAEPsjB,GAAkBC,EAAAA,GAAAA,GAAS7pB,GAASh+D,OAAQ8nF,EAAAA,EAAAA,KAAqB9pB,EAAQh+D,YAASL,GAClFooF,GAAgBF,EAAAA,GAAAA,GAAS7pB,GAASr2C,KAAMqgE,EAAAA,EAAAA,KAAkBhqB,EAAQr2C,IAAK,aAAUhoB,GACjFsoF,EAAoBjqB,GAASh+D,OAAQkoF,EAAAA,EAAAA,KAAuBlqB,EAAQh+D,OAASg+D,GAASr2C,KACxFwgE,EAAAA,EAAAA,KAAmBnqB,EAAQr2C,UAAOhoB,EAChCyoF,EAAiBpqB,IAAYA,EAAQxlD,cAAgBwlD,EAAQr2C,MAAQq2C,EAAQh+D,MAE7EqoF,GAAgBC,EAAAA,EAAAA,KAA+B9sF,IAE/C,MAAEX,EAAK,OAAE0tF,GAAWN,GAAqB,CAAC,EAIhD,IAFyBG,IAAkBX,IAEnBE,EAExB,OACE7kB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GD1DG,WC0DyB,UACzCijB,GAAoB3kB,GAAAA,GAAAC,cAAA,YAAOxe,EAAK,YAChC6jC,IAAmBX,GAAoB3kB,GAAAA,GAAAC,cAAA,YAAOxe,EAAK,eACnDyZ,GACC8E,GAAAA,GAAAC,cAAA,OACE56C,UD/DwD,WCgExDqgE,OAAOC,EAAAA,GAAAA,GACL5tF,EAAS,UAASA,WAAY8E,IAG/BioF,GACC9kB,GAAAA,GAAAC,cAAA,OACE56C,UAAWi9D,GACXsD,IAAKd,EACL/sF,MAAOA,EACP0tF,OAAQA,EACRI,IAAI,aAGPZ,GACCjlB,GAAAA,GAAAC,cAAC6lB,GAAAA,EAAc,CACbC,SAAO,EACP1gE,UAAWi9D,GACXsD,IAAKX,EACLe,MAAI,EACJC,yBAAuB,EACvBC,OAAK,EACLC,aAAW,EACXT,OAAOC,EAAAA,GAAAA,GAAWl2E,QAAQ1X,IAAW,UAASA,MAAW0X,QAAQg2E,IAAY,WAAUA,SAG1FN,IAAsBL,IAAoBG,GACzCjlB,GAAAA,GAAAC,cAACmmB,GAAAA,EAAQ,CACP/gE,UAAWi9D,GACXvqF,MAAOA,EACP0tF,OAAQA,EACRY,kBAAgB,IAGnBd,GACCvlB,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACb7gC,EAAK,oBAGR8jC,GAAiBrqB,EAAQxlD,aACzBsqD,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,KAAG56C,UDxGyK,YCwGxIo8B,EAAK,kBACxC6kC,EAAAA,GAAAA,GAAWprB,EAAQxlD,YAAa,CAAC,KAAM,QAAS,YAKrD,K,eCnGV,MACM6wE,GAAkCrsD,EAAAA,GAAa,IAAO,I,sFCX7C,SAASssD,GAAqB98E,GAC3C,IAAKA,GAAwC,IAA/BA,EAAMH,cAAcpQ,OAChC,MAAO,CACL+D,WAAOL,EACPM,WAAON,GAIX,MAAM4pF,EAAgB/8E,EAAMH,cAAc,GACpCm9E,EAAY,cAAeD,EAIjC,MAAO,CAAEvpF,MAHKwpF,EAAcD,EAAc3sD,cAA2Bj9B,EAAhB4pF,EAA6BA,EAAcvpF,MAGhFC,MAFFupF,EAAaD,EAAc3sD,SAAW2sD,OAAgB5pF,EAAa4pF,EAActpF,MAGjG,C,4BCHO,MAAMwpF,GAAgB,CAC3BC,KAAM,EACNC,IAAK,EACLlgB,MAAO,EACPmgB,OAAQ,EACRpgB,KAAM,GA8DR,SAASqgB,GAAW33C,EAAgB43C,GAClC,OAAO53C,EAAK19B,QAAO,CAACu1E,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAM9E,EAAwB,CAAEvqF,MAAO,EAAG0tF,OAAQ,GAalD,OAZA2B,EAAO3tF,SAAQJ,IAGT,IAHU,WACdguF,EAAU,MACVC,GACDjuF,EACKiuF,EAAQX,GAAchgB,QACxB2b,EAAOvqF,MAAQsvF,EAAWtvF,MAAQsvF,EAAW9vF,GAE3C+vF,EAAQX,GAAcG,SACxBxE,EAAOmD,OAAS4B,EAAW5B,OAAS4B,EAAWryC,EACjD,IAGKstC,CACT,CAEO,SAASiF,GACdjuF,EACAkuF,EACA1/B,EACAkmB,GAEA,MACMyZ,EAjER,SAAmBpgF,EAAwBqgF,EAA2B1Z,GACpE,MAAMrzE,EAAa0M,EAAS,GAAG1M,WAS/B,OARkB+sF,EACdrgF,EAAS,GAAGrK,QAAQ4M,UAAWL,cAAcvD,KAAK0D,GAClD,cAAeA,EAAQA,EAASA,EAAMxM,OAASwM,EAAMvM,QAErDkK,EAASrB,KAAK1N,IACdgF,EAAAA,EAAAA,KAAkBhF,GAAS4E,QAASI,EAAAA,EAAAA,KAAkBhF,GAAS6E,SAEjE/D,OAAOqW,SACOzJ,KACb0D,IACC,MAAM29E,GAAaM,EAAAA,GAAAA,IAAyB,CAC1Cj+E,QACApQ,MAAOqB,EACPqzE,aAGF,OAAOqZ,EAAWtvF,MAAQsvF,EAAW5B,MAAM,GAGjD,CA4CiBmC,CAAU9/B,EAAMzgD,SAAUygD,EAAM47B,YAAa1V,GACtD6Z,EA3CR,SAAwBJ,GACtB,OAAOA,EAAOzhF,KAAK8hF,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOn0E,KAAK,GACrF,CAyCsBo0E,CAAeN,GAC7BO,EAxCR,SAAyBP,GACvB,OAAOA,EAAO/1E,QAAO,CAAC7E,EAAQi7E,IAAUA,EAAQj7E,GAAQ,GAAK46E,EAAOtuF,MACtE,CAsCuB8uF,CAAgBR,GAC/BS,EAAaT,EAAOtuF,OACpBgvF,EAAYV,EAAO90D,MAAMm1D,GAAUA,EAAQ,IAC3CM,GAAWC,EAAAA,EAAAA,IAAkB/uF,GAAO,EAAOkuF,EAAWxZ,GAG5D,IAAIoZ,EAEJ,MAAM54E,EAAS,CACbi5E,SACAI,cACAG,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEpB,EADEc,GAAc,GAAKC,EAgBzB,SAAkCnjF,GAOhB,IANhByiF,OAAQgB,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,GACfpjF,EACd,MAAMyiF,EA1ER,SAAoBA,EAAkBO,GACpC,OAAOP,EAAOzhF,KAAK8hF,GACTE,EAAe,KAAMU,EAAAA,GAAAA,IAAMZ,EAAO,EAAG,OAAQY,EAAAA,GAAAA,IAAMZ,EAAO,MAAQ,IAE9E,CAsEiBa,CAAWF,EAAgBT,GACpCj7E,EAAQ07E,EAAetvF,OACvB0T,EAAS,IAAIZ,MAAMc,GACnB67E,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAItxE,EAAS,EACbqxE,EAAWrvF,SAASuvF,IAClBD,EAAQ5lF,KAXQ8lF,EAACxxE,EAAgByxE,KACnC,MACMC,EAAMpC,GADUU,EAAOr5E,MAAMqJ,EAAQA,EAASyxE,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAYxxE,EAAQuxE,IACjCvxE,GAAUuxE,CAAY,IAGxBJ,EAASzlF,KAAK,CACZ2lF,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAUr8E,IAASq8E,EAAO,CAC5C,MAAMC,EAASt8E,EAAQq8E,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAUr8E,EAAQ,IAAKq8E,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWt8E,EAAQq8E,IAASC,EAAQ,CACvD,MAAMC,EAAQv8E,EAAQq8E,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAUr8E,EAAQ,IAAKq8E,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWt8E,EAAQq8E,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAUv8E,EAAQq8E,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAASx8E,EAAQq8E,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIjtF,EAAI,EAAGA,EAAIosF,EAASzvF,OAAQqD,IAAK,CACxC,MAAM,QACJusF,EAAO,WACPD,GACEF,EAASpsF,GACPktF,EAAYZ,EAAW3vF,OACvBwwF,EAAc5C,GAAWgC,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgB3xF,KAAKC,OAAO6wF,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAO9xF,KAAK+xF,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASpsF,GAC1BitF,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAc9wF,OAC/B,IAAI2U,EAAQ,EACRknC,EAAI,EACR,IAAK,IAAIo1C,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5B3E,EAASxtF,KAAKwU,MAAM69E,GAC1B,IAAI/yF,EAAI,EAER,IAAK,IAAIgzF,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAMjD,EAAQX,GAAcC,MACf,IAARwD,EAAYzD,GAAcE,IAAMF,GAAcC,OAC9CwD,IAAQD,EAAW,EAAIxD,GAAcG,OAASH,GAAcC,OACpD,IAAR2D,EAAY5D,GAAcjgB,KAAOigB,GAAcC,OAC/C2D,IAAQF,EAAW,EAAI1D,GAAchgB,MAAQggB,GAAcC,MAC1DkB,EAAQL,EAAO35E,GACf/V,EAAQwyF,IAAQF,EAAW,EAAIjC,EAAW7wF,EAAIU,KAAKwU,MAAMq7E,EAAQwC,GACvEz9E,EAAOiB,GAAS,CACdu5E,WAAY,CACV9vF,IACAy9C,IACAj9C,QACA0tF,UAEF6B,SAEF/vF,GAAKQ,EAAQywF,IACX16E,CACJ,CACAknC,GAAKywC,EAAS+C,CAChB,CAEA,OAAO37E,CACT,CA3Ia29E,CAA0Bh8E,GACX,IAAf05E,EA4Ib,SAAmB15E,GACjB,MAAM,OACJi5E,EAAM,YACNI,EAAW,aACXG,GACEx5E,EACJ,MAAuB,OAAhBq5E,GAAwBG,EAAe,KAAOP,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4Bj5E,GAC1B,MAAM,OACJi5E,EAAM,SACNW,EAAQ,QACRI,EAAO,UACPD,GACE/5E,EACEi3E,EAASxtF,KAAKwU,MAAMxU,KAAKC,IAAIkwF,EAAWX,EAAO,GAAIxvF,KAAKC,IAAIkwF,EAAWX,EAAO,IAAKc,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNnB,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAOqwF,EACP3C,UAEF6B,MAAOX,GAAcjgB,KAAOigB,GAAcE,IAAMF,GAAchgB,OAC7D,CACD0gB,WAAY,CACV9vF,EAAG,EACHy9C,EAAGywC,EAAS+C,EACZzwF,MAAOqwF,EACP3C,UAEF6B,MAAOX,GAAcjgB,KAAOigB,GAAcG,OAASH,GAAchgB,OAErE,CAhCM8jB,CAAmBj8E,GACH,OAAhBq5E,GAAwC,OAAhBA,EAiC9B,SAAiCr5E,GAC/B,MAAM,OACJi5E,EAAM,SACNW,EAAQ,QACRI,EAAO,UACPD,GACE/5E,EACEzW,GAASqwF,EAAWI,GAAW,EAC/B/C,EAASxtF,KAAKwU,MAAMxU,KAAKC,IAAIH,EAAQ0vF,EAAO,GAAIxvF,KAAKC,IAAIH,EAAQ0vF,EAAO,GAAIc,KAClF,MAAO,CAAC,CACNlB,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,QACA0tF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAcjgB,KAAOigB,GAAcG,QAC7D,CACDO,WAAY,CACV9vF,EAAGQ,EAAQywF,EACXxzC,EAAG,EACHj9C,QACA0tF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAchgB,MAAQggB,GAAcG,QAEnE,CA1DQ4D,CAAwBl8E,GA4DhC,SAA4BA,GAC1B,MAAM,OACJi5E,EAAM,SACNa,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACE/5E,EACEm8E,EAAe1yF,KAAKwU,MAAM,IAAM67E,GAChCsC,EAAc3yF,KAAKC,IACvBD,KAAKwU,MACHxU,KAAKE,IACH,IAAOiwF,EAAWI,IACjBJ,EAAWI,GAAWf,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEW,EAAWI,EAAUmC,GAEjBE,EAAazC,EAAWwC,EAAcpC,EACtC/C,EAASxtF,KAAKC,IAAIqwF,EAAWtwF,KAAKwU,MAAMxU,KAAKC,IAAI2yF,EAAapD,EAAO,GAAImD,EAAcnD,EAAO,MAEpG,MAAO,CAAC,CACNJ,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAO8yF,EACPpF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAcjgB,KAAOigB,GAAcG,QAC7D,CACDO,WAAY,CACV9vF,EAAGszF,EAAarC,EAChBxzC,EAAG,EACHj9C,MAAO6yF,EACPnF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAchgB,MAAQggB,GAAcG,QAEnE,CAjGQgE,CAAmBt8E,EAC3B,CAtJau8E,CAAUv8E,GACK,IAAf05E,EAuPb,SAAqB15E,GACnB,MAAM,YAAEq5E,GAAgBr5E,EAExB,MAA0B,MAAnBq5E,EAAY,GAKrB,SAAiCr5E,GAC/B,MAAM,UACJ+5E,EAAS,QACTC,EAAO,OACPf,EAAM,SACNW,EAAQ,SACRE,GACE95E,EACEw8E,EAAczC,EACd0C,EAAchzF,KAAKwU,MACvBxU,KAAKC,KACFqwF,EAAYC,GAAW,EACvBf,EAAO,IAAMW,EAAWI,IAAaf,EAAO,GAAKA,EAAO,MAGvDyD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAalzF,KAAKE,IACtBmwF,EACArwF,KAAKwU,MACHxU,KAAKC,KACFkwF,EAAWI,GAAW,EACvBvwF,KAAKC,IACH+yF,EAAcxD,EAAO,GACrByD,EAAezD,EAAO,OAKxB2D,EAAYnzF,KAAKC,IAAID,KAAKwU,MAAMu+E,EAAcvD,EAAO,IAAKW,EAAWI,EAAU2C,GAErF,MAAO,CAAC,CACN9D,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAOqzF,EACP3F,OAAQuF,GAEV1D,MAAOX,GAAcE,IAAMF,GAAcjgB,KAAOigB,GAAcG,QAC7D,CACDO,WAAY,CACV9vF,EAAG6zF,EAAY5C,EACfxzC,EAAG,EACHj9C,MAAOozF,EACP1F,OAAQyF,GAEV5D,MAAOX,GAAcE,IAAMF,GAAchgB,OACxC,CACD0gB,WAAY,CACV9vF,EAAG6zF,EAAY5C,EACfxzC,EAAGk2C,EAAe1C,EAClBzwF,MAAOozF,EACP1F,OAAQwF,GAEV3D,MAAOX,GAAcG,OAASH,GAAchgB,OAEhD,CA3DM0kB,CAAwB78E,GA6D9B,SAAgCA,GAC9B,MAAM,SACJ45E,EAAQ,OACRX,EAAM,UACNc,EAAS,QACTC,GACEh6E,EACEq8E,EAAazC,EACb4C,EAAc/yF,KAAKwU,MAAMxU,KAAKC,IAAI2yF,EAAapD,EAAO,GAAI,KAAQc,EAAYC,KAC9EoC,GAAexC,EAAWI,GAAW,EACrC0C,EAAejzF,KAAKC,IACxBqwF,EAAYyC,EAAcxC,EAC1BvwF,KAAKwU,MAAMxU,KAAKC,IACd0yF,EAAcnD,EAAO,GACrBmD,EAAcnD,EAAO,MAGnB6D,EAAaT,EAAaD,EAAcpC,EAE9C,MAAO,CAAC,CACNnB,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAO8yF,EACPpF,OAAQuF,GAEV1D,MAAOX,GAAcjgB,KAAOigB,GAAcE,IAAMF,GAAchgB,OAC7D,CACD0gB,WAAY,CACV9vF,EAAG,EACHy9C,EAAGg2C,EAAcxC,EACjBzwF,MAAO6yF,EACPnF,OAAQyF,GAEV5D,MAAOX,GAAcG,OAASH,GAAcjgB,MAC3C,CACD2gB,WAAY,CACV9vF,EAAGqzF,EAAcpC,EACjBxzC,EAAGg2C,EAAcxC,EACjBzwF,MAAOuzF,EACP7F,OAAQyF,GAEV5D,MAAOX,GAAcG,OAASH,GAAchgB,OAEhD,CAxGM4kB,CAAuB/8E,EAC7B,CA5Pag9E,CAAYh9E,GAqWzB,SAAoBA,GAClB,MAAM,YAAEq5E,GAAgBr5E,EAExB,MAA0B,MAAnBq5E,EAAY,GAKrB,SAA8B9gF,GAMZ,IANa,SAC7BqhF,EAAQ,OACRX,EAAM,QACNe,EAAO,UACPD,EAAS,SACTD,GACcvhF,EACd,MAAM0kF,EAAIrD,EACJsD,EAAKzzF,KAAKwU,MAAMxU,KAAKC,IAAIuzF,EAAIhE,EAAO,GAAI,KAAQc,EAAYC,KAC5DmD,EAAI1zF,KAAKwU,OAAO27E,EAAW,EAAII,IAAYf,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EmE,EAAK3zF,KAAKE,IAAImwF,EAAUrwF,KAAKwU,MAAMxU,KAAKC,IAAI,IAAOkwF,EAAW,EAAII,GAAUmD,EAAIlE,EAAO,MACvFoE,EAAK5zF,KAAKwU,MAAMxU,KAAKE,IAAIF,KAAKE,IAAImwF,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAIlE,EAAO,KACzFqE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAK9zF,KAAKC,IAAIqwF,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNtE,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAO0zF,EACPhG,OAAQiG,GAEVpE,MAAOX,GAAcjgB,KAAOigB,GAAcE,IAAMF,GAAchgB,OAC7D,CACD0gB,WAAY,CACV9vF,EAAG,EACHy9C,EAAG02C,EAAKlD,EACRzwF,MAAO6zF,EACPnG,OAAQsG,GAEVzE,MAAOX,GAAcG,OAASH,GAAcjgB,MAC3C,CACD2gB,WAAY,CACV9vF,EAAGq0F,EAAKpD,EACRxzC,EAAG02C,EAAKlD,EACRzwF,MAAO+zF,EACPrG,OAAQsG,GAEVzE,MAAOX,GAAcG,QACpB,CACDO,WAAY,CACV9vF,EAAGq0F,EAAKpD,EAAUsD,EAAKtD,EACvBxzC,EAAG02C,EAAKlD,EACRzwF,MAAO8zF,EACPpG,OAAQsG,GAEVzE,MAAOX,GAAchgB,MAAQggB,GAAcG,QAE/C,CApDMkF,CAAsBx9E,GAsD5B,SAA+B9G,GAMb,IANc,UAC9B6gF,EAAS,OACTd,EAAM,SACNW,EAAQ,QACRI,EAAO,SACPF,GACc5gF,EACd,MAAMikF,EAAIpD,EACJqD,EAAK3zF,KAAKwU,MAAMxU,KAAKC,IAAIyzF,EAAIlE,EAAO,GAAI,IAAOW,EAAWI,KAC1DiD,EAAIxzF,KAAKwU,OAAO87E,EAAY,EAAIC,IAAY,EAAIf,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvFiE,EAAKzzF,KAAKwU,MAAMg/E,EAAIhE,EAAO,IAC3BsE,EAAK9zF,KAAKwU,MAAMg/E,EAAIhE,EAAO,IAC3BwE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAK7zF,KAAKE,IAAImwF,EAAUrwF,KAAKC,IAAIkwF,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNpE,WAAY,CACV9vF,EAAG,EACHy9C,EAAG,EACHj9C,MAAO6zF,EACPnG,OAAQkG,GAEVrE,MAAOX,GAAcE,IAAMF,GAAcjgB,KAAOigB,GAAcG,QAC7D,CACDO,WAAY,CACV9vF,EAAGq0F,EAAKpD,EACRxzC,EAAG,EACHj9C,MAAO+zF,EACPrG,OAAQiG,GAEVpE,MAAOX,GAAcE,IAAMF,GAAchgB,OACxC,CACD0gB,WAAY,CACV9vF,EAAGq0F,EAAKpD,EACRxzC,EAAG02C,EAAKlD,EACRzwF,MAAO+zF,EACPrG,OAAQsG,GAEVzE,MAAOX,GAAchgB,OACpB,CACD0gB,WAAY,CACV9vF,EAAGq0F,EAAKpD,EACRxzC,EAAG02C,EAAKK,EAAK,EAAIvD,EACjBzwF,MAAO+zF,EACPrG,OAAQwG,GAEV3E,MAAOX,GAAcG,OAASH,GAAchgB,OAEhD,CArGMulB,CAAuB19E,EAC7B,CAzWa29E,CAAW39E,GAGf,CACL44E,SACAgF,eAAgBjF,GAAuBC,GAE3C,C,kDCvIA,IAAIiF,GACJ,MAAMC,GAAyB,IAAIC,GAAAA,EAE/BC,EAAAA,IACF3pF,YAGF,WACOwpF,KACHA,IAASI,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAIzwE,IAAI,qBAErBqwE,GAAuBK,UAE3B,GAnB0B,K,0BCE1B,MAaMC,GAAa,IAAIliF,IAavB,MAAMmiF,IAA4B5rE,EAAAA,EAAAA,KAuBlC,SAA0BvoB,GACxB,MAAM,2BAAEo0F,IAA+B5tE,EAAAA,EAAAA,MACjC6tE,EAAYH,GAAW90F,IAAIY,GACjC,IAAKq0F,EACH,OAGF,MAAMC,EAAkBD,EAAUrnC,KAClC,GAAIsnC,EAzDuB,EA0DzB,OAGF,IAAIC,EAAoB,EACpBC,EAAkB,EACtB,MAAMC,EAAsB,IAAIziF,IAEhC,IAAK,MAAM+6C,KAAYsnC,EAAUttF,SAAU,CACrCgmD,EAAS2nC,gBACXH,IAGExnC,EAAS4nC,kBACXH,IAGF,MAAMrnE,EAAW4/B,EAAS4nC,iBAC1B,GAAIxnE,EAAU,CACZ,MAAMynE,EAAcH,EAAoBr1F,IAAI+tB,IAAa,EACzDsnE,EAAoBt+E,IAAIgX,EAAUynE,EAAc,EAClD,CACF,CAKA,GAH0BL,EAAoBD,EAhFjB,IAiFLE,EAAkBF,EAhFf,GAmFzB,OAMFF,EAA2B,CACzBp0F,SACA20F,iBAL2BphF,MAAMiC,KAAKi/E,EAAoB1lF,WACzDzL,MAAK,CAAA3C,EAAA2L,KAAA,IAAE,CAAE/I,GAAE5C,GAAG,CAAE6C,GAAE8I,EAAA,OAAK9I,EAAID,CAAC,IAAE,GAAG,IAMtC,GA3FuB,K,4BCIvB,MAGMsxF,GAA4B,EAAIv2F,EAAAA,EAChCw2F,GAA6BjrF,OAAOvL,EAAAA,GACpCy2F,GAAgC,+BAEvB,SAASC,GACtBC,EACAtJ,EACA1lF,EACAivF,EACAC,EACAC,EACA9M,EACA+M,EACAr1F,EACAs1F,EACAC,EACAC,EACAC,GAEA,MAAM,qBAAEzpF,EAAoB,oBAAE0pF,IAAwBlvE,EAAAA,EAAAA,OAE/CmvE,EAAwBC,EAA0BC,IAA8B9gB,EAAAA,GAAAA,MAChF+gB,EAAUC,EAAYC,IAAgBjhB,EAAAA,GAAAA,KACvCkhB,GAAsBpqB,EAAAA,GAAAA,MAOtBqqB,GAAkBC,EAAAA,GAAAA,IAAsB7kC,IAC5C,MAAM8kC,EAAyBb,EAAiB1oE,QAChD,IAAKupE,EAAwB,OAE7B,MAAM,QAAEC,EAAO,QAAEC,GAAYhlC,GAE3BzyD,EAAG03F,EAAgBl3F,MAAOm3F,EAAoBl6C,EAAGm6C,EAAgB1J,OAAQ2J,GACvEN,EAAuBO,wBACrB93F,EAAI03F,EAAiBC,EAAqB,EAC1Cl6C,EAAIm6C,EAAiBC,EAAsB,EAE3CE,EAAar3F,KAAK+xF,IAAIzyF,EAAIw3F,GAAWxB,GACrCgC,EAAat3F,KAAK+xF,IAAIh1C,EAAIg6C,GAAWxB,GACvC8B,GAAcC,EAChBjB,IAEAC,GACF,GACC,CAACN,GAAmBuB,GAAAA,IA2HvB,OA7CA3uB,EAAAA,GAAAA,KAAU,KACR,IAAKla,EAAAA,IAAgBinC,IAAmBC,GAAYG,IAAuBG,IACzE,OAGF,IAAIsB,EACJ,OAAOnpB,EAAAA,GAAAA,IAAc+d,EAAa9+D,QAAU,CAC1CghD,wBAAyB,eACzB+Y,wBAAyB,gBACzB9Y,QAAUA,CAACxc,EAAGp+C,IACRA,IAAc66D,GAAAA,GAAeC,OAC1B+oB,IACHA,EAAYz1F,KAAKC,OAGnBw0F,KAEO,GAKXiB,UAAWA,KACJD,GAAc5B,IAInBnpF,EAAqB,CAAEnG,aAAcI,IAErCkE,WAAW6rF,EAAcz2F,KAAKE,IAAI,EA7JT,KA6JwC6B,KAAKC,MAAQw1F,KAC9EA,OAAY5yF,EAAS,GAEvB,GACD,CACDwnF,EAAcuJ,EAAgBjvF,EAAW8vF,EAAYC,EAAcb,EAAUG,EAC7EG,IAUK,CACLwB,gBAAkB/B,OAAmC/wF,EAnJvD,SAAyBmtD,IACvB4lC,EAAAA,GAAAA,GAAwB5lC,GACxB+jC,EAAwB/jC,EAC1B,EAiJE6lC,YA3FF,SAAqB7lC,GACnB,GAAI4jC,EACFD,EAAc3jC,QAIhB,GAAKrD,EAAAA,GAEL,OAAIgoC,EAAoBppE,SACtBspC,cAAc8/B,EAAoBppE,SAClCopE,EAAoBppE,aAAU1oB,OAhBhCuxF,EAAoB,CAClB11F,SACAiG,oBAmBFgwF,EAAoBppE,QAAU1iB,YAAW,KACvC8rF,EAAoBppE,aAAU1oB,EAxClC,SAAmBmtD,GACjB,GAAI9vB,EAAAA,GAAY,CACd,MAAM41D,EAAS9lC,EAAE8lC,OACjB,IAAKA,EAAOC,UAAUC,SAAS,kBAAoBF,EAAOC,UAAUC,SAAS,WAC3E,OAGEn4F,EAAAA,EAAWo4F,uBACbptF,YAAW,KACTm+E,EAAch3B,EAAE,GAtEa,KAyE/Bg3B,EAAch3B,EAElB,CACF,CA0BIkmC,CAAUlmC,EAAE,GApGsB,KAsGtC,EAyEE42B,kBAAoBgN,EAAsCE,EAAcqC,GAAAA,OAAYtzF,EAvEtF,SAA2BmtD,GACzB,GAAI9vB,EAAAA,GAAY,CACd,GAAK8vB,EAAE8lC,OAAuBM,QAAQ,YAAcpC,EAClD,OAGFhkC,EAAE0V,iBACFiuB,GACF,MACE3M,EAAch3B,EAElB,EA6DEqmC,kBAAoBzC,OAA8C/wF,EA3DpE,YACM8pD,EAAAA,IAAiBknC,GAErBnpF,EAAqB,CAAEnG,aAAcI,EAAWue,mBAAergB,EAAWsgB,eAAWtgB,GACvF,EAwDEyzF,yBAA2B3pC,EAAAA,QAAiC9pD,EAtD9D,SAAyBmtD,GACvBA,EAAEohB,iBACJ,EAqDEwjB,kBACA2B,wBAhIF,SAAiCvmC,GAC/BA,EAAEohB,kBACFgjB,EAAoB,CAClB11F,SACAiG,aAEJ,EA2HE22E,iBAfF,SAA0BtrB,IAGxBwlC,EAAAA,GAAAA,IAAejB,GACXL,GAyBR,SAAuClkC,GACrC,MAAMwmC,EAAmBC,GAA8BzmC,EAAE0mC,eACrDF,GACFA,EAAiBG,gBAAgBlD,GAErC,CA9BgCmD,CAA8B5mC,EAC5D,EAWEwkC,WACAH,yBACAwC,iCAEJ,CAEA,SAASA,GAA8B7mC,GACrC,MAAMwmC,EAAmBC,GAA8BzmC,EAAE0mC,eACrDF,GACFA,EAAiBM,aAAarD,GAA+B,GAEjE,CASA,SAASgD,GAA8BM,GACrC,IAAIxrE,EAA0BwrE,EAE9B,GACExrE,EAAUA,EAAQyrE,yBACXzrE,IAAYA,EAAQwqE,UAAUC,SAAS,2BAEhD,OAAOzqE,CACT,C,wFC1GA,SAtFoClsB,IAO9B,IAP+B,MACnC8kB,EAAK,OACLuiB,EAAM,aACNuwD,EAAY,YACZnD,EAAW,8BACXoD,EAA6B,QAC7BhvB,GACD7oE,EACC,MAAM,iBAAEoa,IAAqByL,EAAAA,EAAAA,MAEvBuiC,GAAO+f,EAAAA,GAAAA,KAGPgD,GAAMD,EAAAA,GAAAA,IAAuB,MAC7B4sB,GAAiBC,EAAAA,GAAAA,IAAkB5sB,EAAK0sB,GACxCG,EAAclzE,GAAS,YAAaA,EACpCmzE,EAAiBnzE,GAAS,cAAeA,EACzCozE,EAAeF,GAAe5hF,QAAQ0O,EAAMnhB,QAAQG,OACpDmZ,EAAQ+6E,EAAc,QAAWC,EAAiB,eAAiB,UAEnEE,GAAezM,EAAAA,GAAAA,GAASsM,IAAeI,EAAAA,EAAAA,KAAkBtzE,EAAO,cAAegzE,GAC/EO,EAAiBH,EAAepzE,EAAMnhB,QAAQG,MAAOO,WAAWi0F,aAAU90F,EAC1E+0F,EAAeJ,GAAgBE,EAE/B1vC,EAActhB,GAASuhB,EAAAA,EAAAA,KAAeR,EAAM/gB,QAAU7jC,EACtDg1F,GAAkBxrB,EAAAA,GAAAA,IAAgB,KAClCloD,IAAUmzE,EACZpvB,IAEAzuD,EAAiB,CACfnb,QAASmpD,EAAK,kBAElB,KAGI,YAAEouC,EAAW,gBAAEF,IAAoBmC,EAAAA,GAAAA,GAAaD,GAEtD,OACE7xB,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,WAAWq8C,EAAAA,GAAAA,GACT,mBACAqwB,EAAAA,GAAAA,GAAkBrxD,EAAQuwD,GAAc,GACxCW,GAAgB,cAElB1vB,QAAS2tB,EACTmC,YAAarC,GAEZiC,GAiBP,SACEK,EACAnE,GAEA,MAAM,MAAE/1F,EAAK,OAAE0tF,IAAWyM,EAAAA,EAAAA,MAE1B,OACElyB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBACb26C,GAAAA,GAAAC,cAAA,OACE2lB,IAAKqM,EACLl6F,MAAOA,EACP0tF,OAAQA,EACRI,IAAI,GACJxgE,UAAU,YACV8sE,WAAW,IAEZrE,GAAe9tB,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAGtC,CApCuB+sE,CAAgBR,EAAc9D,GAC/C9tB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,mCACb26C,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,yBACVisE,GACCtxB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,gBAAgB1gB,UAAU,yBAEtCgsE,GACCrxB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,cAAc1gB,UAAU,yBAEpCo8B,EAAKnrC,IAER0pD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBAAiBihE,EAAAA,GAAAA,GAAWtkC,GA7DtC,OA+DH,E,+EC1EV,MAAMswC,GAAkB,MAAQt7F,EAAAA,EAwBhC,IAAeypE,EAAAA,GAAAA,KAtBiBpnE,IAI1B,IAJ2B,MAC/B0H,EAAK,UACLskB,EAAS,QACT68C,GACD7oE,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,KACb,OACExB,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GCjCM,WDiCsBr8C,GACvCqgE,MAAQ,qCAAmC6M,EAAAA,GAAAA,IAAyBxxF,GAAOyxF,cAC3EtwB,QAASA,GAERnhE,EACGi/D,GAAAA,GAAAC,cAACwyB,GAAAA,EAAS,CAAC1xF,MAAOA,EAAO2kD,KAAM4sC,KAC/BtyB,GAAAA,GAAAC,cAAA,OAAK2lB,IAAK8M,GAAU7M,IAAI,GAAGsM,WAAW,IACzCpxF,GAAOuV,OAAQgwE,EAAAA,GAAAA,GAAWvlF,EAAMuV,OAASmrC,EAAK,WAC9C1gD,GAAO4xF,UAAY3yB,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,mBACjC26C,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,mBACT,I,gBEjBK,SAASutE,GAAkBC,GAkDxC,OAAOpyB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACV,CAACzrE,EAAQw7F,KACP,MAAM,SAAEzgB,EAAQ,iBAAE0gB,GAAqBD,EACvC,MAAO,CACLlF,gBAAiBmF,IAAoBC,EAAAA,EAAAA,KAAqB17F,GAC1D27F,YAAaF,IAAoBG,EAAAA,EAAAA,KAAwB57F,EAAQ+6E,GAClE,GANOtP,EAhD4BpD,IACtC,MAAM,eACJiuB,EAAc,WACdqF,EAAU,WACV5L,EAAU,SACVhV,GACE1S,GACE,uBAAEnZ,IAA2BtnC,EAAAA,EAAAA,MAE7Bi0E,GAAsB9sB,EAAAA,GAAAA,IAAiBrc,IAC3CA,EAAEohB,kBACF5kB,EAAuB,CAAE7nD,UAAW0zE,EAAU9rB,UAAWyD,GAAGkd,UAAW,IAGnEksB,GAAWrxB,EAAAA,GAAAA,KAAQ,KACvB,MAAQslB,WAAYgM,EAAI,QAAEnxB,GAAYvC,EACtC,MAAO,IACFA,EACHiuB,iBACAqF,aACA5L,WAAY,IACPgM,EACH97F,EAAG,EACHy9C,EAAG,GAELktB,QAAS0rB,OAAiB/wF,EAAYqlE,EACvC,GACA,CAACvC,EAAOiuB,EAAgBqF,IAE3B,OACEjzB,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,4BAA6BuxB,GAAc,eACrEvN,MAAO2B,EAAc,SAAQA,EAAW9vF,aAAa8vF,EAAWryC,OAAS,GACzEktB,QAAS0rB,EAAiBuF,OAAsBt2F,GAE/C+wF,GACC5tB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,0BACZ4tE,GACCjzB,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,sBAKnB26C,GAAAA,GAAAC,cAAC4yB,EAAqBO,GAClB,IAaZ,C,4BCxDA,MAAME,GAAkBV,GAAkBW,GAAAA,GACpCC,GAAkBZ,GAAkBa,GAAAA,GAsI1C,IAAe1wB,EAAAA,EAAAA,KACZzrE,IACC,MAAMspC,GAAQmpC,EAAAA,EAAAA,KAAYzyE,GACpBo8F,GAAkBC,EAAAA,EAAAA,KAAsBr8F,GAE9C,MAAO,CACLspC,QACAgzD,aAAct8F,EAAOqP,YAAYC,aACjC8sF,kBACD,GATL,EApHyCr6F,IAWnC,IAXoC,MACxCyuD,EAAK,oBACL+rC,EAAmB,kBACnBC,EAAiB,MACjBx6F,EAAK,YACLw0F,EAAW,YACXiG,EAAW,aACXC,EAAY,aACZJ,EAAY,gBACZF,EAAe,MACf9yD,GACDvnC,EACC,MAAM,kBAAE46F,IAAsB/0E,EAAAA,EAAAA,OAEtBliB,SAAS,UAAE4M,IAAgBk+C,EAAM27B,YAEnCyQ,EAAapsC,EAAM47B,YAAc95E,EAAWL,cAAcpQ,OAAS2uD,EAAMzgD,SAASlO,OAElFg7F,GAAuB9tB,EAAAA,GAAAA,IAAiBv4D,IAC5CkmF,EAAalsC,EAAM27B,YAAY5pF,GAAIiU,EAAM,IAGrCsmF,GAA0B/tB,EAAAA,GAAAA,IAAiB1nE,IAC/Cq1F,EAAar1F,EAAU,IAGnB01F,GAAqBhuB,EAAAA,GAAAA,IAAiB1nE,IAC1Cs1F,EAAkB,CAAEv7F,OAAQovD,EAAM27B,YAAY/qF,OAAQiG,aAAY,IAG9D0I,GAAW06D,EAAAA,GAAAA,KAAQ,IACnBja,EAAM47B,YACD57B,EAAM27B,YAAYzmF,QAAQ4M,UAAWL,cAAcvD,KAAI,IAAM8hD,EAAM27B,cAGrE37B,EAAMzgD,UACZ,CAACygD,KAoEI/vD,MAAOu8F,EAAgB7O,OAAQ8O,GAAoBR,EAAY3H,eAEvE,OACEpsB,GAAAA,GAAAC,cAAA,OACE56C,UAAU,QACVqgE,MAAQ,UAAS4O,gBAA6BC,QAE7CltF,EAASrB,KAzEd,SAA4B1N,EAAqBwV,GAC/C,MAAM0mF,EAAqB1sC,EAAM47B,YAAcprF,EAAQ0E,QAAQ4M,WAAWL,cAAcuE,QAASjR,EAC3F43F,EAAqBD,GAAsB,cAAeA,EAC5DA,EAAqBA,GAAoBt3F,MACvCw3F,EAAqBF,GAAsB,cAAeA,EAC5DA,EAAqBA,GAAoBr3F,MACvCD,EAAQu3F,IAAsBE,EAAAA,EAAAA,KAAgBr8F,GAC9C6E,EAAQu3F,IAAsBp3F,EAAAA,EAAAA,KAAkBhF,GAAS6E,MAEzDy3F,EAAahB,GAAav4F,EAAAA,EAAAA,IAAc/C,IACxCu8F,EAAiBD,GAAYhmF,UAC7B,WAAEy4E,EAAU,MAAEC,GAAUyM,EAAY3M,OAAOt5E,GAG3CgnF,GAAcC,EAAAA,EAAAA,MAAuBjyF,EAAAA,EAAAA,MAAaxK,GAClD08F,GAAcC,EAAAA,EAAAA,MAAuBnyF,EAAAA,EAAAA,MAAaxK,GAExD,GAAI4E,EAAO,CACT,MAAMg4F,EAAuBpB,IAE1Bx6F,EAAQwU,IAAUomF,EAAa,EAAIzkF,QAAQ63E,EAAQX,GAAcjgB,MAAQ4gB,EAAQX,GAAcG,SAGlG,OACE9mB,GAAAA,GAAAC,cAACqzB,GAAe,CACdz5F,GAAK,gBAAcs7F,EAAAA,EAAAA,KAAiB78F,EAAQuB,GAAIiuD,EAAM47B,YAAc51E,OAAQjR,KAC5EK,MAAOA,EACP5D,MAAOA,EACP43F,8BAA+B2C,EAC/BiB,YAAaA,EACbI,qBAAsBA,EACtBL,eAAgBA,EAChBxN,WAAYA,EACZyG,YAAaA,EACbzb,SAAUvqB,EAAM47B,YAAc51E,EAAQxV,EAAQuB,GAC9CqoE,QAASpa,EAAM47B,YAAcyQ,EAAuBC,EACpDgB,eAAgBf,EAChBgB,cAAmC,yBAApBn4F,EAAMyM,YAAwC2rF,EAAAA,EAAAA,KAAiB5B,EAAiBx2F,GAC/F0jC,MAAOA,EACPmyD,iBAAkBjrC,EAAM47B,aAG9B,CAAO,GAAIvmF,EACT,OACE6iE,GAAAA,GAAAC,cAACuzB,GAAe,CACd35F,GAAK,gBAAcs7F,EAAAA,EAAAA,KAAiB78F,EAAQuB,MAC5CsD,MAAOA,EACP+zF,8BAA+B2C,EAC/BiB,YAAaA,EACbE,YAAaA,EACbH,eAAgBA,EAChBxN,WAAYA,EACZyG,YAAaA,EACbzb,SAAUvqB,EAAM47B,YAAc51E,EAAQxV,EAAQuB,GAC9CqoE,QAASpa,EAAM47B,YAAcyQ,EAAuBC,EACpDgB,eAAgBf,EAChBgB,cAAmC,yBAApBl4F,EAAMwM,YAAwC2rF,EAAAA,EAAAA,KAAiB5B,EAAiBv2F,GAC/FyjC,MAAOA,EACPmyD,iBAAkBjrC,EAAM47B,aAMhC,IAUQ,I,gBCpJV,MAAM6R,GAAO,EAAIv+F,EAAAA,EAKF,SAASw+F,GACtB98F,EACAiG,EACA82F,EACAnwF,EACAhM,EACA6L,EACAuwF,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/C32E,EAAAA,EAAAA,MAGEslD,GAAMD,EAAAA,GAAAA,IAAuB,MAG7BuxB,GAAWvxB,EAAAA,GAAAA,IAAqC,MAEhDwxB,GAAiBhR,EAAAA,GAAAA,GAAS0Q,EAAW,WAAUA,SAAY54F,GAAY44F,GAEvE/vC,EAAOgwC,GAAiBH,GACxB7P,GAAQC,EAAAA,GAAAA,GAAY,UAASjgC,MAAW,WAAUA,MAAUvgD,IAAUg5C,EAAAA,IAAe,mBAErF9I,GAAekvB,EAAAA,GAAAA,SAA6B1nE,GAC5Cm5F,GAAsBzxB,EAAAA,GAAAA,SAA2B1nE,GACjDo5F,GAAuB5vB,EAAAA,GAAAA,IAAgB,KACzB7B,EAAIj/C,UAItBqwE,EAAqB,CACnBl9F,OAAQA,EACRiG,UAAWA,EACXwG,MAAOA,EACPkwC,aAAcA,EAAa9vB,UAE7BywE,EAAoBzwE,aAAU1oB,EAC9Bw4C,EAAa9vB,aAAU1oB,EAAS,IAG5Bq5F,GAAO7vB,EAAAA,GAAAA,IAAgB,KAC3B,MAAM8vB,EAAQL,EAASvwE,QACnBwwE,IACEI,IACFA,EAAM9yE,QACN8yE,EAAMC,UAERN,EAASvwE,QAAU,IAAI8wE,MACvBP,EAASvwE,QAAQqgE,IAAMmQ,GACvBO,EAAAA,GAAAA,GAASR,EAASvwE,SAClBuwE,EAASvwE,QAAQ6hD,iBAAiB,SAAS,KACzC0uB,EAASvwE,aAAU1oB,CAAS,GAC3B,CAAE05F,MAAM,IACb,IAGI1G,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClC6vB,IAEA,MAAMM,EAAYhyB,EAAIj/C,QAEtB,KAAKpgB,GAAUqxF,GAAc73F,GAAcjG,GACzC,OAGF,MAAM,EAAEnB,EAAC,EAAEy9C,GAAMwhD,EAAUnH,wBAE3BsG,EAA0B,CACxBxwF,MAAOA,EACP5N,IACAy9C,IACAC,UAAWyQ,EACXxQ,YAAa57C,IAGV+7C,EAAa9vB,UAChB8vB,EAAa9vB,QAAU,GACvBywE,EAAoBzwE,QAAUkxE,YAAYx8F,MAC1C4I,WAAWozF,EAnFc,MAsF3B5gD,EAAa9vB,QAAQpiB,KAAK6yF,EAAoBzwE,SACzCkxE,YAAYx8F,MAAQ+7F,EAAoBzwE,SAtF9B,IACE,EAsFA,IAiCnB,OA7BAs7C,EAAAA,GAAAA,KAAU,KACR,MAAM21B,EAAYhyB,EAAIj/C,QAEjBixE,GAAclxF,GAEnBA,EAAwB7L,SAAQJ,IAI1B,IAJ2B,GAC/BQ,EAAE,UACFo7C,EACAt2C,UAAW+3F,GACZr9F,EACC,GAAI47C,GAAat2C,IAAc+3F,EAC7B,OAGF,MAAM,EAAEn/F,EAAC,EAAEy9C,GAAMwhD,EAAUnH,wBAE3BwG,EAA6B,CAC3Bh8F,KACAnB,OAAQA,EACRm8C,SAAU1vC,EACV8vC,UAAWyQ,EACXnuD,IACAy9C,IACAE,YAAa57C,IAEf48F,GAAM,GACN,GACD,CAAC5wF,EAAyB5M,EAAQyM,EAAO7L,EAAOqF,EAAWu3F,EAAML,EAA8BnwC,IAE3F,CACL8e,MACA9e,OACAggC,QACAmK,cAEJ,CCpGA,MAsCA,IAAepvB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAAqC,IAAnC,cAAE60B,EAAa,YAAE88D,GAAa3xF,EAC9E,MAAM5H,EAAU9F,EAAOmiB,aAAa7Y,KAAKi5B,GAEzC,MAAO,CACLz8B,UACAu3C,OAAQv3C,GAAS+H,OAASwxF,GAAcC,EAAAA,EAAAA,KAA0Bt/F,EAAQ8F,EAAQ+H,YAAStI,EAC3F44F,QAASr4F,GAAS+H,QAAS0xF,EAAAA,EAAAA,KAAyBv/F,EAAQ8F,EAAQ+H,OACpE2xF,SAASC,EAAAA,EAAAA,KAA4Bz/F,GACtC,GARiByrE,EAtCmC1pE,IAWjD,IAXkD,MACtDC,EAAK,cACLugC,EAAa,UACbl7B,EAAS,OACTjG,EAAM,wBACN4M,EAAuB,QACvBlI,EAAO,OACPu3C,EAAM,QACN8gD,EAAO,OACPqB,EAAM,oBACNjD,GACDx6F,EACC,MAAM,IACJmrE,EAAG,KACH9e,EAAI,MACJggC,EAAK,YACLmK,GACE2F,GACF98F,EAAQiG,EAAW82F,EAASnwF,EAAyBhM,EAAOq7C,GAAQxvC,OAAO6xF,EAAAA,GAAAA,IAAmB,IAGhG,OACEh3B,GAAAA,GAAAC,cAAC2O,GAAAA,EAAW,CACVpK,IAAKA,EACLhrD,WAAYqgB,EACZxU,WAAWq8C,EAAAA,GAAAA,GAAe,4BAA6BtkE,GAASvD,KAAOo9F,EAAAA,IAAmB,sBAC1FvR,MAAOA,EACPhgC,KAAMA,EACNwxC,OAAK,EACLJ,OAAQA,EACRK,qBAAmB,EACnBpnF,sBAAuBN,QAAQklC,GAAUrvC,GAAyBnM,QAClE+3F,8BAA+B2C,EAC/B3xB,QAAS2tB,GACT,K,gBCnCN,MAsCA,IAAepvB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA6B,IAA3B,MAAEG,EAAK,YAAEwxF,GAAa3xF,EACtE,MAAO,CACL5H,SAASg6F,EAAAA,EAAAA,KAAoB9/F,EAAQ6N,GACrCwvC,OAAQgiD,GAAcC,EAAAA,EAAAA,KAA0Bt/F,EAAQ6N,QAAStI,EACjE44F,SAASoB,EAAAA,EAAAA,KAAyBv/F,EAAQ6N,GAC3C,GALiB49D,EApC6B1pE,IAU3C,IAV4C,MAChDC,EAAK,oBACLu6F,EAAmB,iBACnBwD,EAAgB,UAChB14F,EAAS,OACTjG,EAAM,wBACN4M,EAAuB,QACvBlI,EAAO,OACPu3C,EAAM,QACN8gD,GACDp8F,EACC,MAAM,IACJmrE,EAAG,KACH9e,EAAI,MACJggC,EAAK,YACLmK,GACE2F,GAAiB98F,EAAQiG,EAAW82F,EAASnwF,EAAyBhM,EAAOq7C,GAAQxvC,OACnFgsF,GAAiBC,EAAAA,GAAAA,IAAkB5sB,EAAKqvB,GAE9C,OACE7zB,GAAAA,GAAAC,cAACq3B,GAAAA,EAAuB,CACtBl6F,QAASA,EACTsoD,KAAMA,EACN6xC,QAzBU,EA0BVC,QAASrG,EACTsG,aAAcJ,EACdnB,KAAM/E,EACNuG,aAAW,EACXlzB,IAAKA,EACLn/C,WAAWq8C,EAAAA,GAAAA,GAAe,4BAA6BtkE,GAASvD,KAAOo9F,EAAAA,IAAmB,sBAC1FvR,MAAOA,EACPxjB,QAAS2tB,GACT,K,4BC/CN,MAkHA,IAAepvB,EAAAA,GAAAA,KAhHqBpnE,IAK9B,IAL+B,cACnCs+F,EAAa,WACbt5F,EAAU,SACVu5F,EAAQ,UACR5xE,GACD3sB,EACC,MAAM,WAAEikB,IAAe4B,EAAAA,EAAAA,MAEjB24E,GAAsBC,EAAAA,GAAAA,GAAkB,CAAC9xE,GAVvB,KAYlBy7B,GAAO+f,EAAAA,GAAAA,MACP,gBACJxb,EAAe,OAAEttD,EAAM,cAAE6H,EAAa,cAAE1B,EAAa,uBAAEsI,EAAsB,iBAAE4wF,EAAgB,gBAAEC,GAC/F35F,EAEEwxF,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClC/oD,EAAW,CACT26E,YAAY,EAAMv/F,SAAQstD,kBAAiBgyC,mBAC3C,IAGEE,GAAiBn2B,EAAAA,GAAAA,KAAQ,KAC7B,IAAKg2B,GAAkB5+F,OACrB,OAIF,MAAM7B,GAASwL,EAAAA,EAAAA,MAEf,OAAOi1F,EAAiB/xF,KAAKzM,IACpBsd,EAAAA,EAAAA,KAAWvf,EAAQiC,KACzBH,OAAOqW,QAAQ,GACjB,CAACsoF,IAEJ,QAAsBl7F,IAAlB0D,EACF,OAmBF,MAAM43F,EAAY1oF,QAAQtI,GAA0BtI,GAAiBsI,EAAyBtI,GAExFu5F,EAAe73F,EAAiBkhD,EAAK,gBAAiB,wBAAoB5kD,EAAW0D,GACxF4R,MAAM,KACNnM,KAAKk1C,GACU,mBAANA,EAAyB8kB,GAAAA,GAAAC,cAACo4B,GAAAA,EAAe,CAACzyF,MAAMm7D,EAAAA,GAAAA,IAAqBxgE,KAAqB26C,SAElGr+C,EAEJ,OACEmjE,GAAAA,GAAAC,cAAA,OACE,YAAUc,EAAAA,GAAAA,IAAqBxgE,GAC/B8kB,WAAWq8C,EAAAA,GAAAA,GACT,gBACAy2B,GAAa,aACbP,GAAY,WACZD,GAAiB,6BACjB3xE,GAAa,WAEfm8C,IAAK1gB,EAAK2gB,MAAQ,MAAQ,MAC1BF,QAAS2tB,EACTyI,KAAK,SACL91B,SAAU,GAEVxC,GAAAA,GAAAC,cAAA,KACE56C,WAAWq8C,EAAAA,GAAAA,GACT,yDACA17C,GAAa6xE,GAAuB,wBAEtC,oBAEAK,GAAgB/+F,QAAU6mE,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAAqB,mBA7C9D5V,QAAQyoF,GAAgB/+F,SACtB6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBAAkB88C,IAAK1gB,EAAK2gB,MAAQ,MAAQ,OACxD81B,EAAgBlyF,KAAK6P,GACpBmqD,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CACL7+D,IAAK7jB,EAAKhc,GACV6rD,KAAK,QACL7vC,KAAMA,OAyCdmqD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,QAAQ88C,IAAI,QACxB5hE,EAAgB63F,EAAe32C,EAAK,kBAEvCue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBACZW,GACCg6C,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CACNvkD,WAAWq8C,EAAAA,GAAAA,GACT,yBACCm2B,GAAuB,wBAE1Bv1B,MAAOq1B,EAAgB,QAAU,SAGrC33B,GAAAA,GAAAC,cAAA,KACE56C,WAAWq8C,EAAAA,GAAAA,GACT,yCACA17C,GAAa6xE,GAAuB,wBAEtC,oBAGA,I,mQCzFV,UAAep3B,EAAAA,GAAAA,KA3Bf,SAAyBpnE,GAEZ,IAFa,KACxBwc,EAAI,UAAE2iF,EAAS,aAAEvH,EAAY,WAAEwH,EAAU,UAAEpzE,EAAS,mBAAEqzE,EAAkB,SAAEC,KAAaC,GAC9Ev/F,EACT,MAAMipE,EAAQk2B,GAAa3iF,GAAMysD,MAEjC,OACEtC,GAAAA,GAAAC,cAAA,MAAAggB,GAAA,CACE56D,WAAWq8C,EAAAA,GAAAA,GC3BM,WD6Bf7rD,IAAQk8E,EAAAA,GAAAA,GAAkBl8E,EAAMo7E,EAAcwH,GAC9CD,IAAaK,EAAAA,GAAAA,GAAqBL,GAClCnzE,IAGEuzE,GAEHt2B,GAAOw2B,mBACN94B,GAAAA,GAAAC,cAAC84B,GAAAA,EAAmB,CAClB1zE,UAAWqzE,EACXM,gBAAiB12B,EAAMw2B,oBAG1BH,EAGP,IE7CA,GAAmM,WC6GnM,SAASM,GAAeh2D,GACtB,OAAIA,EAAQjM,WAAaiM,EAAQlM,SACvB,GAAEkM,EAAQjM,aAAaiM,EAAQlM,WAGrCkM,EAAQjM,UACHiM,EAAQjM,UAGbiM,EAAQlM,SACHkM,EAAQlM,SAGV,EACT,CAEA,UAAegsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA8B,IAA5B,QAAEi+B,GAASj+B,EACtD,MACEk0F,aAAeC,WAAYC,IACzB9hG,EAGJ,MAAO,CACL6T,MAHWC,EAAAA,EAAAA,KAAW9T,EAAQ2rC,EAAQ3vB,QAItC8lF,gBACD,GATH,EA9F2C//F,IAErC,IAFsC,QAC1C4pC,EAAO,KAAE93B,EAAI,cAAEiuF,EAAa,aAAEnI,GAC/B53F,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,MACP,SACJxsD,EAAQ,qBAAEqkF,EAAoB,iBAAE5lF,EAAgB,iBAAEgtB,IAChDvhB,EAAAA,EAAAA,OAEE,YAAE8Y,EAAW,OAAE1kB,GAAW2vB,EAC1Bq2D,EAXwB,MAWThmF,EACfimF,EAAgBD,GAAgBnuF,IAAQquF,EAAAA,EAAAA,KAAiBruF,GAEzDsuF,GAAiBpzB,EAAAA,GAAAA,IAAgB,KACrCrxD,EAAS,CAAEnb,GAAIyZ,GAAS,IAGpBomF,GAAmBrzB,EAAAA,GAAAA,IAAgB,KACvCgzB,EAAqB,CAAE/lF,OAAQnI,GAAMtR,IAAK,IAGtCg2F,GAAcxpB,EAAAA,GAAAA,IAAgB,KAC9Bl7D,EACFs1B,EAAiB,CAAE5mC,GAAIyZ,MAEvB0sB,EAAAA,EAAAA,IAAoBhI,GACpBvkB,EAAiB,CAAEnb,QAASmpD,EAAK,iBACnC,IAGF,OACEue,GAAAA,GAAAC,cAAC05B,GAAgB,CACf1I,aAAcA,EACdp7E,KAAM1K,EACNutF,mBDhEuR,WCiEvRrzE,UDjEiB,YCmEjB26C,GAAAA,GAAAC,cAAA,OAAK56C,UDnEmE,WCmElC68C,QAAS2tB,GAC7C7vB,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CAAC7yC,KAAK,QAAQ7vC,KAAM1K,EAAMvF,KAAMqzF,GAAeh2D,KACtD+8B,GAAAA,GAAAC,cAAA,OAAK56C,UDrEmF,YCsEtF26C,GAAAA,GAAAC,cAAA,OAAK56C,UDtEmG,YCuErGla,GAAOqI,EAAAA,EAAAA,KAAgBrI,GAAQ8tF,GAAeh2D,IAEjD+8B,GAAAA,GAAAC,cAAA,OAAK56C,UDzEsH,aC0ExHu0E,EAAAA,GAAAA,IAA0BR,EAAephE,MAI/CshE,GACCt5B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UDhF2I,aCiFhJ26C,GAAAA,GAAAC,cAAA,OAAK56C,UDjFgK,YCkFnK26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLw3B,QAAM,EACNv3B,MAAM,cACNqM,QAAM,EACNzM,QAASu3B,EACTp0E,UAAWi9D,IAEV7gC,EAAK,yBAEP83C,GACCv5B,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLw3B,QAAM,EACNv3B,MAAM,cACNqM,QAAM,EACNzM,QAASw3B,EACTr0E,UAAWi9D,IAEV7gC,EAAK,uBAMC,I,oDCzGvB,MCqBMq4C,GAAQ,CACZx3B,MAAO,GAiET,IAAe7B,EAAAA,GAAAA,KA7DGpnE,IAA+C,IAA9C,UAAE0mB,EAAS,iBAAEg6E,GAA4B1gG,EAC1D,MAAMooD,GAAO+f,EAAAA,GAAAA,KAGPgD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7By1B,GAAYz1B,EAAAA,GAAAA,IAAuB,OACnC,YACJ01B,EAAW,cAAEC,EAAa,eAAEC,IAC1BC,EAAAA,GAAAA,GAAoB51B,EAXR,EAWwBw1B,GAElCK,GAAmBt4B,EAAAA,GAAAA,KAAQ,KAC/B,GAAKhiD,EAAUu6E,aAAgB74C,EAAK1a,KAGpC,OADqB,IAAI7P,KAAKqjE,aAAa,CAAC94C,EAAK1a,MAAO,CAAEptC,KAAM,WAC5C6gG,GAAGz6E,EAAUu6E,YAAY,GAC5C,CAACv6E,EAAUu6E,YAAa74C,EAAK1a,OAE1B0zD,GAAaV,GAAoBE,EAEjCS,GAAer0B,EAAAA,GAAAA,IAAgB,KACnC8zB,GAAe,EAAM,IAGjBQ,GAAet0B,EAAAA,GAAAA,IAAgB,KACnC8zB,GAAgBS,IAAUA,GAAK,IAGjC,GAAK76E,EAAUna,KAIf,OACEo6D,GAAAA,GAAAC,cAAC05B,GAAgB,CAACnB,UAAWsB,GAAOz0E,UD3DjB,WC2DyC68C,QAASu4B,EAAYC,OAAe79F,GAC9FmjE,GAAAA,GAAAC,cAAA,OACEuE,IAAKw1B,EACL30E,WAAWq8C,EAAAA,GAAAA,GD9D2I,WC8DtGu4B,GD9D2E,aCgE3Hj6B,GAAAA,GAAAC,cAAA,OAAK56C,UDhE6B,YCgEHo8B,EAAK,cACpCue,GAAAA,GAAAC,cAAA,OAAKuE,IAAKA,EAAKn/C,UDjEwC,aCkEpDw1E,EAAAA,GAAAA,GAAuB,CACtBj1F,KAAMma,EAAUna,KAAKA,KACrB2L,SAAUwO,EAAUna,KAAK2L,YAG7ByuD,GAAAA,GAAAC,cAAC66B,GAAAA,EAAS,CAACz1E,UDvEmE,aCwE9E26C,GAAAA,GAAAC,cAAA,OAAK56C,UDxE+F,YCwElEo8B,EAAK,kBAAmB44C,KAE3DH,GACCl6B,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GD5EmK,YC4E9Hq4B,GD5EqJ,YC6ErM73B,QAAU63B,OAAkCl9F,EAAf89F,EAC7B,kBAEA36B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAMk0D,EAAc,OAAS,QAGtB,ICDvB,IAAex5B,EAAAA,GAAAA,KA3DYpnE,IAGrB,IAHsB,QAC1Bf,EAAO,iBACPyiG,GACD1hG,EACC,MAAM,qBAAE2hG,IAAyB97E,EAAAA,EAAAA,MAC3B+7E,EAAO3iG,EAAQ0E,QAAQi+F,MACvB,MACJ3kF,EAAK,YAAEZ,GACLulF,EAEEC,GAAYC,EAAAA,EAAAA,KAAwBF,GACpCG,GAAYC,EAAAA,EAAAA,IAAwBJ,GACpCK,GAAevW,EAAAA,GAAAA,GAASmW,GAAYH,GACpCQ,GAAexW,EAAAA,GAAAA,GAASqW,GAAYL,GAU1C,OACE/6B,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,QACb26C,GAAAA,GAAAC,cAAA,OACE56C,UAAU,UACVqgE,MAAQ,8BACRxjB,QAbkBs5B,KACtBR,EAAqB,CACnBtiG,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,GACnBkmC,OAAQznC,EAAQyrF,cAAe,GAAG,IAClC,IAUIuX,IAAiBC,GACjBv7B,GAAAA,GAAAC,cAACmmB,GAAAA,EAAQ,CAAC/gE,UAAU,6BAErBi2E,GACCt7B,GAAAA,GAAAC,cAAA,OACE56C,UAAU,kBACVugE,IAAK0V,EACLzV,IAAKvvE,EACL67E,WAAW,IAGdoJ,GACCv7B,GAAAA,GAAAC,cAAA,SACE56C,UAAU,kBACV8gE,aAAW,EACXD,OAAK,EACLD,yBAAuB,EACvBwV,UAAQ,EACRzV,MAAI,EACJJ,IAAK2V,KAIXv7B,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,SAAS/O,KACtBpR,EAAAA,EAAAA,KAAe5M,IAAY0nE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eAAe3P,GACvD,I,oDC9EV,SAA0C,WAA1C,GAAkI,WAAlI,GAA2J,WAA3J,GAA8K,WAA9K,GAAgM,WCwWhM,IAAe+qD,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA8B,IAA5B,QAAE1M,GAAS0M,EAClB,MAAM,SAAE02F,GAAapjG,EAAQ0E,QACvBtC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQgB,EAAQI,QAMxC,MAAO,CACLgC,OACAgmC,QAPazhC,EAAAA,EAAAA,KAAW3H,EAAQokG,GAAUC,WAAW,MAClDC,EAAAA,EAAAA,KAAsBtkG,EAAQgB,IAAYoC,EAO7CmhG,YALcH,IAAYI,EAAAA,EAAAA,KAA6BxkG,EAAQokG,EAASK,QAMxEC,uBAAuBjF,EAAAA,EAAAA,KAA4Bz/F,GACpD,GAdeyrE,EAnTH1pE,IAMY,IANX,KAChBqB,EAAI,OACJgmC,EAAM,QACNpoC,EAAO,sBACP0jG,EAAqB,YACrBH,GACsBxiG,EACtB,MAAM,SAAE2b,IAAakK,EAAAA,EAAAA,MAEf+8E,GAAgB13B,EAAAA,GAAAA,KAAO,IACtB23B,EAAcC,IAAmB56B,EAAAA,GAAAA,MAElC9f,GAAO+f,EAAAA,GAAAA,MACP,SAAEk6B,EAAQ,gBAAEU,GAAoB9jG,EAAQ0E,QACxCq/F,EAAY5sF,QAAQ2sF,IACpB,OACJL,EAAM,UAAEnqD,EAAS,iBAAED,EAAgB,MAAEvI,GAClCsyD,GAAYU,EAEX9iG,GAAQgjG,EAAAA,EAAAA,KAAahkG,GAErBikG,EAAWF,EAAYD,EAAgBI,aAAed,EAAUa,SAEhEE,GAAW7lE,EAAAA,GAAAA,MAAkBgb,EAE7BsnD,GAAcn3B,EAAAA,GAAAA,KAAQ,KAC1B,GAAIs6B,EAAW,OACf,MAAMK,EAAkB,IAAIxlE,KAAKqjE,aAAa,CAAC94C,EAAK1a,KAAO,MAAM3tC,OAAOqW,SAAU,CAAE9V,KAAM,WAC1F,OAAO+hG,GAAUhqD,WAAW1rC,KAAKs0F,GAC9B,IAAEqC,EAAAA,GAAAA,IAAWrC,MAAsBoC,EAAgBlC,GAAGF,OACtD3mF,KAAK,KAAK,GACZ,CAAC+nF,EAAUW,EAAW56C,EAAK1a,OAExB61D,GAAkBv2B,EAAAA,GAAAA,IAAiBr9D,IACvCgM,EAAS,CAAEnb,GAAImP,GAAY,IAGvB6zF,GAAsBx2B,EAAAA,GAAAA,IAAgBv7D,UAC1C,GAAImxF,EAAc12E,QAAS,OAE3B02E,EAAc12E,SAAU,EACxB,MAAM1Y,QAAenB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDmK,KAAMnb,EACNiE,UAAWrG,EAAQuB,KAErBsiG,EAAgBtvF,GAChBovF,EAAc12E,SAAU,CAAK,IAGzBu3E,GAAkBz2B,EAAAA,GAAAA,IAAgB,KACtC81B,OAAgBt/F,EAAU,IAGtBkgG,GAAoBh7B,EAAAA,GAAAA,KAAQ,KAChC,GAAKm6B,EACL,OAAOz6C,EAA2B,YAAtBy6C,EAAaviG,KAAqB,sBAAwB,wBAAwB,GAC7F,CAACuiG,EAAcz6C,IA8MlB,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UD5Tc,YC6TjB26C,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GD7TyC,WC6TV26B,GD7TqC,aC8TjFA,EACCr8B,GAAAA,GAAAC,cAAC+8B,GAAAA,EAAuB,CACtBt3C,KA7QgB,IA8QhBu3C,OAAQC,GAAAA,EAAeC,YACvBC,gBAAc,EACdC,QAAM,IAGRr9B,GAAAA,GAAAC,cAACq3B,GAAAA,EAAuB,CACtBl6F,QAASy+F,EACT3F,KAAM8F,GAAyBS,EAC/BY,QAAM,EACND,gBAAc,EACd13C,KAzRc,MA4RlBsa,GAAAA,GAAAC,cAAA,QAAM56C,UD9U+F,YC+UjG,IAAGk3E,MAGRF,EAtJL,SAA0C3yF,GACxC,MAAM4zF,EAAY5zF,EAAM4zF,UACxB,OACEt9B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,UAAQ56C,UAAWi9D,KAChBgE,EAAAA,GAAAA,GAAW7kC,EAAK,6CAA8C,CAAC,qBAElEue,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,KACXgE,EAAAA,GAAAA,GAAW7kC,EAAK,yCAA0C67C,EAAUnkG,QAAS,CAAC,qBAEjF6mE,GAAAA,GAAAC,cAAA,UAAQ56C,UAAWi9D,IAChB7gC,EAAK,+BAERue,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACbgb,EAAUt3F,KAAKzM,GACdymE,GAAAA,GAAAC,cAACiS,GAAAA,EAAkB,CACjB34E,OAAQA,EACRgkG,eAAa,EACbprB,OAAK,EACLqrB,gBAAiBlkG,EACjB+rB,UAAWi9D,GACXjQ,SAAU94E,EACV2oE,QAAS06B,QAKjB58B,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,IACX7gC,EAAK,uDAKhB,CAmHiBg8C,CAAiCrB,GAnOlD,SAAmC1yF,GACjC,MAAMiyF,EAAajyF,EAAMiyF,WACzB,OACE37B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,UAAQ56C,UAAWi9D,KAChBgE,EAAAA,GAAAA,GAAW7kC,EAAK,0BAA2B,CAAC,qBAE9C9P,GACCquB,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,KACXgE,EAAAA,GAAAA,GACC7kC,EAAK,4BAA6B,CAAC86C,EAAU5qD,QAAmB90C,EAAW0/F,GAC3E,CAAC,qBAGLv8B,GAAAA,GAAAC,cAAC66B,GAAAA,EAAS,KAAEr5C,EAAK,oCAGrBue,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,IACXhqF,GAAS0E,SAAS0+F,UAAUtyD,MAC3B42B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,MACGskB,EAAAA,GAAAA,GACC7kC,EAAK,wCAAyCA,EAAK,QAASnpD,GAAS0E,SAAS0+F,UAAUtyD,QACxF,CAAC,oBAEH42B,GAAAA,GAAAC,cAAA,YACCqmB,EAAAA,GAAAA,GAAW7kC,EAAK,eAAgB86C,GAAW,CAAC,qBAG/Cv8B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,MACGskB,EAAAA,GAAAA,GAAW7kC,EAAK,mCAAoC86C,GAAW,CAAC,oBACjEv8B,GAAAA,GAAAC,cAAA,YACCqmB,EAAAA,GAAAA,GAAW7kC,EACV,4BACAA,EAAK,4BAA6Bs6C,IACjC,CAAC,uBAKZ/7B,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,UAAQ56C,UAAWi9D,KAChBgE,EAAAA,GAAAA,GAAW7kC,EAAK,mCAAoC,CAAC,qBAExDue,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,KACXgE,EAAAA,GAAAA,GAAW7kC,EAAK,mCAAoCk6C,EAAWxiG,QAAS,CAAC,qBAE5E6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACbqZ,EAAW31F,KAAKzM,GACfymE,GAAAA,GAAAC,cAACiS,GAAAA,EAAkB,CACjB34E,OAAQA,EACRgkG,eAAa,EACbprB,OAAK,EACLqrB,gBAAiBlkG,EACjB+rB,UAAWi9D,GACXjQ,SAAU94E,EACV2oE,QAAS06B,OAId1D,GACCl5B,GAAAA,GAAAC,cAAA,aAAOqmB,EAAAA,GAAAA,GAAW7kC,EAAK,sCAAuCy3C,MAGlEl5B,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,IACdtiB,GAAAA,GAAAC,cAAA,UAAQ56C,UAAWi9D,KAChBgE,EAAAA,GAAAA,GAAW7kC,EAAK,uBAAwB,CAAC,qBAE5Cue,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,KACXob,EAAAA,GAAAA,IAAmC,IAAZ9rD,EAAkB6P,EAAK1a,MAAM,KAK/D,CAwJqE42D,CAA0BjC,GAC3F17B,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UDpV4M,WCqV5Mi9C,MAAM,WACN5c,KAAK,UACLwc,QAAS26B,GAERp7C,EAAK,sBAERue,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZjwD,OAAQl+B,QAAQysF,GAChB2B,eAAa,EACbvnF,MAAOymF,EACPe,eAAgBhB,EAChBj6B,QAASi6B,GA/Hf,WACE,IAAKp8D,IAAWw7D,EAAc,OAC9B,MAAM6B,EAAsC,YAAtB7B,EAAaviG,KAE7BqkG,GAAYn1E,EAAAA,EAAAA,IAAc6X,IAAU+uB,EAAAA,EAAAA,KAAahO,EAAM/gB,IAAUltB,EAAAA,EAAAA,KAAgBktB,GACjFu9D,GAAUC,EAAAA,GAAAA,GAAiBz8C,EAAkB,IAAZ7P,GACjCusD,EAAqBzC,GAAUC,WAAaD,EAASC,WAAWxiG,OAAS,EAAI,EAC7EilG,EAAsB38C,EAAK,mCAAoC08C,GAC/DE,EAAYF,EAAqB,EAEjCG,EAAWP,EAAgB,oCAAsC,iCACjEQ,EAAmBR,EAAgBt8C,EAAK,4BAA6Bs6C,GAAUt6C,EAAK,QAASrY,EAAO,KACpGo1D,EAAiB/8C,EAAK68C,EAAU,CAACN,EAAWzB,EAAUgC,QAAmB1hG,EAAW0/F,GAEpFkC,EAAmB9sD,EACrB8P,EAAK,wCAAyC,CAACu8C,EAAWzB,EAAU5qD,QAAmB90C,EAAW0/F,QAClG1/F,EAEJ,IAAI6hG,EAAY,GAEdA,EADEX,EACUM,EAAY,8CAAgD,uCAE5DA,EAAY,2CAA6C,oCAEvE,IAAIM,EAAkBl9C,EAAKi9C,EAAW,CAACT,EAAS1B,EAAUyB,EAAWG,QAAqBthG,EAAW0/F,GACjGwB,GAAiB7B,EAAa0C,iBAChCD,GAAoB,IAAGl9C,EAAK,kCAAmCy6C,EAAa0C,mBAG9E,IAAI/xF,EAAS,GAETkxF,IAEAlxF,EADEqvF,EAAa2C,WACNp9C,EAAK,qCAELA,EAAKy6C,EAAa4C,SAAW,yBAA2B,8BAIrE,IAAIC,EAAgB,GACpB,GAAIhB,QAEG,GAAI7B,EAAa8C,kBACtBD,EAAgBt9C,EAAK,2CAChB,GAAIy6C,EAAa+C,sBAAuB,CAE7C,MACMC,GADYp8F,EAAAA,EAAAA,MAAYnC,MAAMC,KACHs7F,EAAa+C,uBACxCE,EAAsBD,IAAkBzvC,EAAAA,EAAAA,KAAahO,EAAMy9C,GACjEH,EAAgBt9C,EAAK,mCAAoC09C,EAC3D,MAAO,GAAIjD,EAAakD,mBAAoB,CAC1C,MAAMA,GAAqBlB,EAAAA,GAAAA,GAAiBz8C,EAAwC,IAAlCy6C,EAAakD,oBAC/DL,EAAgBt9C,EAAK,8BAA+B29C,EACtD,MACEL,EADS7C,EAAamD,gBACNhB,EACZ58C,EAAK,uCAAwC,CAACu8C,EAAWG,IACzD18C,EAAK,mCAAoCu8C,GAE7BK,EACZ58C,EAAK,sCAAuC,CAACu8C,EAAWI,EAAqBH,IAC7Ex8C,EAAK,kCAAmC,CAACu8C,EAAWC,IAG1D,OACEj+B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACGn1D,GACCmzD,GAAAA,GAAAC,cAAA,KAAG56C,UDnS2N,aCoS3NihE,EAAAA,GAAAA,GAAWz5E,EAAQ,CAAC,qBAGzBmzD,GAAAA,GAAAC,cAAA,UACGqmB,EAAAA,GAAAA,GAAWkY,EAAgB,CAAC,qBAE9BC,GACCz+B,GAAAA,GAAAC,cAAA,UACGqmB,EAAAA,GAAAA,GAAWmY,EAAkB,CAAC,qBAGnCz+B,GAAAA,GAAAC,cAAA,UACGqmB,EAAAA,GAAAA,GAAWqY,EAAiB,CAAC,qBAE/BI,GACC/+B,GAAAA,GAAAC,cAAA,UACGqmB,EAAAA,GAAAA,GAAWyY,EAAe,CAAC,qBAKtC,CAyCOO,IAEC,K,gBChVV,MA4DA,IAAe7+B,EAAAA,GAAAA,KA5DqBpnE,IAA0B,IAAzB,QAAEf,EAAO,QAAE4pE,GAAS7oE,EACvD,MAAMooD,GAAO+f,EAAAA,GAAAA,KA2BP+9B,GAAcx9B,EAAAA,GAAAA,KAAQ,KAC1B,MAAMy9B,EAAuB,GAI7B,OAHAlnG,EAAQyrF,cAAetqF,SAAS2wF,IAC9BoV,EAAMr8F,KAAKinF,EAAIpkF,KAAK+5B,IAAW0/D,EAAAA,GAAAA,GAAyBh+C,EAAM1hB,KAAS,IAElEy/D,CAAK,GACX,CAAC/9C,EAAMnpD,EAAQyrF,gBAElB,OACE/jB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACZ/sB,EAAQyrF,cAAe/9E,KAAI,CAACokF,EAAK5tF,IAChCwjE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,OACZ+kE,EAAIpkF,KAAI,CAAC+5B,EAAQ2/D,IAChB1/B,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLipB,QAAM,EACNipB,SAA0B,gBAAhB73D,EAAOpmC,KAEjBuoE,QAASA,IAAMA,EAAQ,CAAExpE,OAAQJ,EAAQI,OAAQiG,UAAWrG,EAAQuB,GAAIkmC,YAExEigC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,sBACbk6E,EAAY/iG,GAAGkjG,IA9CV3/D,KAClB,MAAM,KAAEpmC,GAASomC,EACjB,OAAQpmC,GACN,IAAK,MACH,IAAKgmG,EAAAA,IAAYtxC,KAAKtuB,EAAO1kB,KAC3B,OAAO2kD,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,gBAE5C,MAEF,IAAK,UACH,OAAOi6B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,gBAC5C,IAAK,MACL,IAAK,UACH,OAAOi6B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,SAC5C,IAAK,kBACH,OAAOi6B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,iBAC5C,IAAK,UACL,IAAK,gBACH,OAAOi6B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,WAC5C,IAAK,OACH,OAAOi6B,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAU,cAAc0gB,KAAK,SAE9B,EA0BL65D,CAAW7/D,SAKhB,I,4BC7CV,MAkGA,IAAe0gC,EAAAA,GAAAA,KAlGepnE,IAOxB,IAPyB,QAC7Bf,EAAO,qBACP48F,EAAoB,eACpBtH,EAAc,WACdqF,EAAU,MACVryD,EAAK,YACLi/D,GACDxmG,EAEC,MAAMmrE,GAAMD,EAAAA,GAAAA,IAAuB,MAE7B9iB,GAAO+f,EAAAA,GAAAA,KACP/3D,GAAUq2F,EAAAA,EAAAA,KAAkBxnG,IAE5B,MACJge,EAAK,YACLZ,EAAW,OACXo8B,EAAM,SACND,EAAQ,OACRkuD,EAAM,MACN7iG,GACEuM,EAEEu2F,GAAWjb,EAAAA,GAAAA,IAASkb,EAAAA,EAAAA,KAAmB/iG,IACvCgjG,EAAwBzwF,QAAQowF,GAChCM,GAAuBC,EAAAA,GAAAA,GAAwBJ,GAAWE,GAC1DvhG,EAAYrG,EAAQuB,IAE1BwmG,EAAAA,GAAAA,IAA4Br7F,IAAgC,IAA9Bs7F,GAAyBt7F,EACrD,GAAKkwF,GAOL,GAAI8K,EAAU,CACZ,MAAMO,EAAY/7B,EAAIj/C,QAASi7E,QAAwBC,EAAAA,MACvDC,EAAAA,GAAAA,GAAoBV,GAAU,EAAOrhG,EAAWs0F,EAAYryD,GAAOvpB,MAAMspF,KACvEC,EAAAA,GAAAA,KAAgB,KACdL,EAAU7a,MAAMmb,YAAY,gBAAiBF,GAC7CJ,EAAUzP,aAAagQ,EAAAA,IAA2B,GAAG,GACrD,GAEN,OAdMR,GACF97B,EAAIj/C,QAASi7E,QAAwBC,EAAAA,KAA2B9P,gBAAgBmQ,EAAAA,IAapF,GACC,CAAC5L,EAAsB8K,EAAUpS,EAAgBqF,EAAYryD,EAAOjiC,IAEvE,MAAM5G,EAAQ8nG,GAAe3iG,GAAOmqF,YAAYtvF,MAE1C2tF,GAAQC,EAAAA,GAAAA,GACZzoF,GAAOmqF,YAAe,UAAStvF,MAC/BmF,GAAOmqF,YAAe,iBAAgBnqF,EAAMmqF,WAAWtvF,WAAWmF,EAAMmqF,WAAW5B,SACnFh2E,SAASvS,GAAOmqF,YAAcwY,IAAiB,UAASA,OAG1D,OACE7/B,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,UAAU,WAET/O,GACC0pD,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,UAASihE,EAAAA,GAAAA,GAAWhwE,IAElCZ,GACCsqD,GAAAA,GAAAC,cAAA,YAAMqmB,EAAAA,GAAAA,GAAW5wE,EAAa,CAAC,QAAS,QAE1CsqD,GAAAA,GAAAC,cAAA,OAAK56C,UAAY,gBAAcnoB,EAAQ,YAAc,KAClDuS,QAAQvS,IACP8iE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,2BACZ66E,GAAyBlgC,GAAAA,GAAAC,cAAA,UAAQuE,IAAK27B,EAAsB96E,UAAU,yBACtE26E,GACChgC,GAAAA,GAAAC,cAAA,OACE56C,UAAU,gBACVugE,IAAKoa,EACLna,IAAI,GACJH,MAAOA,EACPqb,YAAY,YACZ5O,WAAW,KAGb6N,GAAY9iG,GACZ8iE,GAAAA,GAAAC,cAACmmB,GAAAA,EAAQ,CACPruF,MAAOA,EACP0tF,OAAQvoF,EAAMmqF,YAAY5B,OAC1BY,kBAAgB,KAKxBrmB,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBACV27E,EAAAA,GAAAA,GAAelvD,EAAQD,EAAU4P,EAAK1a,KAAM,CAAEk6D,cAAe,0BAC7DlB,GAAU//B,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,gBAAgBo8B,EAAK,yBAGhD,I,gBC7HV,UAAgB,KAAO,WAAW,SAAW,WAAW,IAAM,WAAW,QAAU,YCiFnF,IAAegf,EAAAA,GAAAA,KAxD2BpnE,IAGpC,IAHqC,QACzCf,EAAO,YACP4oG,GACD7nG,EACC,MAAM,YAAEinC,EAAW,kBAAE6gE,IAAsBjiF,EAAAA,EAAAA,MACrCuiC,GAAO+f,EAAAA,GAAAA,KACP/3D,GAAUq2F,EAAAA,EAAAA,KAAkBxnG,IAE5B,OAAEI,EAAM,GAAEmB,GAAOvB,EAEjB8oG,GAAuB/6B,EAAAA,GAAAA,IAAgB,KAC3C86B,EAAkB,CAAEzoG,SAAQ+I,IAAK,CAAC5H,IAAM,KAG1CwnG,EAAAA,GAAAA,GAAYD,EAAsBF,EAhBX,SAgB4CrkG,GAEnE,MAAM,OACJi1C,EAAM,SACND,EAAQ,cACRtoC,GACEE,GAEE,MACJ1R,EAAK,OAAE0tF,EAAM,UAAE/nF,EAAS,SAAEo8B,GACxBvwB,EAEEsmF,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClC/lC,EAAY,CACV3mC,KAAM,UACNjB,SACAiG,UAAW9E,EACXivC,iBAAiB,GACjB,IAGJ,OACEk3B,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAOgf,KAAM,eACvCp/B,QAAS2tB,GAET7vB,GAAAA,GAAAC,cAACshC,GAAAA,EAAY,CACXC,aAAc9jG,GAAWi0F,QACzB55F,MAAOA,EACP0tF,OAAQA,EACRgc,WAAS,EACTp8E,UAAWi9D,GAAOof,UAEnBjyF,QAAQqqB,IAAakmC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOxoD,WAAW6nE,EAAAA,GAAAA,IAAoB7nE,IAC5EkmC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOsf,KACrB5hC,GAAAA,GAAAC,cAAA,KAAG56C,WAAWq8C,EAAAA,GAAAA,GAAe,OAAQ,YAAa4gB,GAAOuf,QACxDpgD,EAAK,qBAAqBud,EAAAA,GAAAA,GAAuBltB,EAAQD,KAExD,I,4ECvCJiwD,GAAsBC,GAAmB9pG,KAAK+pG,GAC9CC,GAAiB,KACjBC,GAAqB,CACzBnqG,MAAO,IACP0tF,OAAQ,IACR53B,KAAM,IA+NR,SAASs0C,KACP,OACEniC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,YAAYqgE,MAAM,kCAAkC0c,QAAQ,aACzEpiC,GAAAA,GAAAC,cAAA,UAAQoiC,GAAG,KAAKC,GAAG,KAAKvnG,EAAE,SAC1BilE,GAAAA,GAAAC,cAAA,QAAMsiC,EAAE,+IACRviC,GAAAA,GAAAC,cAAA,QAAMsiC,EAAE,sFACRviC,GAAAA,GAAAC,cAAA,QAAMsiC,EAAE,yNAGd,CAEA,UAAe9hC,EAAAA,GAAAA,KA/NgBpnE,IAGzB,IAH0B,QAC9Bf,EAAO,KACPud,GACDxc,EACC,MAAM,aAAEmpG,IAAiBtjF,EAAAA,EAAAA,MAEnBslD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7Bk+B,GAAel+B,EAAAA,GAAAA,IAAuB,MACtC9iB,GAAO+f,EAAAA,GAAAA,KACPkhC,GAAcC,EAAAA,GAAAA,KAEdhoE,GAAWioE,EAAAA,EAAAA,KAAmBtqG,IAC9B,UAAEqR,EAAS,IAAEk5F,GAAQloE,EAErB4f,GAAa3jB,EAAAA,GAAAA,MACbksE,GAAYC,EAAAA,EAAAA,KAAiBzqG,GAC7B0qG,EAAkC,YAAdr5F,GAA4Bm5F,OAClDjmG,EAD+DvE,EAAQkT,KAAOmvB,EAASsoE,OAAS1oD,GAG7FwT,EAAOm1C,IAAY3hC,EAAAA,GAAAA,IAASshC,GAE7BM,EAAiC,UAAdx5F,GAAwC,YAAdA,IAA4Bm5F,GACzE,MAAE/qG,EAAK,OAAE0tF,EAAM,KAAE53B,GAASq0C,GAC1BkB,GAAMC,EAAAA,GAAAA,KAENC,GAAYC,EAAAA,EAAAA,KAAmBx1C,EAAOh2D,EAAO0tF,EAAQ53B,EAAMu1C,GAC3D5R,GAAezM,EAAAA,GAAAA,GAASue,GACxBE,GAAmBC,EAAAA,GAAAA,GAAsBjS,GAAc,GACvDkS,EAAalS,GAAgBgS,EAE7BG,GAAmB5hC,EAAAA,GAAAA,KAAQ,KAC/B,GAAkB,YAAdp4D,IAA4BokD,EAAM61C,eACpC,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmB71C,EAChC,OAAO61C,GAAiBE,EAAAA,GAAAA,IAAkBD,EAAKh2C,EAAK,GACnD,CAAClkD,EAAWokD,EAAOF,IAMhBk2C,GAAkB19B,EAAAA,GAAAA,IAAiB29B,IACvC,GAAkB,YAAdr6F,EAAyB,OAC7B,MAAMs6F,EAAQD,EAAYE,iBACpBC,EAAUH,EAAYI,kBAEtBC,EAAW/rG,EAAQkT,KAAOmvB,EAASsoE,QAASrsE,EAAAA,GAAAA,MAC5C0tE,GAAoB,EAAID,EAAW1pE,EAASsoE,QAAUnB,GACtDl8F,GAAO2+F,EAAAA,GAAAA,IAAqB9iD,EAAiB,IAAX4iD,GACxCF,EAAQK,YAAc5+F,EACtBq+F,EAAMG,kBAAmBtT,aAAa,oBAAsB,IAAGwT,IAAmB,IAgJpF,OA7IAG,EAAAA,GAAAA,KAAgB,KACVhC,EAAal9E,SACfw+E,EAAgBtB,EAAal9E,QAC/B,GACC,CAACw+E,KAEJljC,EAAAA,GAAAA,KAAU,KAEJ5oE,KAAK+xF,IAAI6Y,EAAIgB,IAAM91C,EAAM81C,KAAO5B,IAAkBhqG,KAAK+xF,IAAI6Y,EAAI6B,KAAO32C,EAAM22C,MAAQzC,GAClFl0C,EAAM61C,iBAAmBf,EAAIe,gBAC/BV,EAAS,IACJn1C,EACH61C,eAAgBf,EAAIe,iBAK1BV,EAASL,EAAI,GACZ,CAACA,EAAK90C,KAETqgB,EAAAA,GAAAA,IAAW,KACTs0B,GAAa,GACXI,OAA6CjmG,EAAP,KAAzBmmG,GAAoB,KAErC3B,EAAAA,GAAAA,IAAY,MACVT,EAAAA,GAAAA,KAAgB,KACd,MAAMoD,EAAcvB,EAAal9E,QAC7By+E,GACFD,EAAgBC,EAClB,GACA,GACDhB,EAAmB,SAAOnmG,GA+G3BmjE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,UAAU,mCACV68C,QAjKgB2tB,KAClB2S,EAAa,CAAE50C,SAAUG,EAAOF,QAAO,GAkKrCmS,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eAtEZq+E,EAEH1jC,GAAAA,GAAAC,cAAA,OACE56C,UAAU,iBACVugE,IAAK8d,EACL7d,IAAI,oBACJsM,WAAW,EACXzM,MAAQ,UAASwc,GAAmBnqG,oBAAoBmqG,GAAmBzc,cAPvDzlB,GAAAA,GAAAC,cAACmmB,GAAAA,EAAQ,CAACruF,MAAOA,EAAO0tF,OAAQA,IAgD1D,WACE,GAAKie,EAEL,OACE1jC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACGvyD,QAAQk0F,KAAsBb,GAC7B9iC,GAAAA,GAAAC,cAAA,OACE56C,UAAU,oBACVqgE,MAAQ,UAA4B,EAAnBie,gBAAsD,EAAnBA,QA5C9D,WACE,MAAMgB,GAAejjC,EAAAA,GAAAA,GACnB,MACA/3D,EACAm5F,GAAa,WAEf,GAAkB,YAAdn5F,EACF,OACEq2D,GAAAA,GAAAC,cAAA,OAAK56C,UAAWs/E,GACd3kC,GAAAA,GAAAC,cAACkiC,GAAM,MACPniC,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CAAC1iF,KAAMA,EAAMwP,UAAU,yBACRxoB,IAArB89B,EAASiqE,SACR5kC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,YAAYqgE,MAAQ,gBAAe/qD,EAASiqE,gBAMnE,GAAkB,UAAdj7F,EAAuB,CACzB,MAAM24D,GAAQuiC,EAAAA,GAAAA,IAAclqE,EAASmqE,WAC/BC,GAAUC,EAAAA,GAAAA,IAAgBrqE,EAASmqE,WACzC,GAAIC,EACF,OACE/kC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWs/E,EAAcjf,MAAQ,gBAAepjB,KACnDtC,GAAAA,GAAAC,cAACkiC,GAAM,MACPniC,GAAAA,GAAAC,cAAA,OAAK2lB,IAAKmf,EAAS5S,WAAW,EAAO9sE,UAAU,aAAawgE,IAAI,KAIxE,CAEA,OACE7lB,GAAAA,GAAAC,cAAA,OAAK56C,UAAWs/E,EAAcxS,WAAW,EAAOvM,IAAKqf,GAAQpf,IAAI,IAErE,CAaOqf,GAGP,CAUOC,IApHP,WACE,GAAKhC,EACL,MAAkB,UAAdx5F,EAEAq2D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBACZsV,EAASrkB,OAEZ0pD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,0BACZsV,EAASyqE,UAKA,YAAdz7F,EAEAq2D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBAAuBo8B,EAAK,uBAC3Cue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,2BACZggF,EAAAA,GAAAA,IAAkB5jD,EAAMlH,EAAYjiD,EAAQgtG,YAE7CxC,GACA9iC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBAAgBm/C,IAAKi+B,GAClCziC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,uBAChB26C,GAAAA,GAAAC,cAAA,OAAKloE,MAAM,OAAO0tF,OAAO,QACvBzlB,GAAAA,GAAAC,cAAA,UACEoiC,GAAG,KACHC,GAAG,KACHvnG,EAtIG,GAuIHsqB,UAAU,yBACVkgF,UAAU,sBACV,mBAAkBzD,GAClB,oBAAkB,cAlBhC,CA2BF,CA6EK0D,GACG,ICzOV,GAxBA,SAAwBnsG,GAAuB,IAAtB,MAAEC,GAAkBD,EAC3C,MAAMosG,EAAOnsG,EACT,0FACA,6FACJ,OACE0mE,GAAAA,GAAAC,cAAA,OAAKloE,MAAM,IAAI0tF,OAAO,KAAKpgE,UAAU,gBACnC26C,GAAAA,GAAAC,cAAA,YACED,GAAAA,GAAAC,cAAA,UAAQ1oE,EAAE,OAAOy9C,EAAE,SAASj9C,MAAM,OAAO0tF,OAAO,SAASigB,YAAY,oBAAoB7rG,GAAG,mBAC1FmmE,GAAAA,GAAAC,cAAA,YAAU0lC,GAAG,IAAIC,GAAG,cAAc/4F,OAAO,uBACzCmzD,GAAAA,GAAAC,cAAA,kBAAgB4lC,aAAa,IAAID,GAAG,qBAAqB/4F,OAAO,qBAChEmzD,GAAAA,GAAAC,cAAA,iBACExgE,OAAO,4EACPmmG,GAAG,uBAIT5lC,GAAAA,GAAAC,cAAA,KAAG6lC,KAAK,OAAO,YAAU,WACvB9lC,GAAAA,GAAAC,cAAA,QAAMsiC,EAAGkD,EAAMK,KAAK,OAAO1sG,OAAO,0BAClC4mE,GAAAA,GAAAC,cAAA,QAAMsiC,EAAGkD,EAAMK,KAAMxsG,EAAQ,UAAY,MAAO+rB,UAAU,YAIlE,E,yBCaA,MAsIA,IAAeo7C,EAAAA,GAAAA,KAtImBpnE,IAgB5B,IAhB6B,QACjCf,EAAO,eACPytG,EAAc,UACdC,EAAS,mBACTC,EAAkB,kBAClBC,EAAiB,0BACjBC,EAAyB,UACzBC,EAAS,aACTC,EAAY,SACZj/F,EAAQ,aACRk/F,EAAY,YACZC,EAAW,QACXrkC,EAAO,mBACPskC,EAAkB,cAClBC,EAAa,aACbC,GACDrtG,EACC,MAAM,iBAAEoa,IAAqByL,EAAAA,EAAAA,MACvBuiC,GAAO+f,EAAAA,GAAAA,MACNmlC,EAAaC,IAAiBn5B,EAAAA,GAAAA,KAErC,SAASo5B,EAAoB78C,GAC3BA,EAAEohB,kBAEF33D,EAAiB,CACfnb,QAASmpD,EAAK,iBAElB,CAOA,MAAMnrC,GAAQyrD,EAAAA,GAAAA,KAAQ,KACpB,IAAK4kC,EAAa,OAClB,MAAMG,GAAiBpJ,EAAAA,GAAAA,IAAsC,IAAfplG,EAAQkT,KAAai2C,EAAK1a,UAAMlqC,EAAW4kD,EAAKslD,YACxFC,EAAe1uG,EAAQ2uG,WACxBvJ,EAAAA,GAAAA,IAA2C,IAApBplG,EAAQgtG,SAAkB7jD,EAAK1a,UAAMlqC,EAAW4kD,EAAKslD,YAC3EG,EAAoB5uG,EAAQ4pD,cAC7Bw7C,EAAAA,GAAAA,IAC6D,KAA7DplG,EAAQ4pD,YAAYilD,WAAa7uG,EAAQ4pD,YAAY12C,MACtDi2C,EAAK1a,UACLlqC,EACA4kD,EAAKslD,YAGT,IAAInhG,EAAOkhG,EAUX,OATIE,IACFphG,GAAQ,KACRA,GAAQ67C,EAAK,mBAAmBl2B,QAAQ,SAAUy7E,IAEhDE,IACFthG,GAAQ,KACRA,GAAQ67C,EAAK,sBAAsBl2B,QAAQ,SAAU27E,IAGhDthG,CAAI,GAGV,CAAC+gG,EAAallD,EAAMnpD,EAASmpD,EAAKslD,aAE/Bv7F,GAAOu2D,EAAAA,GAAAA,KAAQ,KACnB,MAAMqlC,GAAOC,EAAAA,GAAAA,IAAW5lD,EAAqB,IAAfnpD,EAAQkT,MACtC,OAAK86F,GAIEgB,EAAAA,GAAAA,IAAoB7lD,EAAoD,KAA7CnpD,EAAQ4pD,aAAa12C,MAAQlT,EAAQkT,OAAc,GAH5E47F,CAGiF,GACzF,CAAC3lD,EAAMnpD,EAAQkT,KAAMlT,EAAQ4pD,aAAa12C,KAAM86F,IAE7CiB,GAAgB7lC,EAAAA,GAAAA,GACpB,cACAukC,GAAsB,mBACtB3tG,EAAQ4pD,aAAaslD,YAAc,eAGrC,OACExnC,GAAAA,GAAAC,cAAA,QACE56C,UAAWkiF,EACXplC,IAAK1gB,EAAK2gB,MAAQ,MAAQ,MAC1BF,QAASA,EACT,2BAECqkC,GACCvmC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,sBAAsB68C,QAASukC,IAC5CngB,EAAAA,GAAAA,GAAWigB,IAGfF,GACCrmC,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,WAAW1gB,UAAU,qBAAqB68C,QAASskC,IAE/D/2F,QAAQnX,EAAQqnB,aACfqgD,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,kBACb07C,EAAAA,GAAAA,IAAqBzoE,EAAQqnB,aAEhCqgD,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,mBAGbqgE,GAAa32F,QAAQy2F,GAAmB3lG,gBACxCy/D,GAAAA,GAAAC,cAAA,QAAMiC,QAxEZ,SAA0BlY,GACxBA,EAAEohB,kBACFs7B,GACF,EAqEuCrhF,UAAU,2BACzC26C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,mBACd26C,GAAAA,GAAAC,cAACo4B,GAAAA,EAAe,CAACzyF,MAAMm7D,EAAAA,GAAAA,IAAqBmlC,EAAmB3lG,kBAEjEy/D,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,kBAGd3+B,GACC44D,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,iBAAiB1gB,UAAU,mBAEvC2gF,GACChmC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,sBAAqBihE,EAAAA,GAAAA,GAAW0f,IAElDhmC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,eAAe/O,MAAOA,EAAO+/D,aAAcuwB,GACxDtuG,EAAQ4pD,aAAaslD,YACpBxnC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,mBAAmB68C,QAAS2kC,IACzCnJ,EAAAA,GAAAA,IAAkD,IAA3BplG,EAAQ4pD,YAAY12C,KAAai2C,EAAK1a,MAAM,IAEtEi5B,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,mBAAmB68C,QAAS2kC,GAAsBplD,EAAK,qBAG1EnpD,EAAQ2uG,UAAa,GAAExlD,EAAK,oBAC5Bj2C,GAEFu6F,GACC/lC,GAAAA,GAAAC,cAACwnC,GAAAA,EAAqB,CAAC1+D,OAAQg9D,IAEhCI,GAA6BA,IACzB,IC3EX,IAAe1lC,EAAAA,GAAAA,KAzEwBpnE,IAIjC,IAJkC,UACtC8kE,EAAS,QACT7lE,EAAO,OACPI,GACDW,EACC,MAAM,4BAAEquG,IAAgCxoF,EAAAA,EAAAA,MAElCuiC,GAAO+f,EAAAA,GAAAA,MACP,WACJ7mE,EAAU,QAAEkkE,EAAO,OAAEnqC,EAAM,SAAEoF,GAC3BqkC,EACEwpC,EAAsB,WAAXjzE,EACXkf,EAAyB,SAAXlf,QAAkC73B,IAAbi9B,EAEnC8tE,GAAavhC,EAAAA,GAAAA,IAAgB,KACjCqhC,EAA4B,CAAE7oC,UAASvrD,OAAQ5a,GAAS,IAGpDmvG,GAAa9lC,EAAAA,GAAAA,KAAQ,IACrBlD,EACE8oC,EAAiBhtG,EAAa,iCAAmC,iCACjEi5C,EAAoB,mCAEjBj5C,EAAa,2BAA6B,2BAE7CgtG,EAAiBhtG,EAAa,4BAA8B,4BAC5Di5C,EAAoB,8BAEjBj5C,EAAa,sBAAwB,uBAE7C,CAACi5C,EAAa+zD,EAAUhtG,EAAYkkE,IAEjCipC,GAAoB/lC,EAAAA,GAAAA,KAAQ,IACzB5D,EAAUrkC,UAAWiuE,EAAAA,GAAAA,IAAmBtmD,EAAM0c,EAAUrkC,eAAYj9B,GAC1E,CAAC4kD,EAAM0c,EAAUrkC,WAEdkuE,GAAgBX,EAAAA,GAAAA,IAAW5lD,EAAqB,IAAfnpD,EAAQkT,MAC/C,OACEw0D,GAAAA,GAAAC,cAAA,OAAK56C,UC5Dc,YD6DjB26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,UACL4c,MAAM,cACN71D,OAAK,EACLkiE,QAAM,EACNzM,QAAS0lC,EACTviF,UCnEmC,WDoEnCuyE,UAAW15B,EAAAA,GACXqE,UAAW9gB,EAAK9mD,EAAa,YAAc,aAE3CqlE,GAAAA,GAAAC,cAAA,KAAG56C,WAAWq8C,EAAAA,GAAAA,GAAe,OAAQ7C,EAAU,sBAAwB,iBAEzEmB,GAAAA,GAAAC,cAAA,OAAK56C,UCzEkD,YD0ErD26C,GAAAA,GAAAC,cAAA,OAAK56C,UC1EoE,YD0EzCo8B,EAAKomD,IACrC7nC,GAAAA,GAAAC,cAAA,OAAK56C,UC3EyK,YD4E5K26C,GAAAA,GAAAC,cAAA,KACE56C,WAAWq8C,EAAAA,GAAAA,GACT,OACA,mBC/EsF,WDiFtFimC,GCjFgI,WDkFhI/zD,GClFsJ,YDmFrJj5C,GCnF2G,cDsFhHqlE,GAAAA,GAAAC,cAAA,QAAM56C,UCtF4L,YDuF/LyiF,EAAoBrmD,EAAK,0BAA2B,CAACumD,EAAeF,IAAsBE,KAI7F,I,gBE3FV,MCiFA,IAAevnC,EAAAA,GAAAA,KAvDUpnE,IAMT,IANU,UACxBuQ,EAAS,OACTlR,EAAM,UACNiG,EAAS,WACThE,EAAU,SACVg+F,GACSt/F,EACT,MAAM,YAAEinC,IAAgBphB,EAAAA,EAAAA,MAClBuiC,GAAO+f,EAAAA,GAAAA,KAEPymC,GAAer+F,EAAUJ,SAEzBu3B,GAAaghC,EAAAA,GAAAA,KAAQ,KACzB,MAAMhkC,EAAQ0jB,EAAK,oBAAqB73C,EAAUs+F,aAElD,OAAOC,EAAAA,GAAAA,GACLpqE,EAAOqqE,EAAAA,IAAwBpoC,GAAAA,GAAAC,cAAC8O,GAAAA,EAAQ,CAAC1pD,UD1C2C,WC0CnB1rB,KAAK,OAAO+rD,KAAK,aACnF,GACA,CAACjE,EAAM73C,IAEJimF,GAAcxpB,EAAAA,GAAAA,IAAiBrc,IACnC1pB,EAAY,CACV3mC,KAAM,UACNjB,SACAiG,eAEFwxF,EAAAA,GAAAA,GAAUnmC,EAAE,IAGd,OACEgW,GAAAA,GAAAC,cAAA,OACE56C,UDzDiB,WC0DjB68C,QAAS+lC,EAAcpY,OAAchzF,GAEpC87F,EACAsP,GACCjoC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UD/DoC,WCgEpCi9C,MAAM,OACN5c,KAAK,OACLysB,OAAK,EACLk2B,MAAI,GAEJroC,GAAAA,GAAAC,cAAA,QAAM56C,UDrEkG,YCqEnE0b,IAGxCn3B,EAAUJ,UACTw2D,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe,4BDzEiC,aC0E7D/mE,GAAaqmG,EAAAA,GAAAA,GAAep3F,EAAUs+F,YAAaI,EAAAA,KAAuB7mD,EAAK,6BAGhF,I,uCCeV,SAAS8mD,GAAcxqE,EAAeyqE,GACpC,OAAOA,EAAQ,GAAMzqE,EAAQyqE,EAAS,KAAKC,UAAY,CACzD,CAEA,SAzEiCpvG,IAO3B,IAP4B,OAChCqvG,EAAM,YACNC,EAAW,YACXC,EAAW,eACXC,EAAc,eACdC,EAAc,cACdC,GACD1vG,EACC,MAAMwT,EAAS87F,GAAeA,EAAY7tG,MAAMC,GAAMA,EAAE4a,SAAW+yF,EAAO/yF,SACpEqzF,EAA0C,IAA1BF,EAAe3vG,SAA2D,IAA3C2vG,EAAep8E,QAAQg8E,EAAO/yF,QAC7EszF,EAAYH,EAAe3vG,OAAS,GAAK6vG,GAAmBn8F,GAAQq8F,SACpEC,EAAgBt8F,EAAS07F,GAAc17F,EAAOu8F,YAAaR,GAAe,GAAK,GAC9ES,EAAcC,IAAmB/nC,EAAAA,GAAAA,IAASwnC,EAAgB,EAAII,GAC/DI,EAAY18F,EAAS07F,GAAc17F,EAAOu8F,YAAaP,GAAkB,GAAK,EAC9EW,EAA0BH,IAAiBF,EAQjD,IANAtoC,EAAAA,GAAAA,KAAU,KACJkoC,GACFO,EAAgBH,EAClB,GACC,CAACJ,EAAeI,KAEdR,IAAgB97F,EACnB,OAGF,MAAM48F,EAAa,UAASF,wBAAgCC,EAA0B,EAAI,KAE1F,OACExpC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,aAAa88C,IAAI,OAC9BnC,GAAAA,GAAAC,cAAA,OAAK56C,UAAY,sBAAsC,QAAlB8jF,EAA0B,cAAgB,KAC5EA,EAAc,IACdF,GACCjpC,GAAAA,GAAAC,cAAA,QAAM56C,WAAWq8C,EAAAA,GAAAA,GACf,sBACCsnC,GAAiB,QAClBD,GAAiB,YAGjB/oC,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAMijE,EAAgB,QAAU,QAAS3jF,UAAU,uBAI/D26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,qBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,mBAAmB88C,IAAI,SACnC04B,EAAAA,GAAAA,GAAuB,CACtBj1F,KAAM8iG,EAAO9iG,KAAKA,KAClB2L,SAAUm3F,EAAO9iG,KAAK2L,YAG1ByuD,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe,qBAAsBunC,IAAaD,GAAiB,UAChFD,GACC/oC,GAAAA,GAAAC,cAAA,OACE56C,UAAU,YACVqgE,MAAQ8jB,EAAkF,GAAxD,uDAElCxpC,GAAAA,GAAAC,cAAA,QAAMsiC,EAAE,oCAGZviC,GAAAA,GAAAC,cAAA,OACE56C,UAAU,mBACVqgE,MAAO+jB,MAIT,EC5CJ3H,GAAsBC,GAAmB9pG,KAAK+pG,GAgTpD,SAAS52B,GAAgBphB,GACvBA,EAAEohB,iBACJ,CAEA,UAAe3K,EAAAA,GAAAA,KAhTYpnE,IAMrB,IANsB,QAC1Bf,EAAO,KACPsL,EAAI,8BACJstF,EAA6B,8BAC7BwY,EAA6B,WAC7BC,GACDtwG,EACC,MAAM,YACJqF,EAAW,gBAAEkrG,EAAe,gBAAE14D,EAAe,iBAAEz9B,IAC7CyL,EAAAA,EAAAA,OAEIrlB,GAAI8E,EAAS,OAAEjG,GAAWJ,GAC5B,QAAEuxG,EAAO,QAAEhxG,GAAY+K,GACtBkmG,EAAcC,IAAmBxoC,EAAAA,GAAAA,KAAkB,IACnDyoC,EAAeC,IAAoB1oC,EAAAA,GAAAA,IAAmB,KACtD2oC,EAAcC,IAAmB5oC,EAAAA,GAAAA,KAAkB,IACnD6oC,EAAaC,IAAkB9oC,EAAAA,GAAAA,KACnCsoC,EAAQS,QAAUT,EAAQU,WAAaV,EAAQU,UAAY,EACxDtyG,KAAKC,IAAI2xG,EAAQU,WAAY3zE,EAAAA,GAAAA,MAAiBizE,EAAQO,aACtD,GAGA3H,GAAel+B,EAAAA,GAAAA,IAAuB,MAEtCimC,GAAiBjmC,EAAAA,GAAAA,IAAyB,OACxC1rE,QAAS8vG,EAAW,YAAEC,GAAgB/vG,EACxC4xG,EAAW9B,GAAeA,EAAYh2E,MAAM53B,GAAMA,EAAEmuG,WACpDwB,GAAWb,EAAQS,SAAWG,EAC9BE,GAAiBD,GAAWb,EAAQe,UAAYroG,OAAO1J,EAAQ+vG,aAAe,EAC9EiC,EAAaH,GAAWb,EAAQiB,eAChCC,EAAiBlyG,EAAQkyG,eACzBlC,EAAiBF,EAAc1wG,KAAKE,OAAOwwG,EAAY3iG,KAAKjL,GAAMA,EAAEquG,eAAgBR,EACpFE,GAAiB/mC,EAAAA,GAAAA,KAAQ,IACtB4mC,GAAavvG,QAAQ2B,GAAMA,EAAEiwG,YAAWhlG,KAAKjL,GAAMA,EAAE4a,UAAW,IACtE,CAACgzF,IACEsC,GAAUlpC,EAAAA,GAAAA,KAAQ,IAAM8nC,EAAQoB,QAAQjlG,KAAK/J,IAAC,CAClDywE,OAAOmuB,EAAAA,GAAAA,GAAuB,CAC5Bj1F,KAAM3J,EAAE2J,KAAKA,KACb2L,SAAUtV,EAAE2J,KAAK2L,SACjB2/E,gCACAwY,kCAEF3rE,MAAO9hC,EAAE0Z,OACTu1F,OAAQz7F,QAAQo6F,EAAQsB,MAAQtB,EAAQO,aAAeA,GAAe,QACnE,CACHA,EAAalZ,EAA+BwY,EAC5CG,EAAQoB,QAASpB,EAAQO,YAAaP,EAAQsB,QAGhDtqC,EAAAA,GAAAA,KAAU,KACR,MAAMuqC,EAASxnG,EAAK/K,QAAQA,SAASiC,MAAM+R,GAAWA,EAAOq8F,WACzDY,GAAgBsB,IACdA,EAAOJ,WACT95D,EAAgB,CAAC,GAEnB64D,GAAgB,GAClB,GACC,CAACD,EAAclmG,EAAK/K,QAAQA,QAASq4C,KAExCuzD,EAAAA,GAAAA,KAAgB,KAId,GAHI2F,EAAc,GAChBvnG,YAAW,IAAMwnG,EAAeD,EAAc,IAhEtB,MAkErBI,EAAejlF,QAAS,OAEzB6kF,GAAe,GACjB3H,EAAal9E,QAASwqE,UAAUnuF,IAAI,YAGtC,MAAM0iG,GAAqBuF,EAAQO,YAAeA,GAAeP,EAAQO,YAAgBtI,GACzF0I,EAAejlF,QAAQurE,aAAa,oBAAsB,IAAGwT,IAAmB,GAC/E,CAAC8F,EAAaP,EAAQO,eAEzBvpC,EAAAA,GAAAA,KAAU,KACJgpC,EAAQsB,OAASf,GAAe,GAAMK,IAAaZ,EAAQS,SAC7D5rG,EAAY,CAAEhG,SAAQiG,aACxB,GACC,CAACjG,EAAQ0xG,EAAaK,EAAU/rG,EAAaC,EAAWkrG,EAAQS,OAAQT,EAAQsB,QAGnFtqC,EAAAA,GAAAA,KAAU,KACR,IAAIwqC,EAQJ,OANIxB,EAAQsB,OAAStB,EAAQS,QAAUT,EAAQO,aAAeP,EAAQO,YAAc,IAClFiB,EAAQ/uF,OAAOzZ,YAAW,KACxBnE,EAAY,CAAEhG,SAAQiG,aAAY,GACX,IAAtBkrG,EAAQO,cAGN,KACDiB,GACF/uF,OAAO0C,aAAaqsF,EACtB,CACD,GACA,CAACX,EAAShyG,EAAQgG,EAAaC,EAAWkrG,EAAQO,YAAaP,EAAQS,OAAQT,EAAQsB,OAE1F,MAAMG,GAAevpC,EAAAA,GAAAA,KAAQ,KAE3B,MAAMzqE,GAASwL,EAAAA,EAAAA,MACf,OAAOioG,EAAiBA,EAAer5F,QAAO,CAAC7E,EAAmBhT,KAChE,MAAMgc,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQuC,GAKhC,OAJIgc,GACFhJ,EAAO1J,KAAK0S,GAGPhJ,CAAM,GACZ,IAAM,EAAE,GACV,CAACk+F,IAEEQ,GAAoBllC,EAAAA,GAAAA,IAAiB1wD,IACzCs0F,EAAiB,CAACt0F,IAClBo0F,GAAgB,GAChBI,GAAgB,GAChBR,EAAW,CAACh0F,GAAQ,IAGhB61F,GAAuBnlC,EAAAA,GAAAA,IAAiBl9D,IAC5C8gG,EAAiB9gG,EAAQ,IAGrBsiG,GAAkBplC,EAAAA,GAAAA,IAAgB,KACtC0jC,GAAgB,GAChBI,GAAgB,GAChBR,EAAWK,EAAc,IAGrB0B,GAAyBrlC,EAAAA,GAAAA,IAAgB,KAC7CujC,EAAgB,CAAElxG,SAAQiG,aAAY,IAGlCgtG,GAAetlC,EAAAA,GAAAA,IAAgB,KACnC5yD,EAAiB,CACfhN,SAASpL,EAAAA,EAAAA,IAAc/C,GACvBA,SAASuiG,EAAAA,GAAAA,GAAuB,CAAEj1F,KAAMhC,EAAK/K,QAAQ+yG,SAAWr6F,SAAU3N,EAAK/K,QAAQgzG,mBACvF/xE,SA5IoB,IA6IpBgyE,kBA9IwB,0BA+IxB,KAIJjrC,EAAAA,GAAAA,KAAU,KACJqpC,GAAgBO,GAAYZ,EAAQsB,MAAQtyG,EAAQA,SAAW+K,EAAK/K,QAAQ+yG,WACxD/yG,EAAQA,QAAQiC,MAAMC,GAAMA,EAAEmuG,UAAYnuG,EAAEiwG,aAEhEW,IAEJ,GACC,CAAClB,EAAUP,EAAcrxG,EAAQA,QAASgxG,EAAQsB,KAAMvnG,EAAK/K,QAAQ+yG,WAExE,MAAMnqD,GAAO+f,EAAAA,GAAAA,KA6Bb,OACExB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,OAAO88C,IAAK1gB,EAAK2gB,MAAQ,OAAS,OAC/CpC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBACZw1E,EAAAA,GAAAA,GAAuB,CACtBj1F,KAAMikG,EAAQkC,SAASnmG,KACvB2L,SAAUs4F,EAAQkC,SAASx6F,SAC3B2/E,gCACAwY,mCAGJ1pC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,aACZo8B,EAsFT,SAA2BooD,GAEzB,YAAgC,IAArBA,EAAQe,SAvRR,IA2RPf,EAAQS,OACH,eAGLT,EAAQsB,KACHtB,EAAQe,SAAW,WAAa,oBAGlCf,EAAQe,SAAW,aAAe,eAC3C,CArGcoB,CAAkBnC,IAtB1ByB,EAAanyG,OAAS,GACpB6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,sBACb26C,GAAAA,GAAAC,cAACgsC,GAAAA,EAAU,CACTvmD,KAAK,QACLlJ,MAAO8uD,KAoBVlB,EAAc,GAAKM,GAClB1qC,GAAAA,GAAAC,cAAA,OAAKuE,IAAKi+B,EAAcp9E,UAAU,kBAChC26C,GAAAA,GAAAC,cAAA,aAAO0hC,EAAAA,GAAAA,IAAoByI,IAC3BpqC,GAAAA,GAAAC,cAAA,OAAKloE,MAAM,OAAO0tF,OAAO,QACvBzlB,GAAAA,GAAAC,cAAA,UACEuE,IAAKgmC,EACLnI,GAAG,IACHC,GAAG,IACHvnG,EA5MK,EA6MLsqB,UAAU,0BACVkgF,UAAU,oBACV,mBAAkBzD,GAClB,oBAAkB,QAKzB+H,EAAQsB,MAAQvnG,EAAK/K,QAAQ+yG,WAAalB,GACzC1qC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLi5C,KAAK,OACL4c,MAAM,cACNj9C,UAAU,iBACV68C,QAASypC,EACTppC,UAAU,iBAEVvC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAIlBqlF,GACC1qC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eAAe68C,QAASkJ,IACpCy/B,EAEG7qC,GAAAA,GAAAC,cAACisC,GAAAA,EAAa,CACZ/iG,QAAS8hG,EACT13B,SAAUi4B,EACV5T,SAAUt/F,EAAQqE,aAAemtG,EACjCqC,eAAgBrC,EAAeE,OAAgBntG,EAC/CuvG,SAAO,IAITpsC,GAAAA,GAAAC,cAACosC,GAAAA,EAAU,CACTtmE,KAAO,QAAOpnC,IACdwK,QAAS8hG,EACT13B,SAAUg4B,EACV3T,SAAUt/F,EAAQqE,aAAemtG,EACjCwC,cAAexC,EAAeE,EAAc,QAAKntG,MAKzD6tG,GACA1qC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBACZwkF,EAAQoB,QAAQjlG,KA/FzB,SAA4B0iG,GAC1B,OACE1oC,GAAAA,GAAAC,cAACssC,GAAU,CACT7yE,IAAKgvE,EAAO/yF,OACZozF,cAAemB,IAAiBQ,EAChChC,OAAQA,EACRC,YAAaA,EACbC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAsFM6B,IAAkBE,GAClB7qC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,qBA0CvB,SAAgCo8B,EAAiBthB,EAA0BpzB,GACzE,OAAKA,EAIE00C,EAAKthB,EAAS,SAAW,OAAQpzB,EAAO,KAHtC00C,EAAKthB,EAAS,4BAA8B,kCAIvD,CAhD4CqsE,CAAuB/qD,EAAMooD,EAAQsB,KAAMtyG,EAAQ+vG,cAExFiC,GACC7qC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLw3B,QAAM,EACNjC,SAAmC,IAAzBoS,EAAc7wG,OACxBusD,KAAK,OACLwc,QAASupC,GAERhqD,EAAK,oBAGTkpD,GACC3qC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLw3B,QAAM,EACNn0C,KAAK,OACLwc,QAASwpC,GAERjqD,EAAK,oBAGN,I,mDCxRV,MAAMgrD,GAAY,IAAMz1G,EAAAA,EAClB01G,GAAc,IAAM11G,EAAAA,EACpB21G,GAAoB59F,EAAAA,IAAUmrB,EAAAA,GAAc,EAAI,EAChD0yE,GAAW79F,EAAAA,IAAUmrB,EAAAA,GAAc,EAAI,EA8F7C,IAAeumC,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAMyP,KAAsB,IAApB,YAAExL,GAAawL,EACtB,MAAM,gBAAEkwC,IAAoBz/C,EAAAA,EAAAA,KAAeF,GAErCq/F,GAAcx7F,EAAAA,EAAAA,KAA+B7D,EAAQ,mBAE3D,MAAO,CACL2/C,gBAAiBA,IAAkB17C,GACnCo7F,cACD,GATe5zB,EA5FM1pE,IAUG,IAVF,YACzBkC,EAAW,SACX7B,EAAQ,UACR2rB,EAAS,KACTqgC,EAAO+mD,GAAS,WAChBI,EAAaH,GAAW,gBACxBz1D,EAAe,YACfj8C,EAAW,YACX27F,EAAW,oBACX9C,GACsBx6F,EACtB,MAAM,mBAAEm9C,IAAuBt3B,EAAAA,EAAAA,MAGzBslD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7BuoC,GAAYvoC,EAAAA,GAAAA,IAAuB,OAElCwoC,EAAYC,IAAiBzrC,EAAAA,GAAAA,IAAmB,IAEjD4vB,GAAiBC,EAAAA,GAAAA,IAAkB5sB,EAAKqvB,GAExCoZ,GAAiBlrC,EAAAA,GAAAA,KAAQ,IAC7B9qB,GAAiBn8C,MAAMo8C,IAAW9rB,EAAAA,EAAAA,KAAe8rB,EAAQx9C,MACxD,CAACu9C,EAAiBv9C,IAEfwzG,EAAmBz9F,QACvBknF,GAAesW,GAEXE,EAAoBJ,EAAW5zG,OAASwzG,IAE9Ct+B,EAAAA,GAAAA,IAAsBrpE,IAAuB,IAArBooG,GAAgBpoG,EACjCkoG,GAKAlyG,GAAeA,IAAgBoyG,GAAmB,IAInDD,GACFH,GAAepS,GAAS,IAAIA,EAAM5gG,KAAKC,SATvC+yG,EAAc,GAUhB,GACC,CAAChyG,EAAamyG,EAAmBD,IAEpC,MACEzoC,aAAc4oC,IACZxoC,EAAAA,GAAAA,GAAkB,CACpBL,IAAKsoC,EACLtlC,mBAAmB,EACnB75B,OAAQu/D,EACR7nF,UAAW,OACXy/C,kBAAkB,IAGdwoC,GAAcjnC,EAAAA,GAAAA,IAAgB,KAClC,MAAMknC,EAAgBR,EAAW3+F,MAAM,GACvC4+F,EAAcO,GACTA,EAAcp0G,QACjBq9C,EAAmB,CAAEj7C,cAAa7B,YACpC,IAGI8zG,GAAgB9rC,EAAAA,GAAAA,GACpB4gB,GAAAA,EAAOgf,KACP+L,GAAsB/qB,GAAAA,EAAOmrB,UAC7BpoF,GAGF,OACE26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAWmoF,EAAehpC,IAAKA,EAAKkpC,eAAa,GACpD1tC,GAAAA,GAAAC,cAAC8O,GAAAA,EAAQ,CAACr1C,IAAI,OAAO//B,KAAK,OAAO+rD,KAAK,WAAWggC,MAAQ,UAAShgC,gBAAmBA,QACpF2nD,GAAsBN,EAAW/mG,KAAKnM,GACrCmmE,GAAAA,GAAAC,cAAC0tC,GAAAA,EAAY,CACXj0E,IAAK7/B,EACL2qE,IAAKsoC,EACLznF,UAAWi9D,GAAAA,EAAO3tC,OAClB+Q,KAAMmnD,EACN5P,OAAQC,GAAAA,EAAe0Q,mBACvB1X,KAAM/E,EACNkM,QAAM,EACN3F,aAAW,EACX0F,gBAAc,EACd7F,QAASqV,GACTiB,QAASP,MAGT,K,wCCvGV,MAAMQ,GAAgB,KAAO92G,EAAAA,EAkB7B,SAAS+2G,GAAqBz2G,GAC5B,OAAOmY,QAAQnY,EAAO8xC,MACxB,CAEA,MA4KA,IAAeq3B,EAAAA,GAAAA,KA5KQpnE,IAaP,IAbQ,SACtBK,EAAQ,YACR6B,EAAW,aACX+gG,EAAY,eACZ0R,EAAc,UACd3oF,EAAS,gBACT4oF,EAAe,eACfC,EAAc,OACdx1G,EAAM,UACNiG,EAAS,oBACTk1F,EAAmB,QACnB3xB,EAAO,YACPisC,GACS90G,EACT,MAAM,sBACJgwC,EAAqB,wBACrBwN,EAAuB,sBACvBu3D,EAAqB,YACrBC,IACEnvF,EAAAA,EAAAA,MAEEslD,GAAMD,EAAAA,GAAAA,IAA0B,MAEhC+pC,GAAa/pC,EAAAA,GAAAA,IAAwB,MACrCgqC,GAAehqC,EAAAA,GAAAA,MAEfiqC,EAAoC,SAA3B90G,EAASA,SAASC,KAE3B80G,GAAiBC,EAAAA,GAAAA,GAAYX,IAE7BY,GAAkBtoC,EAAAA,GAAAA,IAAgB,WAAe,IAAdt5D,EAAKnQ,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC/CuxG,IAAcphG,EAChB,IAEM8iF,GAAcxpB,EAAAA,GAAAA,IAAiBrc,IACnC,GAA+B,SAA3BtwD,EAASA,SAASC,KAIpB,OAHAqwD,EAAEohB,uBACFujC,IAKFzsC,IAAUxoE,EAASA,SAAS,KAGxB,kBACJinF,EAAiB,wBACjBoN,EAAuB,kBACvBnN,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBvc,EAAgC,SAA3B9qE,EAASA,SAASC,UAAiBkD,OAAWA,OAAWA,GAAW,IAEpGgkE,EAAAA,GAAAA,KAAU,KACJ8f,IACFytB,EAAsB,CACpB11G,SACAiG,cAGFkiF,IACAC,IACF,GACC,CAACD,EAAwBC,EAAuBH,EAAmBjoF,EAAQiG,KAE9E0vE,EAAAA,GAAAA,IAAsBrpE,IAAoB,IAAlB4pG,GAAa5pG,EACnC,MAAM8sC,EAASp4C,EAASsB,YAClB+kC,EAASykC,EAAIj/C,QACnB,IAAKusB,IAAW/R,GAAU+R,IAAW88D,GAAc5zG,YAAa,OAEhE,GAAIyzG,KAAoBP,GAAkBp8D,EAASo8D,GAYjD,OAXA7kE,EAAsB,CACpB0N,eAAgB,CACdr+C,SACAiG,YACAmzC,iBAGJ+E,EAAwB,CACtBn+C,SACAiG,cAKJ,GAAIjF,EAASsB,YAAa,CACxB,MAAM,KAAE6zG,EAAI,IAAEC,GAAQ/uE,EAAOsvD,wBACvBjjC,EAASyiD,EAAO9uE,EAAOgvE,YAAc,EACrC1iD,EAASyiD,EAAM/uE,EAAOivE,aAAe,EAC3CX,EAAY,CAAEjiD,SAAQC,UACxB,CAEA,MAAM4iD,EAAe1sG,OAAO2sG,iBAAiBnvE,GAAQovE,QAAU,EAC/DZ,EAAahpF,SAAS6pF,SAEtBb,EAAahpF,QAAUwa,EAAOsvE,QAAQ,CACpC,CAAEF,MAAOF,GACT,CAAEE,MAAOl3G,KAAKC,IAAmB,IAAf+2G,EAtHN,GAsHsCx3F,OAAQ,IAC1D,CAAE03F,MAAO,IACR,CACDr1E,SAAU,IAAMm1E,EAChBK,OAAQ,YACR,GACD,CAAC51G,EAAUw0G,EAAgBO,EAAgB/1G,EAAQiG,IAEtD,MAAM4wG,GAAaxwB,EAAAA,GAAAA,GAAYrlF,EAASsB,cAGtCypE,aAAc+qC,IACZ3qC,EAAAA,GAAAA,GAAkB,CACpBl3B,OAAQl+B,QAAQ/V,EAASsB,aACzBwpE,IAAK8pC,EACLjpF,UAAW,OACXy/C,kBAAkB,IAGpB,OACE9E,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,WAAWq8C,EAAAA,GAAAA,GACT4gB,GAAAA,EAAOgf,KACPhF,GAAgBha,GAAAA,EAAOmtB,IACvBjB,GAAUlsB,GAAAA,EAAOotB,MACjBC,EAAAA,EAAAA,KAAiBj2G,IAAa4oF,GAAAA,EAAO8oB,QACrCuE,EAAAA,EAAAA,KAAiBj2G,IAAau0G,EAC9B5oF,GAEFqgC,KAAK,OACL8e,IAAKA,EACLwtB,YAAajE,EACb/M,cAAeJ,EACf1e,QAAS2tB,GAEmB,SAA3Bn2F,EAASA,SAASC,KACjBqmE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAC2vC,GAAAA,EAAQ,CAACC,OAAO,WACjB7vC,GAAAA,GAAAC,cAAC6vC,GAAiB,CAChBzqF,UAAWi9D,GAAAA,EAAOytB,cAClBx0G,YAAaA,EACb7B,SAAUA,EAASA,SACnBgsD,KAAMooD,GACN9yG,YAAatB,EAASsB,YACtB64F,oBAAqBA,IAEtB2b,GACCxvC,GAAAA,GAAAC,cAACo4B,GAAAA,EAAe,CACd7zB,IAAK8pC,EACL1oG,KAAO,KAAGm7D,EAAAA,GAAAA,IAAqBrnE,EAASsB,aAAeu0G,KACvDlqF,UAAWi9D,GAAAA,EAAO0tB,eAKxBhwC,GAAAA,GAAAC,cAACgwC,GAAAA,EAAqB,CACpB5qF,UAAWi9D,GAAAA,EAAOytB,cAClBx0G,YAAaA,EACb7B,SAAUA,EAASA,SACnBgsD,KAAMooD,GACNja,oBAAqBA,IAGxBma,GAAgB70G,OACf6mE,GAAAA,GAAAC,cAACgsC,GAAAA,EAAU,CAACvmD,KAAK,OAAOlJ,MAAOwxD,IAE/BhuC,GAAAA,GAAAC,cAACo4B,GAAAA,EAAe,CACdzyF,MAAMm7D,EAAAA,GAAAA,IAAqBrnE,EAASqT,OAASrT,EAASsB,aAAe,IACrEqqB,UAAWi9D,GAAAA,EAAO4tB,UAGf,I,gBCnLb,MA0LA,IAAezvC,EAAAA,GAAAA,KAvLiBpnE,IAW1B,IAX2B,QAC/Bf,EAAO,SACPgH,EAAQ,UACR6wG,EAAS,SACT/nB,EAAQ,aACRgoB,EAAY,oBACZvc,EAAmB,iBACnBwc,EAAgB,qBAChB93F,EAAoB,KACpBw/B,EAAI,eACJm2D,GACD70G,EACC,MAAM,eACJm8C,EAAc,qBACd86D,EAAoB,mBACpB3lF,EAAkB,oBAClB4lF,EAAmB,iBACnB/1F,EAAgB,wBAChBq8B,EAAuB,iBACvBpjC,IACEyL,EAAAA,EAAAA,MACEuiC,GAAO+f,EAAAA,GAAAA,MAEP,QAAE3oE,EAAO,QAAEC,EAAO,gBAAEI,GAAoBZ,EAAQM,UAEhDqvB,GAAa85C,EAAAA,GAAAA,KAAQ,IACzBlpE,EAAQ6Y,QAAO,CAACC,EAAKjY,IAAaiY,EAAMjY,EAASqT,OAAO,IACvD,CAAClU,IAEE23G,GAA8BzuC,EAAAA,GAAAA,KAAQ,KAC1C,MAAMzqE,GAASwL,EAAAA,EAAAA,MAEf,OAAO5J,GAAiBwY,QAAO,CAACC,EAAK8+F,KACnC,MAAM,SAAE/2G,EAAQ,OAAEH,GAAWk3G,EACvB/2E,GAAMue,EAAAA,EAAAA,KAAev+C,GACrBmc,GAAOgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GAEhC,IAAKsc,EAAM,OAAOlE,EAElB,MAAM6qC,EAAQ7qC,EAAI+nB,IAAQ,GAG1B,OAFA8iB,EAAMr5C,KAAK0S,GACXlE,EAAI+nB,GAAO8iB,EACJ7qC,CAAG,GACT,CAAC,EAAuC,GAC1C,CAACzY,IAEEymE,GAAQoC,EAAAA,GAAAA,KAAQ,KACpB,MAAM3mE,GAAaC,EAAAA,EAAAA,IAAc/C,GACjC,OAAOO,EAAQmN,KAAKtM,IAClB,MAAMg3G,GAAcz4D,EAAAA,EAAAA,KAAev+C,EAASA,UACtCs0G,EAAiBwC,IAA8BE,GAC/CC,EAA2B1oF,EAtDZ,GAsD+CooF,EAC9Dr4D,EAAMl/C,EAAUi/C,IAAO24D,QAAe7zG,EAE5C,MAAO,CACLnD,WACAg3G,cACAt1G,aACA4yG,eAAiB2C,OAA4C9zG,EAAjBmxG,EAC5C9E,UAAUyG,EAAAA,EAAAA,KAAiBj2G,GAC3Bs+C,MACD,GACD,GACD,CAAC1/C,EAAS+3G,EAAkBG,EAA6B33G,EAASC,EAASi/C,EAAM9vB,IAE9E4nE,GAAcxpB,EAAAA,GAAAA,IAAiB3sE,IACnC,GAAIZ,EACF,OAAKyf,GAOLoS,EAAmB,CAAEjyB,OAAQJ,EAAQI,OAAQ4G,WAAUlF,OAAQ,CAAEwwB,SAAUlxB,UAC3E62G,EAAoB,CAAE73G,OAAQJ,EAAQI,OAAQ4G,mBAP5Ckb,EAAiB,CACfC,eAAgB,eAUtB+6B,EAAe,CACb98C,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,GACnBH,YACA,IAGEk3G,GAAiB7uC,EAAAA,GAAAA,KAAQ,IAAMlpE,EAAQiC,MAAMC,GAA0B,SAApBA,EAAErB,SAASC,QAAkBqB,aAAe,GAAG,CAACnC,IAEnG81G,GAAkBtoC,EAAAA,GAAAA,IAAiBt5D,IACvCujG,EAAqB,CACnB53G,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,GACnBkT,SACA,KAGJ8zD,EAAAA,GAAAA,KAAU,KACH+vC,GAELn9F,EAAiB,CACfhN,SAASpL,EAAAA,EAAAA,IAAc/C,GACvBge,MAAOmrC,EAAK,kBACZnpD,QAASmpD,EAAK,gBAAiBmvD,GAC/B18C,WAAYzS,EAAK,iBACjBovD,aAAcD,EAAexrF,WAC7BrjB,OAAQ,CACNA,OAAQ,0BACRqN,QAAS,CAAE1W,OAAQJ,EAAQI,OAAQiG,UAAWrG,EAAQuB,KAExDi3G,cAAe,CACb/uG,OAAQ,mBACRqN,QAAS,CAAE1W,OAAQJ,EAAQI,OAAQiG,UAAWrG,EAAQuB,KAExDigC,SAnHkB,IAoHlBi3E,iBAAiB,EACjBC,qBAAqB,EACrB78C,KAAM,QACN,GACD,CAAC1S,EAAMnpD,EAASs4G,IAEnB,MAAMK,GAAuB5qC,EAAAA,GAAAA,IAAiB3sE,IAC5C87C,EAAe,CACb98C,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,GACnBH,YACA,IAWJ,OAPAw3G,EAAAA,GAAAA,IAAc,IAAM,KAClBr6D,EAAwB,CACtBn+C,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,IACnB,IAIFmmE,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,YAAayuC,GAAa,cACpDzqB,MAAO0C,EAAY,cAAaA,WAAevrF,EAC/CslE,IAAK1gB,EAAK2gB,MAAQ,MAAQ,OAEzBzC,EAAM35D,KAAIhB,IAAA,IAAC,SACVtL,EAAQ,eAAEs0G,EAAc,WAAE5yG,EAAU,YAAEs1G,EAAW,SAAExH,EAAQ,IAAElxD,GAC9DhzC,EAAA,OACClM,EACEknE,GAAAA,GAAAC,cAACkxC,GAAAA,EAAc,CACbz3E,IAAKg3E,EACLrrF,UAAU,mBACV4oF,gBAAgB,SAChB1yG,YAAaH,EACbkhG,aAAchkG,EAAQqC,WACtBuuG,SAAUA,EACVxvG,SAAUA,EAASA,SACnBs+C,IAAKA,EACLo5D,gBAAiB74F,EACjB2pD,QAAS2tB,EACTwhB,SAAUJ,EACVpd,oBAAqBA,IAGvB7zB,GAAAA,GAAAC,cAACqxC,GAAc,CACb53E,IAAKg3E,EACLh4G,OAAQJ,EAAQI,OAChBiG,UAAWrG,EAAQuB,GACnBwrB,UAAU,mBACV4oF,gBAAgB,SAChB1yG,YAAaH,EACbkhG,aAAchkG,EAAQqC,WACtBqzG,eAAgBA,EAChBt0G,SAAUA,EACVwoE,QAAS2tB,EACTse,YAAaQ,EACb9a,oBAAqBA,EACrBqa,eAAgBA,GAEnB,IAEFkC,EACG,I,mDC9NV,SAAmE,WCqKnE,GA9H8B/2G,IAGxB,IAHyB,QAC7Bf,EAAO,oBAAEu7F,EAAmB,8BAAE6V,EAA6B,WAAEjlB,EAAU,iBACvEyoB,EAAgB,WAAEqE,EAAU,aAAEC,GAC/Bn4G,EACC,MAAM,iBAAEoa,EAAgB,eAAEg+F,IAAmBvyF,EAAAA,EAAAA,MAEvCuiC,GAAO+f,EAAAA,GAAAA,MACP,SAAEwM,IAAaC,EAAAA,EAAAA,MAGfzJ,GAAMD,EAAAA,GAAAA,IAAuB,MAG7BuoC,GAAYvoC,EAAAA,GAAAA,IAAuB,MAEnCnnE,EAAU9E,EAAQ0E,QAAQI,SAC1B,eAAEokB,EAAc,QAAEq9C,EAAO,UAAE6yC,GAAct0G,EACzCu0G,GAAcr5G,EAAQqC,WAEtB2oG,EAAYlmG,EAAQS,yBAAsBhB,GAC9C+0G,EAAAA,EAAAA,KAAoBx0G,EAASyhE,IAAYgzC,EAAAA,GAAoB,YAAc,UAGvEC,GAAU1gB,EAAAA,GAAAA,IAAkB5sB,EAAKqvB,GACjC9N,GAAUqL,EAAAA,GAAAA,IAAkB5sB,EAAKklC,GACjCqI,EAAmB,UAAS30G,EAAQvD,YACpCm4G,GAAgBjtB,EAAAA,GAAAA,GACpBgtB,GACCD,IAAYJ,IAAcH,EAC3Bp9D,EAAAA,GAAeC,UAEV69D,EAAiBC,EAAoBC,IAAqB1kC,EAAAA,GAAAA,KAE3D2kC,GAAoB/rC,EAAAA,GAAAA,IAAgB,KACxC8rC,IACAX,KAAgB,KAGlB3wC,EAAAA,GAAAA,KAAU,KACJ6wC,GAAaH,GAAcxrB,GAAWmnB,GACxCgF,GACF,GACC,CAACR,EAAW3rB,EAASmnB,EAAkBgF,EAAoBX,IAE9D,MAAMlE,EAAqBqE,GAAaH,GAAcS,GAAiBC,GACvEI,EAAAA,GAAAA,GAAmB,CACjBC,UAAW9tC,EACX+tC,WAAYzF,EACZ6E,aACA7oC,YAAaukC,IAGf,MAAMmF,GAAYnsC,EAAAA,GAAAA,IAAgB,KAChCorC,EAAe,CACbjwF,eAAgBpkB,EAAQokB,gBACxB,IAGEquE,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClC,GAAIqrC,EAAW,CACb,GAAIO,IAAoBV,EAWtB,YAVA99F,EAAiB,CACfnb,QAASmpD,EAAK,yBACd1/C,OAAQ,CACNA,OAAQ,iBACRqN,QAAS,CACPoS,eAAgBpkB,EAAQokB,iBAG5B0yC,WAAYzS,EAAK,gBAGd,GAAI8vD,EAET,YADAW,GAGJ,CACAM,GAAW,IAGPC,EAAkB,cAAejxF,GACjC,MAAEzpB,EAAK,OAAE0tF,IAAWitB,EAAAA,EAAAA,IAAqBt1G,EAAS4wE,GAClD3oD,GAAYq8C,EAAAA,GAAAA,GAChB,cD1HmB,WC4HnB+wC,GD5HyC,WC6HzCf,GAAaC,GAAcrvB,IAG7B,OACEtiB,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,UAAWA,EACXqgE,MAAQ,UAAS3tF,gBAAoB0tF,OACrCvjB,QAAUuwC,OAAgC51G,EAAdgzF,GAE5B7vB,GAAAA,GAAAC,cAACukB,GAAAA,EAAW,CACVH,aAAc7f,EACdpnE,QAASA,EACTu1G,cAAerP,EACfsP,mBAAmB,aACnBltD,KAAM3tD,EACN0sF,WAAYA,EACZ+S,QAASsa,EACThb,QAAS/Q,EACToR,qBAAmB,IAEpBkW,GACCrtC,GAAAA,GAAAC,cAAC4yC,GAAAA,EAAM,KACL7yC,GAAAA,GAAAC,cAAC6yC,GAAAA,EAAe,CACdtuC,IAAKsoC,EACLpzE,IAAKq4E,EACL1sF,WAAWq8C,EAAAA,GAAAA,GDvJgE,WCuJlCiwC,GAAcrvB,IACvD2a,OAAQ+U,EACRtsD,KA9HmB,KA8Hb3tD,EACNm+F,MAAI,EACJ6c,eAAa,EACb1V,QAAM,EACNwQ,QAASuE,KAIX,E,gBC/HV,UAAe3xC,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA8B,IAA5B,QAAE1M,GAAS0M,EAC3D,MAAM,GAAEnL,EAAE,OAAEN,GAAWjB,EAAQ0E,QAAQoH,UAEvC,MAAO,CACL+Z,OAAOC,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQM,GACvCqnG,YAAwC,yBAA3B5pG,EAAOof,gBACrB,GANiBqsD,EAdpB,SAAc1pE,GAEY,IAFX,QACbf,EAAO,MAAE6lB,EAAK,YAAE2vE,EAAW,YAAEoT,GACP7nG,EACtB,MAAM,UAAE+K,GAAc9L,EAAQ0E,QAE9B,OACEgjE,GAAAA,GAAAC,cAAC+yC,GAAAA,EAAS,CACR70F,MAAOA,GAAS/Z,EAChB0pF,YAAaA,EACboT,YAAaA,GAGnB,KC6DA,IAAezgC,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA8B,IAA5B,QAAE1M,GAAS0M,EAC3D,MAAM,GAAEnL,EAAE,OAAEN,GAAWjB,EAAQ0E,QAAQoH,UACjCs2C,GAAaP,EAAAA,EAAAA,KAAkB7iD,EAAQiC,IAASmhD,WAEtD,MAAO,CACLv8B,OAAOC,EAAAA,EAAAA,KAAgB9mB,EAAQiC,EAAQM,GACvCgc,MAAMgB,EAAAA,EAAAA,KAAWvf,EAAQiC,GACzB05G,YAAY7nG,EAAAA,EAAAA,KAAW9T,EAAQgB,EAAQI,QACvCwC,SAAUuU,QAAQirC,GAAcA,EAAa7gD,GAC9C,GATiBkpE,EA7DpB,SAAqB1pE,GAEK,IAFJ,QACpBf,EAAO,MAAE6lB,EAAK,KAAEtI,EAAI,SAAE3a,EAAQ,WAAE+3G,GACV55G,EACtB,MAAM,gBAAE48D,IAAoB/2C,EAAAA,EAAAA,MAEtBuiC,GAAO+f,EAAAA,GAAAA,MAEP,UAAEp9D,GAAc9L,EAAQ0E,QAExB6yF,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClCpQ,EAAgB,CACd18D,OAAQ4kB,EAAO5kB,OACf4K,QAASga,EAAOtkB,GAChB27D,cAAc,EACdC,eAAe,GACf,IAGE5sD,EAAYsV,GAAS,cAAeA,EACpC+0F,EAAW/0F,GAAS,YAAaA,EACjChhB,EAAQ+1G,EAAW/0F,EAAMnhB,QAAQG,WAAQN,EACzCs2G,EAAYD,GACdzhB,EAAAA,EAAAA,KAAkBtzE,EAAO,kBACzBthB,EAEEu2G,GADaruB,EAAAA,GAAAA,GAASouB,IACGh2G,GAAOO,WAAWi0F,QAgBjD,OAdA0hB,EAAAA,GAAAA,GAAejvG,EAAW7K,OAAQ6K,EAAWvK,GAAIskB,GAe/C6hD,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,+BAAgCxmE,GAAY,YAAag4G,GAAY,gBAC/F1wC,SAAU,EACV81B,KAAK,SACLp2B,QAASgxC,EAAWrjB,OAAchzF,GAEjCq2G,GACClzC,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,uBACb+tF,GACCpzC,GAAAA,GAAAC,cAAA,OAAK2lB,IAAKwtB,EAAUvtB,IAAI,GAAGxgE,UAAU,iBAK3C26C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,gBAAeihE,EAAAA,GAAAA,GA1B7BzwE,GAAQ,WAAYA,GAAQA,EAAKyhB,OAE/BmqB,EADG54C,EACE,wBACA,0BADyB2nB,EAAAA,EAAAA,KAAuByiF,IAIpDpqG,EACH44C,EAAK,uBACLA,EAAK,uBAAuBQ,EAAAA,EAAAA,KAAeR,EAAM5rC,IAkBG,CAAC,QAAS,qBAGtE,K,gBC8NA,MAGMy9F,GAAsB,KAAOt8G,EAAAA,EAC7Bu8G,GAA4B,KAAOv8G,EAAAA,EA+3CzC,IAAeypE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAQw7F,KACP,MAAM,eACJ0gB,EAAc,gBAAE7iG,EAAe,gBAAEsmC,EAAe,wBAAE3xC,EAAuB,cACzEmuG,IACEj8G,EAAAA,EAAAA,KAAeF,IACb,QACJgB,EAAO,MAAEwvD,EAAK,eAAE4rD,EAAc,WAAEC,EAAU,SAAEr0G,EAAQ,gBAAEsU,EAAe,sBAAEggG,EAAqB,eAAEC,GAC5F/gB,GACE,GACJj5F,EAAE,OAAEnB,EAAM,SAAEsoC,EAAQ,WAAErmC,EAAU,YAAEunD,EAAW,gBAAEp4C,EAAe,SAAE1C,EAAQ,iBAAE0sG,EAAgB,SAAE5/F,GAC1F5b,EAEEoC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BiqF,GAAiBlqF,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC9Cq7G,GAAkBC,EAAAA,EAAAA,KAAYt7G,GAC9Bu7G,GAAsBC,EAAAA,EAAAA,KAAwBx7G,GAC9CymF,EAAYzkF,IAAQia,EAAAA,EAAAA,KAAcja,GAClCy9C,EAAUz9C,IAAQusB,EAAAA,EAAAA,KAAYvsB,GAC9BsY,GAAgB7K,EAAAA,EAAAA,KAASzP,QAA+CmE,GAArCoW,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC9Dy7G,EAAmB77G,EAAQ0E,QAAQo3G,SAASj2F,MAC5Ck2F,EAAeF,GACjB/1F,EAAAA,EAAAA,KAAgB9mB,EAAQ68G,EAAiB56G,OAAQ46G,EAAiBt6G,SAClEgD,EAEE6T,EAAeC,EAAgBzK,YAAcyK,EAAgBzK,WAAWtK,SAAS/B,GACjFy6G,GAAmB3xB,IAAkB4xB,EAAAA,EAAAA,KAAsBj8G,GAC3Dk8G,EAAgBd,GAAkBC,GAAcW,EAChD5zE,GAASC,EAAAA,EAAAA,KAAarpC,EAAQgB,GAC9Bm8G,GAAe7Y,EAAAA,EAAAA,KAAsBtkG,EAAQgB,GAC7CgqC,EAAYtB,GAAW51B,EAAAA,EAAAA,KAAW9T,EAAQ0pC,QAAYnkC,EACtD63G,EAAoBh0E,GAAQ7mC,IAAMs+C,EACpCnlC,GAAconD,mBAAmB15B,GAAQ7mC,SACzCgD,EAEE83G,EAAcr8G,EAAQuB,KAAOyF,GAE7B,aAAEf,EAAY,cAAE2e,EAAa,UAAE03F,IAAcx2G,EAAAA,EAAAA,GAAoB9F,IAAY,CAAC,GAC5EiB,OAAQs7G,EAAkB1wG,QAAS2wG,IAAiBhxG,EAAAA,EAAAA,GAAkBxL,IAAY,CAAC,EAErFy8G,EAAkBx2G,GAAgBA,IAAiBe,EACnD4Q,EAAe3R,GAAenC,EAAAA,EAAAA,KAAkB9E,EAAQ4lB,GAAiBxkB,EAAQ6F,QAAgB1B,EACjGm4G,GAAgB9yD,GAAe0yD,EAC/BK,GAAqB/kG,GAAeywB,EAAAA,EAAAA,KAAarpC,EAAQ4Y,IAC3D8kG,IAAkBjB,GAAoBE,OACYp3G,GAAhDq4G,EAAAA,EAAAA,KAAuB59G,EAAQ09G,IAC/BG,GAA4BjlG,IAAgB0rF,EAAAA,EAAAA,KAAsBtkG,EAAQ4Y,GAC1EklG,GAAmBl4F,GAAgBje,EAAAA,EAAAA,KAAW3H,EAAQ4lB,QAAiBrgB,EACvEw4G,IAAkBtB,IAAoBE,GAAuBmB,MAC7DE,EAAAA,EAAAA,KAAaF,MACbA,GAAiBv9C,aAAeu9C,GAAiB7lG,cACjDgmG,GAA6D,gBAAvCrlG,GAAclT,QAAQ+E,QAAQpI,KACpD67G,GAAaV,GAAgBD,GAC/Bz2F,EAAAA,EAAAA,KAAgB9mB,EAAQu9G,EAAkBC,QAC1Cj4G,EACE44G,GAAcZ,GAAmBh+F,EAAAA,EAAAA,KAAWvf,EAAQu9G,QAAoBh4G,EAExEg4F,IAAiB6gB,EAAAA,EAAAA,KAAqBp+G,EAAQgB,GAC9Cq9G,GAAgC,WAApB/hG,IAChBk0C,EACIA,EAAMzgD,SAASsrB,MAAM5Z,IAAM68F,EAAAA,EAAAA,KAAuBt+G,EAAQyhB,EAAGzZ,MAC7Ds2G,EAAAA,EAAAA,KAAuBt+G,EAAQgB,EAASgH,KAI5CsM,UAAWiqG,GAAgBrxG,YAAasxG,GAAgB,oBAAErxG,GAC1D8/C,MAAOwxD,GAAY,qBAAEt+D,IAClBk+D,IAAanC,GAAmB,CAAC,EAEhCwC,IAAetrF,EAAAA,EAAAA,KAA0BpzB,GACzC2+G,GAAYD,IAAcn9G,SAASqpB,OACnC,GAAE8zF,GAAanrF,UAAY,IAAM,KAAKmrF,GAAan9G,QAAQqpB,QAE3Dg0F,IAAcC,EAAAA,EAAAA,KAA6B79G,GAC3Cy3G,GAAgBmG,KAAe9e,EAAAA,EAAAA,KAAoB9/F,EAAQ4+G,IAAeA,QAAcr5G,EACxFu5G,IAAsBC,EAAAA,EAAAA,KAA4B/9G,GAExD,IAAI26F,GAEFA,GADEnrC,GAAOzgD,SACIygD,EAAMzgD,SAASivG,OAAMvvG,IAAA,IAAGlN,GAAI8E,GAAWoI,EAAA,OAAKmsF,EAAAA,EAAAA,KAAwB57F,EAAQqH,EAAU,KAEtFu0F,EAAAA,EAAAA,KAAwB57F,EAAQuC,GAG/C,MAAMg0F,GAA+B,WAApBj6E,IAAgC2iG,EAAAA,EAAAA,KAAwBj/G,EAAQgB,EAASgH,GACpFo0F,IAAkBC,EAAAA,EAAAA,KAAsBr8F,GACxCk/G,IAAoBrwD,EAAAA,EAAAA,KAA4B7tD,GAChD+8F,GAAgBmhB,KAAqBlhB,EAAAA,EAAAA,KAAiB5B,GAAiB8iB,IAEvEtQ,IAAoB9jG,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQovD,GAAOu7B,iBAAiBxpF,IAAMA,GAEnF87C,GAAoBlmC,QAAQnX,EAAQ+Z,aAAe/Z,EAAQs9C,UAC3DC,GAA8BF,IAChCG,EAAAA,EAAAA,KAA0Bx+C,EAAQoB,EAAQJ,EAAQ+Z,WAAa,QAC/DxV,EACE45G,GAAkB9gE,GACtBi+D,GAAwBx3G,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQm9C,SAAgCh5C,EACxFvE,EAEEo+G,GAAoBh8G,GAAMiB,iBAAiBC,SAAStD,EAAQuB,IAE5D88G,GAAer3G,IAAaD,EAAAA,IAAkB3E,GAAMsG,SAAW6yG,EAC/D+C,GAAeD,IAAe11G,EAAAA,EAAAA,KAAuB3J,EAAQgB,QAAWuE,EAExEg6G,IAAmBC,EAAAA,EAAAA,KAAuBx/G,EAAQoB,GAElDq+G,IAA+BvvD,EAAAA,EAAAA,KAA0ClwD,EAAQoB,EAAQJ,EAAQuB,IACjGm9G,IAAmCvvD,EAAAA,EAAAA,KAAuCnwD,EAAQoB,GAElFu+G,GAAyBzqB,EAAAA,IAA4Bl1F,EAAO64B,SAASmU,MAAM4yE,eAC3EF,GAEA9V,GAAyC,yBAA3B5pG,EAAOof,gBAErBygG,GAAqB1nG,QAAQgnG,IAAmBx/D,GAAgB57C,EAAAA,EAAAA,IAAco7G,MAAmBt9G,QAEjG+rB,IAAY1M,EAAAA,EAAAA,KAA2BlhB,GACvC8/G,GAAe12E,IAAUjoC,EAAAA,EAAAA,KAAqBnB,EAAQopC,EAAO7mC,IAC9DmZ,GAAc68B,eAAiBv3C,EAAQ8+G,aAAgB9+G,EAAQ8+G,aAE9DC,GAAY38G,GAAM48G,YAAc,EAChCC,GAAqBjgH,EAAOwkB,WAAW07F,wBACvCC,GAAqBvyF,IAAazV,QAAQ8nG,IAAsBF,IAAaE,IAE7EG,GAAiB5D,GAAmB1oG,EAAAA,EAAAA,KAAW9T,EAAQw8G,QAAoBj3G,EAE3E83C,GAASzgC,EAAW5c,EAAOw9C,oBAAoB5gC,QAAYrX,GAEzDssC,QAAS+kE,IAAmB52G,EAAO8xC,OAAS,CAAC,EAC/CxlC,IAAO4T,EAAAA,EAAAA,KAAsBlgB,EAAQgB,GAE3C,MAAO,CACLsoC,OAAOmpC,EAAAA,EAAAA,KAAYzyE,GACnBg9G,kBACA5zE,SACA8zE,gBACAC,eACAnyE,YACAyyE,gBAAiBA,GAAmBQ,GACpCZ,cACAzkG,eACA+kG,sBACAE,6BACAC,oBACAI,cACAH,kBACAI,eACA9/D,qBACAm4C,aAAa6pB,EAAAA,EAAAA,KAAyBrgH,EAAQgB,GAC9Cs/G,iBAAiBC,EAAAA,EAAAA,KAAsBvgH,EAAQoB,GAC/Ci9G,aACAjlG,eACA+lG,mBACA9zB,iBACAm1B,cAAe/D,EACfE,sBACA90B,YACAhnC,UACA01C,YACAooB,aACAlG,iBACAqG,uBACAxoB,gBAAgBoF,EAAAA,EAAAA,KAAqB17F,GACrC27F,cACA8kB,gBACEtoG,QAAQnX,EAAQ+Z,aACZ/Z,EAAQs9C,YACToiE,EAAAA,EAAAA,KAA8B1gH,EAAQoB,EAAQJ,EAAQ+Z,WAE3D/S,WACA+1F,iBACA4iB,aAAkC,WAApBrkG,EACdxM,WACA2zF,kBAAkBhG,EAAAA,EAAAA,KAAuBz9F,EAAQgB,GACjD4/G,kBAAkBjjB,EAAAA,EAAAA,KAAuB39F,EAAQgB,GACjD6/G,sBAAuB7gH,EAAO64B,SAASmU,MAAM6zE,sBAC7CC,oBAAoBC,EAAAA,EAAAA,KAAyB/gH,GAC7C4uG,qBACAzxD,mBAAoBn9C,EAAOsB,UAAU67C,mBACrC4C,iBAAiBj3C,EAAAA,EAAAA,KAAe9H,IAAgC,cAApBsb,OACxC/W,GAAY04C,EAAAA,EAAAA,KAAsBj+C,EAAQoB,GAC9Cy+G,sBACA7xG,0BACAoxG,qBACA4B,oBAAoCz7G,IAApBiN,GAAiCxS,EAAO0S,eAAeF,IAAkBC,UACzFwuG,qBAAqC17G,IAApBiN,EAAgCxS,EAAO0S,eAAeF,IAAkBlE,UAAO/I,EAChGqoB,aACAwvF,oBACAkC,gBACAD,gBACAE,oBACAI,0BACAuB,0BAA0BC,EAAAA,EAAAA,KAA+BnhH,EAAQoB,GACjEq+G,gCACAC,oCACA0B,cAAejpG,QAAQuD,GAAc2lG,cACrCC,qBAAqBz9G,EAAAA,EAAAA,KAA+B7D,EAAQ,kBAC5D+8G,eACAnT,eACA2X,kBAAmB3S,IAAmB/yE,gBACjCsgF,GAAeqF,gBAAkB5S,IAAmBlO,iBACpDyb,GAAesF,mBAAqB7S,IAAmBlgD,gBAC5DgzD,mBAAoB1hH,EAAO64B,SAASmU,MAAM00E,sBACtCr+G,GAAc,CAAEorG,gBAAgBkT,EAAAA,EAAAA,KAAqB3hH,EAAQgB,EAA6B,cAApBsb,OAC5C,iBAAnBihF,IAA+B,CAAEA,sBACxC8gB,IAAa,CACfE,kBACAC,oBACArxG,uBACAsxG,gBACAt+D,yBAEF2/D,gBACAr/D,KAAMzgD,EAAOsgD,mBAAmBtT,MAChCmzE,sBACAC,kBACA/iE,UACAu5D,kBACAtqG,QACD,GA3Nem/D,EA13CuB1pE,IAoGrC,IApGsC,QAC1Cf,EAAO,6BACP4gH,EAA4B,8BAC5BhoB,EAA6B,8BAC7BwY,EAA6B,MAC7B5hD,EAAK,UACL0/B,EAAS,WACTmsB,EAAU,eACVD,EAAc,WACdyF,EAAU,UACV/S,EAAS,gBACTgT,EAAe,YACfC,EAAW,eACXxF,EAAc,UACd3uF,EAAS,cACTo0F,EAAa,uBACbC,EAAsB,sBACtB3F,EAAqB,eACrB0E,EAAc,gBACdC,EAAe,aACfiB,EAAY,MACZ54E,EAAK,gBACL0zE,EAAe,OACf5zE,EAAM,cACN8zE,EAAa,aACbC,EAAY,UACZnyE,EAAS,YACTqyE,EAAW,gBACXI,EAAe,aACf7kG,EAAY,mBACZ+kG,EAAkB,0BAClBE,EAAyB,iBACzBC,EAAgB,WAChBI,EAAU,eACVH,EAAc,YACdI,EAAW,eACX1P,EAAc,eACdlR,EAAc,kBACdl/C,EAAiB,kBACjBkjE,EAAiB,YACjB/qB,EAAW,gBACX8pB,EAAe,UACfjC,EAAS,eACTE,EAAc,aACdE,EAAY,iBACZD,GAAgB,qBAChBr+D,GAAoB,oBACpBhzC,GAAmB,aACnBiM,GAAY,eACZiyE,GAAc,cACdm1B,GAAa,oBACb7D,GAAmB,UACnB90B,GAAS,QACThnC,GAAO,SACP01C,GAAQ,UACRooB,GAAS,cACTlG,GAAa,oBACbqG,GAAmB,mBACnBe,GAAkB,cAClBuB,GAAa,eACb9qB,GAAc,WACdqF,GAAU,gBACV8kB,GAAe,SACfz4G,GAAQ,gBACRm3G,GAAe,mBACfhiE,GAAkB,gBAClB4C,GAAe,wBACf/xC,GAAuB,gBACvBsO,GAAe,aACfqkG,GAAY,SACZ7wG,GAAQ,cACRiuF,GAAa,iBACb0F,GAAgB,iBAChBmd,GAAgB,mBAChBE,GAAkB,sBAClBD,GAAqB,kBACrBjS,GAAiB,kBACjBwQ,GAAiB,qBACjB+C,GAAoB,kBACpB/E,GAAiB,aACjBkC,GAAY,aACZD,GAAY,iBACZE,GAAgB,uBAChBI,GAAsB,yBACtBuB,GAAwB,6BACxBzB,GAA4B,iCAC5BC,GAAgC,oBAChC4B,GAAmB,aACnBvE,GAAY,YACZnT,GAAW,sBACX/S,GAAqB,mBACrB6qB,GAAkB,aAClB5B,GAAY,KACZr/D,GAAI,mBACJ0/D,GAAkB,eAClBC,GAAc,OACd/iE,GAAM,eACNu5D,GAAc,KACdtqG,GAAI,yBACJ81G,IACDrgH,EACC,MAAM,uBACJmtD,GAAsB,qBACtBw0C,GAAoB,uBACpBt0C,GAAsB,sBACtBizD,GAAqB,iBACrBv1D,GAAgB,iBAChBw1D,KACE16F,EAAAA,EAAAA,MAGEslD,IAAMD,EAAAA,GAAAA,IAAuB,MAE7Bs1C,IAAkBt1C,EAAAA,GAAAA,IAAuB,MAEzC0pB,IAAmB1pB,EAAAA,GAAAA,IAAuB,MAE1Cu1C,IAAmBv1C,EAAAA,GAAAA,IAAO,GAE1B9iB,IAAO+f,EAAAA,GAAAA,MAENu4C,GAAuBC,KAA0Bz4C,EAAAA,GAAAA,KAAS,IAC1D04C,GAAwBC,KAA6B34C,EAAAA,GAAAA,KAAS,IAC9D44C,GAA0BC,KAA+B74C,EAAAA,GAAAA,KAAS,IAClE2rC,GAAkBmN,GAAezsC,KAAcH,EAAAA,GAAAA,MAChD,SAAEO,GAAQ,cAAEssC,KAAkBrsC,EAAAA,EAAAA,OAEpCssC,EAAAA,GAAAA,IAAeV,GAAiBX,GAEhC,MAAM,kBACJv4B,GAAiB,kBACjB65B,GAAiB,kBACjBC,GAAiB,wBACjB1sB,GACAnN,kBAAmBI,GAAa,uBAChCH,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GACFvc,GACA81C,IAAiB1sB,IAChBzvC,EAAAA,GACDjkB,EAAAA,GACAi0D,KAGFttB,EAAAA,GAAAA,KAAU,KACJ8f,IACFj6B,IACF,GACC,CAACi6B,GAAmBj6B,KAEvB,MAAMg0D,GAAwBtB,GAAmB,GAC1C/iD,GAASskD,KAAaltC,EAAAA,GAAAA,GAAQitC,KACrC75C,EAAAA,GAAAA,KAAU,KACJ65C,IAIJ73G,WAAW83G,GAtKU,GAsKCvB,EAAmC,GACxD,CAACA,EAAiBuB,GAAWD,MAEhC71C,EAAAA,GAAAA,GAAkB,CAChBL,OACA72B,OAAQ0oB,IAAWgjD,EACnB7xC,kBAAmBkzC,KAA0BrB,EAC7Ch0F,WAAW,IAGb,MACExrB,GAAI8E,GAAS,OAAEjG,GAAM,YAAEwpD,GAAW,SAAElhB,GAAQ,qBAAE3nB,GAAoB,UAAE0G,IAClEznB,GAEJsiH,EAAAA,GAAAA,KAAkB,KAChB,GAAItiH,EAAQ8O,SAAU,CACpB,MAAMvN,EAAKiuD,EAAQA,EAAM27B,YAAY5pF,GAAK8E,GAC1C+6G,GAAyB,CAAEmB,0BAA2B,CAAChhH,IACzD,KAGF,MAAMmK,IAAU5D,EAAAA,EAAAA,KAAe9H,GACzBgB,IAAQgjG,EAAAA,EAAAA,KAAahkG,GACrBqE,GAAkC,cAApBiX,IAAmCtb,EAAQqE,YACzDm+G,IAAkBC,EAAAA,EAAAA,KAAiBziH,KAAay8G,GAEhD,UAAEnrG,KAActM,EAAAA,EAAAA,KAAkBhF,IAChC4E,MAAO89G,GAAgB79G,MAAO89G,IAAmBz0B,GAAqB58E,KAExE,MACJ1M,GAAQ89G,GAAc,MAAE79G,GAAQ89G,GAAc,MAAE9kB,GAAK,MACrD12E,GAAK,SAAEpiB,GAAQ,QAAED,GAAO,QAAE6lC,GAAO,QACjCmxE,GAAO,QAAE3qG,GAAO,SAAEkxB,GAAQ,OAC1B54B,GAAM,KAAEk5F,GAAI,UAAE72F,GAAS,SAAEs3F,GAAQ,gBACjCU,KACE9+F,EAAAA,EAAAA,KAAkBhF,GAEhBuY,IAAmBzS,EAAAA,EAAAA,GAAoB9F,GACvCuL,IAAiBC,EAAAA,EAAAA,GAAkBxL,GAEnC4iH,GAAyBzrG,SAASsqG,KAA0B1gG,IAAwBk/F,IAEpF4C,GAAgB1rG,QAAQ5L,IACxBu3G,GAAY3rG,QAAQy2F,KAA0C,WAApBtyF,GAC1C+jF,IAAiBujB,KAA0BG,EAAAA,EAAAA,KAAsB/iH,GACjEgjH,GAAmB3jB,KAAkBoY,IAAiBqG,IACtDmF,GAAe9E,IAAiB79G,aAAc4iH,EAAAA,EAAAA,KAAkB/E,GAAgB79G,WAChF6iH,GACJv5D,MACKygC,IAAkBhmF,MACnBm7G,KACA51D,GAAYw5D,sBACZzH,KACA3xE,GACD7yB,QAAQrL,KAAcA,GAAUu3G,WAC/BC,GAAsBnsG,QAAQ2nG,MAAkBqE,IAAe5H,EAC/DgI,GAAiBz3G,IAAWu3G,UAC5BG,GAAoC,UAArB3+G,IAAOwM,WAAyBxM,GAAMivG,QACrD7pB,GAAU9yE,QAAQq4C,KAEnBA,EAAM47B,aAAe95E,GAAWL,cAAcpQ,OAAS,GACrD2uD,EAAMzgD,SAASlO,OAAS,KACvB2uD,EAAMzgD,SAASsrB,MAAMopF,GAA4C,IAApCv8G,OAAOsG,KAAKi2G,EAAI/+G,SAAS7D,SACxD6iH,GAA4BrmE,IAAsB4jE,EAClD0C,GAA2BtmE,IAAsBi+D,EACjD5lB,QAA2CnxF,IAAtB29G,GACrB0B,KACFluB,IAAsBJ,IAAkBl9E,IACtCurG,IACAJ,KACEz+G,IAAWk+G,KAAqBG,IAElCU,GAAah9B,KAAcxiF,IAAerE,EAAQ8jH,sBACpDxE,EACEyE,GAAW5sG,QAAQwoG,IACnB/1D,KACEA,GAAYo6D,eAAiB35B,IAAkBm1B,IAAiB7D,KACjE/xD,GAAYq6D,eAGbC,GAAe/sG,QAAQsQ,IAAWna,MAElC62G,GAA0BhB,IAAe9jB,GACzC+kB,GAAe/F,IAAgBmE,IAAmBK,IAAiBsB,GAEnE9uB,IAAgBtnB,EAAAA,GAAAA,IAAgB,CAACrc,EAAkD33C,KACvFm0C,GAAuB,CACrB7nD,aACA0T,eACI23C,GAAGkd,UAAY,CAAE3gB,WAAW,MAC5Bg8B,IAAW,CAAEj8B,gBAAiBwB,EAAOzgD,SAASrB,KAAIhB,IAAA,IAAC,GAAEnL,GAAImL,EAAA,OAAKnL,CAAE,MACpE,IAGE8iH,GAAgBnI,EAAgB9zE,OAAS7jC,EAEzCo0F,GAAe33F,KAAUq+F,GAIzBilB,GAF2B16D,KAC3BygC,IAAkBm1B,IAAiB7D,KAAwB0I,IACnBlI,EAAekI,GACvDE,GAAmBpI,GAAgB/zE,EACnCo8E,GAAc56D,IAAe99C,GAAaqwG,EAAekI,GACzDI,IAASC,EAAAA,EAAAA,KAAc1kH,IAEvB,gBACJq3F,GAAe,YACfE,GAAW,kBACXjP,GAAiB,kBACjByP,GAAiB,yBACjBC,GAAwB,gBACxB1B,GAAe,wBACf2B,GAAuB,iBACvBjb,GAAgB,SAChBkZ,GAAQ,uBACRH,GAAsB,8BACtBwC,IACEnD,GACFC,GACAnpB,GACA7lE,GACA8Q,QAAQm+E,IACRn+E,QAAQo+E,IACRp+E,QAAQq+E,GACR9M,GACA+M,GACAr1F,GACAs1F,GACAC,GACAguB,GACA9tB,KAGI,kBACJ8uB,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChBC,GAAgB,gBAChBC,GAAe,sBACfC,GAAqB,sBACrBC,GAAqB,sBACrBC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACfxpB,GAAkB,eAClBypB,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,GAAoB,iBACpBC,IC7mBW,SAAyBhlH,GAsCrC,IAtCsC,KACvCooD,EAAI,cACJksC,EAAa,QACbr1F,EAAO,OACPI,EAAM,SACN4G,EAAQ,kBACRq2C,EAAiB,YACjB8lE,EAAW,YACX9+G,EAAW,MACXmrD,EAAK,WACL80D,EAAU,WACVE,EAAU,UACVx6E,EAAS,aACTs0E,EAAY,kBACZ0H,EAAiB,MACjBngG,EAAK,eACLk3F,EAAc,cACdyC,EAAa,gBACbyG,GAoBDllH,EACC,MAAM,SACJ2b,EAAQ,iBAAEvB,EAAgB,aAAElP,EAAY,gBAAEi6G,EAAe,gBAAEC,EAAe,iBAC1ExjG,EAAgB,kBAAEg5E,EAAiB,aAAEyqB,EAAY,gBAAEr5D,EAAe,sBAClEs5D,EAAqB,WAAErhG,EAAU,gBAAE24C,EAAe,wBAAE2oD,IAClD1/F,EAAAA,EAAAA,OAGFrlB,GAAI8E,EAAS,YAAEujD,EAAW,UAAE7vC,EAAWrV,SAAS,UAAE4M,IAChDtR,GAEE,aACJiG,EAAY,cAAE2e,EAAa,aAAED,EAAY,QAAE4hG,EAAO,UAAE1hG,IAClD/e,EAAAA,EAAAA,GAAoB9F,IAAY,CAAC,EAE/B2kH,GAAoB52C,EAAAA,GAAAA,IAAgB,KACnCu2C,GAIL5nG,EAAS,CAAEnb,GAAI+iH,EAAW/iH,IAAK,IAG3BqjH,GAAoB72C,EAAAA,GAAAA,IAAgB,KACnCy2C,EAMDrB,GAAev5D,GAAa48D,cAC9Bv6G,EAAa,CAAE7L,OAAQokH,EAAWjjH,GAAI8E,UAAWujD,EAAY48D,gBAE7D9pG,EAAS,CAAEnb,GAAIijH,EAAWjjH,KAR1B4Z,EAAiB,CAAEnb,QAASmpD,EAAK,eASnC,IAGI07D,GAAoB92C,EAAAA,GAAAA,IAAgB,KACnC/jC,GAILttB,EAAS,CAAEnb,GAAIyoC,EAAUzoC,IAAK,IAG1BujH,GAAmB/2C,EAAAA,GAAAA,IAAgB,KAClC9nE,IAAgB82G,EAOrB9wG,EAAa,CACX7L,OAAQwkB,GAAiBxkB,EACzB4G,SAAUw4G,EAAgB76F,EAAe3d,EACzCX,UAAWJ,EACX+lD,eAAgBpnC,OAAgBrgB,EAAY8B,EAC5Cy+C,mBAAoBlgC,KAChB2hG,GAAW,CAAEt6D,MAAOpnC,GAAWvX,QAZnC6N,EAAiB,CACfnb,QAAmBmpD,EAAVo9D,EAAe,eAAuB,iBAYjD,IAGExB,GAAmBh3C,EAAAA,GAAAA,IAAgB,KACvCm4C,EAAgB,CACd9lH,SACA4G,WACAX,YACA0kD,OAAQ1mD,EAAcoiH,EAAAA,GAAkBC,gBAAkBD,EAAAA,GAAkBE,QAC5E,IAEEC,GAAkC74C,EAAAA,GAAAA,IAAiBnV,IACnDtnD,IAAcA,EAAUJ,WACxB0nD,GACF0tD,EAAwB,CAAElmH,SAAQ4G,WAAUqsB,sBAAuBhtB,IAErE6/G,EAAgB,CACd9lH,SACA4G,WACAX,YACA0kD,OAAQ1mD,EAAcoiH,EAAAA,GAAkBC,gBAAkBD,EAAAA,GAAkBE,OAC5E/tD,uBACA,IAEEssD,GAAwBn3C,EAAAA,GAAAA,IAAgB,KAE5C64C,GAD4BviH,IAAgBiN,EACO,IAE/C6zG,GAAwBp3C,EAAAA,GAAAA,IAAgB,KAC5C,MAAM84C,EAAQ7mH,EAAQ0E,SAASG,OAAOgiH,MAEtCD,GAD4BC,IAAUxiH,IAAgBiN,EACH,IAG/C0zG,GAAkBj3C,EAAAA,GAAAA,IAAgB,KACtCo4C,EAAgB,CAAE/lH,SAAQiG,aAAY,IAGlC4+G,IAAwBl3C,EAAAA,GAAAA,IAAgB,CAAC+4C,EAAwBC,KACjEz1G,IAAcA,EAAUJ,WAE5Bo1G,EAAwB,CAAElmH,SAAQ4G,WAAUqsB,sBAAuBhtB,IACnE6/G,EAAgB,CACd9lH,SACA4G,WACAX,UAAWygH,EACXruD,WAAYsuD,EACZh8D,OAAQ1mD,EAAcoiH,EAAAA,GAAkBO,eAAiBP,EAAAA,GAAkBQ,MAC3EruD,oBAAqBtnD,IACrB,IAGEi0G,IAAkBx3C,EAAAA,GAAAA,IAAgB,KACtCprD,EAAiB,CAAE/U,WAAY,CAACvH,IAAa,IAGzC01F,IAAqBhuB,EAAAA,GAAAA,IAAgB,KACzC4tB,EAAkB,CAAEv7F,SAAQiG,aAAY,IAGpCm/G,IAAiBz3C,EAAAA,GAAAA,IAAiBl9D,IACtCu1G,EAAa,CAAEhmH,SAAQiG,YAAWwK,WAAU,IAGxC40G,IAAqB13C,EAAAA,GAAAA,IAAgB,KACzChhB,EAAgB,CAAEptC,WAAYvf,EAAQ2Z,aAAY,IAG9C2rG,IAAgB33C,EAAAA,GAAAA,IAAgB,KACpC,GAAIve,GAASA,EAAMzgD,SAAU,CAC3B,MAAMnB,EAAa4hD,EAAMzgD,SAASrB,KAAIhB,IAAA,IAAC,GAAEnL,GAAImL,EAAA,OAAKnL,CAAE,IACpDwrD,EAAgB,CAAEptC,WAAYvf,EAAQwN,cACxC,MACEm/C,EAAgB,CAAEptC,WAAYvf,EAAQwN,WAAY,CAACvH,IACrD,IAGIs/G,IAAc53C,EAAAA,GAAAA,IAAgB,KAClC9hE,EAAa,CACX7L,SAAQ4G,SAAUD,EAAAA,GAAgBV,aAClC,IAGEu/G,IAAuB73C,EAAAA,GAAAA,IAAgB,KAC3C,MAAMm5C,EAAkBjB,GAAmBr8D,EAAau9D,iBAAoBv9D,EAAajqC,WAGvF1T,EADEoxC,EACW,CACXj9C,OAAQ8mH,EAAgBntG,YAAWgyC,cAAe3rD,EAAQiG,UAAWujD,EAAaq6D,eAKlFr/F,GAAiBD,EACN,CACXvkB,OAAQwkB,EACR5d,SAAU2d,EACVte,UAAWujD,EAAaq6D,eAGb,CACX7jH,OAAQ8mH,EAAgB7gH,UAAWujD,EAAaq6D,eAEpD,IAGImD,IAAsBr5C,EAAAA,GAAAA,IAAiBrc,IAC3CA,EAAEohB,kBAEFuiB,EAAc3jC,EAAG33C,EAAU,IAkC7B,MAAO,CACL4qG,oBACAC,oBACAC,oBACAC,mBACAC,mBACAC,kBACAC,yBACAC,wBACAC,wBACAC,gBAAiBgC,GACjB/B,wBA1C6Bt3C,EAAAA,GAAAA,IAAiBrc,IAC9CA,EAAEohB,kBAEFuzC,EAAsB,CAAEjmH,SAAQiG,UAAY2/G,OAAgCzhH,EAAZ8B,GAAwB,IAwCxFi/G,kBArCuBv3C,EAAAA,GAAAA,IAAgB,KACvC/oD,EAAW,CACT5kB,OAAQJ,EAAQI,OAChB4G,SAAUhH,EAAQuB,IAClB,IAkCFgkH,mBACAxpB,sBACAypB,kBACAC,sBACAC,iBACAC,eACAC,wBACAC,6BAA8BuB,GAC9BtB,sBAvC2B/3C,EAAAA,GAAAA,IAAgB,KACtCuwC,GACLryG,EAAa,CACX7L,OAAQwkB,GAAiBxkB,EACzB4G,SAAUs3G,EAAa/8G,GACvB8E,aACA,IAkCF0/G,kBA/BuBh4C,EAAAA,GAAAA,IAAgB,KAClCloD,GACL83C,EAAgB,CACd18D,OAAQ4kB,EAAM5kB,OACd4K,QAASga,EAAMtkB,GACf47D,eAAe,GACf,IA2BN,CDqWMkqD,CAAiB,CACnBl+D,QACAksC,iBACAr1F,UACAI,UACA4G,YACAq2C,oBACA8lE,eACA9+G,eACAmrD,QACA80D,cACAE,cACAx6E,YACAs0E,gBACA0H,kBAAmB7uG,QAAQunG,IAC3B74F,MAAOq3F,GAAc,YAAaA,EAAaA,OAAa34G,EAC5Dw4G,iBACAyC,iBACAyG,gBAAiB57B,KAGbi9B,IAAoBv5C,EAAAA,GAAAA,IAAiBrc,IACzCA,EAAEohB,kBAEFivC,IAAe,KAGjBx5C,EAAAA,GAAAA,KAAU,KACH24C,GAID0B,IAA0B3C,GAC5Bn0D,IACF,GACC,CAACA,GAAkBo1D,EAAcjB,EAAiB2C,MAErDr6C,EAAAA,GAAAA,KAAU,KACR,MAAMkwB,EAAUvsB,GAAIj/C,QAChBjtB,EAAQ4F,YAAc6yF,KACpB8uB,EAAAA,GAAAA,GAAY9uB,GACdmpB,IAA0B,GAE1BE,IAA4B,GAEhC,GACC,CAAC9hH,EAAQ4F,aAEZ,MAAM4hH,GAAch4D,GAAOw7B,yBAAsBzmF,EAAairD,GAAOy7B,gBAAkBjrF,EACjFynH,GAAiBD,KAAeE,EAAAA,EAAAA,KAAeF,IAC/CG,GAAUF,IAAkBvD,GAE5B0D,IAAqBx+C,EAAAA,GAAAA,GACzB,4BACAmyC,GAAkB,iBAClB/lB,IAAgBiyB,GAAiB,eAAiB,kBAClDzG,GAAiB,gBACjBC,GAA0B,0BAC1B3F,GAAyB,yBACzB4F,GAAgB,eAChBlgH,IAAS,MACTmW,QAAQnX,EAAQqnB,aAAe,YAC/BrnB,EAAQ2uG,UAAY,aACpB6T,IAAmB,YACnBn6B,IAAqB,gBACrBg1B,IAAcG,IAAoB,UAClCplG,IAAgB,gBAChBypG,IAA4B,cAC5BF,IAA0B,gBAC1BtkE,GAAqB,uBACrB4sC,IAAW,WACXjqF,EAAQogE,kBAAoB,qBAC5Bu6B,IAAc,cACdrF,IAAkB,uBAClB+mB,IAAgBhB,GAAc,gBAC9BlkG,QAAQnX,EAAQyrF,gBAAkB,qBAClCyK,IAAY,YACZ6qB,GAAe,iBACdlC,IAAsBjK,KAAqB,oBAC5C2O,IAAkB,oBACjBK,IAAuB,oBAGpBt2G,GAAOk6G,KAAexiH,EAAAA,EAAAA,KAAkBwiH,IAAal6G,KACrDinD,GAAkBp9C,QAAQnX,EAAQu0D,kBAElC,aAAEtuD,GAAY,cAAE2e,GAAa,QAAE2hG,IAAYhuG,IAAoB,CAAC,GAC9DtX,OAAQs7G,GAAkB1wG,QAAS2wG,IAAiBjxG,IAAkB,CAAC,GAE/Eg9D,EAAAA,GAAAA,KAAU,MACHzjE,IAASs0G,WAAa/8D,MACzB8kE,GAAqBl0F,SAAW5mB,IAAa86G,GAAqBl0F,SAC/DvhB,KACHq2G,IACF,GACC,CAAC1lE,GAAQ3wC,GAASy1G,GAAsB96G,GAAWvB,IAASs0G,YAE/D,MAAMrkB,GExtBO,SAAyBznF,EAAekjE,EAAsBq3C,GAC3E,MAAOt6F,EAAUu6F,IAAe7+C,EAAAA,GAAAA,MAYhC,OAVAV,EAAAA,GAAAA,KAAU,KACJiI,GAAeq3C,IAAeA,MAE9Bv6G,E3CiBDkF,eAA8BlF,GAA6C,IAA/By6G,EAASzjH,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAnBlC,GAsBxB,OAFKyvF,UAAcC,GAAuBg0B,cACrBj0B,GAAQjtD,QAAQ,CAAE2G,KAAM,iBAAkBw6E,KAAM,CAAC36G,EAAMy6G,IAE9E,C2CpBMG,CAAe56G,GAAMyR,KAAK+oG,GAE1BA,OAAYvjH,GACd,GACC,CAACisE,EAAYljE,EAAMu6G,IAEft6F,CACT,CF0sB2B46F,CACvB76G,IAAMA,OACJqxG,IAA0BuB,IAC5BrqB,KxCxsBW,SACb71F,EAAqB+0F,EAA2BvkB,EAAsBq3C,IAEtEt/C,EAAAA,GAAAA,KAAU,KACR,GAAIiI,GAAeq3C,IAAeA,IAAe,OAEjD,MAAM/yB,EAAiB39E,QAAQnX,EAAQ0E,QAAQ4I,MAAMA,KAAKzM,SAO9D,SAAgCT,EAAgBmB,EAAYuzF,EAAyBC,GACnF,MAAMN,EAAYH,GAAW90F,IAAIY,IAAW,IAAIgoH,GAAAA,EAxB3B,KA0BfC,EAAmB5zB,EAAUj1F,IAAI+B,GACnC8mH,GAAoBA,EAAiBtzB,mBAAqBA,GACzDszB,EAAiBvzB,iBAAmBA,IAKzCL,EAAUl+E,IAAIhV,EAAI,CAChBA,KACAuzF,iBACAC,qBAGFT,GAAW/9E,IAAInW,EAAQq0F,GAEvBF,GAA0Bn0F,GAC5B,CAzBIkoH,CAAuBtoH,EAAQI,OAAQJ,EAAQuB,GAAIuzF,EAAgBC,EAAiB,GACnF,CAAC/0F,EAAS+0F,EAAkBvkB,EAAYq3C,GAC7C,CwCisBEU,CAAsBvoH,EAAS+0F,IAAmBmrB,GAA0BrqB,IAE5E,MAAM2yB,IAAkBC,EAAAA,EAAAA,KAAsBzoH,GAAU0+G,KAChDjtG,UAAWi3G,GAAoB,eAAEC,KAAmBC,EAAAA,GAAAA,GAC1DrK,GAAkBn+G,GAAQooH,GAAkBniH,QAAY9B,EAAWk6G,IAG/DoK,IAAyB1d,EAAAA,GAAAA,GAAsBwd,GAAgBxxG,QAAQqxG,KAEvEM,GAAwBH,IAAkBE,IAE1C,UAAEhjD,IAAcp8D,IAAU,CAAC,EAE3Bs/G,IAA4Bnb,IAAsBwS,IAAiBv5B,IAAan7E,MAChFi4G,IACmB,WAApBroG,KACCulG,EACAmI,GAAoBpb,IAAmB/yE,iBACvC8oF,IAAgD,WAApBroG,KAC5BulG,EACAoI,IAA2BjH,KAAkBn8C,KAAcyvB,IAAkBv2C,KAC7E4kE,KAA6BJ,KAAmBkB,GAEhDyE,IAAuBtG,IAA0BK,KACjD5jB,KAAmBz6F,IAASC,IAASiH,IAAsC,QAAxBu2B,IAAUhxB,aAA0Bs2G,IAEvFwB,GGtvBD,SACLnpH,EACAwvD,GAkCA,IAjCA,KACElkD,EAAI,aACJ84G,EAAY,cACZ/kB,EAAa,cACb2hB,EAAa,YACbmC,EAAW,UACXL,EAAS,gBACT9G,EAAe,kBACfoN,EAAiB,iBACjBC,EAAgB,gBAChBC,EAAe,aACfrG,EAAY,gBACZsG,EAAe,uBACf3G,EAAsB,eACtB4G,EAAc,oBACdN,GAiBD5kH,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM,UAAEgN,IAActM,EAAAA,EAAAA,KAAkBhF,IAChC4E,MAAO89G,EAAgB79G,MAAO89G,GAAmBz0B,GAAqB58E,GAExE5M,GAAUM,EAAAA,EAAAA,KAAkBhF,IAC5B,MACJ4E,EAAQ89G,EAAc,MAAE79G,EAAQ89G,EAAc,MAC9C9kB,EAAK,MAAE12E,EAAK,SAAEpiB,EAAQ,QAAE+2G,EAAO,QAAEnxE,EAAO,SAAEtI,EAAQ,QAAElxB,EAAO,UAAErF,EAAS,SACtEs3F,EAAQ,gBAAEU,GACRp/F,EACE4I,EAAOkiD,GAAOw7B,yBAAsBzmF,GAAYS,EAAAA,EAAAA,KAAkBwqD,GAAOy7B,gBAAkBjrF,GAASsN,KACpG42G,EAAe/sG,QAAQnX,EAAQynB,WAAWna,MAE1Ck2G,EAAoC,UAArB3+G,GAAOwM,WAAyBxM,EAAMivG,QACrDv/C,EAAkBv0D,EAAQu0D,gBAC1Bk1D,EAAoB7kH,GAAUC,IAAU2+G,GAAiBh0D,GAASssD,EAElE4N,EAAa,CAACC,EAAAA,KACd3nG,EAAUlW,GAAalH,GAASC,GAASw9B,GAAYlxB,GAASF,eAAiBK,EAC/Eq2G,EAAUr6G,GAAgC,UAAxB+0B,GAAUhxB,WAAyBk4G,GAAmBrF,EACxE0F,EAAoB5nG,IAAY2lG,EAChCkC,EAAoB1yG,QAAQnX,EAAQyrF,eACpCq+B,EAAW3yG,QAAQnX,EAAQ0oC,UAE3BqhF,EACAx1D,GAAmBk1D,KACjBxG,GAAiBiG,MACjBhF,MACApI,IAAW6L,GAGVA,EAuIT,OApII6B,GACFE,EAAW7+G,KAAK2+G,IAGbxnG,GAAWhiB,EAAQgqH,gBACtBN,EAAW7+G,KAAK,cACZ7K,EAAQgqH,gBAAkBC,EAAAA,KAC5BP,EAAW7+G,KAAM,cAAa7K,EAAQgqH,mBAE/BrC,EACT+B,EAAW7+G,KAAK,QAEhB6+G,EAAW7+G,KAAK,WAGb3D,OAAOsG,KAAK9I,GAAS7D,QACxB6oH,EAAW7+G,KAAK,eAGdy+G,GACFI,EAAW7+G,KAAK,qBAGdw0F,IACFqqB,EAAW7+G,KAAK,gBAEZ24G,GACFkG,EAAW7+G,KAAK,SAGdu+G,GACFM,EAAW7+G,KAAK,wBAGhBmX,IAAY4gG,EACd8G,EAAW7+G,KAAK,SACPhG,EACT6kH,EAAW7+G,KAAK,SACPgzF,EACT6rB,EAAW7+G,KAAK,SACPsc,GACTuiG,EAAW7+G,KAAK,SACZ+3G,GACF8G,EAAW7+G,KAAK,6BAET9F,EACT2kH,EAAW7+G,KAAK,YACP8/B,EACT++E,EAAW7+G,KAAK,WACPS,EACTo+G,EAAW7+G,KAAK,QACPu4F,GAAYU,EACrB4lB,EAAW7+G,KAAK,YACPixG,IACT4N,EAAW7+G,KAAK,aAEZixG,EAAQl3G,OAASk3G,EAAQj3G,QAC3B6kH,EAAW7+G,KAAK,SAGdixG,EAAQ/2G,UACV2kH,EAAW7+G,KAAK,aAIhBsG,IAAYA,EAAQF,eACtBy4G,EAAW7+G,KAAK,WAGdiB,GACF49G,EAAW7+G,KAAK,SAGds4G,GACFuG,EAAW7+G,KAAK,gBAGdu5G,GACFsF,EAAW7+G,KAAK,iBAGdi4G,GACF4G,EAAW7+G,KAAK,eAGdo4G,GACFyG,EAAW7+G,KAAK,iBAGdq+G,GACFQ,EAAW7+G,KAAK,yBAGdi/G,GACFJ,EAAW7+G,KAAK,cAGdmxG,GACF0N,EAAW7+G,KAAK,qBAGbw0F,IACHqqB,EAAW7+G,KAAK,cAEZmX,GAAW8gG,GACb4G,EAAW7+G,KAAK,mBAGdu5G,GAAgBjB,GAAe2G,IAAaF,GAC3C5N,GAAmBkI,GAAgBtB,IACtC8G,EAAW7+G,KAAK,wBAGdq5G,GACFwF,EAAW7+G,KAAK,mBAGdm2G,GAAkB6I,IAAsBjlH,GAAUglH,IAAqBP,GACzEK,EAAW7+G,KAAK,iBAIhB4+G,GAAqBl1D,GACvBm1D,EAAW7+G,KAAK,qBAGdk/G,EACFL,EAAW7+G,KAAK,cAEhB6+G,EAAW7+G,KAAK,aAGX6+G,EAAWruG,KAAK,IACzB,CH2iB2B6uG,CAAsBlqH,EAASwvD,EAAO,CAC7DlkD,QACA84G,gBACA/kB,iBACA2hB,gBACAmC,eACAL,UAAWA,KAAcjC,EACzB7E,kBACAoN,kBAAmBtG,IAAalV,GAAkB3lG,cAAgB,EAClEohH,iBAAkBL,GAClBM,gBAAiBzF,IAAcE,GAC/Bd,gBACAsG,gBAAyC,YAAxBlnF,IAAUhxB,aAA4Bo5F,EAAAA,EAAAA,KAAiBzqG,GACxE4iH,0BACA4G,gBAAgB/vB,EAAAA,GAAAA,GAAkB8qB,GAAkB5rB,IACpDuwB,yBAGIiB,GAAehB,GAAiB7lH,SAAS,gBACzC8mH,IAAY1rB,EAAAA,GAAAA,IAAmB1+F,EAAQgqH,gBAE7C,IAAIK,GAaAC,GAXFD,GADExkD,IAEO89C,GADM,QAGNgE,IAAY7L,IAAYsO,IAAc71D,GAEtCA,KAAoB61D,KAAclG,IAAgBpI,IAC5C,UAEA,aAJA,UAQbmH,GACEiG,GACFoB,GAAoB,UACXnH,IACTkH,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,OAGtB,MAAMC,GAA+ClrB,GAAgB,UAAY,cAEjFmrB,EAAAA,GAAAA,GACE5lG,IAAiBxkB,GACjB6F,GACA2R,EACA5X,EAAQuB,GACRk7G,GAAmB8J,IAAWxJ,IAGhChC,EAAAA,GAAAA,GACEwB,IAAoBn8G,GACpBo8G,GACAU,IAGFuN,EAAAA,GAAAA,GACEv+C,GACA9rE,GACAi9G,EACAE,EACAC,GACArxG,GACA40G,EACA5pG,QAAQsmG,GACRt+D,IAGF,MAAMurE,GAAsBtL,IAAiBz1D,EAAAA,EAAAA,KAAeR,GAAMi2D,SAAkB76G,EAE9EomH,IAAqB3qH,EAAQigE,SAC7BytC,GAAYgd,IAAwBC,IAAqB3qH,EAAQwrF,kBAChE23B,IAAe94B,KAAmBzgC,IAAa4hC,sBACjDjnF,EAECqmH,GAAsB1J,EAEtB2J,IAAe98C,EAAAA,GAAAA,IAAiB+8C,IACpC,MAAMC,EAAavJ,GAAiBv0F,QAE9B+9F,EAAYF,EAAMG,YAAY99B,OAGpC,GAFAq0B,GAAiBv0F,QAAU+9F,GAEvBr+D,EAAAA,GAAAA,QAAwBo+D,GAAcC,GAAaD,EAAY,OAEnE,MAAM7sB,EAAY4sB,EAAMtzB,OAAO0Q,QAAwB,gBACvD,IAAKhK,EAAW,QAEhBgtB,EAAAA,GAAAA,IA5hB8B,KA8hB9B,MAAMC,EAAaH,EAAYD,GACzB,aAAErU,EAAY,aAAE0U,EAAY,UAAEC,GAAcntB,EACtBv+F,KAAKwU,MAAMi3G,EAAeC,EAAY3U,GACfyU,GAniBjB,GAsiBhCr/D,IACF,IAGIw/D,IAAkB/0B,EAAAA,GAAAA,GAAqBs0B,GAAc,CAACA,IAziB1C,KAyiBsE,IAExFU,EAAAA,GAAAA,GAAkBr/C,GAAKo/C,IAAkBV,KAEzCriD,EAAAA,GAAAA,KAAU,KACR,MAAMijD,EAAejK,GAAgBt0F,QAChCu+F,IAAiBC,EAAAA,GAAAA,GAAoBD,KAEtCpN,IACFiD,GAAsB,CAAEzzG,WAAY,CAACvH,MAGnCrG,EAAQogE,kBACVkhD,GAAiB,CAAE1zG,WAAY,CAACvH,MAClC,GACC,CAAC+3G,GAAmB/3G,GAAWg7G,GAAuBrhH,EAAQogE,mBAEjE,MAAMq7B,IAAchyB,EAAAA,GAAAA,KAAQ,IACnBwgB,GACHgF,GAAqBjuF,GAAOmW,QAAQ+3E,GAAY1/B,EAAQkmB,SACxDnxE,GACH,CAAC0lF,GAASjpF,GAAOkuF,EAAW1/B,EAAOkmB,KAEhCg2C,GAAevI,KAAgB9jB,GAAgB,GAAK,EAEpDssB,IAAmBliD,EAAAA,GAAAA,KAAQ,KAC/B,IAAImiD,EACAC,EAGAC,EAFAC,GAAiB,EACjB3+B,EAAQ,GAGZ,IAAKnD,KAAYrlF,IAASC,IAASsM,IAASF,eAAgB,CAC1D,IAAIxR,EACJ,GAAImF,IAASC,GAAO,CAClB,MAAMuM,EAASxM,IAASC,GACpBuM,IAAUoyG,KACZ/jH,GAAQ4vF,EAAAA,GAAAA,IAAyB,CAC/Bj+E,QACApQ,SACAmiH,eACAj0B,YACAxZ,cACCj2E,MAEP,MAAO,GAAI0R,IAASF,eAClBE,GAAQF,cAAcxR,OAAS0R,GAAQF,cAAck8E,OACpD,CACD,MAAQ1tF,MAAOusH,EAAc7+B,OAAQ8+B,GAAkB96G,GAAQF,cAC/DxR,GAAQysH,EAAAA,EAAAA,IAAmC,CACzCzsH,MAAOusH,EACP7+B,OAAQ8+B,EACRE,eAAgBnrH,GAChBmiH,eACAj0B,YACAxZ,cACCj2E,KACL,CAEIA,IACEA,EAAQ2sH,GAAAA,KACVP,EAAepsH,GAEjBmsH,EAAkBjsH,KAAKE,KAAIwsH,EAAAA,GAAAA,IAAiB/+G,IAAMA,KAAMy7G,IAA2BtpH,IAC9E0jH,IAAehyG,IAASF,eAAiB26G,EAAkBnsH,EA7mBrC,KA8mBzBssH,GAAiB,GAGvB,MAAWtwB,KACTmwB,EAAkBjsH,KAAKE,KACrBwsH,EAAAA,GAAAA,IAAiB/+G,IAAMA,KAAMy7G,IAA2BttB,GAAY3H,eAAer0F,OAEjFmsH,EAAkBnwB,GAAY3H,eAAer0F,MArnBpB,KAsnB3BssH,GAAiB,IAIrB,GAAIH,EACFx+B,EAAS,UAASw+B,MAClBE,EAAoBF,EAAkB3Q,QACjC,GAAIn2G,KAAYs/G,GAAc,CACnC,MAAM,MAAE3kH,IAAU26G,EAAAA,EAAAA,IAAqBt1G,GAAS4wE,IAChD0X,EAAS,UAAS3tF,EAAQisH,OAC1BI,EAAoBrsH,EAAQw7G,EAC9B,CAEA,MAAO,CACL4Q,eAAcE,iBAAgB3+B,QAAO0+B,oBACtC,GACA,CACDrwB,GAAa0nB,GAAauI,GAActH,GAAcjzG,IAASF,cAAeg5E,GAAS8+B,GACvFrzC,GAAU10E,GAAOkuF,EAAWtqF,GAAOE,GAASwI,IAAMA,KAAMzI,GAAO2+G,MAG3D,aACJqI,GAAY,eAAEE,GAAc,MAAE3+B,GAAK,kBAAE0+B,IACnCH,GAeJ,SAASzhE,GAAkBoiE,GACzB,GAAK9E,GACL,OACE9/C,GAAAA,GAAAC,cAAC4kD,GAAAA,EAAW,CACVC,eAAgBhF,GAChBmB,eAAgBlK,GAA+BqK,QAAwBvkH,EACvE+nH,eAAgBA,EAChB7O,aAAcA,EACd2M,UAAWA,GACXzM,UAAWA,GACXnoB,YAAaA,EACboD,8BAA+BA,EAC/BwY,8BAA+BA,EAC/Bqb,sBAAuBptB,GACvB/J,eAAgBA,GAChBo3B,WAAYxI,IAGlB,CAEA,MAAMrW,IAA4BvkC,EAAAA,GAAAA,KAAY,KAC5C,GAAKvqB,GAEL,OACE2oB,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,iBAAkB2sB,KAA2B8oB,IAAsB,WAC7Fj1C,QAASquB,GACT/rB,IAAKypB,IAELjuB,GAAAA,GAAAC,cAACglD,GAAAA,EAAmB,CAClBvrH,SAAU29C,GACVqO,KAAM4tD,GACN7+D,mBAAoBA,GACpBo/C,oBAAqB6V,IAEnB,GAEP,CACDyN,GAAoB1iE,GAAoB4C,GAAiBk5C,GAAyBlC,GAClFqb,IAGF,SAASwb,KACP,MAAMC,EACJnlD,GAAAA,GAAAC,cAACmlD,GAAW,CACV9sH,QAASA,EACT8O,SAAUA,GACVk/F,aAAc3jB,KAAmBrpF,GACjC8sG,UAAWA,EACXF,kBAAmBA,GACnBH,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtB2c,GACpBzc,0BACEob,IAAqD,YAA1BsB,GAAsC1c,QAA4BtpG,EAE/F43C,mBAAoBA,GACpB4xD,aAAc52F,QAAQsnG,GAA+BqK,QAAwBvkH,GAC7E0pG,YAAa5xD,IAAQE,SACrBqtB,QAASw7C,GACTjX,cAAemZ,GACfpZ,mBAAoBmX,GACpBjX,aAAckX,KAIlB,MAA0B,WAAtBgF,GACKuC,EAIPnlD,GAAAA,GAAAC,cAAColD,GAAS,CACR/sH,QAASm+G,GACTn3G,SAAUA,GACV8wG,aAAc+U,EACdtxB,oBAAqB6V,EACrB2G,iBAAkBlxB,GAClBpnC,KAAMA,GACNx/B,qBAAsB2M,EACtBgpF,eAAgBA,IAGtB,CA4TA,SAASoX,KACP,OAAOlR,IACLp0C,GAAAA,GAAAC,cAACslD,GAAAA,EAAO,CACNjtH,QAASA,EACT44F,8BAA+BA,EAC/BwY,8BAA+BA,EAC/BliB,UAAWA,EACXsN,YAAaiG,GACb/F,YAAakjB,GACbuD,YAAaA,GACbpmB,cAAeA,GACfvH,YAAaA,EACbltD,MAAOA,EACPziB,MAAOk2F,GACPnT,YAAaA,GACbpI,kBAAmBp4D,GAAQ4hC,OAAOw2B,kBAClCkgB,mBAAoBA,GACpBb,sBAAuBA,GACvBqN,YAAalI,GACbtpB,aAAcqpB,GACdoI,sBAAuBpxB,IAG7B,CAEA,SAASqxB,GAA6B5xB,GACpC,MAAM92F,EACJgjE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACGugB,IACCviB,GAAAA,GAAAC,cAACs/C,GAAK,CACJz3D,MAAOA,EACPisC,YAAaA,GACbF,oBAAqB3C,EACrB53F,MAAOA,GACPw0F,YAAaA,EACbgG,kBAAmBA,EACnBE,aAAcupB,MAGhBh7B,IAAWrlF,IACX8iE,GAAAA,GAAAC,cAACszB,GAAAA,EAAK,CACJoyB,YAAa//G,IAAMA,KACnB1I,MAAOA,GACP5D,MAAOA,GACPu6F,oBAAqB3C,EACrB1J,UAAWA,EACXsN,YAAaiG,GACblG,eAAgBA,EAChBK,qBAAsBpB,EACtBuB,cAAeA,GACfvH,YAAaA,EACb2tB,YAAaA,GACb76E,MAAOA,EACPi/D,YAAaskB,GACbjiD,QAASs7C,GACTpoB,eAAgBf,MAGlB9R,IAAWplF,KAAU2+G,IACrB97C,GAAAA,GAAAC,cAACwzB,GAAAA,EAAK,CACJt2F,MAAOA,GACP7D,MAAOA,GACP43F,8BAA+BA,EAC/BwY,8BAA+BA,EAC/B7J,YAAaskB,GACb38B,UAAWA,EACXsN,YAAaiG,GACb/F,YAAakjB,GACbrjB,eAAgBA,EAChBQ,cAAeA,GACfvH,YAAaA,EACb2tB,YAAaA,GACbv5C,QAASu7C,GACTroB,eAAgBf,MAMxB,OAAIzqF,GAEAo2D,GAAAA,GAAAC,cAAC2lD,GAAgB,CAACltH,OAAQA,GAAQiG,UAAWA,GAAWiL,UAAWA,GAAWjP,WAAYrB,IACvF0D,GAKAA,CACT,CAEA,SAAS6oH,KAEP,QAASluB,KAAkB32D,MACxB0yE,MAFWx2G,IAASC,IAASw9B,IAAY/wB,KAEZ+sG,KAAkB8E,IAAez6E,IAAYszE,KACvE0H,MAA+BlB,IAAmBnjB,GAC1D,CAEA,SAASmuB,KACP,OACE9lD,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,2BACbo2F,IACCz7C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAMmc,IAAaC,eAAiB,UAAY,iBAEvDs5D,IACCz7C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,iBACbo8B,GAAK,kBAKhB,CAEA,SAASskE,KAA4G,IAC/G/jE,EADoBgkE,EAAoCppH,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAAUqpH,EAAmCrpH,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,IAGrGkgH,IAAgBnlB,IAAiB32D,GAE1BkhB,IAAaC,eACtBH,EAAcE,GAAYC,eACjB/9C,IAAaqwG,IACtBzyD,GAAcC,EAAAA,EAAAA,KAAeR,GAAMgzD,IAJnCzyD,GAAcC,EAAAA,EAAAA,KAAeR,GAAMq7D,IAMrC,MAAMoJ,EAAoBpJ,IAAc,gBAAiBA,IAAcA,GAAW9hD,YAC5EmrD,EAAkBrJ,IAAc,cAAeA,IAAcA,GAAW53F,UAExEkhG,EAA4B3K,IAAeqB,GAC3CuJ,EAAuB/jF,GAAWE,WAAWrpC,OACnD,OACE6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBAAgB88C,IAAI,OAC/BngB,GAAey5D,GACfz7C,GAAAA,GAAAC,cAAA,QACE56C,WAAWq8C,EAAAA,GAAAA,GACT,+BACAxf,IAAaC,eAAiB,gBAAkB,mBAnBtDmkE,GAsBInkD,IAAI,QAEF6jD,GAAgCF,KAClC9lD,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,sBACbjhB,IAAa47D,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,eACxBqgF,GACCpmD,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CACLlzE,UAAU,iBACVxP,KAAMinG,GACNp3D,KAAK,UAGTsa,GAAAA,GAAAC,cAAA,QACE56C,UAAU,eACV68C,QAASg7C,IAERl7D,GAAcskC,EAAAA,GAAAA,GAAWtkC,GAAgBy5D,GApsC7C,SAosCkE5+G,IAE/D4+G,IAAeyK,GACflmD,GAAAA,GAAAC,cAAC2O,GAAAA,EAAW,CACVp1D,WAAY0sG,EAAkB1sG,WAC9Bq1D,UAAWC,EAAAA,IACXoiB,8BAA+BA,EAC/BwY,8BAA+BA,KAGjC+R,KAAgByK,GAAqBC,GAAmBnmD,GAAAA,GAAAC,cAAC8O,GAAAA,EAAQ,MAClE+tC,IAAYyJ,UAAYvmD,GAAAA,GAAAC,cAACumD,GAAAA,EAAQ,CAACD,SAAUzJ,GAAWyJ,aAGzDjkF,OAEDzlC,EAptCC,IAqtCJylC,GAAWE,WAAWrpC,QACrB6mE,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,eACd26C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,OAAOo8B,GAAK,WAC5Bue,GAAAA,GAAAC,cAAA,QACE56C,UAAU,eACV68C,QAASi7C,KAER72B,EAAAA,GAAAA,GAAY,IAAGhkD,EAAUE,UAAU,GAAGpgB,cAI7C49C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACb4gG,GAA+BI,OAUhBxpH,EAVwCqlD,IAAaw5D,oBACpE17C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAAc88C,IAAI,QAAQ1gB,GAAK,mBAC7CnpD,EAAQwrF,iBAAmB3rC,KAAYsjE,GACzCz7C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAAc88C,IAAI,QAAQ7pE,EAAQwrF,kBAChD4wB,IAAsB+G,IAAgBz6E,QAMtCnkC,EALFmjE,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAAc88C,IAAI,QAC/BuyC,GAAkB+R,aAAehlE,GAChCizD,GAAkBz6C,QAAU,uBAAyB,yBAI1D2hD,IACC57C,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,gBAAgB,kBAC9B26C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAMqxE,GAAe,EAAI,SAAW,UACzCA,GAAe,EAAIA,QAAev6G,GAK7C,CAEA,MAAM6pH,GAAgBvuE,IAAWsjE,GAAcnjH,EAAQwrF,qBAAkBjnF,EAEzE,OACEmjE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,GACL3qE,IAAIs7F,EAAAA,EAAAA,KAAiB78F,EAAQuB,IAC7BwrB,UAAW66F,GACX,kBAAiBvhH,GACjBgoH,OAAQ74B,EAAcqC,GAAAA,OAAYtzF,EAClCm1F,YAAarC,GACbztB,QAAS2tB,GACT7O,cAAeJ,GACfgmC,cAAev2B,GACfha,aAAc4lC,GAA2BprB,QAAgCh0F,EACzEgqH,YAAatF,GAA0B3yB,QAAkB/xF,EACzDy5E,aAAeirC,IAA2BtF,GAA4B3mC,QAAmBz4E,GAEzFmjE,GAAAA,GAAAC,cAAA,OACEuE,IAAKq1C,GACLx0F,UAAU,gBACV,kBAAiB1mB,GACjB,uBAAsBmpD,EAAQA,EAAMzgD,SAASygD,EAAMzgD,SAASlO,OAAS,GAAGU,QAAKgD,EAC7E,qBAAoBirD,EAAQA,EAAM27B,YAAY5pF,QAAKgD,EACnD,0BAAyBvE,EAAQogE,uBAAoB77D,EACrD,2BAA0B65G,SAAqB75G,EAC/C,iBAAgBuK,SAAYvK,EAC5B,gCAAiDA,IAAvBvE,EAAQqnB,cAElCg2B,GACAqqB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,0BACZ4tE,IAAcjzB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,YAG7B6tE,GACC5zC,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,sCAAuCq2C,IAAmB,eACpF71C,QAASi8C,IAERpG,IACC/3C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,YAIhB4tE,GAhpBL,WACE,MAAMmT,GAAelK,IAAc16D,GAAeA,GAAYC,oBAAiBtlD,EAE/E,OACEmjE,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CACL7yC,KAAMsoB,GAAW,eAAiB,QAClCn4D,KAAM+mG,GACNh3G,KAAMkhH,EACN5kD,QAAS06C,GAAaK,QAAoBpgH,GAGhD,CAqoBmBkqH,GACf/mD,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,0BACxB+/C,GAAiB7lH,SAAS,SAAW,kBACrC6lH,GAAiB7lH,SAAS,aAAe,4BAE3CokE,GAAAA,GAAAC,cAAA,OACE56C,UAAWo8F,GACX/7B,MAAOA,GACPvjB,IAAI,QAEHs5C,KAAgBO,IACfh8C,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACG6jD,MAA4BE,KAC5BW,IAAiB1mD,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAAc88C,IAAI,QAAQukD,KA7jBxE,WACE,MAAMrhG,GAAYq8C,EAAAA,GAAAA,GAChB,gBACA+5C,IAAe,oBACfgB,IAA2B,yBAC3BC,IAAgB,iBAChB2H,IAAkB,oBAEdvwB,EAAoBwlB,KACnB2G,IAAYpzD,KAAoB2vD,KAAiBjB,MAAmB+F,GACrE0F,GAAmBtlD,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjBihD,IAA8B,YAC9B5c,GAAkB,sBAEdkhB,GAAmBlK,KAAWzjH,IAASqpF,GAE7C,OACE3iB,GAAAA,GAAAC,cAAA,OAAK56C,UAAWA,EAAWuhG,cAAet2B,GAA0BnuB,IAAI,SACpEs5C,IAAeoK,MAA4BE,KAC5CrJ,IACC18C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,qBACZsxF,IACC32C,GAAAA,GAAAC,cAACinD,GAAS,CACRnmH,MAAO61G,GACP10C,QAASk8C,GACT/4F,UAAU,kBAGbo3F,IACCz8C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kCACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACZygG,MAEFC,IAAiB,GAAM,IAG3BjL,IACC96C,GAAAA,GAAAC,cAACknD,GAAAA,EAAe,CACd7uH,QAAS4X,EACT/R,UAAW0S,GACXogF,aAAcA,GACdnD,YAAaA,EACbptD,OAAQu0E,EACRmS,WAAYhS,EACZiS,cAAelS,EACf0B,iBAAkBA,GAClBG,iCAAkCA,GAClC9lB,8BAA+BA,EAC/BwY,8BAA+BA,EAC/BxnC,QAASk7C,KAGZjC,IACCn7C,GAAAA,GAAAC,cAACqnD,GAAa,CACZnpG,MAAOq3F,EACP90E,OAAQ+0E,EACRxkB,aAAcA,GACdnD,YAAaA,EACboD,8BAA+BA,EAC/BhvB,QAASm8C,MAKhBjhH,IACC4iE,GAAAA,GAAAC,cAACsnD,GAAO,CACNjvH,QAASA,EACTu7F,oBAAqB3C,EACrBwY,8BAA+BA,EAC/BjlB,WAAY2zB,GACZlL,iBAAkBA,GAClBqE,WAAYqH,GACZpH,aAAc5jC,KAGjB0tC,IAAoBlF,IACnBp2C,GAAAA,GAAAC,cAACunD,GAAmB,CAClB3tF,cAAeu8E,GACfzf,YAAaiiB,KAAuBzwG,EAAAA,EAAAA,KAASzP,MAAYi8C,GACzDr7C,MAAOA,GACPu6F,oBAAqB3C,EACrBmG,iBAAkBrzF,GAClBrF,UAAWA,GACXjG,OAAQA,GACR4M,wBAAyBA,KAG5Bg2G,IAAoBvL,IACnB/vC,GAAAA,GAAAC,cAACwnD,GAAa,CACZtiH,MAAO4qG,GACPpZ,YAAaiiB,KAAuBzwG,EAAAA,EAAAA,KAASzP,MAAYi8C,GACzDr7C,MAAOA,GACPu6F,oBAAqB3C,EACrBmG,iBAAkBrzF,GAClBrF,UAAWA,GACXjG,OAAQA,GACR4M,wBAAyBA,KAG5BszG,IAAuBjkE,KAAW3wC,IACjCg8D,GAAAA,GAAAC,cAACynD,GAAAA,EAAa,CACZC,WAAYza,GACZvuG,UAAWrG,EAAQuB,GACnB83G,YAAar5G,EAAQqC,WACrBg6C,OAAQA,GACRu8C,8BAA+BA,EAC/BwY,8BAA+BA,EAC/Bke,OAAQh6C,KAGXzP,IACC6B,GAAAA,GAAAC,cAAC4nD,GAAgB,CACfvvH,QAASA,EACT6lE,UAAWA,GACXzlE,OAAQA,MAGV6pF,IAAWu5B,KAAiBZ,IAC5Bl7C,GAAAA,GAAAC,cAAC6nD,GAAAA,EAAU,CACTxvH,QAASA,EACTu7F,oBAAqB3C,EACrB4D,YAAaiG,GACb1F,cAAeA,GACf0yB,YAAad,EAAkBpJ,QAAkBhhH,EACjDmrH,oBAAqBhO,GACrB3gG,qBAAsBA,GACtB4uG,cAAex4G,QAAQ8oG,GACvB2P,cAAezQ,KAAuBsF,GACtChD,sBAAuBA,GACvBzB,eAAgBA,KAGlBniB,IAAS12E,IAASy7F,KAClBl7C,GAAAA,GAAAC,cAACo2B,GAAAA,GAAK,CACJz1D,MAAOA,EACPtoC,QAASA,EACT+qD,OAAQ8kE,EAAAA,GAAYlJ,OACpBpqB,eAAgBA,EAChBuzB,aAAczyE,EACds9C,WAAYA,GACZzL,UAAWA,EACX6gC,OAAQ/K,GACRyK,YAAatoG,IAASwnG,EAAkBpJ,QAAkBhhH,EAC1Du4F,eAAgBf,GAChBgB,cAAeA,GACfijB,eAAgBA,EAChByB,sBAAuBA,GACvBkO,cAAex4G,QAAQ8oG,GACvBl/F,qBAAsBA,GACtB6sC,aAAc4nC,EACdk6B,oBAAqBhO,GACrBkO,cAAezQ,KAAuBsF,KAGzC1/G,IACC2iE,GAAAA,GAAAC,cAACqoD,GAAAA,EAAQ,CACPjrH,SAAUA,GACV/E,QAASA,EACTu7F,oBAAqB3C,EACrB4D,YAAaiG,GACbod,sBAAuBA,GACvBtjB,eAAgBA,EAChBuzB,aAAczyE,EACds9C,WAAYA,GACZe,aAAcqpB,GACdjoB,eAAgBf,GAChBgB,cAAeA,GACf2jB,mBAAoBA,KAGvB50G,KAAcy3G,IACb77C,GAAAA,GAAAC,cAACsoD,GAAK,CACJjwH,QAASA,EACTw1F,YAAaA,IAGhB+tB,IAAkB77C,GAAAA,GAAAC,cAACuoD,GAAY,CAAClwH,QAASA,IACzC2qC,IACC+8B,GAAAA,GAAAC,cAACwoD,GAAO,CAACxlF,QAASA,GAASguD,aAAc33F,KAE1CsK,IACCo8D,GAAAA,GAAAC,cAACyoD,GAAI,CAACpwH,QAASA,EAASsL,KAAMA,GAAM+lG,WAAYmU,MAEhDpiB,IAAYU,KACZp8B,GAAAA,GAAAC,cAAC0oD,GAAQ,CAACrwH,QAASA,IAEpB2iG,IACCj7B,GAAAA,GAAAC,cAAC2oD,GAAI,CACHtwH,QAASA,EACTyiG,iBAAkBA,KAGrBtxF,IAASF,eACRy2D,GAAAA,GAAAC,cAAC4oD,GAAmB,CAClBvwH,QAASA,EACT4oG,YAAaA,KAIhBga,IACCl7C,GAAAA,GAAAC,cAAA,KACE56C,WAAWq8C,EAAAA,GAAAA,GACT,iBACCq4C,IAAyB1gG,IAAwB,uBAEpD8oD,IAAI,QAEF9oD,GAAuBooC,GAAK,qBAC5B62D,GAAkBC,EAAkBv4C,GAAAA,GAAAC,cAAC6oD,GAAAA,EAAY,CAAC9rH,QAASu7G,IAAsBA,GAKtF1rD,IAgDP,SAAoCinC,GAClC,MAAMkzB,GAAmBtlD,EAAAA,GAAAA,GACvB,eACA,YAEIqnD,GAAcrnD,EAAAA,GAAAA,GAClB,eACA,WACiB,YAAjBihD,IAA8B,YAC9B5c,GAAkB,sBAIdijB,EADoBzmC,KAAaA,IAAWrlF,KAAYqlF,IAAWplF,KAAU2+G,KAChCR,IAAoBkB,GACjEyM,EAAgC,YAAjBtG,GAErB,OACE3iD,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACGsjD,KACArF,KAAY3E,IACXt7C,GAAAA,GAAAC,cAAA,OAAK56C,UAAW2hG,EAAkB7kD,IAAI,QACnC3f,KACAw+D,IACChhD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBACZm9B,IAAkB,MAIvBwmE,GAAuBC,GAAgB/D,MAI5C8D,GACChpD,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACG0jD,GAA6B5xB,IAC5BwnB,IACAt7C,GAAAA,GAAAC,cAAA,OAAK56C,UAAW0jG,EAAa5mD,IAAI,QAC9Bq6C,IACCx8C,GAAAA,GAAAC,cAACipD,GAAS,CAACnpG,UAAWA,GAAWg6E,iBAAkBnM,KAEpDq7B,GAAgB/D,OAQ/B,CAjG0BiE,CAA2Br1B,IAE7CjnC,IACAmT,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACG0jD,GAA6B5xB,GAC7BmsB,KAAY3E,IACXt7C,GAAAA,GAAAC,cAAA,OAAK56C,UAAW2hG,EAAkB7kD,IAAI,QACnC3f,KACAw+D,IACChhD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBACZm9B,IAAkB,KAIxBg6D,IACCx8C,GAAAA,GAAAC,cAACipD,GAAS,CAACnpG,UAAWA,GAAWg6E,iBAAkBnM,KAEnC,YAAjB+0B,IAA8BuC,MAGlCI,MAIJ77G,KAAYA,GAAQF,eACnBy2D,GAAAA,GAAAC,cAACmpD,GAAO,CACN9wH,QAASA,EACT48F,qBAAsBpB,IAAsBynB,GAC5C3tB,eAAgBA,GAChBqF,WAAYA,GACZryD,MAAOA,EACPi/D,YAAaskB,KAGhBxpF,IACCqlC,GAAAA,GAAAC,cAACopD,GAAQ,CACP/wH,QAASA,EACTs1F,eAAgBA,GAChBqF,WAAYA,GACZryD,MAAOA,EACP/qB,KAAM6qB,IAKhB,CA2TSs+C,IACCi9B,IAA6C,eAAjB0G,KAAkC9G,IAAkBqJ,KACjFhJ,IACCl8C,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GACd,yBACAm3C,GAAqB,iCAGpBsD,IACCn8C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,wBACVi9C,MAAM,oBACN71D,OAAK,EACLi5C,KAAK,OACL6c,UAAW9gB,GAAK,2BAChBygB,QAAS0xC,EAAwBmK,GAAqBC,IAEtDh+C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,kBAGds2E,IACCr8C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,wBACVi9C,MAAM,oBACN71D,OAAK,EACLi5C,KAAK,OACL6c,UAAU,gBACVL,QAAS+1C,GAAegG,GAAcC,IAEtCl+C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,kBAKlBu7E,IACCthD,GAAAA,GAAAC,cAACqpD,GAAa,CACZjrH,WAAY6nG,GACZtO,SAAUuhB,EACVnzF,UAAW6yF,EACXlhB,cAAeA,KAGlB8qB,IAAgBziD,GAAAA,GAAAC,cAACspD,GAAe,CAACjwH,MAAOA,KACxCioH,IAAqD,eAA1BsB,IAA0C1c,MAEvE7tG,EAAQyrF,eACP/jB,GAAAA,GAAAC,cAACupD,GAAa,CAAClxH,QAASA,EAAS4pE,QAAS84B,KAErB,YAAtB4nB,KAAoC/G,IACnC77C,GAAAA,GAAAC,cAAColD,GAAS,CACR/sH,QAASm+G,GACTn3G,SAAUA,GACV6wG,WAAS,EACT53F,qBAAsB2M,EACtBkjE,SAAUg8B,GACVvwB,oBAAqB6V,EACrB2G,iBAAkBlxB,GAClBpnC,KAAMA,GACNm2D,eAAgBA,MAIrBsM,IACCx6C,GAAAA,GAAAC,cAACwpD,GAAAA,EAAoB,CACnB97E,OAAQgzC,GACR+oC,OAAQlP,GACRmP,WAAYlP,IAAmBrqB,QAAQ,WAAcqqB,GAAwCj+F,UAAO3f,EACpGvE,QAASA,EACTwvD,MAAOA,EACPl0C,gBAAiBA,GACjBivD,QAASge,GACT7J,oBAAqB8J,GACrBolB,kBAAmBA,GACnBE,UAAWA,EACX/Y,iBAAkBA,KAGlB,K,gBIhrDV,MAUA,GAViE1tB,IAC/D,MAAM,OAAEhyB,GAAWgyB,EACbiqD,GAAuC/pD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAQQ,MAAO,wCAAyC3yB,GAI1D,OAAOi8E,EAAuC5pD,GAAAA,GAAAC,cAAC2pD,EAAyCjqD,QAAY9iE,CAAS,EC0T/G,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEtM,GAAQsM,EACjB,MAAM1M,GAAU8hB,EAAAA,EAAAA,KAAuB9iB,EAAQoB,GAEzCg7F,GAAkBC,EAAAA,EAAAA,KAAsBr8F,GACxCk/G,EAAoBl+G,GAAU6tD,EAAAA,EAAAA,KAA4B7tD,QAAWuE,EACrEw4F,EAAgBmhB,IAAqBlhB,EAAAA,EAAAA,KAAiB5B,EAAiB8iB,GAE7E,MAAO,CACLl+G,UACAsoC,OAAOmpC,EAAAA,EAAAA,KAAYzyE,GACnB+9F,gBACA0F,iBAAkBziG,GAAUy8F,EAAAA,EAAAA,KAAuBz9F,EAAQgB,QAAWuE,EACtEq7G,iBAAkB5/G,GAAU28F,EAAAA,EAAAA,KAAuB39F,EAAQgB,QAAWuE,EACvE,GAdekmE,EA5QgC1pE,IAU9C,IAV+C,OACnDX,EAAM,QACNJ,EAAO,aACP+rF,EAAY,MACZzjD,EAAK,8BACLswD,EAA6B,8BAC7BwY,EAA6B,cAC7BrU,EAAa,iBACb0F,EAAgB,iBAChBmd,GACD7+G,EACC,MAAM,qBACJwwH,EAAoB,QACpBlqF,EAAO,sBACPmqF,EAAqB,sBACrBC,EAAqB,gBACrBvL,EAAe,kBACfwL,IACE9qG,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,KAEPyoD,GAAa1lD,EAAAA,GAAAA,IAAuB,MAEpCC,GAAMD,EAAAA,GAAAA,IAAuB,MAC7B2lD,EAAgBz6G,QAAQnX,IAExB,SAAE01E,IAAaC,EAAAA,EAAAA,OAEnBk8C,QAASt2B,IACPu2B,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTimC,WAlC6B,IAmC7BjK,UAAW,KAEP,kBACJ1/B,EAAiB,kBAAE65B,EAAiB,wBACpCzsB,EAAuB,kBAAEnN,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBvc,OAAK3nE,GAAW,EAAMq9B,EAAAA,KAEjD2mC,EAAAA,GAAAA,KAAU,IACDqpD,EAAgBr2B,EAAoBo2B,EAAW1kG,SAAWuqE,IAC3DA,EAAOqB,gBACT04B,EAAqB,CAAEtwH,OAAQb,GACjC,SACGmE,GACJ,CAACnE,EAAQwxH,EAAer2B,EAAqBg2B,IAEhD,MAKMU,GAA6BlkD,EAAAA,GAAAA,IAAgB,KACjDyjD,GAAuB,KAGnB,MACJ5sH,EAAK,MAAEC,GACL7E,GAAUgF,EAAAA,EAAAA,KAAkBhF,GAAW,CAAE4E,WAAOL,EAAWM,WAAON,GAEhEsiH,EAAQhiH,GAAOgiH,MACfqL,EAAW/6G,QAAQvS,GAASC,GAE5B0yF,GAAcxpB,EAAAA,GAAAA,IAAgB,KAC7B/tE,IAELyxH,EAAsB,CAAEzvG,WAASpd,IAASiiH,SAAetiH,EAAWtD,OAAQb,IAC5EinC,EAAQ,CAAEtkB,IAAK/iB,EAAQ+iB,IAAKC,iBAAiB,IAAO,IAGhDmvG,GAAkBpkD,EAAAA,GAAAA,IAAgB,KACtC0jD,EAAsB,CAAEzvG,SAAS,EAAM/gB,OAAQb,IAC/C8lH,EAAgB,CACdn7D,OAAQ07D,EAAAA,GAAkB2L,iBAC1BhyH,SACAu4D,oBAAoB,GACpB,IAGE05D,GAA0BtkD,EAAAA,GAAAA,IAAgB,KAC9C2jD,EAAkB,CAAEtxH,UAAS,IAKzBurH,GAAmBliD,EAAAA,GAAAA,KAAQ,KAC/B,IAAImiD,EACAC,EAEAz+B,EAAQ,GAEZ,GAAIxoF,GAASC,EAAO,CAClB,IAAIpF,EACAmF,EACFnF,GAAQ4vF,EAAAA,GAAAA,IAAyB,CAC/Bj+E,MAAOxM,EACP8wE,aACCj2E,MACMoF,IACTpF,GAAQ4vF,EAAAA,GAAAA,IAAyB,CAC/Bj+E,MAAOvM,EACP6wE,aACCj2E,OAGDA,IACEA,EAAQ2sH,GAAAA,KACVP,EAAepsH,GAEjBmsH,EAAkBjsH,KAAKE,KAAIwsH,EAAAA,GAAAA,MAAoB5sH,GAEnD,CAMA,OAJImsH,IACFx+B,EAAS,UAASw+B,EA/BD,OAkCZ,CACLC,eAAcE,gBA9BO,EA8BS3+B,QAC/B,GACA,CAACxoF,EAAOC,EAAO6wE,KAEZ,aACJm2C,EAAY,MAAEz+B,GACZu+B,EAEJ,GAAK3rH,GAAYA,EAAQ0E,QAqEzB,OACEgjE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACL9qC,IAAI,oBACJrU,UAAU,yDAEV26C,GAAAA,GAAAC,cAAA,OACE56C,UAAU,qEACV88C,IAAI,OACJujB,MAAOA,EACPsM,YA9JmBhoC,KACvB4lC,EAAAA,GAAAA,GAAwB5lC,GACxB+jC,EAAwB/jC,EAAE,EA6JtBg3B,cAAeJ,GAEf5gB,GAAAA,GAAAC,cAAC05B,GAAgB,CAACnB,UAAWlgG,EAAQkgG,UAAWnzE,UAAU,gBAAgB88C,IAAI,QAjDpF,WACE,GAAK7pE,EAEL,OAAI4E,EAEA8iE,GAAAA,GAAAC,cAACszB,GAAAA,EAAK,CACJr2F,MAAOA,EACP0jC,MAAOA,EACPk0D,YAAaiG,EACb1F,cAAeA,EACfxB,oBAAqB3C,EACrB1J,WAAS,EACTtlB,QAAS2tB,EACTgQ,YAAaskB,IAIfhnH,EAEA6iE,GAAAA,GAAAC,cAACwzB,GAAAA,EAAK,CACJt2F,MAAOA,EACP+zF,8BAA+BA,EAC/BwY,8BAA+BA,EAC/BliB,WAAS,EACTsN,YAAaiG,EACb/F,YAAakjB,EACb7iB,cAAeA,EACfnzB,QAASi9C,EAAQtvB,EAAc46B,EAC/B5qB,YAAaskB,SAXnB,CAiBF,CAgBSyG,GACAtyH,EAAQ4E,OACP8iE,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CACL7yC,KAAK,QACLxoD,MAAO5E,EAAQ4E,MACfmoB,WAAWq8C,EAAAA,GAAAA,GAAe,iBAAkBjgB,EAAK2gB,OAAS,YAG9DpC,GAAAA,GAAAC,cAAA,QAAM56C,WAAWq8C,EAAAA,GAAAA,GAAe,6BAA8B8oD,GAAY,cACvElyH,EAASuyH,cAAgBppE,EAAK,4BAA8BA,EAAK,oBAClEue,GAAAA,GAAAC,cAAC6qD,GAAAA,EAAW,CAAC5oD,QAASyoD,EAAyBtlG,UAAU,YACtDo8B,EAAK,kCA1FlB,WACE,GAAKnpD,EACL,OACE0nE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,6BAA6B88C,IAAI,QAAQ7pE,EAAQge,OAC/D7G,QAAQnX,EAAQ0E,SAAS4I,OACxBo6D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBAAyB88C,IAAI,OAAOqC,IAAKylD,GACtDjqD,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,qBAAqB88C,IAAI,SACtC04B,EAAAA,GAAAA,GAAuB,CACtBj1F,KAAMtN,EAAQ0E,QAAQ4I,KAAKA,KAC3B2L,SAAUjZ,EAAQ0E,QAAQ4I,KAAK2L,aAMvCyuD,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,2BACVqgC,KAAK,OACL4c,MAAM,cACNyoD,eAAa,EACb7oD,QAAS2tB,GAERv3F,EAAQyoC,YAIjB,CAkESi+C,IAEHhf,GAAAA,GAAAC,cAACspD,GAAe,MAChBvpD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,0BACb26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,wBACVi9C,MAAM,oBACN71D,OAAK,EACLi5C,KAAK,OACL6c,UAAW9gB,EAAK,SAChBygB,QAASqoD,GAETvqD,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,QAAQ1gB,UAAU,2BAE9B/sB,EAAQ0yH,WACPhrD,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,wBACVi9C,MAAM,oBACN71D,OAAK,EACLi5C,KAAK,OACL6c,UAAW9gB,EAAK,QAChBygB,QAAS0e,EACTI,cAAeJ,GAEf5gB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,OAAO1gB,UAAU,6BAKnCm1F,GACCx6C,GAAAA,GAAAC,cAAC2pD,GAAoC,CACnCj8E,OAAQgzC,EACR+oC,OAAQlP,EACRyQ,WAAYzmD,EACZlsE,QAASA,EACTuqE,QAASge,EACT7J,oBAAqB8J,IAGrB,KCHV,IAAergB,EAAAA,GAAAA,KA9P0BpnE,IA4BnC,IA5BoC,WACxC6xH,EAAU,OACVxyH,EAAM,SACN4G,EAAQ,WACR4G,EAAU,cACVilH,EAAa,mBACbC,EAAkB,iBAClBC,EAAgB,SAChBnwH,EAAQ,WACR+8F,EAAU,cACVqzB,EAAa,UACbC,EAAS,cACTC,EAAa,UACbhkC,EAAS,aACTnD,EAAY,YACZonC,EAAW,6BACXC,EAA4B,qBAC5BjS,EAAoB,KACpB9/G,EAAI,QACJgyH,EAAO,cACPjT,EAAa,WACb7wD,EAAU,oBACV+jE,EAAmB,sBACnBlR,EAAqB,cACrB/tG,EAAa,mBACbk/G,EAAkB,cAClBC,EAAa,yBACbpS,GACDrgH,EACC,MAAM,oBAAE0yH,IAAwB7sG,EAAAA,EAAAA,MAE1B8sG,EAAuBC,GAAAA,GACvB9L,GAAa+L,EAAAA,GAAAA,IAAiB,IAAMP,IAAYK,KAAwB,CAACL,EAASK,IAElFG,GAAqBx/G,IAAkBk7C,GAEvC,8BACJukE,EAA6B,8BAC7Bl7B,EAA6B,8BAC7BwY,GlD7FW,SACb/vG,EACA0qF,EACAo1B,EACAC,EACAhhH,GAEA,MAAM,oBACJuO,EAAmB,iBAAE2yG,EAAgB,sBAAED,EAAqB,0BAC5D0S,IACEntG,EAAAA,EAAAA,OAEE,SAAE8uD,IAAaC,EAAAA,EAAAA,MACfq+C,EAAkCt+C,EAAW,IAAM,KAGvDm8C,QAASiC,EAA+BG,OAAQC,EAAkBC,SAAUC,IAC1EtC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTsoC,WAtBsC,MAuBpCllH,IACF,GAAa,WAAT9N,IAAqBizH,EAAAA,GAAAA,KACvB,OAGF,IAAI1lH,EAAQ,EACZ,MAAM2lH,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnClS,EAAsC,GACtCmS,EAAmC,GAEzCvlH,EAAQhO,SAAS2pH,IACf,MAAM,eAAEjyB,EAAc,OAAErB,GAAWszB,GAE7B,QAAE6J,GAAYn9B,EACdnxF,EAAY4D,OAAO0qH,EAAQpuH,eAAiBouH,EAAQtuH,WACpDuuH,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAc5qH,OAAO0qH,EAAQE,kBAAetwH,EAEnEs0F,GAODxyF,EAAYuI,IACdA,EAAQvI,GAGNsuH,EAAQv0D,kBACVm0D,EAAW1pH,KAAKxE,GAGdsuH,EAAQvW,mBACVoW,EAAY3pH,KAAKxE,GAGfsuH,EAAQ7lH,UACV2lH,EAAuB5pH,KAAKgqH,GAAexuH,GAGzCuuH,GACFF,EAAuB7pH,KAAKgqH,GAAexuH,IAvBvCsuH,EAAQ7lH,UACVyzG,EAA0B13G,KAAKgqH,GAAexuH,EAuBlD,IAGE86G,EAAqBl0F,SAAWre,GAASuyG,EAAqBl0F,SAChEte,EAAoB,CAAEC,UAGpB2lH,EAAW1zH,QACbygH,EAAiB,CAAE1zG,WAAY2mH,IAG7BC,EAAY3zH,QACdwgH,EAAsB,CAAEzzG,WAAY4mH,KAGlCC,EAAuB5zH,QAAU0hH,EAA0B1hH,SAC7DugH,EAAyB,CAAEqT,yBAAwBlS,8BAGjDmS,EAAuB7zH,QACzBkzH,EAA0B,CAAE3zH,SAAQ+I,IAAKurH,GAC3C,KAGFI,EAAAA,GAAAA,GAAkBZ,EAAkBE,GAEpC,MACEvC,QAASj5B,IACPk5B,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTsoC,WAAYpmC,GACZ8mC,OAAQf,KAGFnC,QAASzgB,IAAkC0gB,EAAAA,GAAAA,IAAwB,CACzEC,QAAShmC,EACTsoC,WAAYpmC,KAGd,MAAO,CACL6lC,gCACAl7B,gCACAwY,gCAEJ,CkDfM4jB,CAAoB3zH,EAAM0qF,EAAco1B,EAAsBC,EAA0BhhH,IAEtF,oBACJ60H,EAAmB,oBACnBC,EAAmB,mBACnBC,EAAkB,cAClBC,GC5FW,SACb/zH,EACA0qF,EACAn+E,EACAklH,EACAC,EACAnwH,EACA2wH,EACAC,EACAH,GAEA,MAAM,qBAAEtjH,IAAyB6W,EAAAA,EAAAA,OAE1ByuG,EAAmBC,IAAoB7rD,EAAAA,GAAAA,KAC5C,IAAgB,WAATpoE,EAAoB,EACzBiR,EAAAA,EAAAA,KAAS,IAAMvC,EAAqB,CAAEuD,UAAWU,EAAAA,GAAkBC,aAAc,KAAM,GAAM,IAC7F3B,EAAAA,EAAAA,KAAS,IAAMvC,EAAqB,CAAEuD,UAAWU,EAAAA,GAAkBI,YAAa,KAAM,GAAM,IAC1F,IAEJ,CAACrE,EAAsBnC,IAInBsnH,GAAsBjpD,EAAAA,GAAAA,IAAuB,MAE7CkpD,GAAqBlpD,EAAAA,GAAAA,IAAuB,MAE5CmpD,GAAgBnpD,EAAAA,GAAAA,IAAuB,MAEvCspD,GAAoBxnD,EAAAA,GAAAA,IAAgB,KACxC,IAAKslD,EAAS,OAEd,IAAKzlH,GAAY/M,OAGf,OAFA0yH,GAAmB,QACnBC,GAAc,GAIhB,IAAKT,EAGH,OAFAQ,GAAmB,QACnBC,GAAc,GAIhB,MAAMt1B,EAAYnS,EAAa9+D,QACzBuoG,EAAaJ,EAAcnoG,QACjC,IAAKixE,IAAcs3B,EAAY,OAE/B,MAAM,aAAE9e,EAAY,aAAE0U,EAAY,UAAEC,GAAcntB,EAC5Cu3B,EAAeD,EAAWE,UAC1BC,EAAeh2H,KAAKwU,MAAMshH,EAAepK,EAAY3U,GAErDkf,EAAaD,GAxDC,EA0DC,IAAjBvK,IAEJmI,EAAmB3wH,GAAYgzH,IALVD,GAxDH,KA8DlBnC,GAAeoC,GAAW,KAI1B/D,QAASgE,IACP/D,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTgpC,OAAQe,EAAAA,KACN3mH,IACGmmH,GAAqBD,GAI1BlmH,EAAQhO,SAAQJ,IAAgC,IAA/B,eAAE83F,EAAc,OAAErB,GAAQz2F,EACpC83F,IAEoB,sBAArBrB,EAAOzqE,WACTsoG,IAGuB,qBAArB79B,EAAOzqE,WACTuoG,IACF,GACA,IAGEL,EAAsBrnH,GAAcA,EAAW/M,OAAS,GAE9DohH,EAAAA,GAAAA,IAAeiT,EAAqBD,EAAsBY,OAAgCtxH,IAC1F09G,EAAAA,GAAAA,IAAekT,EAAoBF,EAAsBY,OAAgCtxH,GAEzF,MACEstH,QAASkE,EACT9B,OAAQ+B,EACR7B,SAAU8B,IACRnE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTgpC,OAAQmB,IACRC,kBAAmBj/B,GAAAA,IAClBq+B,IAEHtT,EAAAA,GAAAA,IAAemT,EAAeW,GAE9B,MACElE,QAASuE,EACTnC,OAAQoC,EACRlC,SAAUmC,IACRxE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAShmC,EACTgpC,OA9GoB,EA+GpBoB,kBAAmBj/B,GAAAA,IAClBq+B,IAEHtT,EAAAA,GAAAA,IAAemT,EAAegB,IAE9B7tD,EAAAA,GAAAA,KAAU,KACJ8qD,GACFkC,GACF,GACC,CAAClC,EAASkC,IAEb,MAAMgB,GAAgBxoD,EAAAA,GAAAA,IAAgB,KACpCioD,IACAK,IAEA9rH,YAAW,KACT+rH,IACAL,GAAgB,GA9HO,IA+HD,KAI1B5vC,EAAAA,GAAAA,GAAckwC,EAAe,CAACA,EAAe3oH,IAG7C,MAAM4oH,GAA8BC,EAAAA,GAAAA,IAAmB3D,EAvIvB,KA0IhC,OAFA4D,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CACLvB,sBACAC,sBACAC,qBACAC,gBAEJ,CDhDMuB,CACFt1H,EACA0qF,EACAn+E,EACAklH,EACAC,EACAnwH,EACA2wH,EACAC,EACAH,GAGIlqE,GAAO+f,EAAAA,GAAAA,KAEP0tD,EACJlvD,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAhES,iBAgE4B,wBAAyBhoC,IAAI,mBAChFsmC,GAAAA,GAAAC,cAAA,YAAOxe,EAAK,oBAGV0tE,EAAwBzU,EAAwB,EAAIyQ,EAAcz5G,QAAO,CAACC,EAAKy9G,IAC5Ez9G,EAAMy9G,EAAalsC,aAAamsC,OAAOl2H,QAC7C,GACH,IAAIm2H,EAAkB,EAEtB,MAAMC,GAAiB9rB,EAAAA,GAAAA,GAAsBv9F,GACvCspH,EAAe//G,QACnBvJ,GAAcqpH,GAAkBrpH,EAAWA,EAAW/M,OAAS,KAAOo2H,EAAeA,EAAep2H,OAAS,IAGzGgqF,GAAagoC,EAAcnlH,KAAI,CACnCypH,EACAC,EACAC,KAEA,MAAMzsC,EAAeusC,EAAUvsC,aAAal9E,KAAI,CAC9C4pH,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYz2H,SACRopF,GAAQqtC,EAAY,MACrBvvH,EAAAA,EAAAA,KAAgBuvH,EAAY,MAC3BA,EAAY,GAAG5yH,QAAQ+E,QAAQo8D,UACnC,CACA,MAAM7lE,EAAUs3H,EAAY,GACtBpW,EACJqW,IAAqBC,EAAkB32H,OAAS,GAC7Cu2H,IAAmBC,EAAgBx2H,OAAS,EAGjD,OAAOsrD,EAAAA,EAAAA,IAAQ,CACbnsD,EAAQuB,KAAO6xH,EAA6BnmG,SAAW2pG,EACvDlvD,GAAAA,GAAAC,cAAC8vD,GAAAA,EAAa,CACZr2F,IAAKphC,EAAQuB,GACbvB,QAASA,EACTgH,SAAUA,EACVsU,gBAAiBja,EACjBq2H,cAAevgH,QAAQnQ,GAAYA,IAAaD,EAAAA,KAAmBsN,GACnEy/G,8BAA+BA,EAC/Bl7B,8BAA+BA,EAC/BwY,8BAA+BA,EAC/B+P,qBAAsBA,EACtBL,gBAAiB+V,IAA0BG,EAC3CjW,YAAaG,GAAgBgW,EAC7BhW,aAAcA,EACdE,yBAA0BA,KAGhC,CAEA,IAAIuW,EAEJ,OAAOL,EAAY5pH,KAAI,CACrBw8E,EACA0tC,KAEA,MAAM53H,EAAUiqF,GAAQC,GAAkBA,EAAeiB,YAAcjB,EACjE16B,EAAQy6B,GAAQC,GAAkBA,OAAiB3lF,EACnDvD,GAAQgjG,EAAAA,EAAAA,KAAahkG,GACrB63H,EAAiB5tC,GAAQC,GACzBmB,EAAcisC,EAAYM,EAAe,GAE3C53H,EAAQ8I,iBAAmBqqH,EAAYlmG,WAAY4vE,EAAAA,EAAAA,KAAiB78F,EAAQ8I,mBAC9EqqH,EAAYlmG,SAAU4vE,EAAAA,EAAAA,KAAiB78F,EAAQuB,KAGjD,MAAMu2H,GAAmBD,GAAkB73H,EAAQ+Z,UAAY/Z,EAAQ+Z,eAAYxV,EAC7EwzH,EAAsB1sC,IAAgBpB,GAAQoB,GAAeA,EAAYtxE,eAAYxV,EACrFyzH,EAAoBh4H,EAAQuB,KAAOyF,EAEnC2/C,EAAW,CACf40D,eAAiC,IAAjBqc,EAChB5W,cAAe4W,IAAiBN,EAAYz2H,OAAS,EACrDogH,uBAAwB9pG,QAAQ2gH,GAAmBA,IAAoBH,GACvErc,sBAAuBnkG,QAAQ2gH,GAAmBA,IAAoBC,GACtE7W,aACE0W,IAAiBN,EAAYz2H,OAAS,GACnC02H,IAAqBC,EAAkB32H,OAAS,GAChDu2H,IAAmBC,EAAgBx2H,OAAS,GAInD82H,EAAyBG,EAEzB,MAAMG,GAAaC,EAAAA,EAAAA,KAAqBl4H,GAElCohC,GAAM1gB,EAAAA,EAAAA,KAA6B1gB,GAAY,GAAEA,EAAQkT,QAAQ+kH,IAAeA,EAEhFpX,GAA+B,IAAlBT,IAA4B8S,EAE/C,OAAO/mE,EAAAA,EAAAA,IAAQ,CACbnsD,EAAQuB,KAAO6xH,EAA6BnmG,SAAW2pG,EACvDlvD,GAAAA,GAAAC,cAACwwD,GAAO,CACN/2F,IAAKA,EACLphC,QAASA,EACT4gH,6BAA8BkT,EAC9Bl7B,8BAA+BA,EAC/BwY,8BAA+BA,EAC/B5hD,MAAOA,EACP0/B,UAAWA,EACXmsB,WAAY10D,EAASq6D,eAAiBiS,IAAcjyH,KAAWg3H,IAAsBr4B,GACrFyb,eAAgBz0D,EAAS40D,gBAAkB0X,IAAcjyH,EACzDgG,SAAUA,EACVsU,gBAAiBja,EACjBw/G,WAAYA,EACZ/S,WAAY+S,GAAc75G,IAAaD,EAAAA,IAA2B,cAAT1F,EACzDy/G,gBAAiB+V,IAA0BG,EAC3CjW,YAAap6D,EAASu6D,cAAgBgW,EACtC3b,eAAgB50D,EAAS40D,eACzByF,cAAer6D,EAASq6D,cACxBC,uBAAwBt6D,EAASs6D,uBACjC3F,sBAAuB30D,EAAS20D,sBAChC4F,aAAcv6D,EAASu6D,aACvBC,qBAAsBA,EACtBC,yBAA0BA,EAC1BvrB,sBAAuBgyB,IAEzB7nH,EAAQuB,KAAOyF,GACb0gE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBAAuBqU,IAAI,sBACxCsmC,GAAAA,GAAAC,cAAA,YAAOxe,EAAK6pE,EACPrzB,EAAa,aAAe,YAAe,wBAIpD,IACDo3B,MAAM,IAGX,OACErvD,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,qBAAyC,IAAnBguD,GAAwB,4BACxEh2F,IAAK+1F,EAAUzsC,SACfgP,YAAapC,GAAAA,EACb8d,eAAa,GAEb1tC,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,cAAeyqD,GAAqB,eAC9DzyF,IAAI,cACJs4D,YAAapC,GAAAA,EACb1tB,QAASiqD,EAAoB,IAAMJ,EAAoB,CAAElgE,WAAY4jE,EAAUzsC,gBAAcnmF,GAE7FmjE,GAAAA,GAAAC,cAAA,QAAMkC,IAAI,QACPta,GAAc4nE,EAAU1sC,eAAiB2tC,EAAAA,KACxCjvE,EAAK,+BAENoG,GAAc4nE,EAAU1sC,eAAiB2tC,EAAAA,KACxCjvE,EAAK,sBAAsBkvE,EAAAA,GAAAA,IAAgBlvE,EAAMguE,EAAUzsC,cAAUnmF,GAAW,KAEhFgrD,IAAc8oE,EAAAA,GAAAA,IAAgBlvE,EAAMguE,EAAUzsC,YAGnDE,EAAamsC,OACV,IAIV,OACErvD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,qBAAqBqoF,eAAa,GAC9C6f,GAAuBvtD,GAAAA,GAAAC,cAAA,OAAKuE,IAAKgpD,EAAqB9zF,IAAI,oBAAoBrU,UAAU,sBACxFumG,GAAuB5rD,GAAAA,GAAAC,cAAC2wD,GAAkB,CAAC/rC,iBAAe,EAACnrD,IAAM,YAAWhhC,IAAUA,OAAQA,IAC9FyqF,GAAWksC,OACX9B,GACCvtD,GAAAA,GAAAC,cAAA,OACEuE,IAAKipD,EACL/zF,IAAI,mBACJrU,UAAU,qBAGd26C,GAAAA,GAAAC,cAAA,OACEuE,IAAKkpD,EACLh0F,IAAI,cACJrU,UAAU,gBAEX6lG,GAAcG,GACbrrD,GAAAA,GAAAC,cAACyqD,GAAgB,CACfhxF,IAAKhhC,EACLA,OAAQA,EACR2rF,aAAcA,EACd6M,8BAA+BA,EAC/BwY,8BAA+BA,IAG/B,IE/SJ+C,GAAY,EAAIz1G,EAAAA,EA+FtB,IAAeypE,EAAAA,GAAAA,KArFkBpnE,IAK3B,IAL4B,eAChCspF,EAAc,KACdhpF,EAAI,uBACJk3H,EAAsB,MACtB9vH,GACD1H,EACC,MAAMooD,GAAO+f,EAAAA,GAAAA,KAEb,MAAa,cAAT7nE,EAqCN,SAAyB8nD,GACvB,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,SAAQ26C,GAAAA,GAAAC,cAAA,YAAOxe,EAAK,uCAEvC,CAxCWqvE,CAAgBrvE,GAGrBkhC,EAuCN,SAA6BlhC,GAC3B,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,cACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,WACb26C,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,8CACb26C,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,EAAK,wCAC5Bue,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,eACZ26C,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,+CACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,+CACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,+CACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,iDAKpB,CArDWsvE,CAAoBtvE,GAGzBovE,EAoDN,SAAqBpvE,GACnB,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,cACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,UAAU88C,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GACjDmjE,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,EAAK,yBAC5Bue,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,eAAeo8B,EAAK,4BACjCue,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,mBACZ26C,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,yBACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,yBACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,yBACVue,GAAAA,GAAAC,cAAA,UAAKxe,EAAK,2BAKpB,CAlEWuvE,CAAYvvE,GAGjB1gD,EASN,SAAqB0gD,EAAiB1gD,GACpC,OACEi/D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,cACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,WACb26C,GAAAA,GAAAC,cAACwyB,GAAAA,EAAS,CACR1xF,MAAOA,EACP2kD,KAAM+mD,GACNpnF,UAAU,gCAEZ26C,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,EAAK,qCAC5Bue,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,kCAAiCihE,EAAAA,GAAAA,GAAW7kC,EAAK,mCAAoC,CAAC,SAI3G,CAtBWwvE,CAAYxvE,EAAM1gD,GAIzBi/D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,SAAQ26C,GAAAA,GAAAC,cAAA,YAAOxe,EAAK,eAA2B,ICSlE,IAAegf,EAAAA,GAAAA,KACbsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEsO,GAAQtO,EACtC,MAAM47B,GAAQmpC,EAAAA,EAAAA,KAAYzyE,IACpB,aAAE45H,GAAiB55H,EAAO64B,SAASghG,OAAOvwF,IAAU,CAAC,EACrDz1B,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAEhC,MAAO,CACL49G,eACAE,UAAU5gG,EAAAA,EAAAA,KAAuBrlB,GAClC,GARH43D,EAnCF,SAA+B1pE,GAAyC,IAAxC,aAAE63H,EAAY,SAAEE,GAAsB/3H,EACpE,MAAMooD,GAAO+f,EAAAA,GAAAA,MACP,iBAAEhnD,IAAqB0E,EAAAA,EAAAA,MAEvBmyG,GAAyBhrD,EAAAA,GAAAA,IAAgB,IAAM7rD,MAErD,OACEwlD,GAAAA,GAAAC,cAAA,OAAK56C,UChCc,YDiCjB26C,GAAAA,GAAAC,cAAA,OAAK56C,UCjCyE,YDkC5E26C,GAAAA,GAAAC,cAAA,OAAK56C,UClCgI,YDmCnI26C,GAAAA,GAAAC,cAAC+8B,GAAAA,EAAuB,CACtBC,OAAQC,GAAAA,EAAeo0B,OACvB5rE,KAAM,GACN4c,MAAO4uD,EACP7rG,UCvC0L,aDyC5L26C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,mBAAmB1gB,UCzCmN,cD2CnP26C,GAAAA,GAAAC,cAAA,QAAM56C,UC3CsQ,aD4CzQihE,EAAAA,GAAAA,GAAW7kC,EAAK,uBAAwB2vE,GAAW,CAAC,qBAEvDpxD,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLC,MAAM,oBACN5c,KAAK,OACLwc,QAASmvD,EACThsG,UClDiC,YDoDhCo8B,EAAK,0BAKhB,KEkFM8vE,IAAwB3mH,EAAAA,EAAAA,KAAUC,GAAOA,KANvB,KAM8C,GAilBtE,IAAe41D,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM6S,KAA6C,IAA3C,OAAEzR,EAAM,SAAE4G,EAAQ,KAAE3F,GAAMwQ,EACjC,MAAM3Q,EAAgBlC,EAAOkC,cACvBkB,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,MAAO,CAAElB,iBAGX,MAAM0M,GAAasrH,EAAAA,EAAAA,KAAwBl6H,EAAQoB,EAAQ4G,EAAU3F,GAC/DuO,EAAwB,cAATvO,GACjBoM,EAAAA,EAAAA,KAA4BzO,EAAQoB,IACpC4I,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAEzBiU,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAU9F,GAEzD,KACE8F,IAAaD,EAAAA,IAAmBsN,GAAkBjS,GAAMsG,SACnDkH,GAAgB5I,GAAY4I,EAAa3F,OAAOjD,KAErD,MAAO,CAAE9F,iBAGX,MAAM,aAAE+V,EAAY,kBAAEkiH,GAAsB/2H,EACtCoK,GAAck/E,EAAAA,EAAAA,KAAsB1sF,EAAQoB,EAAQiU,EAAgB,QAAU,OAC9E+kH,GAAa7hH,EAAAA,EAAAA,KAAuBvY,EAAQoB,GAE5Ci5H,EACJryH,IAAaD,EAAAA,KACT6G,IAAexL,EAAKyE,cAAgBuyH,GAAc5sH,IAAgBA,EAAYuN,UAG9EqyE,GAAUrjD,EAAAA,EAAAA,KAAU/pC,EAAQoB,GAE5BqI,GAAQc,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQ4G,GACpC0T,GAAgB7K,EAAAA,EAAAA,KAASzP,QAA+CmE,GAArCoW,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC9D4yH,IAAiBlpH,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,IAAWiB,cAKnE,MAAO,CACLwa,gBAJ2BvC,EAAAA,EAAAA,KAA2BlhB,KACTsmB,EAAAA,EAAAA,KAAmBtmB,EAAQkC,IAAgBuhB,cAIxF62G,cAAc,EACdriH,eACAkiH,oBACAjG,eAAe72G,EAAAA,EAAAA,KAAcja,GAC7Bm3H,aAAa5qG,EAAAA,EAAAA,KAAYvsB,GACzBo3H,qBAAsBp3H,EAAKq3H,iBAC3BC,UAAWt3H,EAAKs3H,UAChBrvC,gBAAgBlqF,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7Cq7G,iBAAiBC,EAAAA,EAAAA,KAAYt7G,GAC7Bu7G,qBAAqBC,EAAAA,EAAAA,KAAwBx7G,GAC7Cu5H,MAAOxiH,QAAQi1E,GACf14D,SAAU10B,EAAO00B,SACjB9lB,aACAgC,eACArI,eAAeC,EAAAA,EAAAA,KAAoBxI,EAAQoB,EAAQ4G,GACnD+rH,iBAA2B,WAAT1xH,IAAqBiG,EAAAA,EAAAA,KAAuBtI,EAAQoB,EAAQ4G,GAC9EoyH,aACAQ,oBAAoBl/B,EAAAA,EAAAA,KAAqB17F,GACzCohH,cAAe1lG,EAAevD,QAAQuD,EAAa2lG,mBAAgB97G,EACnEs1H,gBAAiBn/G,GAAco/G,SAC/BrxH,QACAsxH,4BAA4Bl3H,EAAAA,EAAAA,KAA+B7D,EAAQ,4BACnEg7H,2BAA4B55H,IAAWgQ,EAAAA,IACvC1H,QAAStG,EAAKsG,QACdsqH,gBACA9xH,mBACIm4H,GAAiC,CAAE7sH,eACxC,GArEei+D,EA/kB2B1pE,IAyCzC,IAzC0C,OAC9CX,EAAM,SACN4G,EAAQ,KACR3F,EAAI,aACJi4H,EAAY,QACZ5wH,EAAO,cACPwqH,EAAa,YACbqG,EAAW,qBACXC,EAAoB,QACpBzwC,EAAO,SACPr1D,EAAQ,QACR2/F,EAAO,eACPhpC,EAAc,gBACdoxB,EAAe,oBACfE,EAAmB,UACnB+d,EAAS,MACTC,EAAK,WACL/rH,EAAU,aACVgC,EAAY,cACZrI,EAAa,WACbo4F,EAAU,iBACVozB,EAAgB,aAChB97G,EAAY,kBACZkiH,EAAiB,cACjBnG,EAAa,WACboG,EAAU,mBACVQ,EAAkB,YAClBptH,EAAW,cACX4zG,EAAa,gBACb6Z,EAAe,cACfC,EAAa,MACbzxH,EAAK,0BACLsxH,EAAyB,2BACzBC,EAA0B,cAC1B94H,EAAa,wBACbi5H,EAAuB,cACvB13G,EAAa,gBACbo3G,EAAe,yBACfzY,EAAwB,mBACxBmS,EAAkB,cAClBC,GACDzyH,EACC,MAAM,qBACJgP,EAAoB,gBAAEqqH,EAAe,sBAAEC,EAAqB,qBAAEC,EAAoB,kBAAEC,GAAiB,iBACrG5zG,GAAgB,qBAAE6zG,GAAoB,eAAEC,KACtC7zG,EAAAA,EAAAA,MAGEmlE,IAAe9f,EAAAA,GAAAA,IAAuB,MAItCyuD,IAAkBzuD,EAAAA,GAAAA,IACZ,WAAT5qE,IAAqBs5H,EAAAA,EAAAA,MAAmBnwH,EAAAA,EAAAA,MAAapK,EAAQ4G,KAC3D4zH,EAAAA,EAAAA,MAAuBpwH,EAAAA,EAAAA,MAAapK,EAAQ4G,IAC5C,GAGCmsH,IAAclnD,EAAAA,GAAAA,MACd4uD,IAAe5uD,EAAAA,GAAAA,MACf6uD,IAAsB7uD,EAAAA,GAAAA,MACtBk1C,IAAuBl1C,EAAAA,GAAAA,MACvBmnD,IAA+BnnD,EAAAA,GAAAA,MAC/B8uD,IAAoB9uD,EAAAA,GAAAA,MACpB+uD,IAA4B/uD,EAAAA,GAAAA,KAAO,GACnCgvD,IAA6BhvD,EAAAA,GAAAA,IAAO90D,QAAQ3K,IAE5C6H,IAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAU9F,GACnDg6H,GAAoB7mH,IAAiBrN,IAAam0H,EAAAA,IAElDliG,GAAoB9hB,QAAQvJ,IAElCy4E,EAAAA,GAAAA,IAAc,KAERptD,KACFl1B,EAAAA,EAAAA,KAAU,KACRk3H,GAA2BhuG,SAAU,CAAK,GAE9C,GACC,CAACgM,MAGJotD,EAAAA,GAAAA,IAAc,KACZ86B,GAAqBl0F,QAAU1lB,CAAa,GAC3C,CAACA,KAEJghE,EAAAA,GAAAA,KAAU,KAEJ9lD,IADeywG,GAAiByG,IACDjmG,GAAY2/F,GAC7CgH,EAAsB,CAAEp5H,OAAQb,GAClC,GACC,CAACA,EAAQszB,EAAU2/F,EAASH,EAAeyG,EAAOl3G,KAGrD4jE,EAAAA,GAAAA,IAAc,KACRptD,KACFm6F,GAA6BnmG,QAAUk0F,GAAqBl0F,QAC9D,GACC,CAACgM,MAEJotD,EAAAA,GAAAA,IAAc,KACZ00C,GAAkB9tG,QAAUmsG,CAAU,GACrC,CAACA,IC9OiCmB,KACrC,MAAMa,GAAartD,EAAAA,GAAAA,IAAiBrc,IAClC,MAAM9jD,GAAaytH,EAAAA,GAAAA,KAEfztH,GAAcA,EAAW/M,OAAS,IACpC6wD,EAAE0V,iBACFmzD,EAAkB,CAAE3sH,eACtB,KAGF4qE,EAAAA,GAAAA,IAAW/O,EAAAA,GAAAA,KAAQ,KAAM,CACvB,QAAS2xD,KACP,IAAI,EDoORE,CAA8Bf,IAE9B,MAAM1H,IAAgBppD,EAAAA,GAAAA,KAAQ,KAC5B,IAAK77D,GAAY/M,SAAW+O,EAC1B,OAGF,MAAM2rH,EAA+B,GACrC3tH,EAAWzM,SAAQ,CAACI,EAAIiU,EAAO8D,KAC7B,MAAMkiH,EAAcD,EAAeA,EAAe16H,OAAS,GAErDb,EAAU4P,EAAarO,GAC7B,IAAKvB,EACH,OAGF,MAAM,wBAAEy7H,EAAuB,oCAAEC,GAAwC,MACvE,GAAK7B,EACL,OAAI2B,GACCA,EAAYtoH,KAAO2mH,EAAgB8B,YAAc9B,EAAgB8B,YAAc37H,EAAQkT,KACnF,CAAEuoH,yBAAyB,EAAMC,qCAAqC,GAG3ElmH,IAAU8D,EAAIzY,OAAS,GAAKb,EAAQkT,KAAO2mH,EAAgB8B,WACtD,CACLF,yBAAyB,EACzBC,qCAAqC,QAHzC,CAQD,EAfwE,IAejE,CAAC,EAMT,GAJIA,GACFH,EAAe1wH,KAAK7K,GAGlBy7H,EAAyB,CAC3B,MAAMl1H,EAAgBm1H,EAAsC17H,EAAQuB,GAAMi6H,GAAaj6H,IAAOvB,EAAQuB,GAAK,EAC3Gg6H,EAAe1wH,KAAK,CAClBtJ,GAAIq6H,GAA6Br1H,GACjCnG,OAAQJ,EAAQI,OAChB8S,KAAM2mH,EAAiB8B,WACvBt5H,YAAY,EACZqC,QAAS,CACP+E,OAAQ,CACNpI,KAAM,gBACNgQ,UAAW,SACX/D,KAAM,GACNuuH,kBAAmB,GACnBC,aAAc97H,EAAQI,UAI9B,CAEKs7H,GACHH,EAAe1wH,KAAK7K,EACtB,IAIF,MAAM+7H,EAA2C,cAAT16H,GAAwB24H,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAOuB,EAAe16H,OAClBspF,IACA6xC,EAAAA,EAAAA,IAAQT,EAAgBQ,GACxB3I,GAA6BnmG,QAC5BvkB,OAA6BnE,EAAnB0F,OAAOjD,GAClBqjF,QAEA9lF,CAAS,GACZ,CAACqJ,EAAYgC,EAAcvO,EAAM24H,EAA4BtxH,EAAS1B,EAAUqjF,EAAgBwvC,KAEnG9wB,EAAAA,GAAAA,IAAY,KACV,IAAKn7F,IAAegC,GAAyB,cAATvO,EAAsB,OAC1D,IAAK6xH,IAAkBqG,EAAa,OAEpC,MAAMpwH,EAAMyE,EAAW9M,QAAQS,IAC7B,MAAMvB,EAAU4P,EAAarO,GAC7B,OAAOvB,GAAWA,EAAQM,WAAWC,QAAQM,SAAWb,EAAQ0E,QAAQ+E,MAAM,IAG3EN,EAAItI,QAETy5H,EAAqB,CAAEl6H,SAAQ+I,OAAM,GA7ME,MAgNzC4/F,EAAAA,GAAAA,IAAY,KACV,IAAKn7F,IAAegC,GAAyB,cAATvO,EAClC,OAEF,MAAM46H,EAAgBruH,EAAWF,KAAKnM,GAAOqO,EAAarO,IAAKmD,QAAQoH,YAAWhL,OAAOqW,SAEzF,IAAK8kH,EAAcp7H,OAAQ,OAE3B,MAAMq7H,EAAmBD,EAAc7iH,QAAO,CAACC,EAAKvN,KAClD,MAAM,OAAE7K,EAAM,GAAEM,GAAOuK,EAKvB,OAJKuN,EAAIpY,KACPoY,EAAIpY,GAAU,IAEhBoY,EAAIpY,GAAQ4J,KAAKtJ,GACV8X,CAAG,GACT,CAAC,GAEJnS,OAAOiI,QAAQ+sH,GAAkB/6H,SAAQuL,IAAwB,IAAtBzL,EAAQ4hD,GAASn2C,EAC1D8tH,GAAqB,CAAEv5H,SAAQ4hD,YAAW,GAC1C,GAhOiC,MAmOrCkmD,EAAAA,GAAAA,IAAY,KACV,IAAKn7F,IAAegC,GAAgB5I,IAAaD,EAAAA,IAA2B,cAAT1F,EACjE,OAEF,MAAMrC,GAASwL,EAAAA,EAAAA,MACTrB,EAAMyE,EAAW9M,QAAQS,IAAOuI,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQmB,IAAKs5B,qBACtCt2B,IAAjCqL,EAAarO,IAAK8lB,aAElBle,EAAItI,QAET8lB,GAAiB,CAAEvmB,SAAQ+I,OAAM,GA/OK,KAgPF,IAEtC4/F,EAAAA,GAAAA,IAAY,KACV,IAAKn7F,IAAegC,GAAgB5I,IAAaD,EAAAA,IAA2B,cAAT1F,EACjE,OAEF,MAAM8H,EAAMyE,EAAW9M,QAAQS,GAAOqO,EAAarO,IAAKkmB,WAAW00G,cAE9DhzH,EAAItI,QAET45H,GAAe,CAAEr6H,SAAQ+I,OAAM,GAzPQ,KA4PzC,MAAMizH,IAAiB3yD,EAAAA,GAAAA,KAAQ,KAC7B,GAAa,WAATpoE,EAIJ,OAAOiR,EAAAA,EAAAA,KAAS,IAAMvC,EAAqB,CAAEuD,UAAWU,EAAAA,GAAkBE,UAAW,KAAM,GAAM,EAAM,GAEtG,CAACnE,EAAsBnC,KAEpB,WAAEyuH,GAAU,kBAAEC,IE9XP,WAGb,MAAOD,EAAYE,IAAkBpnD,EAAAA,GAAAA,IAAQ,GAEvCqnD,GAAeC,EAAAA,GAAAA,GARN,KAQgC,GA8B/C,MAAO,CACLJ,aACAC,mBA9BwBvuD,EAAAA,GAAAA,IAAiBmwB,IACzCq+B,IAEKx3H,SAASwuC,KAAKkkD,UAAUC,SAAS,2BACpC4Q,EAAAA,GAAAA,KAAgB,KACdvjG,SAASwuC,KAAKkkD,UAAUnuF,IAAI,wBAAwB,IAIxDkzH,GAAa,KACX,MAAME,EAwBZ,SAAuBx+B,GACrB,MAAMy+B,EAAcz+B,EAAUvtC,iBAAiC,gBACzDisE,EAAe1+B,EAAUmtB,UAEzBwR,EAAgBjmB,iBAAiB1Y,GACjC4+B,EAAsBC,SAASF,EAAcG,iBAAiB,gCAAiC,IAErG,OAAOrpH,MAAMiC,KAAK+mH,GAAan6H,MAAMo6B,IACnC,MAAM,UAAE84F,EAAS,aAAEhf,GAAiB95E,EAC9B45E,EAAMkf,EAAYkH,EACxB,OAAQlmB,GAAgBF,GAAOA,IAAQsmB,GArDxB,GAqD0D,GAE7E,CApC0BG,CAAc/+B,GAC9Bw+B,IACFp0B,EAAAA,GAAAA,KAAgB,KACdo0B,EAAYjlC,UAAUnuF,IAAI,QAAQ,KAItCg/F,EAAAA,GAAAA,KAAgB,KACd,MAAM40B,EAAen4H,SAASiiE,cAAc,UACxCk2D,GACFA,EAAazlC,UAAUqG,OAAO,SAGhC/4F,SAASwuC,KAAKkkD,UAAUqG,OAAO,wBAAwB,GACvD,GACF,IAON,CFuV4Cq/B,GAEpCC,IAAervD,EAAAA,GAAAA,IAAgB,KACnC,GAAIitD,GAA0B/tG,QAE5B,YADA+tG,GAA0B/tG,SAAU,GAItC,MAAMixE,EAAYnS,GAAa9+D,QAC1BixE,IAIA68B,GAAkB9tG,SACrBqvG,GAAkBp+B,GAGpB+6B,IAAsB,KACpB,MAAMj6H,GAASwL,EAAAA,EAAAA,MAEI2M,SAAQjY,EAAAA,EAAAA,KAAeF,GAAQk8G,gBAAgB96G,SAEhEghH,EAAyB,CAAEic,qBAAqB,IAG7Cn/B,EAAUvU,gBAIf+wC,GAAgBztG,QAAUixE,EAAUktB,aAAeltB,EAAUmtB,UAEhD,WAAThqH,GACF+4H,EAAgB,CAAEh6H,SAAQ4G,WAAUwjD,aAAckwE,GAAgBztG,UACpE,IACA,KAGG6lG,GAAoBwK,IGtad,SAA4BvxC,EAAyCwxC,GAClF,MAAOzK,EAAoB0K,IAAsBC,EAAAA,GAAAA,MAG3C5S,GAAe98C,EAAAA,GAAAA,IAAiB+8C,IACpC0S,EAAmB1S,EAAMG,YAAY99B,OAAO,KAG9Co+B,EAAAA,GAAAA,GAAkBx/B,EAAc8+B,IAEhCtiD,EAAAA,GAAAA,KAAU,KACR,MAAMm1D,EAAsBzzH,OAAO8hF,EAAa9+D,QAAS0nG,QAAQgJ,eAAiB,EAC5E1hC,EAAkB62B,IAEpB72B,GAAmBA,EAAkByhC,GAAuBH,IAC9DxxC,EAAa9+D,QAAS0nG,QAAQgJ,aAAe1yH,OAAOgxF,GACtD,GACC,CAACshC,EAAmBxxC,EAAc+mC,IAErC,MAAM8K,GAAsB3xD,EAAAA,GAAAA,MAE5B,MAAO,CAAC6mD,EAAoB8K,EAC9B,CHgZuDC,CAAmB9xC,GAAchD,IAAY6wC,IAGlGrxD,EAAAA,GAAAA,KAAU,KACR,IAAK6zD,KAAmB9C,GAAgBriH,GAAgBmiH,EACtD,OAKF,GAD2BxrH,IAAcjJ,EAAAA,EAAAA,IAAiBiJ,EAAWA,EAAW/M,OAAS,IAEvF,OAGF,MAAMq9F,EAAYnS,GAAa9+D,UAE1Brf,GAAoC,IAAtBA,EAAW/M,QAC5B+M,EAAW/M,OAASkT,EAAAA,IAAqB,GACrCmqF,EAAU4N,kBAAqCgyB,cAAgB5/B,EAAUwY,eAE7E0lB,IACF,GACC,CAAC9C,EAAc1rH,EAAYwuH,GAAgBhD,EAAYniH,IAE1D,MAAM8mH,IAA4Bv3C,EAAAA,GAAAA,IAAY,KAC5C,IAAK54E,IAAektH,GAAoB7tG,QACtC,OAGF,MAAM+wG,EAAwBlD,GAAoB7tG,QAC/CnsB,QAAQ23F,GAAY7qF,EAAWtK,SAAS2G,OAAOwuF,EAAQk8B,QAAQtuH,cAI5D+qH,EAAS4M,EAAsB,IAAMA,EAAsB,GAC5D5M,IAIL+B,GAAYlmG,QAAUmkG,EAAO7vH,GAC7Bs5H,GAAa5tG,QAAUmkG,EAAOr6B,wBAAwByf,IAAG,KAG3DnwB,EAAAA,GAAAA,IACE,KAAM43C,EAAAA,GAAAA,KAAa,IAAMF,GAA0B9wG,aAEnD,CAACrf,EAAYmlH,EAAkBgL,MAEjCx1D,EAAAA,GAAAA,KACE,IAAMw1D,GAA0B9wG,WAEhC,CAAC6lG,GAAoBiL,MAIvBh2B,EAAAA,GAAAA,IAA4Bt5F,IAA4C,IAA1CwoH,EAAgBiH,GAAqBzvH,EAMjE,MAAMwtF,EAAkB62B,KAClB8K,EAAsBN,GAAuBrwG,QAInD,GAHAqwG,GAAuBrwG,QAAUgvE,EAI/BruF,IAAeqpH,GACZlE,IAAqBmL,GACrBjiC,IAAoB2hC,QACIr5H,IAAxBq5H,EAEH,OAGF,MAAM1/B,EAAYnS,GAAa9+D,QAC/B6tG,GAAoB7tG,QAAUtZ,MAAMiC,KAAKsoF,EAAUvtC,iBAAiC,uBACpF,MAAMwtE,EAAkBrD,GAAoB7tG,QAAQ6tG,GAAoB7tG,QAAQpsB,OAAS,GACnFu9H,EAAqBjd,GAAqBl0F,QAC5CixE,EAAUl3B,cAA+B,KAAG61B,EAAAA,EAAAA,KAAiBskB,GAAqBl0F,iBAClF1oB,EAEE85H,EACJzwH,GAAcqpH,GAAkBrpH,EAAWA,EAAW/M,OAAS,KAAOo2H,EAAeA,EAAep2H,OAAS,GAEzGy9H,EACJ1wH,IAAa,KAAOqpH,IAAiB,IAAMrpH,GAAY/M,SAAYkT,EAAAA,IAAqB,EAAI,EAExFwqH,EAAkBF,IAA0BC,EAIhDvL,GACGwL,GACC3wH,GAAcA,EAAW/M,OAASkT,EAAAA,IAAqB,IACvDmqF,EAAUvU,cAAe8N,UAAUC,SAAS,2BAC7CumC,EAAAA,GAAAA,KAAa,IACb//B,EAAU4N,kBAAsCgyB,cAAyC,EAAzB5/B,EAAUwY,kBAG7E8nB,EAAAA,GAAAA,IAActgC,EAAUvU,cAAgB,yBACxCuU,EAAUvU,cAAe8N,UAAUnuF,IAAI,yBAEvCiB,YAAW,KACL2zF,EAAUvU,gBACZ80C,EAAAA,GAAAA,IAAiBvgC,EAAUvU,cAAgB,wBAC7C,GA/Y2B,OAmZ/B+0C,EAAAA,GAAAA,KAAoB,KAClB,MAAM,UAAErT,EAAS,aAAED,EAAY,aAAE1U,GAAiBxY,EAC5C1zC,EAAekwE,GAAgBztG,QAErC,IAAI0xG,EAAen0E,GAAgBozE,GAAuBlnB,GACtD6nB,IAKFI,GADuBR,EAAkBA,EAAgBznB,aAAe,GAG1E,MAAMkf,EAAa7C,GAAoBmL,GAAwBS,GAla5C,GAmabC,EAAoBhxH,GAAcmtH,GAAkB9tG,UAAYrf,EAAWA,EAAW/M,OAAS,GAGjG09H,GAAmB3I,IAAegJ,IAEpC1nC,EAAAA,GAAAA,KAAe,KACb,MAAM2nC,IAAwBvK,EAAAA,GAAAA,OAA6B8J,GAE3Dt0C,EAAAA,GAAAA,IACEoU,EACA2gC,EAAuBV,EAAmBC,EAC1CS,EAAuB,MAAQ,QA1af,QA4ahBt6H,OACAA,EACAw1H,EAA4B,OAAIx1H,EACjC,IAIL,MAAMu6H,OAAoCv6H,IAAxBq5H,GAAqCA,IAAwB3hC,EAC/E,GAAI6iC,IAAanyE,EAAAA,GAAAA,MACf,OAGF,MAAMykE,EAAS+B,GAAYlmG,SAAWixE,EAAUl3B,cAAe,IAAGmsD,GAAYlmG,WACxE2pG,GACHxF,GACEgC,GAA6BnmG,SAC7BixE,EAAUl3B,cAA+B,mBAG9C,IAAI+3D,EACJ,GAAInJ,GAAckJ,EAChBC,EAAe3T,EAAe1U,OACzB,GAAI0a,EAAQ,CACjB,MAAM4N,EAAe5N,EAAOr6B,wBAAwByf,IACpDuoB,EAAe1T,GAAa2T,GAAgBnE,GAAa5tG,SAAW,GACtE,MACE8xG,EADSnI,EACMj3H,KAAKC,IAClBg3H,EAAclB,UA1cG,GA2cjBtK,EAAe5gE,GAGF4gE,EAAe5gE,EAGhC,MAAO,MACLy0E,EAAAA,GAAAA,GAAY/gC,EAAWv+F,KAAKu/H,KAAKH,KACjCI,EAAAA,GAAAA,MAEAzE,GAAgBztG,QAAUttB,KAAKE,IAAIF,KAAKu/H,KAAK9T,EAAe2T,GAAeroB,GAEtEqkB,GAAkB9tG,UACrB+tG,GAA0B/tG,SAAU,GAEpCiqE,EAAAA,GAAAA,KAAe,KACb8jC,GAA0B/tG,SAAU,CAAK,IAIR,CAItC,GACD,GAED,CAACrf,EAAYmlH,EAAkBD,GAAoBwK,GAAwBvD,KAE9EhkD,EAAAA,GAAAA,IAAsB3mE,IAA8B,IAA5BgwH,GAAuBhwH,OACd7K,IAA3B66H,IACFlU,EAAAA,GAAAA,IAteiC,IAseoBliE,EAAAA,IACvD,GACC,CAAC4wE,IAEJ,MAAM55F,IAAYnwB,EAAAA,EAAAA,KAASzP,GACrB6yH,GAAY97G,SAAU6oB,KAAckzF,GACrC7oC,GAAkBoxB,GAAmBE,GAAuB6d,GAC3DtqC,GAAY/3E,SAAS87G,IAAcC,IAAkBsG,GACrD6F,IAAuBxvH,EAAAA,EAAAA,KAASzP,KAAYiqF,IAAmBsvC,IAAUhe,GACjE,WAATt6G,KAGEwxH,KAAkBrmH,GAAeoB,KAE7BktH,GAAoB7tG,SAAkD,IAAvC6tG,GAAoB7tG,QAAQpsB,SAEvC,IAAvB+M,GAAY/M,QAAwE,kBAAxD+O,IAAehC,EAAW,KAAKlJ,QAAQ+E,QAAQpI,MACpC,kBAAvCmL,GAAa9H,SAAS+E,QAAQpI,MAGhCk3H,GAAyBgB,GAAeG,GAClB,IAAvB9rH,GAAY/M,QAAwE,eAAxD+O,IAAehC,EAAW,KAAKlJ,QAAQ+E,QAAQpI,KAC1Ei+H,GAAsC,IAAvB1xH,GAAY/M,QAC4B,gBAAxD+O,IAAehC,EAAW,KAAKlJ,QAAQ+E,QAAQpI,KAE9C0rB,IAAYq8C,EAAAA,GAAAA,GAChB,4BACA8lB,IAAa,cACZnG,GAAW,cACH,WAAT1nF,GAAqB,cACrB44H,GAAmB,oBACnBC,GAAiB,kBACjBN,GAAsB,qBACtByC,IAAc,YACbhJ,GAAW,eACZ6H,IAAqB,gBAGjBqE,GAAe3xH,GAAcilH,IAAkBrmH,EAQrD,OANA+7D,EAAAA,GAAAA,KAAU,KACJg3D,IAEJhM,GAAmB,EAAM,GACxB,CAACgM,GAAahM,IAGf7rD,GAAAA,GAAAC,cAAA,OACEuE,IAAK6f,GACLh/D,UAAWA,GACXyyG,SAAUpC,GACV1jC,YAAapC,GAAAA,GAEZrgF,EACCywD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,SACb26C,GAAAA,GAAAC,cAAA,YACGwxD,EAAoBA,EAAkB7rH,KAAQ,sBAAoB4lH,EAAgB,UAAY,UAGjGiH,IAA4BoF,GAC9B73D,GAAAA,GAAAC,cAAC83D,GAAsB,CAACzkH,OAAQ5a,IAC9Bu5H,IAAU4F,GACZ73D,GAAAA,GAAAC,cAAC2wD,GAAkB,CAACl4H,OAAQA,IAC1Bi/H,GACF33D,GAAAA,GAAAC,cAAC+3D,GAAe,CAACt+F,IAAKhhC,EAAQ4a,OAAQ5a,IACpCwN,KAAgBilH,IAAiB0F,IAA0B+G,IAC7D53D,GAAAA,GAAAC,cAACg4D,GAAU,CACTv/H,OAAQA,EACRqI,MAAOA,EACPpH,KAAMA,EACNgpF,eAAgBA,EAChBkuC,uBAAwBA,KAExBgH,GACF73D,GAAAA,GAAAC,cAACi4D,GAAkB,CACjBhN,WAAYnwG,GAAiBywG,EAC7B9yH,OAAQA,EACRu/F,WAAYA,EACZuzB,cAAeA,EACf7+G,cAAeA,GACfzG,WAAYA,GAAc,CAACpB,EAAajL,IACxCsxH,cAAeA,IAAiB1oC,GAAc,CAAC39E,IAC/CsmH,mBAAoBA,GACpBC,iBAAkB57G,QAAQ47G,GAC1BnwH,SAAUuU,QAAQ5P,GAClByrH,cAAeA,EACfC,UAAWA,GACX/jC,UAAWA,GACXnD,aAAcA,GACdonC,YAAaA,GACbC,6BAA8BA,GAC9BjS,qBAAsBA,GACtBn6G,SAAUA,EACV3F,KAAMA,EACNgyH,QAASA,EACTjT,cAAeA,EACf7wD,aAAYsjE,IAAyB,cAATxxH,EAC5BiyH,oBAAqBqG,EACrBvX,uBAAwByQ,KAAkBoI,GAA2BhuG,QACrEsmG,mBAAoBA,EACpBC,cAAeA,EACfpS,yBAA0BA,IAG5B15C,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,CAACqB,MAAM,QAAQ61D,gBAAgB,SAErC,KA6EV,SAASjE,GAA6Br1H,GACpC,OAAOA,EAAgB,IACzB,CI/xBA,MAQA,GARiD8gE,IAC/C,MAAM,SAAEnW,GAAamW,EACfy4D,GAAuBv4D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyB9W,GAGrF,OAAO4uE,EAAuBp4D,GAAAA,GAAAC,cAACm4D,EAAyBz4D,QAAY9iE,CAAS,E,sLCKzEw7H,GAAkB,CAAEtgI,MAAO,IAAK0tF,OAAQ,KACxC6yC,GAAe,I,wCCuCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuBh5H,OAAOsG,KAAKyyH,IAAgBv8H,OAAOgK,IAAIzD,QA4UpE,IAAewgE,EAAAA,EAAAA,KACb,CAACzrE,EAAMoQ,KAA+B,IAA7B,SAAEwyC,GAAUxyC,EACnB,MAAM,YAAEwsB,IAAgB18B,EAAAA,EAAAA,KAAeF,IACjC,OAAEoB,EAAM,UAAEiG,GAAcu1B,EACxB57B,GAAW4hD,GAAYxhD,GAAUiG,GAAYvC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQiG,QAAa9B,EAE5F6jC,EAASpoC,IAAWqoC,EAAAA,EAAAA,KAAarpC,EAAQgB,GACzCoC,EAAOpC,IAAW2G,EAAAA,EAAAA,KAAW3H,EAAQgB,EAAQI,SAC7C,OACJ4qD,EAAM,aAAEC,EAAY,QAAE3rB,EAAO,qBAAE6rB,IAC7BjsD,EAAAA,EAAAA,KAAeF,GAAQ48B,YAE3B,MAAO,CACL57B,UACAooC,SACAhmC,OACA4oD,SACAC,eACAE,uBACA7rB,UACD,GApBL,EAvU+Cv+B,IAYzC,IAZ0C,QAC9Cf,EAAO,UACP+sB,EAAS,KACTozG,EAAI,OACJ/3F,EAAM,KACNhmC,EAAI,OACJ4oD,EAAM,aACNC,EAAY,qBACZE,EAAoB,QACpB7rB,EAAO,YACP8gG,EAAW,kBACXC,GACDt/H,EACC,MAAM,qBACJu/H,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBv0H,EAAY,iBACZ4vB,IACEjV,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,MAEP,SAAEwM,IAAaC,EAAAA,EAAAA,MACf8qD,GAAmBC,EAAAA,GAAAA,GAAiB1gI,IAEpC,MAAE69F,EAAK,MAAE12E,EAAK,MAAEtiB,GAAU47H,GAAmBz7H,EAAAA,EAAAA,KAAkBy7H,GAAoB,CAAC,EACpFE,EAAUxpH,QAAQgQ,GAAStiB,GAC3B+7H,EAA6BD,IAAY9iC,GAAOr8D,UAAY,GAAKq/F,EAAAA,IACjEC,EAAa14F,GAASuhB,EAAAA,EAAAA,KAAeR,EAAM/gB,QAAU7jC,EAErDymG,EAAYy1B,IAAoBM,EAAAA,EAAAA,KAAoBN,EAAkB,UACtEO,EAAYh2B,GAAapvD,GAAAA,GAA0BovD,GACnDi2B,EDjFwBC,EAC9BlhI,EAAsBooC,EAAkBhmC,KAExC,MAAM+mD,GAAO+f,EAAAA,GAAAA,MAEP,MAAE20B,EAAK,MAAE12E,GAAUnnB,GAAUgF,EAAAA,EAAAA,KAAkBhF,GAAW,CAAC,EAC3Dge,EAAQ6/E,EAASA,EAAM7/E,OAAS6/E,EAAMsjC,SAAYh6G,EAAQ,gBAAkB,GAC5Ei6G,EAASvjC,GAAOwjC,WAAcj5F,IAAUuhB,EAAAA,EAAAA,KAAeR,EAAM/gB,GAC7DonB,EAASptD,IAAQ+0D,EAAAA,EAAAA,KAAahO,EAAM/mD,IAAU,WAE9Ck/H,EAAkBzjC,IAAS0jC,EAAAA,EAAAA,KAAiB1jC,KAAU7wC,EAAAA,EAAAA,KAAa6wC,EAAO,aAC1E2jC,EAAap5F,IAAUq5F,EAAAA,EAAAA,KAAkBr5F,EAAQ,OACjDvf,EAAQg1E,GAASyjC,GAAoBn6G,GAASq6G,EAC9CpwH,GAAQq7E,EAAAA,GAAAA,GAAS5jE,GAEjBukC,GAAOqc,EAAAA,GAAAA,KAAQ,IA2BvB,SAAsBo0B,EAAkB12E,EAAkBpE,GACxD,IAAKA,EAAK,OAAOg9G,GACjB,GAAIliC,EAAO,CACT,IAAKA,EAAM6jC,gBAAgB7gI,OAAQ,OACnC,MAAM8gI,EAAY9jC,EAAM6jC,eAAel/H,MAAM4qD,GAAuB,MAAdA,EAAK/rD,OAC3D,OAAOsgI,GAAa9jC,EAAM6jC,eAAe,EAC3C,CAEA,OAAIv6G,EACKy6G,EAAAA,QADT,CAKF,CAvCWC,CAAahkC,EAAO12E,EAAO/V,IACjC,CAACysF,EAAOzsF,EAAO+V,KACV5S,OAAQwO,IAAQ++G,EAAAA,GAAAA,IAAS,IAanC,SAAyB/+G,EAAcqqC,GACrC,IAAKrqC,EAAK,OAAOjI,QAAQu5E,QAAQ0tC,IACjC,IAAK30E,EAAM,OAAO40E,EAAAA,GAAAA,GAAYj/G,EAAKi9G,GAAcA,IACjD,MAAMpgI,EAAMD,KAAKC,IAAIwtD,EAAK3tD,MAAO2tD,EAAK+/B,QACtC,GAAIvtF,EAAMogI,GAAc,CACtB,MAAMxwC,EAAQwwC,GAAepgI,EAC7B,OAAOqiI,EAAAA,GAAAA,GAAWl/G,EAAKysE,EACzB,CACA,OAAO10E,QAAQu5E,QAAQtxE,EACzB,CArBIm/G,CAAgB9wH,EAAOg8C,IACtB,CAACh8C,EAAOg8C,GAAO20E,IAClB,OAAOt4D,EAAAA,GAAAA,KAAQ,KACN04D,EAAAA,GAAAA,IAAmB,CACxBnkH,QACAojH,SACA5xE,QACA4yE,QAAS,CAAC,CAAE90C,IAAKvqE,OAElB,CAACysC,EAAO4xE,EAAQpjH,EAAO+E,GAAK,ECqDTm+G,CAAwBT,EAAkBr4F,EAAQhmC,IAElE,UACJigI,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpBzoH,EAAO,OACPC,EAAM,UACNyoH,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,GACF7iI,IAAW8iI,EAAAA,GAAAA,IAAY9iI,GACvBA,GAAU+iI,EAAAA,EAAAA,KAAiB/iI,GAAY,EACvC2gI,EAAU,QAAU,QACpBK,OACAz8H,EACA08H,OACA18H,GACA,OACAA,OACAA,EACAvE,IAAW8H,EAAAA,EAAAA,KAAe9H,IAC1B,GAGIq1C,EAASl+B,QAAQnX,IAErBksE,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBl3B,SACA2tF,gBAAiB5C,KAGb,IAAEl0D,EAAG,aAAEC,IAAiB82D,EAAAA,GAAAA,GAAc,CAC1C5tF,SACAm7B,YAAa4vD,EACbl0D,IAAKF,EACLk3D,cAAe7C,KAGX,kBACJh4C,EAAiB,wBACjBoN,EAAuB,kBAAEnN,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBzc,GAAgBG,GAErCorB,IAAcxpB,EAAAA,GAAAA,IAAgB,KAClC,MAAM,OAAE3tE,EAAM,GAAEmB,GAAOk/H,EACvBx0H,EAAa,CAAE7L,SAAQiG,UAAW9E,GAAK,IAGnCgoE,IAAcwE,EAAAA,GAAAA,IAAgB,KAC7Bu0D,IAGDC,GACFF,IAEFxmG,KACAsnG,EAAAA,GAAAA,MACAb,IAAM,IAGFc,IAAqBr1D,EAAAA,GAAAA,IAAiBtoC,IACrCi9F,IAGLpC,EAAqB,CAAEt1E,OAAQvlB,EAAQ,MACvCi9F,EAAUj9F,EAAQ,KAAI,IAGlB49F,IAAoBt1D,EAAAA,GAAAA,IAAgB,KACpC1f,EAAAA,KAAiB53C,EAAAA,IAChBksH,IAGLA,IACAnC,EAAoB,CAAElhG,SAAUA,IAAU,IAGtCgkG,IAAqBv1D,EAAAA,GAAAA,IAAgB,SAACw1D,GAC1C,IAAKX,EACH,OAEF,MAAMY,EAAOvD,GAAesD,GACtBE,EA5HoB,IA4HHF,MAL4Cj/H,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,KAAAA,UAAA,IAMnEi8H,EAA2B,CAAEt1E,aAAcu4E,EAAMr4E,qBAAsBs4E,IACvEb,EAAgBa,EAAiBD,EA9HP,EA+H5B,IAEME,IAAsB31D,EAAAA,GAAAA,IAAgB,KAC1Cwa,IACA,MAAMo7C,EAAU15H,OAAO/C,OAAOiI,QAAQ8wH,IAAgBz9H,MAAKkK,IAAA,IAAE,CAAE82H,GAAK92H,EAAA,OAAK82H,IAASv4E,CAAY,MAAI,KAnIxE,EAqIpB24E,GAAez4E,EAErBm4E,GACEM,GAxIwB,IAwITD,EAvIc,EAuImDA,EAChFC,EACD,IAGGC,IAAqB91D,EAAAA,GAAAA,IAAgB,KACzC,MAAM+1D,EAAc58H,OAAOiI,QAAQ8wH,IAAgBz9H,MAAKiM,IAAA,IAAE,CAAE+0H,GAAK/0H,EAAA,OAAK+0H,IAASv4E,CAAY,MAAI,IA9IrE,EAgJpB39C,EAAQ,GAhJY,IAgJV29C,EA/Ie,EA+IuD64E,KACtF,OACEp8D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,oBACZs7D,GAAqB3gB,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,oBAAoB68C,QAAS2e,IAElE7gB,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL4Y,WAAWq8C,EAAAA,GAAAA,GACT,kBAAmBje,GAAwB,UAAWk9B,GAAqB,UAE7Ere,MAAM,cACN5c,KAAK,UACL6c,UAAU,gBACVoM,QAASX,EACTqI,aAAcuK,EACd1e,QAAS85D,GACThqC,YAAajE,EACb/M,cAAeJ,GAEf5gB,GAAAA,GAAAC,cAAA,QAAM56C,WAAWq8C,EAAAA,GAAAA,GACf,wBACgB,IAAhB97D,EAAKzM,QAAgB,QACL,IAAhByM,EAAKzM,QAAgB,SAGpByM,IAGD,IAIJy2H,IAAat6D,EAAAA,GAAAA,KAAQ,IACV,IAAXze,GAAgB1rB,EAAgB,aAChC0rB,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQ1rB,IAEZ,IAAI6gG,GAASh0D,EAIb,OACEzE,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe,cAAeg3D,EAAc,oBAAsB,cAAerzG,GAC5F88C,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,EAC1B2nE,IAAKA,GAELxE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,sBAAsB68C,QAAS2tB,IAC3CsG,EA+FT,SAAqBA,GACnB,MAAM,MAAE7/E,EAAK,UAAEqjH,EAAS,SAAEF,GAAatjC,EAEvC,OACEn2B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,QAAQ88C,IAAI,SAAQmkB,EAAAA,GAAAA,GAAWhwE,GAASmjH,IACtDE,GACC35D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,WAAW88C,IAAI,SAAQmkB,EAAAA,GAAAA,GAAWqzC,IAIzD,CA1GiB2C,CAAYnmC,GA4G7B,SAAqB5/E,EAAkB6iH,GACrC,OACEp5D,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,QAAQ88C,IAAI,QAAQi3D,IAAc9yC,EAAAA,GAAAA,GAAW8yC,IAC5Dp5D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,WAAW88C,IAAI,QAAQ5rD,GAG5C,CAnHsCgmH,CAAY96E,EAAK,eAAgB23E,GAC/Dp5D,GAAAA,GAAAC,cAACu8D,GAAAA,EAAY,OAGfx8D,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,QAASX,EACT1L,MAAM,cACN5c,KAAK,UACLrgC,UAAU,gBACVuyE,SAAUtlF,MACV4vD,QAAS64D,EACTx4D,UAAU,kBAEVvC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,6BAEf26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,QAASX,EACT1L,MAAM,cACN5c,KAAK,UACLrgC,WAAWq8C,EAAAA,GAAAA,GAAe,cAAe,gBAAiBm5D,EAAY,QAAU,QAChF34D,QAASy4D,EACTp4D,UAAWs4D,EAAY,cAAgB,cAEvC76D,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,mBACb26C,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAEf26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,QAASX,EACT1L,MAAM,cACN5c,KAAK,UACLrgC,UAAU,gBACVuyE,SAAUrlF,MACV2vD,QAAS44D,EACTv4D,UAAU,cAEVvC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,yBAGf26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBACb26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL4Y,UAAU,8BACVi9C,MAAM,cACN5c,KAAK,UACL6c,UAAU,SACVL,QAASy5D,GACThtD,QAASX,GAEThO,GAAAA,GAAAC,cAAA,KAAG56C,WAAWq8C,EAAAA,GAAAA,GAAe,OAAQ26D,QAGrCttH,EAAAA,IACAixD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,yBACf26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACb26C,GAAAA,GAAAC,cAACw8D,GAAAA,EAAW,CAACC,MAAI,EAAC3+F,MAAOnG,EAAU,EAAa,IAAT0rB,EAAciwB,SAAUmoD,QAMtExC,GACCl5D,GAAAA,GAAAC,cAACqS,GAAAA,EAAY,CACXI,UAAWiO,EACXje,UAAU,QACVC,UAAU,MACVt9C,UAAU,qBACVktD,QAAS4pD,GACTt5D,QAASge,EACT87C,OAAQ77C,EACR87C,qBAAsB/7C,GAErB23C,GAAqBxyH,KAAK81H,GA0CrC,SACEA,EAAce,EAAqB36D,EACnCze,GAEA,MAAMwvC,EAAc4pC,IAAgBtE,GAAeuD,IAASr4E,GA3ThC,IA4TtBq4E,IAAmCr4E,EACzC,OACEuc,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CACPvoC,IAAKoiG,EAEL55D,QAASA,IAAMA,EAAQ45D,GACvB3nE,KAAM8+B,EAAa,aAAUp2F,EAC7BigI,WAAa7pC,OAAuDp2F,EAA1CmjE,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,2BAEtCy2G,EAAK,IAGZ,CA1DmBiB,CAA2BjB,EAAMv4E,EAAcq4E,GAAoBn4E,MAKhFuc,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL4Y,UAAU,eACVi9C,MAAM,cACN5c,KAAK,UACLwc,QAASL,GACTU,UAAU,gBAEVvC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAEX,I,4BChWV,UAAgB,wBAAwB,WAAW,oBAAsB,WAAW,kCAAkC,WAAW,4BAA8B,WAAW,gCAAgC,WAAW,2BAA6B,WAAW,6BAA6B,WAAW,wBAA0B,YC2L/T,SAAS23G,GAASzlI,EAAWy9C,EAAWj9C,EAAe0tF,EAAgBw3C,GACrE,MAAQ,IAAG1lI,KAAKy9C,EAAIioF,KAAUA,KAAUA,eACtCllI,OAAW0tF,EAAS,EAAIw3C,KAAUA,KAAUA,YAAiBllI,MACjE,CAoCA,UAAe0oE,EAAAA,GAAAA,KAhN+BpnE,IAExC,IAFyC,MAC7C0T,EAAK,MAAEe,GACRzU,EAEC,MAAMgrF,GAAe9f,EAAAA,GAAAA,IAAuB,MAEtC24D,GAAen7D,EAAAA,GAAAA,KAAQ,IAmF/B,SAAyBh1D,EAAee,GACtC,MAAMqvH,EAAepwH,EAAQe,EAAQ,EAC/BsvH,EAmBR,SAAsBrwH,GACpB,IAAIqwH,EAAY,EAahB,OAZc,IAAVrwH,EACFqwH,EAAY,GACO,IAAVrwH,EACTqwH,EAAY,GACO,IAAVrwH,EACTqwH,EAAY,IACO,IAAVrwH,GAEAA,EAAQ,KADjBqwH,EAAY,KAKPA,CACT,CAlCoBC,CAAatwH,GACzBuwH,EAmCR,SAAuBvwH,EAAee,GACpC,IAAIsvH,EAAY,GAahB,OAZc,IAAVrwH,EACFqwH,EAAY,GACO,IAAVrwH,EACTqwH,EAAY,GACO,IAAVrwH,EACTqwH,EAAsB,IAAVtvH,EAAc,GAAK,IACZ,IAAVf,GAEAA,EAAQ,KADjBqwH,EAAY,KAKPA,CACT,CAlDqBG,CAAcxwH,EAAOowH,GAClCK,EAmDR,SAAwBzwH,EAAeqwH,GACrC,OAAOrwH,GAAS,EAAI,GAAKqwH,EAAYrwH,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB0wH,CAAe1wH,EAAOqwH,GAEpCM,EAAc,WAAU3wH,IACxB4wH,EAoDR,SAAqB9jI,EAAYujI,EAAmBrwH,GAGlD,IAAIw1F,EAAI,GACR,GAAc,IAAVx1F,EACFw1F,EAAIy6B,GAAS,EAAG,EAAG,EAAGI,EAJT,GAKTJ,GAAS,EAAG,GAAI,EAAGI,EAAY,EALtB,GAMTJ,GAAS,EAAG,GAAI,EAAGI,EANV,QAQb,IAAK,IAAI5gI,EAAI,EAAGA,EAAIuQ,EAAOvQ,IACzB+lG,GAAKy6B,GAAS,GAAII,EAAY,GAAK5gI,EAAG,EAAG4gI,EAT9B,GAaf,MACG,iBAAgBvjI,uBACJ0oG,wBAGjB,CAvEmBq7B,CAAYF,EAAYN,EAAWrwH,GAE9C8wH,EA4ER,SAA2B/vH,EAAesvH,EAAmBrwH,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVe,EAAc,EAAIsvH,EAAY,EAGzB,IAAVrwH,EACY,IAAVe,EACK,EACY,IAAVA,EACF,GAGF,IAECsvH,EAAY,GAAKtvH,CAE7B,CA9FyBgwH,CAAkBX,EAAcC,EAAWrwH,GAC5DgxH,EA+FR,SAA4BjwH,EAAef,EAAeqwH,EAAmBI,GAC3E,OAAIzwH,GAAS,GAITe,GAAS,EAHJ,EAKEA,GAASf,EAAQ,EACnBywH,EAAc,IAGfJ,EAAY,GAAK,GAAKtvH,EAAQ,IAAMsvH,EAAY,EAC1D,CA3G0BY,CAAmBb,EAAcpwH,EAAOqwH,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAE,iBACAE,kBACAP,cACAE,aAEJ,CArGWO,CAAgBlxH,EAAOe,IAC7B,CAACf,EAAOe,IAyCX,IAvCA22F,EAAAA,GAAAA,KAAgB,KACd,IAAKpgB,EAAa9+D,QAChB,OAGF,MAAM,YACJi4G,EAAW,gBACXO,EAAe,WACfT,EAAU,eACVO,EAAc,WACdH,EAAU,SACVC,GACET,EAEEgB,EAAa75C,EAAa9+D,QAAQ6+E,kBACxC,GAAI/f,GAAc9+D,QAAS,CACzB,MAAM44G,EAAiB95C,EAAa9+D,SAC9B,MAAEmgE,GAAUy4C,EAClBz4C,EAAMD,OAAU,GAAE+3C,MAClB93C,EAAM6f,UAAa,eAAcw4B,OACjCr4C,EAAMi4C,SAAY,SAAQD,MAC1B,MAAMU,EAAMD,EAAe7+D,cAAc,OACnC++D,EAAMF,EAAe7+D,cAAc,OACnCg/D,EAAOH,EAAe7+D,cAAc,QACrC8+D,GACCF,IACFA,EAAWK,UAAa,oCAAmCZ,mBAG3DW,IACFA,EAAKC,UAAYZ,GAEfU,IACFA,EAAI34C,MAAMD,OAAU,GAAE63C,MACtBe,EAAI34C,MAAM6f,UAAa,cAAas4B,OAExC,IACC,CAACX,IAEU,IAAVnwH,EACF,OACEizD,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOk8C,qBACrBx+D,GAAAA,GAAAC,cAAA,OACE56C,UAAWi9D,GAAOm8C,4BAClBj6D,IAAK6f,KAMb,MAAM,YACJm5C,EAAW,gBAAEO,EAAe,WAAET,EAAU,eAAEO,EAAc,WAAEH,GACxDR,EAEJ,OACEl9D,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GACd4gB,GAAOk8C,oBACPzxH,EArEoB,GAqESu1E,GAAOo8C,0BAGpC1+D,GAAAA,GAAAC,cAAA,OACE56C,UAAWi9D,GAAOq8C,2BAClBn6D,IAAK6f,EACLqB,MACG,oBAAmBg4C,uCACVF,+BAAyCO,SAGrD/9D,GAAAA,GAAAC,cAAA,aACAD,GAAAA,GAAAC,cAAA,OACE56C,UAAWi9D,GAAOs8C,wBAClBl5C,MAAQ,aAAY43C,uBAAgCO,2BAC1BE,UAG1B,ICvGV,GAAkK,WAAlK,GAAiM,WAAjM,GAAgc,WC0D1bc,GAAa,MAAQ7nI,EAAAA,EAwR3B,IAAeypE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAEW,IAFT,OACPtM,EAAM,SAAE4G,EAAQ,gBAAEsU,GACnB5O,EACC,MAAMtK,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAE1BszB,EAAW10B,EAAO00B,SAClBrf,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAE1D0O,GAAe5G,EAAAA,EAAAA,KAAmBhK,EAAQoB,GAE1CmrC,EAAQ,CACZnpC,OACAsxB,YAGF,GAAwB,WAApBpY,IAAiC1L,EACnC,OAAO27B,EAGT,GAAIvkC,IAAaD,EAAAA,KAAmBsN,IAAkBjS,GAAMsG,QAAS,CACnE,MAAM89H,EAAkBv8H,OAAOjD,GACzBhH,EAAUwmI,GAAkB1iI,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQomI,QAAmBjiI,EACjFkiI,EAAmBzmI,GAAUsjG,EAAAA,EAAAA,KAAsBtkG,EAAQgB,QAAWuE,EAE5E,MAAO,IACFgnC,EACHggB,iBAAkBi7E,EAClB52H,eACA82H,UAAU,EACVD,mBAEJ,CAEA,MAAMl7E,EAAoBl3C,OAA4D9P,GAA5C+K,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ4G,GAC1E,GAAIukD,GAAkB1qD,OAAQ,CAC5B,MAAM8lI,EAAqB/2H,EAAa27C,EAAiB,KACnD,SACJm7E,GAAW,GAEXC,GAC+B,IAA5Bp7E,EAAiB1qD,SACjBuoD,EAAAA,EAAAA,KAAgCpqD,EAAQ2nI,EAAoB3/H,IAC5D,CAAC,EAEN,MAAO,IACFukC,EACHggB,mBACA37C,eACA82H,WAEJ,CAEA,OAAOn7F,CAAK,GArDIk/B,EA/PQ1pE,IAgBC,IAhBA,OAC3BX,EAAM,SACN4G,EAAQ,SACR0/H,EAAQ,mBACRE,EAAkB,iBAClBr7E,EAAgB,aAChB37C,EAAY,YACZwwH,EAAW,iBACXqG,EAAgB,sBAChBI,EAAqB,UACrB95G,EAAS,KACT3qB,EAAI,SACJsxB,EAAQ,WACRozG,EAAU,kBACVzG,EAAiB,qBACjB0G,GACsBhmI,EACtB,MAAM,qBACJ2hG,EAAoB,aAAEz2F,EAAY,WAAE+Y,EAAU,WAAEgiH,EAAU,mBAAEC,IAC1DrgH,EAAAA,EAAAA,MACEuiC,GAAOipB,EAAAA,GAAAA,KAEP80D,GAAqBx6D,EAAAA,GAAAA,GAAgBm6D,GACrCL,EAAkB7yH,MAAMwzH,QAAQ57E,GAAoBA,EAAiB27E,GAAsB37E,EAC3F67E,EAAgBx3H,GAAgB42H,EAAkB52H,EAAa42H,QAAmBjiI,EAClF8iI,EAAsB1zH,MAAMwzH,QAAQ57E,GACtCA,EAAiB1qD,OAAU0qD,EAAmB,EAAI,EAChD+7E,EAAsB3nI,KAAKE,IAAIwnI,EAAsBH,EAAoB,GAEzEK,EAAkBd,GAAmB98E,EAAAA,EAAAA,KAAeR,EAAMs9E,QAAoBliI,EAE9EM,EAAQuiI,IAAiBI,EAAAA,EAAAA,KAAgBJ,GACzC76G,EAAM1nB,GAAOgiH,MAAQhiH,OAAQN,EAC7BkjI,EAAmBtwH,QAAQoV,IAAQA,EAAIm7G,mBAAmB7mI,QAE1Du4F,GAAiBuuC,EAAAA,GAAAA,GAAaP,GAC9Bp8B,EAAYo8B,IAAiBrG,EAAAA,EAAAA,KAAoBqG,EAAeK,EAAmB,OAAS,aAC5FvuC,GAAezM,EAAAA,GAAAA,GAASue,GACxB48B,EAAYR,IAAiBS,EAAAA,EAAAA,KAAoBT,GAEjD15G,EAAYvW,SAAQu1D,EAAAA,GAAAA,GAAgBk6D,IAEpCkB,GADkBtoC,EAAAA,GAAAA,GAAkB,CAAC9xE,GAnEnB,MAoEoBA,EAEtCq6G,GAAyBrH,EAAAA,GAAAA,GAAiB0G,GAAe,IAE/D7+D,EAAAA,GAAAA,KAAU,KACJ70C,IAAa1sB,IAAaD,EAAAA,IAAkB3E,GAAMsG,UACpDu+H,EAAmB,CAAE7mI,SAAQ4G,YAC/B,GACC,CAAC5G,EAAQ4G,EAAU0sB,EAAUtxB,KAEhCooH,EAAAA,GAAAA,GAAiBpqH,EAAQomI,EAAiBY,GAE1C,MAAM/xF,EAASl+B,QAAQiwH,KAAmBN,GAExC56D,IAAKF,IACHO,EAAAA,GAAAA,GAAkB,CACpBl3B,SACA2yF,kBAAkB,EAClBhF,gBAAiB5C,KAGb,IAAEl0D,EAAG,aAAEC,IAAiB82D,EAAAA,GAAAA,GAAc,CAC1C5tF,SACAm7B,YAAa4vD,EACbl0D,IAAKF,EACLk3D,cAAe7C,KAGV4H,EAAmBC,EAAiBC,IAAoBhzD,EAAAA,GAAAA,KAEzDizD,GAAqBr6D,EAAAA,GAAAA,IAAgB,KACzCo6D,IACAnB,EAAW,CAAE5mI,SAAQiG,UAAW+gI,EAAe7lI,GAAIya,SAAS,GAAO,IAG/DqsH,EAAejB,IAAiBkB,EAAAA,EAAAA,KAA6BlB,GAE7DmB,GAA0Bx6D,EAAAA,GAAAA,IAAgB,KAC1Cs6D,GACF3lC,EAAqB,CAAEtiG,OAAQgnI,EAAchnI,OAAQiG,UAAW+gI,EAAc7lI,GAAIkmC,OAAQ4gG,GAC5F,IAGIG,GAAuBz6D,EAAAA,GAAAA,IAAgB,KAC3C/oD,EAAW,CAAE5kB,SAAQ4G,WAAU3F,KAAM,UAAW,IAG5ConI,IAAqB16D,EAAAA,GAAAA,IAAiBrc,IAC1C,MAAMg3E,EAAgBh3E,EAAEkd,UAAYj7D,MAAMwzH,QAAQ57E,GAC9CA,GAAiBo9E,EAAAA,GAAAA,GAAcp9E,EAAiB1qD,OAAQ0qD,EAAiBn3B,QAAQoyG,GAAoB,IACrGA,EAECI,MACH36H,EAAa,CACX7L,SAAQ4G,WAAUX,UAAWqiI,EAAe5jF,mBAAmB,IAEjEiiF,EAAqB2B,GACvB,KAGKE,GAAcC,GAAkBC,KAAsB3zD,EAAAA,GAAAA,MAEvD,YAAEoiB,GAAW,gBAAEF,KAAoBmC,EAAAA,GAAAA,GAAaivC,IAmCtD,GAAKt8D,GAAiB47D,EAEtB,OACErgE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,WAAWq8C,EAAAA,GAAAA,GACT,6BDpOe,WCoO4Bg3D,EDpOa,WAAvB,WCoOwDrzG,KAGzFs6G,EAAsB,GAAKS,IAC3BpgE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLi5C,KAAK,UACL4c,MAAM,cACNC,UAAW9gB,EAAK,gCAChBygB,QAAUk+D,OAA0CvjI,EAAvBikI,GAE5B96G,GACCg6C,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CACNtH,MAAM,OACNj9C,WAAWq8C,EAAAA,GAAAA,GDlPgH,WCmPzG4gB,IAAqB89C,GAAoB99C,MAI/DtiB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CACHtsD,KAAK,WACL1gB,WAAWq8C,EAAAA,GAAAA,GACT4gB,GAAoB89C,GAAoB99C,OAK/C08C,GACCh/D,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLi5C,KAAK,UACL4c,MAAM,cACNC,UAAW9gB,EAAK,0BAChBygB,QAASs+D,GAETxgE,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,WAGfi6B,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZjwD,OAAQ4yF,EACR19D,QAAS49D,EACT76H,KAAM67C,EAAK,sBACX4/E,aAAc5/E,EAAK,eACnBq8C,eAAgB4iC,IAElB1gE,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GDlRwE,WCkRnCw/D,IDlRoL,YCmRpOh/D,QAAS2tB,GACTmC,YAAarC,GACbxtB,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAE1BmjE,GAAAA,GAAAC,cAACqhE,GAAuB,CACtBv0H,MAAO4yH,EACP7xH,MAAO0xH,IAETx/D,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CAACC,UAAW63D,EAAuBxmI,GAAIksC,KAAK,gBAAgB1gB,UD3R0T,YC6LvY,SAAyBm8E,EAAuB/jG,EAAkB8jI,EAAuBC,GACvF,MAAM,MAAEzpI,EAAK,OAAE0tF,IAAWyM,EAAAA,EAAAA,MACpBD,EAASx0F,GAAW+jG,EACpBigC,EAAoBF,GAAe9jI,EAEzC,OACEuiE,GAAAA,GAAAC,cAAA,OAAK56C,UDnMuZ,YCoMzZm8E,IAAiBggC,IAAcC,GAC9BzhE,GAAAA,GAAAC,cAAA,OACE56C,UAAWi9D,GACXsD,IAAKqM,EACLl6F,MAAOA,EACP0tF,OAAQA,EACRI,IAAI,GACJsM,WAAW,IAGdsvC,IAAsBD,GACrBxhE,GAAAA,GAAAC,cAAA,SACE2lB,IAAKnoF,EACL1F,MAAOA,EACP0tF,OAAQA,EACRU,aAAW,EACXF,yBAAuB,EACvB5gE,UAAWi9D,KAGdkf,GACIxhC,GAAAA,GAAAC,cAACshC,GAAAA,EAAY,CAACC,aAAcvP,EAAQwP,UAAWhyF,QAAQ+xH,GAAYzpI,MAAOA,EAAO0tF,OAAQA,IAGpG,CAgES2M,CACCV,EACAF,EACAuuC,EACAG,IAGJlgE,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GDpS+F,WCoS5DgwB,GDpS8O,YCqS5RvvB,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAE1BmjE,GAAAA,GAAAC,cAAA,OAAK56C,UDvS0S,WCuSjR88C,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,IACpDgjI,GACA7/D,GAAAA,GAAAC,cAACo4B,GAAAA,EAAe,CACdzyF,KAA8B,IAAxB+5H,EACFl+E,EAAK,4BACLA,EAAK,qBAAsB,CAAE3zC,MAAO8xH,GAAuB,CAAE8B,YAAa/B,MAIjFE,IAAmBv5C,EAAAA,GAAAA,GAAWu5C,IAEjC7/D,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTC,UAAW63D,EAAuBxmI,GAClCksC,KAAK,oBACL1gB,UDrTmQ,YCuTnQ26C,GAAAA,GAAAC,cAAA,KAAGkC,IAAI,OAAO98C,UDvToT,YCwThU26C,GAAAA,GAAAC,cAAC0hE,GAAAA,EAAc,CACbrpI,QAAS+nI,EACTuB,QAASnyH,QAAQiiF,GACjBgxB,UAAWmc,QAKnB7+D,GAAAA,GAAAC,cAACu8D,GAAAA,EAAY,MACZmE,GACC3gE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLrgC,UDpU4V,WCqU5V68C,QAAS2+D,EACTgB,uBAAqB,EACrBxrD,aAAe1vB,EAAAA,QAAkC9pD,EAAnBskI,GAC9B7qD,aAAe3vB,EAAAA,QAAoC9pD,EAArBukI,KAE7B3hC,EAAAA,GAAAA,GAAyBh+C,EAAMk/E,KAIlC,KCyBV,IAAelgE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAEW,IAFT,OACPtM,EAAM,SAAE4G,EAAQ,gBAAEsU,EAAe,SAAEo6D,GACpChpE,EACC,MAAM,kBACJvN,EAAiB,4BAAE4rE,EAA2B,YAAEnvC,EAAW,aAAE01B,IAC3DpyD,EAAAA,EAAAA,KAAeF,GACboD,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,IAExBA,OAAQs7B,EAAar1B,UAAWs1B,GAAmBC,EACrD4tG,EAAe9tG,GAAeC,GAChC73B,EAAAA,EAAAA,KAAkB9E,EAAQ08B,EAAaC,QACvCp3B,EAEJ,IAAI0D,EACJ,GAAwB,WAApBqT,EAA8B,CAChC,MAAMjM,GAAYC,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ4G,GAClDiB,EAAgBoH,GAAWxO,MAC7B,MAAO,GAAwB,cAApBya,EAAiC,CAC1C,MAAMnO,GAAeC,EAAAA,EAAAA,KAAmBpO,EAAQoB,EAAQ4G,GACxDiB,EAAgBkF,GAActM,MAChC,MAAO,GAAwB,WAApBya,GAAgCtU,IAAaD,EAAAA,GAAgB,CACtE,MAAMhB,GAAa+D,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GACpDiB,EAAgBlC,GAAYkC,eAAiB,CAC/C,CAEA,MAAM63D,GAAeE,EAAAA,EAAAA,KAAkBhhE,EAAQoB,EAAQ4G,EAAU,gBAE3D07D,EAActgE,GAAMsgE,YACpB+mE,EAAqB/mE,GAAe1jE,EAAOmiB,aAAa7Y,KAAKo6D,EAAYxhD,YAEzE7M,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAEhE,MAAO,CACL4+D,eACA3gE,oBACAuqI,oBAAoBp+E,EAAAA,EAAAA,KAAyBtsD,EAAQ02E,GACrDkkD,oBAAoBl/B,EAAAA,EAAAA,KAAqB17F,GACzCwqI,eACApnI,OACA6F,gBACAoiF,gBAAgBlqF,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC7C2qE,8BACA4+D,qBAAsBhqI,KAAKE,IAAI,EAAGyxD,EAAazwD,OAAS,GACxDud,gBAAiBpf,EAAOof,gBACxBqa,UAAWz5B,EAAOy5B,UAClBsD,qBAAsB/8B,EAAO+8B,qBAC7B0tG,qBACAp1H,gBACD,GAjDeo2D,EA/Q4B1pE,IAuB1C,IAvB2C,OAC/CX,EAAM,SACN4G,EAAQ,gBACRsU,EAAe,SACfo6D,EAAQ,aACR5V,EAAY,mBACZ85D,EAAkB,kBAClBz6H,EAAiB,aACjBqqI,EAAY,KACZpnI,EAAI,cACJ6F,EAAa,WACb03F,EAAU,eACVtV,EAAc,4BACdtf,EAA2B,qBAC3B4+D,EAAoB,gBACpBvrH,EAAe,UACfqa,EAAS,qBACTsD,EAAoB,sBACpB8qG,EAAqB,mBACrBD,EAAkB,mBAClB6C,EAAkB,cAClBp1H,EAAa,qBACb0yH,GACDhmI,EACC,MAAM,mBACJ6oI,EAAkB,SAClBltH,EAAQ,iBACRmtH,EAAgB,iBAChBC,EAAgB,sBAChB5kH,EAAqB,iBACrBhD,EAAgB,eAChBi3F,EAAc,mBACd9mF,IACEzL,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,KACP6gE,GAAqB99D,EAAAA,GAAAA,KAAO,IAC5B,SAAE+9D,IAAar0D,EAAAA,EAAAA,OAEbl2E,MAAOH,IAAgB2qI,EAAAA,GAAAA,MAEzB,UAAElyD,IAAcpC,EAAAA,EAAAA,MAEhBu0D,EAAuB5qI,GAAeQ,EAAAA,IACtCqqI,EAAwBH,GAAY7qI,EAGpCirI,GAAen+D,EAAAA,GAAAA,IAAuB,MAEtCo+D,GAAmBt8D,EAAAA,GAAAA,IAAgB,KACvC17C,EAAmB,CAAEjyB,SAAQ4G,WAAUlF,OAAQ,CAAC,GAAI,IAGhDq/F,GAAiBpzB,EAAAA,GAAAA,IAAiB9sC,IACjCA,EAAMu2D,OAAmB0Q,QAAQ,2BAEtC0hC,EAAmB,CAAExpI,SAAQ4G,YAAW,KAIxC0yF,YAAa4wC,EACbC,UAAWC,EACXxsD,aAAcysD,EACdC,aAAcC,EACdC,WAAYC,IACVC,EAAAA,GAAAA,GAAa,CACfC,QAASV,EACTzgE,QAASu3B,EACT4mB,UAnG6B,MAsGzBijB,GAAsBj9D,EAAAA,GAAAA,IAAgB,KAC1CxjE,YAAW,KACTw/H,EAAmB98G,SAAU,CAAI,GA1GL,IA2GD,IAGzBg+G,GAAwBl9D,EAAAA,GAAAA,IAAgB,KAC5C7rD,EAAiB,CAAEozB,WAAYl1C,GAAS,IAGpC8qI,IAA2Bn9D,EAAAA,GAAAA,IAAgB,KAC/CorC,EAAe,CACbjwF,eAAgBugH,EAAoBvgH,gBACpC,IAGEiiH,IAAkBp9D,EAAAA,GAAAA,IAAiBrc,IACvC,GAAKq4E,EAAmB98G,QAAxB,CAIA,GADA88G,EAAmB98G,SAAU,EACzByoD,EAAU,CACZ,MAAM01D,EAAermI,SAASiiE,cAA8BqkE,EAAAA,KAC5DD,GAAchpG,MAChB,CAEA,GAAIw3F,EAGF,OAFA10G,SACA8lH,IAIF,GAAwB,WAApB1vH,GAAyD,IAAzBquH,EAUlC,OATKK,GAAYG,GACfz4E,EAAEohB,kBACFp2D,EAAS,CAAEnb,QAAIgD,GAAa,CAAEkT,uBAAuB,KAErDqyH,SAGFkB,IAKFnB,IACAmB,GA7BuC,CA6BlB,IAGjBM,IAAoBngC,EAAAA,GAAAA,GAAsBw+B,GAC1CxrD,QACkB55E,IAAtB+mI,IAAmCA,GAAoB3B,EAAuB2B,QAAoB/mI,EAG9FgnI,GAAsBp0H,QAAQqyH,GAC9BgC,GAAyBzzD,GAAawzD,GACtCE,GAA4BF,KAAwBxzD,GAEpD,qBAAE1G,IAAyBf,GAAoBnnB,EAAM/qC,EAAiBqa,GAAasD,GAAsB,GAqF/G,SAAS2vG,KAA6D,IAA5CC,EAAOrnI,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAAUsnI,EAAiBtnI,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GAC1D,OACEojE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eACb26C,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLi5C,KAAK,UACL4c,MAAM,cACNJ,QAASuhE,GACTlhE,UAAW9gB,EAAKwiF,EAAU,QAAU,SAEpCjkE,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe,uBAAwBuiE,GAAW,iBAEnEC,GAAqBlkE,GAAAA,GAAAC,cAACkkE,GAAa,MAG1C,CAIA,OAFAnyD,EAAAA,GAAAA,GAAgB0wD,GAGd1iE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,eAAem/C,IAAKk+D,GACjC1iE,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTxiC,KAAMs9B,EAA8B,OAAS,YAC7CmF,UAAWy5D,EACXzrD,eAAa,EACbC,oBAAqBA,IA3GD,WAApB7iE,IACEtU,IAAaD,EAAAA,IAAkBsN,GAAiBjS,GAAMsG,SAwB9D,WAEE,MAAMojI,EAAsBz3H,EAAgB80C,EAAK,sBAAmB5kD,EAE9D+P,EAAaD,EAAgBpJ,OAAOjE,GAAY5G,EACtD,OACEsnE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,MACIwgE,GAAwBP,EAAuB,IAAM+B,GAAiBvB,GAAwB91H,GAChGqzD,GAAAA,GAAAC,cAAA,OACE56C,UAAU,oBACV2sE,YAAa4wC,EACbC,UAAWC,EACXxsD,aAAcysD,EACdC,aAAcC,EACdC,WAAYC,IAEXh7H,EAAAA,EAAAA,KAASyE,GACRozD,GAAAA,GAAAC,cAACokE,GAAAA,EAAe,CACd3qG,IAAK9sB,EACL0G,OAAQ1G,EACRwrD,aAAcA,EACdrvB,OAAQ4gC,IAAwBy6D,EAChCE,SAAU70H,QAAQk6D,IAClB46D,cAAY,EACZC,iBAAe,EACfC,WAAY9hD,EACZ+hD,oBAAkB,EAClB/3H,cAAeA,EACfg4H,kBAAmBC,EAAAA,GAAkBC,mBACrCC,gBA1NY,GA2NZC,OAAK,EACLC,mBAAoBzB,IAGtBvjE,GAAAA,GAAAC,cAACglE,GAAAA,EAAa,CACZvrG,IAAK9sB,EACLlU,OAAQkU,EACRtN,SAAWqN,OAA2B9P,EAAXyC,EAC3B84D,aAAcA,EACdrvB,OAAQ4gC,IAAwBy6D,EAChCE,SAAU70H,QAAQk6D,IAClB66D,gBAAiBllI,IAAaD,EAAAA,GAC9BklI,aAAcjlI,IAAaD,EAAAA,GAC3BqlI,oBAAkB,EAClBD,WAAS,EACT93H,cAAeA,EACfg4H,kBAAmBC,EAAAA,GAAkBC,mBACrCC,gBA5OY,GA6OZE,mBAAoBxB,GACpBuB,OAAK,KAMjB,CA9EaG,GAKTllE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACGgiE,KACDhkE,GAAAA,GAAAC,cAAA,eACqBpjE,IAAlB0D,EACqB,WAApBqT,EACGrT,EACGkhD,EAAKw2C,EAAa,WAAa,UAAW13F,EAAe,KACzDkhD,EAAKw2C,EAAa,gBAAkB,gBAClB,WAApBrkF,EAAgC6tC,EAAK,sBAAuBlhD,EAAe,KACrD,cAApBqT,EACA+uE,EAAiBlhC,EAAK,aAAeA,EAAK,WAAYlhD,EAAe,UACnE1D,EACN4kD,EAAK,eA4FXsiF,IACA/jE,GAAAA,GAAAC,cAACklE,GAAmB,CAClBzrG,IAAKhhC,EACLA,OAAQA,EACR4G,SAAUA,EACVsU,gBAAiBA,EACjByrH,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,IAI3Bn/D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBACZy+G,IACC9jE,GAAAA,GAAAC,cAACmlE,GAAW,MAEdplE,GAAAA,GAAAC,cAAColE,GAAAA,EAAa,CACZ3sI,OAAQA,EACR4G,SAAUA,EACVsU,gBAAiBA,EACjBo6D,SAAUA,EACVs3D,kBAAmBxB,MAGnB,K,4BCnWV,MC8IA,IAAerjE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEtM,GAAQsM,EACjB,MAAMk6B,GAAMmC,EAAAA,EAAAA,KAAU/pC,EAAQoB,GACxB6sI,GAAmBnrH,EAAAA,EAAAA,KAAuB9iB,EAAQoB,GACxD,MAAO,CACLu5H,MAAOxiH,QAAQyvB,GACfqmG,mBACD,GAPexiE,EA7GF1pE,IAMW,IANV,OACjBX,EAAM,MACNu5H,EAAK,gBACLr+G,EAAe,iBACf2xH,EAAgB,kBAChB5M,GACsBt/H,EACtB,MAAM,qBACJwwH,EAAoB,QACpBlqF,EAAO,sBACPoqF,EAAqB,kBACrBC,IACE9qG,EAAAA,EAAAA,MAEEuiC,GAAOipB,EAAAA,GAAAA,KAEP/8B,EAASl+B,QAAQwiH,GAASsT,GAAwC,WAApB3xH,GAE9C4xH,GAA4BxM,EAAAA,GAAAA,GAAiBuM,IAE7C,IAAE/gE,EAAG,aAAEC,IAAiB82D,EAAAA,GAAAA,GAAc,CAC1C5tF,SACA83F,oBAAoB,EACpBjK,cAAe7C,KAGX,kBACJh4C,EAAiB,kBAAE65B,EAAiB,wBACpCzsB,EAAuB,kBAAEnN,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBvc,GAAMC,GAAc,GAEzCorB,GAAcxpB,EAAAA,GAAAA,IAAgB,KAC7Bm/D,IAELzb,EAAsB,CAAExwH,OAAQb,IAChCinC,EAAQ,CAAEtkB,IAAKmqH,EAA0BnqH,IAAKC,iBAAiB,IAAO,IAGlEoqH,GAAmBr/D,EAAAA,GAAAA,IAAiBrc,IACxCA,EAAEohB,kBACF4+C,EAAkB,CAAEtxH,UAAS,IAS/B,IANAmoE,EAAAA,GAAAA,KAAU,KACJ4D,GAAgB8gE,GAClB1b,EAAqB,CAAEtwH,OAAQb,GACjC,GACC,CAAC+rE,EAAc8gE,EAAkB7sI,KAE/B+rE,IAAiB+gE,EACpB,OAGF,MAAM,UACJhtC,EAAS,QACTx7F,EAAO,MACPE,EAAK,MACLoZ,GACEkvH,EAEJ,OACExlE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,UDlGe,WCmGf68C,QAAS2tB,EACTmC,YAAajE,EACb/M,cAAeJ,GAEf5gB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GDvGoB,WCuGW82B,IAAaK,EAAAA,GAAAA,GAAqBL,KAC/Ex4B,GAAAA,GAAAC,cAAA,QAAM56C,UDxG8C,YCyGjDo8B,EAAK,sBACNue,GAAAA,GAAAC,cAAC6qD,GAAAA,EAAW,CAAC5oD,QAASwjE,EAAkBrgH,UD1GwF,YC2G7Ho8B,EAAK,kCAGVue,GAAAA,GAAAC,cAAA,OAAK56C,UD9GsF,YC8G5D/O,GAC9BtZ,EAAQ4I,MACPo6D,GAAAA,GAAAC,cAAA,OAAK56C,UDhHsG,aCiHxGw1E,EAAAA,GAAAA,GAAuB,CACtBj1F,KAAM5I,EAAQ4I,KAAKA,KACnB2L,SAAUvU,EAAQ4I,KAAK2L,aAK9BrU,GACC8iE,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CACL7yC,KAAK,QACLxoD,MAAOA,EACPmoB,UD5HsE,cCgI3Em1F,GACCx6C,GAAAA,GAAAC,cAAC2pD,GAAAA,EAAoC,CACnCj8E,OAAQgzC,EACR+oC,OAAQlP,EACRyQ,WAAYzmD,EACZlsE,QAASktI,EACT3iE,QAASge,EACT7J,oBAAqB8J,IAGxB,K,gBClGP,MAmKA,IAAergB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAAA,IAAE,OAAEtM,GAAQsM,EAAA,MAAkB,CACnCxL,cAAelC,EAAOkC,cACtBqc,MAAMgB,EAAAA,EAAAA,KAAWvf,EAAQoB,GAC1B,GAJiBqqE,EAnK8B1pE,IAU5C,IAV6C,OACjDX,EAAM,UACN2sB,EAAS,eACTsgH,EAAc,cACdC,EAAa,cACbrsC,EAAa,gBACbssC,EAAe,KACfhwH,EAAI,cACJrc,EAAa,kBACbm/H,GACDt/H,EACC,MAAM,qBACJggG,EAAoB,UACpBysC,EAAS,WACTC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,mBAClBC,IACEnnH,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,MACN8kE,EAAsBC,EAAoBC,IAAuB/4D,EAAAA,GAAAA,MACjEg5D,EAAkBC,IAAuBnlE,EAAAA,GAAAA,KAAkB,IAC3DolE,EAAkBC,IAAuBrlE,EAAAA,GAAAA,KAAkB,GAE5DslE,GAAgB7N,EAAAA,GAAAA,GAAiBnjH,GACjCnb,EAAOmsI,IAAiBh+G,EAAAA,EAAAA,IAAcg+G,GAAiBA,OAAgBhqI,EACvEsO,EAAO07H,IAAiB5sH,EAAAA,EAAAA,IAAc4sH,GAAiBA,OAAgBhqI,EACvEiqI,EAAepsI,IAAQqsI,EAAAA,EAAAA,KAAiBrsI,GAExCssI,GAAyBhO,EAAAA,GAAAA,GAAiBz/B,GAC1C0tC,GAA2BjO,EAAAA,GAAAA,GAAiB6M,GAC5CqB,GAAyBlO,EAAAA,GAAAA,GAAiB4M,GAC1CuB,GAA0BnO,EAAAA,GAAAA,GAAiB2M,GAE3CjsC,GAAmBrzB,EAAAA,GAAAA,IAAgB,KACvCgzB,EAAqB,CAAE/lF,OAAQ5a,IAC3ByuI,GACFf,EAAmB,CAAEvsI,GAAInB,GAC3B,IAGI0uI,GAAqB/gE,EAAAA,GAAAA,IAAgB,KACzCmgE,IACAV,EAAU,CAAExyH,OAAQ5a,IAChBwuI,GAA0BT,GAC5BV,EAAW,CAAErtI,WAEXiuI,GACFX,EAAW,CAAEttI,UACf,IAGI2uI,GAAwBhhE,EAAAA,GAAAA,IAAgB,KAC5CggE,EAAmB,CAAE3tI,UAAS,IAG1B4uI,GAAuBjhE,EAAAA,GAAAA,IAAgB,KAC3CmgE,IACAT,EAAW,CAAErtI,WACTouI,GACFZ,EAAe,CAAExtI,SAAQ4a,OAAQ9Z,IACjC2sI,EAAc,CAAEztI,SAAQ+b,oBAAoB,KAE5CwxH,EAAa,CAAEvtI,UACjB,IAKI6uI,EAAc93H,SAFC8pF,GAAiBssC,GAAmBD,IAEb/vH,IAEtC,IAAE2uD,EAAG,aAAEC,IAAiB82D,EAAAA,GAAAA,GAAc,CAC1C5tF,OAAQ45F,EACR/L,cAAe7C,IAGjB,GAAKl0D,EAEL,OACEzE,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACLn/C,WAAWq8C,EAAAA,GAAAA,GAAe,iBAAkBr8C,GAC5C88C,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAEzBmqI,GACChnE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLw3B,QAAM,EACN1nB,OAAK,EACLzsB,KAAK,OACLrgC,UAAU,yBACV68C,QAASw3B,GAERj4C,EAAK,wBAGTwlF,GACCjnE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLC,MAAM,SACNu3B,QAAM,EACN1nB,OAAK,EACLzsB,KAAK,OACLrgC,UAAU,yBACV68C,QAASqkE,GAER9kF,EAAK,0BAGTylF,IAA2BD,GAC1BjnE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLC,MAAM,SACNu3B,QAAM,EACN1nB,OAAK,EACLzsB,KAAK,OACLrgC,UAAU,yBACV68C,QAASqkE,GAER9kF,EAAK,8BAGVue,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACLkiE,QAAM,EACNjpB,KAAK,UACL4c,MAAM,cACNJ,QAASmlE,EACT9kE,UAAW9gB,EAAK,UAEhBue,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,WAEbi6B,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZjwD,OAAQ24F,EACRzjE,QAAS2jE,EACTlwH,MAAOmrC,EAAK,iBAAkBt2C,GAAOqlB,EAAAA,EAAAA,KAAuBrlB,IAAQskD,EAAAA,EAAAA,KAAahO,EAAM/mD,IACvFkL,KAAMuF,EACFs2C,EAAK,mCAAmCjuC,EAAAA,EAAAA,KAAgBrI,IACxDs2C,EAAK,mCACT+lF,sBAAoB,EACpBnG,aAAc5/E,EAAK,SACnBq8C,eAAgB3yF,EAAOi8H,EAAqBE,GAE3Cn8H,GACC60D,GAAAA,GAAAC,cAACwnE,GAAAA,EAAQ,CACP/6D,MAAOjrB,EAAK,kBACZkrB,QAASg6D,EACTe,QAASd,IAGZz7H,GAAQy6H,GACP5lE,GAAAA,GAAAC,cAACwnE,GAAAA,EAAQ,CACP/6D,MAAOjrB,EAAK,cACZkrB,QAAS85D,EACTiB,QAAShB,KAIX,KC1JJiB,GAAsB,CAAEliD,OAAQ,GAyGtC,IAAehlB,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAEW,IAFT,OACPtM,GACDsM,EACC,MAAM,YAAEkvB,IAAgB18B,EAAAA,EAAAA,KAAeF,GACjCoD,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,IAExBA,OAAQs7B,EAAar1B,UAAWs1B,GAAmBC,EACrD4tG,EAAe9tG,GAAeC,GAChC73B,EAAAA,EAAAA,KAAkB9E,EAAQ08B,EAAaC,QACvCp3B,EAEE+qI,EAAqBn4H,SAAQib,EAAAA,EAAAA,KAA0BpzB,IAE7D,MAAO,CACLoD,OACAmtI,sBAAuBp4H,QAAQqyH,GAC/B8F,qBACD,GAlBe7kE,EAvGM1pE,IAWG,IAXF,UACzBgsB,EAAS,OACT3sB,EAAM,SACN4G,EAAQ,gBACRsU,EAAe,KACflZ,EAAI,sBACJykI,EAAqB,mBACrBD,EAAkB,sBAClB2I,EAAqB,mBACrBD,EAAkB,qBAClBvI,GACsBhmI,EACtB,MAAM,SAAE82B,GAAaz1B,GAAQ,CAAC,GAExB,UAAE21E,IAAcpC,EAAAA,EAAAA,OACf65D,EAAqBC,IAAuBhS,EAAAA,GAAAA,IAAqB4R,KACjEK,EAAgBC,IAAkBlS,EAAAA,GAAAA,IAAqB4R,KACvDO,EAAmBC,IAAqBpS,EAAAA,GAAAA,IAAqB4R,KAC7DS,EAAoBC,IAAsBtS,EAAAA,GAAAA,IAAqB4R,KAC/DW,EAAeC,IAAiBxS,EAAAA,GAAAA,IAAqB4R,IAEtD5D,EAA4B8D,IAA0Bx3D,EAEtDm4D,GAAmBjkE,EAAAA,GAAAA,KAAO,IAC1B,aACJE,EAAY,IACZD,IACEK,EAAAA,GAAAA,GAAkB,CACpBl3B,QAASi6F,EACT9iE,kBAAkB,EAClB0C,mBAAmB,IA8BrB,IA3BA0pC,EAAAA,GAAAA,IAAc,KACZs3B,EAAiBjjH,SAAU,CAAK,KAGlCypG,EAAAA,GAAAA,IAAgB,KACd,MAAMyZ,EAAmBX,IACnBY,EAAcV,IAMdW,EAAa,CAACF,EALGP,IACCE,IAI+CM,EAHpDJ,KAKbM,EAAgBJ,EAAiBjjH,QACjCokE,EAAcg/C,EAAWj3H,QAAO,CAACC,EAAKkyB,IAAUlyB,EAAMkyB,EAAM4hD,QAAQ,GAEpEojD,EAAexrI,SAAS67E,eAAe,gBACxC2vD,KAELC,EAAAA,GAAAA,GAAoBH,EAAYC,IAEhCG,EAAAA,GAAAA,IAAeF,EAAc,CAC3B,+BAAiC,GAAEl/C,QACnC,GACD,CAACm+C,EAAqBI,EAAmBF,EAAgBI,EAAoBE,IAE3E7jE,EAEL,OACEzE,GAAAA,GAAAC,cAAA,OAAKuE,IAAKA,EAAKn/C,WAAWq8C,EAAAA,GAAAA,GC9GP,WD8GmCr8C,IACpD26C,GAAAA,GAAAC,cAACmlE,GAAW,CACV1M,aAAW,EACXC,kBAAmBoP,EACnB7tF,SAAUm2B,IAEX/wE,IAAaD,EAAAA,KAAmB3E,GAAMsG,SACrCg/D,GAAAA,GAAAC,cAAC+oE,GAAAA,EAAgB,CACftwI,OAAQA,EACRigI,kBAAmBwP,IAGvBnoE,GAAAA,GAAAC,cAACgpE,GAAc,CACbvwI,OAAQA,EACR6gG,cAAeppE,GAAUopE,cACzBssC,gBAAiB11G,GAAU01G,gBAC3BD,cAAez1G,GAAUy1G,cACzBD,eAAgBx1G,GAAUw1G,eAC1BhN,kBAAmB0P,IAErBroE,GAAAA,GAAAC,cAACklE,GAAmB,CAClBzsI,OAAQA,EACR4G,SAAUA,EACVsU,gBAAiBA,EACjByrH,qBAAsBA,EACtBH,mBAAoBA,EACpBC,sBAAuBA,EACvBxG,kBAAmBsP,EACnBvP,aAAW,EACX0G,YAAa2E,IAEf/jE,GAAAA,GAAAC,cAACipE,GAAS,CACRxwI,OAAQA,EACRkb,gBAAiBA,EACjB+kH,kBAAmB4P,IAEjB,K,gBElHV,UAAe9nE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEsO,GAAQtO,EACjB,MAAMmG,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAEhC,MAAO,CACL89G,UAAU5gG,EAAAA,EAAAA,KAAuBrlB,GAClC,GANe43D,EAdpB,SAAmC1pE,GAA2B,IAA1B,SAAE+3H,GAAsB/3H,EAC1D,MAAMooD,GAAO+f,EAAAA,GAAAA,MACP,iBAAEhnD,IAAqB0E,EAAAA,EAAAA,MAEvBmyG,GAAyBhrD,EAAAA,GAAAA,IAAgB,IAAM7rD,MAErD,OACEwlD,GAAAA,GAAAC,cAAA,WACED,GAAAA,GAAAC,cAAA,WAAMxe,EAAK,sCAAuC2vE,IAClDpxD,GAAAA,GAAAC,cAACkpE,GAAAA,EAAI,CAACC,WAAS,EAAClnE,QAASmvD,GAAyB5vE,EAAK,8CAG7D,KCdA,GAR6Cke,IAC3C,MAAM,OAAEhyB,GAAWgyB,EACb0pE,GAAmBxpE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqB3yB,GAG7E,OAAO07F,EAAmBrpE,GAAAA,GAAAC,cAACopE,EAAqB1pE,QAAY9iE,CAAS,ECGvE,GARyC8iE,IACvC,MAAM,SAAEnW,GAAamW,EACf2pE,GAAezpE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiB9W,GAAU,GAG/E,OAAO8/E,EAAetpE,GAAAA,GAAAC,cAACqpE,EAAiB3pE,QAAY9iE,CAAS,EC2I/D,SAAS0sI,GAAQriD,GACf,MAAqB,SAAdA,EAAKsiD,MAAmBtiD,EAAKvtF,MAAQ4lB,EAAAA,IAA8Bld,IAAI6kF,EAAKvtF,KACrF,CAEA,MAAM8vI,GAA8B,IAAMnoF,EAAAA,IAsiB1C,IAAemf,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA+B,IAA7B,SAAEgpE,GAAUhpE,EACnB,MAAM47B,GAAQmpC,EAAAA,EAAAA,KAAYzyE,IAExBs3D,UAAW86E,EAAqBC,WAAYC,EAAgB,gBAAEzR,EAAe,aAAEjH,GAC7E55H,EAAO64B,SAASghG,OAAOvwF,IAAU,CAAC,GAEhC,aACJgpB,EAAY,kBAAEnyD,EAAiB,wBAAE6N,EAAuB,YACxD8hD,EAAW,aAAED,EAAY,4BAAEkc,EAA2B,kBACtD3b,EAAiB,2BAAEJ,IACjB9vD,EAAAA,EAAAA,KAAeF,GACb+M,GAAqBC,EAAAA,EAAAA,KAAyBhN,IAC9C,gBAAEK,GAAoBL,EAEtBusC,EAAoB,CACxBjD,QACAgpG,mBACAzR,kBACAjH,eACAz5H,oBACAuqI,oBAAoBp+E,EAAAA,EAAAA,KAAyBtsD,EAAQ02E,GACrD07D,sBACAzoD,sBAAuBxxE,SAAQib,EAAAA,EAAAA,KAA0BpzB,IACzD46H,oBAAoBl/B,EAAAA,EAAAA,KAAqB17F,GACzCuyI,kBAAmBp6H,QAAQ23C,GAC3B0iF,iCAAkCr6H,QAAQ63C,GAC1CyiF,uBAAwBt6H,QAAQ03C,GAChC6iF,wBAAyBv6H,QAAQi4C,GACjCuiF,yBAAyBh+E,EAAAA,EAAAA,KAA0B30D,GACnD2qI,qBAAsBhqI,KAAKE,IAAI,EAAGyxD,EAAazwD,OAAS,GACxDmM,0BACA3N,mBAGF,IAAK0M,EACH,OAAOw/B,EAGT,MAAM,OAAEnrC,EAAM,SAAE4G,EAAU3F,KAAMia,GAAoBvP,EAC9Ci0B,GAAYnwB,EAAAA,EAAAA,KAASzP,GACrBgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1BwmC,GAAMmC,EAAAA,EAAAA,KAAU/pC,EAAQoB,GACxBiP,GAAYC,EAAAA,EAAAA,KAAgBtQ,EAAQoB,EAAQ4G,GAC5C0T,EAAeta,GAASua,EAAAA,EAAAA,KAAmB3b,EAAQoB,QAAUmE,EAE7DwB,GAAa+D,EAAAA,EAAAA,KAAiB9K,EAAQoB,EAAQ4G,GAC9C4qI,EAAkBz6H,SAASpR,GAAY80B,gBAAkB90B,GAAY8rI,eACrEppI,GAAQc,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQ4G,GACpC+hF,EAAU3mF,IAAQ0vI,EAAAA,EAAAA,KAAiB1vI,EAAMqG,EAAOmpI,EAAiBl3H,GACjEq3H,GAAkBnwH,EAAAA,EAAAA,KAA0B5iB,EAAQoB,GACpD4xI,EAA0C,WAApB12H,EACtB22H,EAAmC,WAApB32H,GAAgCtU,IAAaD,EAAAA,GAC5D8/E,EAAY1vE,QAAQ/U,IAAQia,EAAAA,EAAAA,KAAcja,IAC1C8vI,EAAe/6H,QACnB/U,GAAQ6vI,IAAiBprD,IAAav+D,EAAAA,EAAAA,KAAiBlmB,KAAUA,EAAKm9D,cAAgBn9D,EAAKm1B,cAEvF46G,EAAmBh7H,QAAQ/U,GAAMm9D,aAAen9D,EAAKgwI,cACrDC,EAAwBl7H,QAAQ/U,GAAMm9D,aAAen9D,EAAKkwI,eAC1DxzE,IAAgB9+B,IAAYuyG,EAAAA,EAAAA,KAAoBvzI,EAAQoB,GACxDoyI,EAAgBr7H,QAAQyvB,GAAOk4B,GAC/B2zE,GAAeD,GAAiBT,EAChCW,EAAa5zE,IAAkBl4B,EAC/B+rG,EAAqBx7H,QACzB/U,IAAQusB,EAAAA,EAAAA,KAAYvsB,KAAUsY,GAE1BpC,GAAiBH,EAAAA,EAAAA,KAAYnZ,EAAQoB,EAAQ4G,IAAWnB,UACxD+sI,IAAyBxwI,GAAMsG,SACjC1B,IAAaD,EAAAA,KAAmBuR,IAAmB/O,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAQyyI,EAAAA,MAAmBx4C,SAEhG3pE,GAASsJ,EAAAA,EAAAA,KAAah7B,EAAQoB,GAE9BiU,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAC1D4xI,EAAwBz+H,GAAiBrN,IAAam0H,EAAAA,IAEtDuL,EAAWtkI,IACf49B,GACE59B,GAAMs3H,YAAe7yC,KAAcksD,EAAAA,EAAAA,KAAkB3wI,EAAM,iBACtD4wI,EAAAA,EAAAA,KAAiB5wI,EAAM,gBAI1B+3H,GAA0B70G,EAAAA,EAAAA,KAAmBtmB,EAAQoB,IAAS+5H,wBAEpE,MAAO,IACF5uF,EACHnrC,SACA4G,WACAsU,kBACAlZ,OACAkW,iBACA0nB,YACAizG,sBAAuB97H,QAAQ/U,GAAMy1B,UACrC8nE,WAAYiyC,EACZ7oD,SACGipD,KACI5vI,GAAQ2mF,KACTgpD,KACCI,GAAoB/vI,GAAMm9D,eAC3BqzE,IACAv+H,EACN29H,sBACAkB,wBAAyB9wI,GAAM8wI,wBAC/BC,oBAAqB/wI,GAAM+wI,oBAC3B9L,oBAAqBh4H,EAAYA,EAAUxO,OAAS,EACpDkqE,8BACA8b,YACAqrD,eACAO,cACAD,gBACAL,mBACAE,wBACAM,qBACAtjI,YACAq3H,WACAgM,aACAr+H,gBACAy+H,wBACA3Y,0BACAzpG,SACD,GAxHe+5C,EApiBpB,SAAqB1pE,GAgDK,IAhDJ,cACpBqyI,EAAa,OACbhzI,EAAM,SACN4G,EAAQ,WACR24F,EAAU,gBACVrkF,EAAe,SACfo6D,EAAQ,KACRtzE,EAAI,eACJkW,EAAc,UACd0nB,EAAS,oBACTgyG,EAAmB,QACnBjpD,EAAO,wBACPmqD,EAAuB,oBACvBC,EAAmB,oBACnB9L,EAAmB,iBACnBiK,EAAgB,MAChBhpG,EAAK,gBACLu3F,EAAe,aACfjH,EAAY,kBACZz5H,EAAiB,mBACjBuqI,EAAkB,oBAClB0H,EAAmB,gBACnB/xI,EAAe,sBACfspF,EAAqB,mBACrBixC,EAAkB,kBAClB2X,EAAiB,iCACjBC,EAAgC,uBAChCC,EAAsB,wBACtBC,EAAuB,wBACvBC,EAAuB,4BACvB5mE,EAA2B,qBAC3B4+D,EAAoB,UACpB9iD,EAAS,sBACTosD,EAAqB,aACrBf,EAAY,YACZO,EAAW,cACXD,EAAa,wBACbxlI,EAAuB,iBACvBmlI,EAAgB,sBAChBE,EAAqB,mBACrBM,EAAkB,UAClBtjI,GAAS,SACTq3H,GAAQ,WACRgM,GAAU,cACVr+H,GAAa,sBACby+H,GAAqB,wBACrB3Y,GAAuB,OACvBzpG,IACsB3vB,EACtB,MAAM,SACJ2b,GAAQ,iBACRmtH,GAAgB,iBAChBwJ,GAAgB,SAChBC,GAAQ,iBACR1zG,GAAgB,sBAChB1a,GAAqB,YACrBquH,GAAW,eACXtsG,GAAc,WACdusG,GAAU,iBACVr4H,GAAgB,aAChBrL,GAAY,mBACZ2jI,GAAkB,qBAClBC,GAAoB,YACpBC,KACE/sH,EAAAA,EAAAA,OAEInnB,MAAOH,KAAgB2qI,EAAAA,GAAAA,MACzB,SAAED,GAAQ,UAAEjyD,KAAcpC,EAAAA,EAAAA,MAE1BxsB,IAAO+f,EAAAA,GAAAA,MACN0qE,GAAeC,KAAoB5qE,EAAAA,GAAAA,IAAS6qE,GAAAA,EAAcxlD,OAC1DylD,GAAoBC,KAAwB/qE,EAAAA,GAAAA,KAAS,GACtDgrE,GAAoBF,MAAwBr+D,IAAaiT,IACxDurD,GAAcC,KAAmBlrE,EAAAA,GAAAA,OACjCmrE,GAAkBC,KAAuBprE,EAAAA,GAAAA,KAAS,IAEnD,6BACJqrE,GAA4B,yBAC5BC,GAAwB,sBACxB1N,GAAqB,mBACrBD,I1F1NW,SACbxmI,EAAiB4G,EAAqBqI,GAEtC,MAAOmlI,EAAqBC,IAAuBhX,EAAAA,GAAAA,IAAkC,CAAC,IAC/EmJ,EAAoB8N,IAAsBjX,EAAAA,GAAAA,MAC3Cr8F,EAAMhhC,EAAU,GAAEA,KAAU4G,SAAazC,EACzCsiI,GAAwBjT,EAAAA,GAAAA,IAC5B,IAAO4gB,IAAsBpzG,IAAS,GACtC,CAACozG,EAAqBpzG,IAuGxB,OAnGAmnC,EAAAA,GAAAA,KAAU,KACRqf,QAAoBrjF,EACpBmwI,OAAmBnwI,EAAU,GAC5B,CACDnE,EAAQq0I,EAAqBC,EAAoB1tI,KAGnDuhE,EAAAA,GAAAA,KAAU,KACR,IAAKnnC,EAAK,OACV,MAAM8lG,EAAqBsN,IAAsBpzG,GAC3CuzG,EAAetlI,GAAWxO,QAAU,EACtCqmI,GAAsByN,GACxBF,EAAoB,IACfD,IACH,CAACpzG,GAAMzhC,KAAKE,IAAI,EAAG80I,EAAe,IAEtC,GACC,CAACH,EAAqBpzG,EAAK/xB,GAAWxO,OAAQ4zI,IAkF1C,CACLH,8BAjF6DvmE,EAAAA,GAAAA,IAAgBhtE,IAIzE,IAJ0E,uBAC9E0zH,EAAyB,GAAE,0BAC3BlS,EAA4B,GAAE,oBAC9B8a,GACDt8H,EACC,KAAKX,GAAW4G,GAAao6B,GAAQ/xB,GAAWxO,QAAQ,OAExD,GAAIw8H,EAGF,OAFAx1C,QAAgBtjF,OAChBmwI,OAAmBnwI,GAIrB,MAAMqwI,EAAkBhO,IACxB,GAAIgO,EAAiB,CACnB,MAAMC,EAAiBxlI,EAAU+kB,QAAQwgH,GACzCH,EAAoB,IACfD,IACH,CAACpzG,GAAMyzG,IAETH,OAAmBnwI,EACrB,CAEAqjF,IAAoB18E,EAAAA,EAAAA,KACjB08E,IAAmB9mF,QAAQS,IAAQghH,EAA0Bj/G,SAAS/B,MAAQ,IAC5EiO,OAAOilH,IAIZ,MAAMqgB,GAAmBv9H,EAAAA,EAAAA,MAAuB/M,EAAAA,EAAAA,MAAapK,IAAWynF,GAMxE,GAJIA,IAAiBD,GAAkBtkF,SAASukF,MAC9CA,QAAgBtjF,GAGduwI,EAAkB,CACpB,MAAMC,EAA0B1lI,EAAUoG,WAAWlU,GAAOA,EAAKuzI,IAC3DhqF,GAAwC,IAA7BiqF,EAAiCA,EAA0B,EAE5EN,EAAoB,IACfD,IACH,CAACpzG,GAAM0pB,GAEX,MAAO,GAAI88B,GAAkB/mF,OAAQ,CACnC,MAAMm0I,EAAsBr1I,KAAKE,OAAO+nF,IAClC98B,EAAWz7C,EAAU+kB,QAAQ4gH,GAEnCP,EAAoB,IACfD,IACH,CAACpzG,GAAM0pB,GAEX,KA+BAypF,0BA5B+BxmE,EAAAA,GAAAA,IAAiB1nE,IAEhD,IAAKjG,IAAW4G,IAAaqI,GAAWxO,OACtC,OAGFgnF,GAAgBxhF,EAEhB,MAAMrH,GAASwL,EAAAA,EAAAA,MACTvB,GAAYnC,EAAAA,EAAAA,KAAgB9H,EAAQoB,EAAQ4G,GAC5CiuI,EAAkBhsI,GAAW3F,SAAS+C,KACvC4O,EAAAA,EAAAA,KAA8BjW,EAAQoB,EAAQ4G,EAAUX,GAEvD6uI,EAAe7lI,EAAU+kB,QAAQ/tB,GACjCykD,GAAW69E,EAAAA,GAAAA,GAAct5H,EAAUxO,OAAQq0I,EAAe,GAE5DD,EACFR,EAAoB,IACfD,IACH,CAACpzG,GAAO0pB,IAGV4pF,EAAmBrlI,EAAUy7C,GAC/B,IAMA+7E,wBACAD,qBAEJ,C0FsGMuO,CAAiB/0I,EAAQ4G,EAAUqI,IAEjC+lI,GAAyB1/D,EAAWy7D,QAA8B5sI,EAElE8wI,IAAkBC,EAAAA,GAAAA,GAAuBl1I,EAAQg1I,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuBtuI,EAAUouI,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBh6H,EAAiB85H,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuBpD,EAAckD,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuB7C,EAAa2C,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuB9C,EAAe4C,IAC/DQ,IAAsBN,EAAAA,GAAAA,GAAuB5C,GAAY0C,IACzDS,IAAmBP,EAAAA,GAAAA,GAAuBvsD,EAASqsD,MACnDO,KAA2BD,KAAyBD,KAA0BG,IAC/Ex1I,IAAW01I,EAAAA,MAAgB3b,GAC1B4b,IAA6BT,EAAAA,GAAAA,GACjCrB,GAAmBmB,KAChBh1I,IAAW01I,EAAAA,IACVE,IAAqBV,EAAAA,GAAAA,GAAuBzuD,EAAWuuD,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuBnD,EAAkBiD,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuBjD,EAAuB+C,IAC/Ee,IAAwCb,EAAAA,GAAAA,GAC5Cl1I,EAASk0I,QAA+B/vI,EACxC6wI,IAGI9J,IAAoBngC,EAAAA,GAAAA,GAAsBw+B,GAE1CxrD,QACkB55E,IAAtB+mI,IAAmCA,GAAoB3B,EAAuB2B,QAAoB/mI,GAG9F,QAAE8uH,GAAO,uBAAE+iB,GAAsB,0BAAEC,IAgjB3C,SACEC,EACA3M,EACA2B,EACAlrI,EACAs1E,GAEA,MAAO29C,EAASkjB,IAActtE,EAAAA,GAAAA,KAAUyM,GAClC00B,GAAcC,EAAAA,GAAAA,KAEdmsC,OAA8CjyI,IAAtB+mI,GAAmCA,IAAsB3B,EA8BvF,OA7BI6M,IACEF,GACFC,GAAW,GAGXhsI,YAAW,KACTgsI,GAAW,EAAK,GACfpF,KAEH/mC,MAIJ/jB,EAAAA,GAAAA,IAAc,KACPiwD,GACHC,GAAW,EACb,GACC,CAACD,IAYG,CACLjjB,QAASA,IAAYmjB,EACrBJ,uBAAwBE,EAZ1B,SAAgC5kF,GACP,cAAnBA,EAAE+kF,cAAgC/kF,EAAE8lC,SAAW9lC,EAAE0mC,eACnDm+C,EAAWp/H,QAAQ/W,GAEvB,OAQoEmE,EAClE8xI,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0EhyI,EAE5E,CA7lByEmyI,EACpE3rE,GAA+B4mE,EAChChI,EACA2B,GACAlrI,EACAs1E,IAGFnN,EAAAA,GAAAA,KAAU,IACDnoE,GACHmuE,EAAAA,GAAAA,IAAsB,KACtB7xD,GAAS,CAAEnb,QAAIgD,GAAY,SAE3BA,GACH,CAACnE,EAAQsc,MAEZ2pE,EAAAA,GAAAA,IAAc,KACZwtD,GAAiBC,GAAAA,EAAcxlD,MAC/B6lD,QAAgB5vI,EAAU,GACzB,CAACnE,KAGJmoE,EAAAA,GAAAA,KAAU,KACR,IAAK9xD,EAAAA,KAAWmrB,EAAAA,GACd,OAGF,MAAM,eAAE+0G,GAAmB3yH,OAC3B,IAAK2yH,EACH,OAGF,MAAM9rB,EAAeA,KACnB,MAAM+rB,EAAcD,EAAexpD,SAAWpoF,SAAS8xI,gBAAgB/Y,cAEvEx1B,EAAAA,GAAAA,KAAgB,KACdvjG,SAASwuC,KAAKkkD,UAAUq/C,OAAO,mBAAoBF,IAEnD1/C,EAAAA,GAAAA,KAAe,MACR0/C,GAAeD,EAAejhB,YACjCptB,EAAAA,GAAAA,KAAgB,KACdtkF,OAAO+yH,SAAS,CAAEvgC,IAAK,GAAI,GAE/B,GACA,GACF,EAKJ,OAFAmgC,EAAe7nE,iBAAiB,SAAU+7C,GAEnC,KACL8rB,EAAe5nE,oBAAoB,SAAU87C,EAAa,CAC3D,KAGHtiD,EAAAA,GAAAA,KAAU,KACJvoC,GACFszG,GAAS,CAAEt4H,OAAQ5a,GACrB,GACC,CAACA,EAAQ4/B,EAAWszG,MAEvB/qE,EAAAA,GAAAA,KAAU,KACH0qE,GACHrzG,GAAiB,CAAEx/B,OAAQA,GAC7B,GACC,CAACA,EAAQ4/B,EAAWizG,KAEvB1qE,EAAAA,GAAAA,KAAU,KACJnoE,GAAUuyI,GAAsBtf,IAClCvjH,GAAa,CAAE1P,UACjB,GACC,CAACuyI,EAAoBvyI,EAAQizH,GAASvjH,KAEzC,MAAM,WACJknI,GAAU,YAAEC,GAAW,cAAEC,IClVtB,SACL5tD,EACA6tD,EACAx/D,EACAy/D,EACAC,GAEA,MAAOnmF,EAAUomF,EAAcC,IAAkBpiE,EAAAA,GAAAA,MAC1CqiE,EAAeC,IAAoBxuE,EAAAA,GAAAA,IAAiB,IACpDyuE,EAAqBC,IAA0B1uE,EAAAA,GAAAA,IAAiB,GAEjE2uE,GAAkB7pE,EAAAA,GAAAA,IAAiBtuE,KACvC6oG,EAAAA,GAAAA,KAAgB,KACd,IAAKhf,EAAWr8D,QACd,OAGF,MAAM4qH,EAAUp4I,EAAS,GAAEA,MAAY,GACvC6pF,EAAWr8D,QAAQmgE,MAAM3tF,MAAQo4I,EAC7BR,GACF/tD,EAAWr8D,QAAQmgE,MAAMmb,YAAY8uC,EAAiBQ,EACxD,GACA,IAWJ,SAASX,KACP5uC,EAAAA,GAAAA,KAAgB,KACdvjG,SAASwuC,KAAKkkD,UAAUqG,OAAO,mBAAmB,GAEtD,CAgDA,OA5DAqO,EAAAA,GAAAA,KAAgB,KACT7iB,EAAWr8D,SAAYmqH,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiB/tD,EAAY8tD,EAAcQ,KA0B/CrvE,EAAAA,GAAAA,KAAU,KACR,IAAKrX,EAAU,OAEf,MAAMolC,EAAmB5kC,IACvB,MAAMomF,EAAWn4I,KAAKu/H,KAAKwY,EAAsBhmF,EAAE+kC,QAAU+gD,GAC7DI,EAAgBE,EAAS,EAG3B,SAASC,IACPC,IACAb,EAAS7tD,EAAWr8D,QAASwpF,YAC/B,CAEA,SAASuhC,IACPd,IACAnyI,SAASgqE,oBAAoB,YAAaunB,GAAiB,GAC3DvxF,SAASgqE,oBAAoB,UAAWgpE,GAAU,GAClDhzI,SAASgqE,oBAAoB,OAAQgpE,GAAU,GAC/CR,GACF,CAMA,OAJAxyI,SAAS+pE,iBAAiB,YAAawnB,GAAiB,GACxDvxF,SAAS+pE,iBAAiB,UAAWipE,GAAU,GAC/ChzI,SAAS+pE,iBAAiB,OAAQipE,GAAU,GAErCC,CAAO,GACb,CAACN,EAAqBF,EAAeluD,EAAY6tD,EAAUjmF,EAAUqmF,EAAgBK,IAEjF,CAAEZ,WA9CT,SAAoBtlF,GAClBA,EAAE0V,kBAEFkhC,EAAAA,GAAAA,KAAgB,KACdvjG,SAASwuC,KAAKkkD,UAAUnuF,IAAI,mBAAmB,IAGjDmuI,EAAiB/lF,EAAE+kC,SACnBkhD,EAAuBruD,EAAWr8D,QAASwpF,aAC3C6gC,GACF,EAoCqBL,YAlCrB,SAAqBvlF,GACnBA,EAAE0V,iBACFwwE,OAAgBrzI,GAChBozE,GACF,EA8BkCu/D,gBACpC,CD6PMe,CAAU7E,GAAgBjhF,GAAMshF,GAAmB,CACrDp0I,gBAAiB8yD,KACfuhF,GAAsBr0I,EAAiB,uBAErC64I,IAAkBnqE,EAAAA,GAAAA,IAAiBrc,IACvC,MAAM,MAAEymF,GAAUzmF,EAAE0mF,cAAgB,CAAC,EAC/BC,EAAkBF,GAASA,EAAMt3I,OAAS,GAAK8S,MAAMiC,KAAKuiI,GAG7Dr3I,QAAQ8tF,GAAuB,kBAAdA,EAAKvtF,OAEtB28G,MAAMizB,IAET4C,GAAiBwE,EAAkBvE,GAAAA,EAAcwE,UAAYxE,GAAAA,EAAc9jB,SAAS,IAGhFuoB,IAAqBxqE,EAAAA,GAAAA,IAAgB,KACzC8lE,GAAiBC,GAAAA,EAAcxlD,KAAK,IAGhCkqD,IAAuBzqE,EAAAA,GAAAA,IAAgB,KAC3CsmE,IAAoB,EAAK,IAGrBoE,IAAkB1qE,EAAAA,GAAAA,IAAgB,KACtCsmE,IAAoB,EAAM,IAGtBqE,IAA0B3qE,EAAAA,GAAAA,IAAgB,KAC9CrxD,GAAS,CAAEnb,GAAI0J,OAAOjE,IAAY,IAG9B2xI,IAAyB5qE,EAAAA,GAAAA,IAAgB,KAC7CslE,GAAiB,CAAEjzI,OAAQA,EAAS4G,SAAUA,IAC9CyxI,KACA5O,IAAkB,IAGd+O,IAAoB7qE,EAAAA,GAAAA,IAAgB,KACxCrxD,GAAS,CAAEnb,GAAInB,GAAS,IAGpBy4I,IAAuB9qE,EAAAA,GAAAA,IAAgB,KAC3CwlE,GAAY,CAAEnzI,OAAQA,IAClB81I,IACF/6H,GAAiB,CACfnb,QAAqBmpD,GAAZ09B,EAAiB,sCAA8C,sCAE5E,IAGIiyD,IAAiB/qE,EAAAA,GAAAA,IAAgB,KACrC9mC,GAAe,CAAEC,QAAS,UAAW,IAGjC6xG,IAAmBhrE,EAAAA,GAAAA,IAAgB,KACvCylE,GAAW,CAAEpzI,OAAQA,GAAU,IAG3B44I,IAAgBjrE,EAAAA,GAAAA,IAAgB,KACpC4lE,GAAY,CAAE34H,OAAQ5a,GAAU,IAG5B64I,GEhZoBC,EAAC5wG,EAAiB6wG,KAC5C,MAAM,iBAAEC,IAAqBxyH,EAAAA,EAAAA,OACtB6e,EAAO4zG,IAAYpwE,EAAAA,GAAAA,IAASkwE,GA8BnC,OA5BA5wE,EAAAA,GAAAA,KAAU,KACH4wE,IAIDA,EAAa/lG,WAAW,KAC1BimG,EAASF,GAETG,GAASnnG,MAAMonG,EAAAA,IAAsBjxG,EAAOgxG,GAASE,KAAKC,MACvD16H,MAAM26H,IACL,MAAM32H,EAAMY,IAAIg2H,gBAAgBD,IAChCE,EAAAA,GAAAA,IAAa72H,GACVhE,MAAK,KACJs6H,EAAU,OAAMt2H,KAAO,GACvB,IAELmzC,OAAM,KACLkjF,EAAiB,CACf9wG,QACA+oG,gBAAY9sI,EACZs7H,qBAAiBt7H,EACjB+xD,WAAW,EACXsiE,aAAwB,SAAVtwF,EAAmBuxG,EAAAA,IAA2BC,EAAAA,KAC5D,IAER,GACC,CAACX,EAAc7wG,IAEX6wG,EAAe1zG,OAAQlhC,CAAS,EFgXT20I,CAAoB5wG,EAAOgpG,GAEnDvkH,IAAYq8C,EAAAA,GAAAA,GAChB2wE,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAc5wE,EAAAA,GAAAA,GG9ZO,WAAkF,WHia3GkoE,GGjaoD,WHkapDzR,GGla+E,WHma/EyR,GAAoBF,GGnamI,WHoavJ1H,GGpaoL,WHqapL7jF,EAAAA,MAAiBwvF,IAAmBE,KGra8F,YHwa9H0E,IAA6B7wE,EAAAA,GAAAA,GACjC,sBACCwwD,GAAsB,SAGnBsgB,IAAkCC,EAAAA,EAAAA,KACtChxF,GAAM+pF,EAAyBC,GAE3BiH,IAA2BC,EAAAA,EAAAA,KAA4BlxF,GAAM/mD,EAAM4E,EAAU0pB,GAAQvZ,QAAQmB,IAE7FgiI,GAA6BJ,IAC9BE,KACCjgB,GAA0BzyD,GAAAA,GAAAC,cAAC4yE,GAA0B,CAACv/H,OAAQ5a,SAAcmE,IAG5E,oBACJi2I,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBpxE,EAAAA,GAAAA,KACF,IvKhbW,SAAyCnqE,EAAqBypF,GAC3E,MAAM+xD,EAAcx7I,GAAey7I,EAAAA,IAC/Br8I,EAAAA,EACA,EAAIA,EAAAA,EACFs8I,EAmCR,SAA6B17I,GAC3B,GAAIA,EAAcI,EAAAA,IAA0C,CAC1D,MAAML,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,IAAdP,EAAoBT,GAC7BD,GAGIq8I,EAAmBt7I,KAAKC,IACd,IAAdN,EACAV,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EAAkB47I,EAChCt8I,EAEJ,CAEA,GAAIW,EAAcQ,EAAAA,IAAyC,CACzD,MAAMT,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,GAAdP,EAAmBT,GAC5BD,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EACdV,EAEJ,CAEA,OAAIW,EAAcX,EACTA,EAGFW,CACT,CAtE2B47I,CAAoB57I,GACvC67I,EAAkB77I,GAAey7I,EAAAA,IACnC,MAAQr8I,EAAAA,EACR,EAAIA,EAAAA,EAEF08I,EAAgBryD,EAClBiyD,EAAmBF,EAAcK,EACjCH,EAAmBF,EACjBO,EAAe/7I,EAAcy7I,EAAAA,IAC/Bp7I,KAAKC,IAAIo7I,EAAmBF,EAAar8I,GACzCu8I,EAAmBF,EAEjBN,EAAsBa,EAAeD,EACrCX,EAAqBW,EAAgBC,EAY3C,MAAO,CACLb,sBACAC,qBACAC,mBAXyB3xD,EACtBoyD,EAAkB,EAAKV,EACxB,EAUFE,kBARwB5xD,EACrBoyD,EAAkB,GAAM,EAAIX,EAC7B,EAOFI,iBAhBuBS,EAAev8I,EAiBtC+7I,2BAhBiC/7I,EAAqBu8I,EAkB1D,CuK2YUC,CAAgCh8I,GAAau2I,KACnD,CAACA,GAAkBv2I,KAGfi8I,IAAkBnyE,EAAAA,GAAAA,GACtB,wBACCysE,IAAoB,cACrBA,IAAoB3B,KAAiBta,GAAsB,eAG7DprD,EAAAA,GAAAA,GAAe,CACbtd,SAAU0oE,EACVnrD,OAAQvpD,KAGV,MAAMs2H,GAAsBrkI,SACzB66H,IAAwB39H,KAAkBwhI,KAAqBF,KAA2BD,KACvFD,IAAyB6E,IAEzBmB,GAA6BtkI,QACjCw+H,IAA0BF,IAAyBS,IAAkCR,IACjF1D,GAAuBtL,IAAaoM,IAAyB8C,IAE7D5sD,GAAiB7xE,QAAQqkI,IAAuB5hB,GAEtD,OACElyD,GAAAA,GAAAC,cAAA,OACEpmE,GAAG,eACHwrB,UAAWA,GACXwtD,gBAAiB67D,GACjBhpD,OAAOC,EAAAA,GAAAA,GACJ,4BAA2BmtD,KAC3B,2BAA0BC,KAC1B,yBAAwBG,KACxB,iCAAgCC,MAChC,2BAA0BH,OAC1B,0BAAyBC,OACzB,oBAAmB/hB,IACpBiH,GAAoB,6BAA4BA,KAElDj2D,QAAUogE,IAAY7qI,EAAqBy5I,QAAoBr0I,GAE9DwzE,IACCrQ,GAAAA,GAAAC,cAAA,OACE56C,UAAU,gBACV2sE,YAAas9C,GACbzM,UAAW2M,GACX5oB,cAAe2oB,KAGnBvvE,GAAAA,GAAAC,cAAA,OACE56C,UAAWitH,GACX5sD,MAAO6rD,GAAyB,wBAAuBA,UAA0B10I,IAEnFmjE,GAAAA,GAAAC,cAAA,OAAKpmE,GAAG,0BACP4V,QAAQk+H,IAAmBE,KAC1B7tE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBAAkB2uH,YAAa7F,GAAmBqC,QAAkB3zI,GACjFmjE,GAAAA,GAAAC,cAACg0E,GAAiB,CAChBv6G,IAAKi0G,GACLj1I,OAAQi1I,GACRruI,SAAUuuI,GACVj6H,gBAAiBk6H,GACjB3O,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsBwN,KAExB7sE,GAAAA,GAAAC,cAACi0E,GAAY,CACXx7I,OAAQi1I,GACRruI,SAAUuuI,GACVj6H,gBAAiBk6H,GACjB71C,WAAYA,EACZjqB,SAAUA,EACVmxD,sBAAuBA,GACvBD,mBAAoBA,GACpBG,qBAAsBwN,KAExB7sE,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTxiC,KAAMs9B,EAA8B,OAAS4mE,EAA0B,QAAU,OACjFzhE,UAAWy5D,EACXzrD,eAAa,EACbC,oBAAqBA,GACrB09D,qBAAmB,EACnBvsB,OAAQ+mB,IAER3uE,GAAAA,GAAAC,cAACm0E,GAAW,CACV16G,IAAM,GAAEi0G,MAAmBE,MAAqBC,KAChDp1I,OAAQi1I,GACRruI,SAAUuuI,GACVl0I,KAAMm0I,GACN71C,WAAYA,EACZ5W,QAAS8sD,GACTtiB,mBAAoBygB,GACpBxgB,cAAe2gB,GACf9gB,QAASA,GACT8G,wBAAyBA,GACzBF,gBAAiBwhB,GACjBvhB,cAAe/iH,SAASm6H,IAAqBzR,GAC7Cze,yBAA0B+0B,KAE5BzuE,GAAAA,GAAAC,cAAA,OAAK56C,UAAWwuH,IACb1F,IACCnuE,GAAAA,GAAAC,cAACo0E,GAAAA,EAAQ,CACP16I,KAAK,cACLjB,OAAQi1I,GACRruI,SAAUuuI,GACVj6H,gBAAiBk6H,GACjB5B,cAAeA,GACfoI,WAAYzD,GACZllB,QAASA,GACT39C,SAAUA,EACVumE,gBAAiBC,EAAAA,IACjBC,yBAA0B9Q,EAAAA,IAC1B3wD,QAAQ,uBAGXs3D,GAAuBtL,IACtBh/D,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACL7P,MAAM,YACNj9C,UAAU,mCACV68C,QAAS4uE,IAET9wE,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,oBACb26C,GAAAA,GAAAC,cAAA,YAAOxe,GAAK,uBAAwBk+E,EAAqB,QAI9DyL,IACCprE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACL7P,MAAM,YACNj9C,UAAU,mCACV68C,QAAS8uE,IAEThxE,GAAAA,GAAAC,cAAA,YAAOxe,GAAK,oBAIjBqyF,IACC9zE,GAAAA,GAAAC,cAAA,OAAK56C,UAAWktH,IACdvyE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,4BACb26C,GAAAA,GAAAC,cAAA,YACG2yE,MAMP5kE,IAAa+/D,IAA0BQ,KAA8BC,KAErExuE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACLxD,QAAM,EACNtpD,UAAU,wCACV68C,QAASivE,IAER1vF,GAAK6sF,GAAqB,qBAAuB,sBAIvDtgE,GAAYwgE,IACXxuE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACLxD,QAAM,EACNtpD,UAAU,wCACV68C,QAASivE,IAER1vF,GAAK,wBAIXusB,GAAYggE,IACXhuE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACLxD,QAAM,EACNtpD,UAAU,wCACV68C,QAASkvE,IAER3vF,GAAK,cAIXusB,GAAYigE,IACXjuE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACLxD,QAAM,EACNtpD,UAAU,wCACV68C,QAASmvE,IAER5vF,GAAK,gBAIXusB,GAAYkgE,IACXluE,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wCAAwC88C,IAAK1gB,GAAK2gB,MAAQ,WAAQvlE,GAC/EmjE,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,OACLysB,OAAK,EACLxD,QAAM,EACNtpD,UAAU,wCACV68C,QAASovE,IAER7vF,GAAK,aAIZue,GAAAA,GAAAC,cAACm4D,GAAoB,CACnBxkH,gBAAiBk6H,GACjBtkF,SAAU0oE,EACV7wC,QAAS8sD,KAEXnuE,GAAAA,GAAAC,cAACogB,GAAW,CAAC1yC,OAAQk8F,IACrB7pE,GAAAA,GAAAC,cAACmgB,GAA0B,CAACzyC,OAAQm8F,IACpC9pE,GAAAA,GAAAC,cAACopE,GAAgB,CAAC17F,OAAQo8F,IACzBv9C,EAAAA,IAA4BxsB,GAAAA,GAAAC,cAACsgB,GAAiB,CAAC5yC,OAAQq8F,MAI5DhqE,GAAAA,GAAAC,cAACy0E,GAAqB,CACpBtzD,eAAgBitD,GAChBhtD,QAAS8sD,GACT7sD,eAAgBA,MAGpBthB,GAAAA,GAAAC,cAACqpE,GAAY,CAAC9/E,SAAU/5C,QAAQwxE,MAGnCvoF,GACCsnE,GAAAA,GAAAC,cAACqgB,GAAqB,CACpB3yC,OAAQ++F,GACRh0I,OAAQA,EACRinI,oBAAqBA,EACrB98D,QAASkuE,GACT4D,QAAS1D,KAGbjxE,GAAAA,GAAAC,cAAA,OAAKytC,eAAa,GACfpoG,GAAyBU,KAAI,CAACmvC,EAAwB34C,IACrDwjE,GAAAA,GAAAC,cAACugB,GAAyB,CACxBo0D,cAAep4I,EACfk9B,IAAKyb,EAAuBt7C,GAC5Bs7C,uBAAwBA,OAMpC,KIrnBM0/F,GAAwB,CAC5B7jG,cCpEwC2uB,IACxC,MAAM,MAAEm1E,GAAUn1E,EACZo1E,GAAgBl1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBw0E,GAGvE,OAAOC,EAAgB/0E,GAAAA,GAAAC,cAAC80E,EAAkBp1E,QAAY9iE,CAAS,EDgE/D6xC,WErEqCixB,IACrC,MAAM,MAAEm1E,GAAUn1E,EACZq1E,GAAan1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAAew0E,GAGjE,OAAOE,EAAah1E,GAAAA,GAAAC,cAAC+0E,EAAer1E,QAAY9iE,CAAS,EFiEzDuiD,cGtEwCugB,IACxC,MAAM,MAAEm1E,GAAUn1E,EACZs1E,GAAgBp1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBw0E,GAGvE,OAAOG,EAAgBj1E,GAAAA,GAAAC,cAACg1E,EAAkBt1E,QAAY9iE,CAAS,EHkE/DmiC,QIvEuC2gC,IACvC,MAAM,MAAEm1E,GAAUn1E,EACZu1E,GAAer1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiBw0E,GAGrE,OAAOI,EAAel1E,GAAAA,GAAAC,cAACi1E,EAAiBv1E,QAAY9iE,CAAS,EJmE7D8qD,kBKxE4CgY,IAC5C,MAAM,MAAEm1E,GAAUn1E,EACZw1E,GAAoBt1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAAsBw0E,GAG/E,OAAOK,EAAoBn1E,GAAAA,GAAAC,cAACk1E,EAAsBx1E,QAAY9iE,CAAS,ELoEvE6yD,mBMzE6CiQ,IAC7C,MAAM,MAAEm1E,GAAUn1E,EACZy1E,GAAqBv1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,sBAAuBw0E,GAGjF,OAAOM,EAAqBp1E,GAAAA,GAAAC,cAACm1E,EAAuBz1E,QAAY9iE,CAAS,ENqEzEsoC,0BO1EgDw6B,IAChD,MAAM,MAAEm1E,GAAUn1E,EACZ01E,GAAwBx1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,yBAA0Bw0E,GAGvF,OAAOO,EAAwBr1E,GAAAA,GAAAC,cAACo1E,EAA0B11E,QAAY9iE,CAAS,EPsE/E+d,cQ3EwC+kD,IACxC,MAAM,MAAEm1E,GAAUn1E,EACZ21E,GAAgBz1E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBw0E,GAGvE,OAAOQ,EAAgBt1E,GAAAA,GAAAC,cAACq1E,EAAkB31E,QAAY9iE,CAAS,ERuE/DoZ,YS5EsC0pD,IACtC,MAAM,MAAEm1E,GAAUn1E,EACZ41E,GAAc11E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBw0E,GAGnE,OAAOS,EAAcv1E,GAAAA,GAAAC,cAACs1E,EAAgB51E,QAAY9iE,CAAS,ETwE3D8+B,QU7EsCgkC,IACtC,MAAM,MAAEm1E,GAAUn1E,EACZ61E,GAAc31E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBw0E,GAGnE,OAAOU,EAAcx1E,GAAAA,GAAAC,cAACu1E,EAAgB71E,QAAY9iE,CAAS,EVyE3D8yD,qBW9E+CgQ,IAC/C,MAAM,MAAEm1E,GAAUn1E,EACZ81E,GAAuB51E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyBw0E,GAGrF,OAAOW,EAAuBz1E,GAAAA,GAAAC,cAACw1E,EAAyB91E,QAAY9iE,CAAS,EX0E7EixD,SY/EmC6R,IACnC,MAAM,MAAEm1E,GAAUn1E,EACZ+1E,GAAW71E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,YAAaw0E,GAG7D,OAAOY,EAAW11E,GAAAA,GAAAC,cAACy1E,EAAa/1E,QAAY9iE,CAAS,EZ2ErDmsC,aahF2C22B,IAC3C,MAAM,MAAEm1E,GAAUn1E,EACZg2E,GAAmB91E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,oBAAqBd,GAG7E,OAAOa,EAAmB31E,GAAAA,GAAAC,cAAC01E,EAAqBh2E,QAAY9iE,CAAS,Eb4ErE8zD,kBcjF4CgP,IAC5C,MAAM,MAAEm1E,GAAUn1E,EACZk2E,GAAoBh2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,qBAAsBd,GAG/E,OAAOe,EAAoB71E,GAAAA,GAAAC,cAAC41E,EAAsBl2E,QAAY9iE,CAAS,Ed6EvEw3D,sBelFgDsL,IAChD,MAAM,MAAEm1E,GAAUn1E,EACZm2E,GAAwBj2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,6BAA8Bd,GAG3F,OAAOgB,EAAwB91E,GAAAA,GAAAC,cAAC61E,EAA0Bn2E,QAAY9iE,CAAS,Ef8E/EyiD,gBgBnF0CqgB,IAC1C,MAAM,MAAEm1E,GAAUn1E,EACZo2E,GAAkBl2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoBw0E,GAG3E,OAAOiB,EAAkB/1E,GAAAA,GAAAC,cAAC81E,EAAoBp2E,QAAY9iE,CAAS,EhB+EnE+qD,kBiBpF4C+X,IAC5C,MAAM,MAAEm1E,GAAUn1E,EACZq2E,GAAoBn2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,qBAAsBd,GAG/E,OAAOkB,EAAoBh2E,GAAAA,GAAAC,cAAC+1E,EAAsBr2E,QAAY9iE,CAAS,EjBgFvE03D,uBkBrFiDoL,IACjD,MAAM,MAAEm1E,GAAUn1E,EACZs2E,GAAyBp2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,0BAA2Bd,GAGzF,OAAOmB,EAAyBj2E,GAAAA,GAAAC,cAACg2E,EAA2Bt2E,QAAY9iE,CAAS,ElBiFjF4xC,emBtFyCkxB,IACzC,MAAM,MAAEm1E,GAAUn1E,EACZu2E,GAAiBr2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,kBAAmBd,GAGzE,OAAOoB,EAAiBl2E,GAAAA,GAAAC,cAACi2E,EAAmBv2E,QAAY9iE,CAAS,EnBkFjE0xC,UoBvFoCoxB,IACpC,MAAM,MAAEm1E,GAAUn1E,EACZw2E,GAAYt2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,aAAcd,GAG/D,OAAOqB,EAAYn2E,GAAAA,GAAAC,cAACk2E,EAAcx2E,QAAY9iE,CAAS,EpBmFvD42D,0BqBxF8CkM,IAC9C,MAAM,MAAEm1E,GAAUn1E,EACZy2E,GAAsBv2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,uBAAwBd,GAGnF,OAAOsB,EAAsBp2E,GAAAA,GAAAC,cAACm2E,EAAwBz2E,QAAY9iE,CAAS,ErBoF3EunC,oCsB3F8Cu7B,IAC9C,MAAM,MAAEm1E,GAAUn1E,EACZ02E,GAAgCx2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iCAAkCw0E,GAGvG,OAAOuB,EAAgCr2E,GAAAA,GAAAC,cAACo2E,EAA6B,CAAC1oG,OAAQmnG,SAAYj4I,CAAS,EtBuFnGm4D,cuB1FwC2K,IACxC,MAAM,MAAEm1E,GAAUn1E,EACZ22E,GAAgBz2E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,iBAAkBd,GAGvE,OAAOwB,EAAgBt2E,GAAAA,GAAAC,cAACq2E,EAAkB32E,QAAY9iE,CAAS,EvBsF/Dm9B,qBwB3F+C2lC,IAC/C,MAAM,MAAEm1E,GAAUn1E,EACZ42E,GAAuB12E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyBw0E,GAGrF,OAAOyB,EAAuBv2E,GAAAA,GAAAC,cAACs2E,EAAyB52E,QAAY9iE,CAAS,ExBuF7EmrD,cyB5FwC2X,IACxC,MAAM,MAAEm1E,GAAUn1E,EACZ62E,GAAgB32E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBw0E,GAGvE,OAAO0B,EAAgBx2E,GAAAA,GAAAC,cAACu2E,EAAkB72E,QAAY9iE,CAAS,GzByF3D45I,GAAaj3I,OAAOsG,KAAK+uI,IACzB6B,GAAgBl3I,OAAOiI,QAAQotI,IASrC,IAAep0E,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACCo7B,EAAAA,EAAAA,KAAKl7B,EAAAA,EAAAA,KAAeF,GAASm/I,KAFb1zE,EAPI4zE,GACfD,GAAc1wI,KAAI3M,IAAA,IAAEqgC,EAAKk9G,GAAev9I,EAAA,OAE7C2mE,GAAAA,GAAAC,cAAC22E,EAAc,CAACl9G,IAAKA,EAAKo7G,MAAO6B,EAAWj9G,IAAQ,O0B5FxD,GARyCimC,IACvC,MAAM,OAAEhyB,GAAWgyB,EACbk3E,GAAeh3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiB3yB,GAGrE,OAAOkpG,EAAe72E,GAAAA,GAAAC,cAAC42E,EAAiBl3E,QAAY9iE,CAAS,ECG/D,GARyC8iE,IACvC,MAAM,OAAEhyB,GAAWgyB,EACbm3E,GAAej3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiB3yB,GAGrE,OAAOmpG,EAAe92E,GAAAA,GAAAC,cAAC62E,EAAiBn3E,QAAY9iE,CAAS,E,wCCiC/D,MAyGA,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA6B,IAA3B,OAAEtM,GAAQsM,EACjB,MAAMtK,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,IACxBqa,QAASgkI,GAAoBz/I,EAAOu/B,aAAe,CAAC,GACtD,uBAAEioB,IAA2BtnD,EAAAA,EAAAA,KAAeF,IAC5C,cAAEkC,GAAkBlC,EACpB6nF,EAAYzkF,IAAQia,EAAAA,EAAAA,KAAcja,IAGtCwnB,MAAOktD,EAAW,eAClBlnB,EAAc,cACdlvB,EAAa,aACbD,IACEvhC,EAAAA,EAAAA,KAAeF,GAAQuhC,WAE3B,MAAO,CACLsmD,YACArlB,SAAS7mD,EAAAA,EAAAA,KAAmB3b,EAAQoB,IAASohE,QAC7CtgE,gBACAu9I,kBACA3nE,cACA4nE,YAAa9uF,EACbliC,UAAW84B,IAA2Bm4F,EAAAA,GAAuBh2E,QAC7DjoC,gBACAD,eACD,GAzBegqC,EAzG8B1pE,IAa5C,IAb6C,UACjD8lF,EAAS,QACTrlB,EAAO,WACPo9E,EAAU,cACV19I,EAAa,gBACbu9I,EAAe,UACf/wH,EAAS,YACTopD,EAAW,YACX4nE,EAAW,aACXj+G,EAAY,cACZC,EAAa,QACb6pC,EAAO,SACPrZ,GACDnwD,EACC,MAAM,mBAAE89I,IAAuBj4H,EAAAA,EAAAA,MAEzBuiC,GAAO+f,EAAAA,GAAAA,MACN41E,EAAmBC,IAAwB91E,EAAAA,GAAAA,IAAmB,IAE/D+1E,GADwB7zC,EAAAA,GAAAA,GAAsB2zC,KACIA,GAExDtwE,EAAAA,GAAAA,GAAe,CACbtd,WACAud,OAAQlE,IAGV,MAAM00E,GAAYx1E,EAAAA,GAAAA,KAAQ,IACjBjI,EAAUA,EAAQ9zD,KAAKwxI,GAAWA,EAAOlkI,SAAU,IACzD,CAACwmD,IAEE29E,GAAqB71E,EAAAA,GAAAA,KAAa1/C,IACtCi1H,EAAmB,CAAEj1H,SAAQ,GAC5B,CAACi1H,IAEEO,GAAe31E,EAAAA,GAAAA,KAAQ,KAE3B,MAAM41E,GAAY70I,EAAAA,EAAAA,MAAY2wB,MAAM7yB,KAC9Bg3I,EAAqBb,GAAkBc,EAAAA,EAAAA,KAAkBd,EAAiBY,EAAWvoE,GAAe,GAE1G,OAAO0oE,EAAAA,GAAAA,IACLt0I,EAAAA,EAAAA,IAAO,IACFo0I,KACC7+G,GAAgB,MAChBC,GAAiB,KACpB5/B,QAAQka,IACT,MAAMnI,EAAOwsI,EAAUrkI,GAOvB,OACGikI,EAAU37I,SAAS0X,IACjBA,IAAW9Z,KACT2R,KAASwL,EAAAA,EAAAA,KAAUxL,KAAWg0E,GAAah0E,EAAK4sI,oBAAqB,IAG/E,GACA,CAAChB,EAAiB3nE,EAAar2C,EAAcC,EAAex/B,EAAe+9I,EAAWp4D,IAEnF64D,GAAiBp2E,EAAAA,GAAAA,KAAY,KAC7Bw1E,EAAkBj+I,SACpBg+I,EAAmB,CAAEj1H,MAAO,KAC5Bg1H,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACEl3E,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,kBACb26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,wBACb26C,GAAAA,GAAAC,cAACg4E,GAAAA,EAAU,CACTC,QAASR,EACTS,YAAaf,EACbgB,YAAahpE,EACbipE,kBAAmB52F,EAAK,yBACxB62F,cAAc,4BACdtyH,UAAWgxH,EACXuB,oBAAqBlB,EACrBmB,eAAgBf,EAChBgB,cAAY,EACZC,oBAAkB,EAClBC,gBAAiBrB,EACjBsB,eAAa,EACbC,YAAU,EACVC,cAAc,aAGhB94E,GAAAA,GAAAC,cAAC84E,GAAAA,EAAoB,CACnB1iF,QAAS5mD,QAAQ2nI,EAAkBj+I,QACnCy+F,SAAU5xE,EACVu8C,UAAW9gB,EAAK,yBAChBygB,QAAS81E,GAERhyH,EACCg6C,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CAACtH,MAAM,UAEftC,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,4BAIf,KClIV,GAPwCs6C,IACtC,MAAMq5E,GAAcn5E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAGnD,OAAO04E,EAAch5E,GAAAA,GAAAC,cAAC+4E,EAAgBr5E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECG/D,GAPsCtB,IACpC,MAAMs5E,GAAYp5E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,aAGjD,OAAO24E,EAAYj5E,GAAAA,GAAAC,cAACg5E,EAAct5E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECC3D,GAP2Bi4E,KACzB,MAAMC,GAAYt5E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,aAGjD,OAAO64E,EAAYn5E,GAAAA,GAAAC,cAACk5E,EAAS,MAAMn5E,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECKhD,GAPuCtB,IACrC,MAAMy5E,GAAav5E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAO84E,EAAap5E,GAAAA,GAAAC,cAACm5E,EAAez5E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECA7D,GAN6Bo4E,KAC3B,MAAMC,GAAcz5E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAEnD,OAAOg5E,EAAct5E,GAAAA,GAAAC,cAACq5E,EAAW,MAAMt5E,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,4BCVpD,MCWMs4E,IAAwBt4H,EAAAA,EAAAA,KAAUpW,GAAOA,KAAM,KAAK,GAE1D,IAAI2uI,IAA8B,EAmGlC,SAASC,GAAoBC,GAC3B,OAAQA,GACN,IAAK,UACH,OAAOC,EAAAA,GAAaC,WACtB,IAAK,UACH,OAAOD,EAAAA,GAAaE,UACtB,IAAK,UACH,OAAOF,EAAAA,GAAaG,aACtB,QACE,OAAOH,EAAAA,GAAaI,YAE1B,C,gBCyEA,SAASC,GACPC,EACA/B,GAEA,MAAO1oI,EAAa0qI,IAAWC,EAAAA,GAAAA,GAC7BF,EACA/B,OACAr7I,EACAu9I,EAAAA,KAKF,MAAO,CAAC5qI,EAAa0qI,KAFJ1qI,IAAgB0oI,GAAW1oI,EAAY,KAAO0oI,EAAQ,IAGzE,CAEA,SAASmC,GACPC,EACAC,EACAN,EACAzxI,EACA0f,EACA5oB,GAEA,MAAMk7I,GAAgBj2E,EAAAA,GAAAA,OAEtBoa,EAAAA,GAAAA,IAAc,KACZ67D,EAAcj1H,aAAU1oB,CAAS,GAChC,CAACyC,KAEJq/E,EAAAA,GAAAA,IAAc,KACR47D,IAAsBD,GAAsB9xI,GAAgB0f,IAC9DsyH,EAAcj1H,SAAUk1H,EAAAA,EAAAA,KACtBjyI,EACA0f,EACAoyH,GAEJ,GACC,CAAC9xI,EAAc0f,EAAUqyH,EAAmBD,IAE/C,MAAO9qI,EAAa0qI,IAAWC,EAAAA,GAAAA,GAC7BF,EACAO,EAAcj1H,aACd1oB,EACuB,UAAvBy9I,EAAiCjwH,EAAAA,GAAqBW,EAAAA,KAKxD,MAAO,CAACxb,EAAa0qI,KAFJ1qI,IAAgBgrI,EAAcj1H,SAAW/V,EAAY,KAAOgrI,EAAcj1H,QAAQ,IAGrG,C,4BCvPA,MC6EA,IAAek7C,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAA2B,IAAzB,KAAEikC,GAAMjkC,EAIf,MAAO,CACL5H,QAJc9F,EAAO+pB,SAASiyB,UAAUjyB,SAAS4nB,EAAKA,KAAKyxG,WAK3DC,SAJe1xG,EAAK4rB,QAASzpD,EAAAA,EAAAA,KAAW9T,EAAQ2xC,EAAK4rB,aAAUh4D,EAKhE,GARekmE,EA7CH1pE,IAEY,IAFX,OAChBia,EAAM,KAAE21B,EAAI,SAAE0xG,EAAQ,QAAEv9I,GACF/D,EACtB,MAAM,kBAAE07D,IAAsB71C,EAAAA,EAAAA,MAExBurD,GAAUjJ,EAAAA,GAAAA,KAEVquB,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClCtR,EAAkB,CAChBzhD,SACA21B,QACA,IAGE2zE,EAAc3zE,EAAKyrB,eAAiBimF,EAAYC,GAAAA,GAAqBD,EAE3E,GAAKv9I,EAEL,OACE4iE,GAAAA,GAAAC,cAAA,OAAK56C,UDnDc,WCmDU68C,QAAS2tB,GACpC7vB,GAAAA,GAAAC,cAACs4B,GAAAA,EAAM,CAAClzE,UDpD6B,WCoDHxP,KAAM+mG,EAAYl3D,KAAK,UACzDsa,GAAAA,GAAAC,cAACq3B,GAAAA,EAAuB,CACtBl6F,QAASA,EACTigG,QAAM,EACND,gBAAc,EACd13C,KA3BkB,KA6BnBzc,EAAK0rB,WACJqL,GAAAA,GAAAC,cAAA,OAAK56C,UD5DyE,YC6D5E26C,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,wBAGfi6B,GAAAA,GAAAC,cAAA,OAAK56C,UDhEmD,aCiErD27E,EAAAA,GAAAA,GAAe/3D,EAAKA,KAAKG,MAAOk/D,EAAAA,MAElCr/D,EAAKA,KAAK4xG,mBACT76E,GAAAA,GAAAC,cAAC66E,GAAAA,EAAU,CACTx4E,MAAM,OACN18D,KAAM6kE,EAAQ,yBAAyB1J,EAAAA,GAAAA,IAAqB93B,EAAKA,KAAK4xG,sBAGtE,K,wCC7CV,MAoDA,IAAep6E,EAAAA,GAAAA,KApDoBpnE,IAO7B,IAP8B,MAClCqQ,EAAK,SACLqxI,EAAW,gBAAe,YAC1BjtD,EAAW,oBACX+F,EAAmB,QACnB3xB,EAAO,MACPp0D,GACDzU,EAEC,MAAMmrE,GAAMD,EAAAA,GAAAA,IAAuB,MAE7B4sB,GAAiBC,EAAAA,GAAAA,IAAkB5sB,EAAKqvB,GACxC2N,GAAew5C,EAAAA,EAAAA,KAA4BtxI,GAE3C8nF,GAAezM,EAAAA,GAAAA,IAASs0C,EAAAA,EAAAA,KAAoB3vH,EAAO,YAAaynF,GAChElc,GAAuBgmE,EAAAA,GAAAA,GAA6BzpD,GAEpDr0F,EAAQuM,EAAM1M,QAAQG,MAEtB0yF,GAAcxpB,EAAAA,GAAAA,IAAgB,KAClCnE,EAAQp0D,EAAM,IAGhB,OACEkyD,GAAAA,GAAAC,cAAA,OACEuE,IAAKA,EACL3qE,GAAK,GAAEkhJ,IAAWjtI,IAClBuX,UAAU,oBACV68C,QAAS2tB,GAET7vB,GAAAA,GAAAC,cAAA,OACE2lB,IAAK4b,EACLn8E,UAAU,kBACVwgE,IAAI,GACJsM,WAAYrE,EACZotD,SAAS,QACTl6D,cAAe8M,EAAcqC,GAAAA,OAAYtzF,IAE3CmjE,GAAAA,GAAAC,cAAA,OACE2lB,IAAK4L,EACLnsE,WAAWq8C,EAAAA,GAAAA,GAAe,aAAc,kBAAmBuT,GAC3D4Q,IAAI,GACJsM,WAAYrE,EACZotD,SAAS,QACTl6D,cAAe8M,EAAcqC,GAAAA,OAAYtzF,IAE1CM,GAAS6iE,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,kBAAkBloB,EAAMgiH,MAAQ,OAAQxd,EAAAA,GAAAA,IAAoBxkG,EAAM28B,WAC3Fg0D,GAAe9tB,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,cAC5B,I,oDC5EV,SAAiH,WC2LjH,IAAeo7C,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAAqB,CAACzrE,EAAM0N,KAA4B,IAA1B,MAAEmZ,GAAOnZ,EACzD,MAAMtK,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQ6mB,EAAM5kB,QAChCu0F,EAAcpzF,GAAMozF,aAEpB,sBAAEqtD,GAA0B7jJ,EAAOwkB,WAAa,CAAC,EACjDxiB,EAAQ,UAAW6kB,GAASA,EAAMi9H,MAClCC,GAAgBpgG,EAAAA,EAAAA,KAAoB3jD,EAAQ6mB,EAAM5kB,QAClD6N,EAAWi0I,GAAe1oH,MAAM2oH,GAAgBA,EAAYzhJ,KAAOskB,EAAMtkB,KAG/E,MAAO,CACLi0F,cACA1mF,WACAm0I,OALiBjiJ,KAAW6hJ,IAA0BE,GAAeliJ,QAAU,GAAKgiJ,GAMrF,GAdiBp4E,EAvJpB,SAAmB1pE,GAEO,IAFN,MAClB8kB,EAAK,YAAE2vE,EAAW,UAAEp4B,EAAS,SAAEtuD,EAAQ,OAAEm0I,GACnBliJ,EACtB,MAAM,gBACJ48D,EAAe,uBACfulF,EAAsB,qBACtBC,EAAoB,uBACpBC,EAAsB,iBACtBjoI,IACEyL,EAAAA,EAAAA,MAEEuiC,GAAO+f,EAAAA,GAAAA,KAEP6iB,GAAe9f,EAAAA,GAAAA,IAAuB,MAEtCo3E,GAAoBt1E,EAAAA,GAAAA,IAAgB,IAAMge,EAAa9+D,UACvDq2H,GAAiBv1E,EAAAA,GAAAA,IAAgB,IAAMhpE,SAASwuC,OAChDgwG,GAAiBx1E,EAAAA,GAAAA,IAAgB,IAAMhpE,SAASiiE,cAAc,0CAC9Dw8E,GAAYz1E,EAAAA,GAAAA,IAAgB,KAAM,CAAG01E,YAAY,EAAMC,SAAS,MAEhEziJ,EAAS4kB,GAASA,EAAM5kB,OACxBk+B,EAAgBtZ,GAAS,YAAaA,EACtC7kB,EAAQm+B,GAAiBtZ,EAAMi9H,MAC/BvyI,EAAYsV,GAAS,cAAeA,EACpChhB,EAAQs6B,EAAiBtZ,EAAmBnhB,QAAQG,WAAQN,EAC5Di9B,EAAW38B,IAASwkG,EAAAA,GAAAA,IAAoBxkG,EAAM28B,UAC9Cq5E,EAAY17E,GAAgBg6D,EAAAA,EAAAA,KAAkBtzE,QAAqBthB,EAEnEu2G,GADaruB,EAAAA,GAAAA,GAASouB,IACGh2G,GAAOO,WAAWi0F,SAEjD9wB,EAAAA,GAAAA,KAAU,MACJ1iD,GAAWsZ,GAAiB5uB,GAC9B2yI,EAAuB,CAAEjiJ,OAAQ4kB,EAAM5kB,QACzC,GACC,CAACsP,EAAW4uB,EAAetZ,IAE9B,MAAM,kBACJwiE,EAAiB,kBAAE65B,EAAiB,wBACpCzsB,EAAuB,kBAAEnN,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBsD,GAAe/qF,GAEpCu2F,GAAcjuB,EAAAA,GAAAA,KAAY,KAC9B3L,EAAgB,CACd18D,OAAQ4kB,EAAM5kB,OACd4K,QAASga,EAAMtkB,GACf27D,cAAc,EACdl9B,WAAW,EACXo9B,aACA,GACD,CAACA,EAAWv3C,EAAMtkB,GAAIskB,EAAM5kB,SAEzBo2F,GAAkBtpB,EAAAA,GAAAA,IAAiBrc,KACvCiyF,EAAAA,GAAAA,GAAoCjyF,GACpC+jC,EAAwB/jC,EAAE,IAGtBkyF,GAAuB71E,EAAAA,GAAAA,IAAiBrc,KAC5CmmC,EAAAA,GAAAA,GAAUnmC,GAEVyxF,EAAqB,CAAEliJ,SAAQ4K,QAASga,EAAMtkB,GAAI2gD,aAAa,IAC/D/mC,EAAiB,CACfnb,QAASmpD,EAAK,mCAEhBo/B,GAAwB,IAGpBs7D,GAAqB91E,EAAAA,GAAAA,IAAiBrc,KAC1CmmC,EAAAA,GAAAA,GAAUnmC,GAEVyxF,EAAqB,CAAEliJ,SAAQ4K,QAASga,EAAMtkB,GAAI2gD,aAAa,IAC/D/mC,EAAiB,CACfnb,QAASmpD,EAAK,uCAEhBo/B,GAAwB,IAGpBu7D,GAAqB/1E,EAAAA,GAAAA,IAAgB,KACzCq1E,EAAuB,CAAEniJ,SAAQ4K,QAASga,EAAMtkB,KAChDgnF,GAAwB,IAG1B,OACE7gB,GAAAA,GAAAC,cAAA,OACEuE,IAAK6f,EACLh/D,WAAWq8C,EAAAA,GAAAA,GDzHM,WCyHsB,eACvCswB,YAAarC,EACbztB,QAAS2tB,EACT7O,cAAeJ,GAEd/3E,GACCm3D,GAAAA,GAAAC,cAAA,YACED,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UDhIwE,WCgIzC0gB,KAAK,kBACzC0b,EAAK,iBAGTr6C,GAAY44D,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GDpIsF,YCoI9Cv8C,KAAK,cACzFtO,GAAiBhoB,QAAQ0O,EAAMyB,OAAOD,aACrCqgD,GAAAA,GAAAC,cAAA,QAAM56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GDtIyH,aCuIvJtiB,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,QACV5nB,EAAMyB,MAAMD,YAGhBma,GAAYkmC,GAAAA,GAAAC,cAAA,QAAM56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GD3IoI,aC2I7FxoD,GACpFkmC,GAAAA,GAAAC,cAAA,OAAK56C,UD5IiC,YC6InC+tF,GACCpzC,GAAAA,GAAAC,cAAA,OAAK2lB,IAAKwtB,EAAUvtB,IAAI,GAAGxgE,UD9I0B,WC8ID8sE,WAAW,IAEhE16D,GAAiBuoC,GAAAA,GAAAC,cAACo8E,GAAAA,EAAgB,CAACl+H,MAAOA,IAC1C2vE,GAAe9tB,GAAAA,GAAAC,cAAA,QAAM56C,UAAU,oBAEXxoB,IAAtB29G,GACCx6C,GAAAA,GAAAC,cAACwC,GAAAA,EAAI,CACH90B,OAAQgzC,EACR+oC,OAAQlP,EACRmhC,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBC,UAAWA,EACXz2H,WAAWq8C,EAAAA,GAAAA,GD3J2L,WC2JxJ,sBAC9CkB,WAAS,EACTC,QAASge,EACT7J,oBAAqB8J,EACrBi7D,YAAU,GAETrmF,GACCsK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,UAAU+N,QAASg6E,GAC/Bz6F,EAAK,6BAGRiU,GACAsK,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,UAAU+N,QAASi6E,GAC/B16F,EAAK,qCAGRiU,IAActuD,GAAYm0I,GAC1Bv7E,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,MAAM+N,QAASk6E,GAC3B36F,EAAK,8BAGRiU,GAAatuD,GACb44D,GAAAA,GAAAC,cAACgC,GAAAA,EAAQ,CAAC9N,KAAK,QAAQ+N,QAASk6E,GAC7B36F,EAAK,gCAOpB,K,sCC9BA,MAAM66F,GAAmB,CACvB,CAAE3iJ,KAAM,QAAS2c,MAAO,mBACxB,CAAE3c,KAAM,YAAa2c,MAAO,mBAC5B,CAAE3c,KAAM,QAAS2c,MAAO,mBACxB,CAAE3c,KAAM,QAAS2c,MAAO,oBA8lB1B,IAAemqD,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM47B,KAEW,IAFT,OACPx6B,EAAM,SAAE4G,EAAQ,SAAE0uE,GACnB96C,EACC,MAAM/nB,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQoB,GAC1BgC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAC1Bsa,GAAeC,EAAAA,EAAAA,KAAmB3b,EAAQoB,GAC1C8/B,GAAe5a,EAAAA,EAAAA,KAAmBtmB,EAAQoB,GAC1CwP,GAAe5G,EAAAA,EAAAA,KAAmBhK,EAAQoB,IAExC+yB,YAAa8wH,EAAe,cAAEv0H,IAAkBuC,EAAAA,EAAAA,KAA+BjzB,IAAW,CAAC,GAC7F,SAAE4wB,GAAcF,GAAiBu0H,GAAmBv0H,EAAcu0H,IAAqB,CAAC,EAExFC,EAAc/sI,QAAQ/U,GAAMsG,SAAW1B,GAAYA,IAAaD,EAAAA,KAE9DuB,KAAM+2I,EAAWlhH,aAAc9M,GAAqBryB,EAAOm8B,OAC3D7yB,KAAM67I,GAAcnlJ,EAAOqJ,MAE7BgM,GAAgBvJ,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,eAE1D2+C,EAAUz9C,IAAQusB,EAAAA,EAAAA,KAAYvsB,GAC9BykF,EAAYzkF,IAAQia,EAAAA,EAAAA,KAAcja,GAClCgiJ,GAAiBF,IAAgB7vI,IAAkBwrC,GAAYgnC,IAAaw9D,EAAAA,EAAAA,KAAYjiJ,IACxFo/D,EAAU9mD,GAAc8mD,QACxBM,EAAmBpnD,GAAconD,iBACjCwiF,EAAmBF,GAAiBhiJ,IACpCA,EAAKmiJ,aAAgB7pI,IAAiBA,EAAa8pI,gBACnDC,EAAgBL,GAAiBhiJ,KACjC4wI,EAAAA,EAAAA,KAAiB5wI,EAAM,iBAAoBykF,KAAcksD,EAAAA,EAAAA,KAAkB3wI,EAAM,gBAChFA,EAAKs3H,WACNgrB,EAAmBN,GAAiBhiJ,KAAS4wI,EAAAA,EAAAA,KAAiB5wI,EAAM,aAAeA,EAAKs3H,WACxFt+B,GAAkBC,EAAAA,EAAAA,KAAsBr8F,IACxC,kBAAE2lJ,IAAsBC,EAAAA,EAAAA,KAAwB5lJ,EAAQoB,IAAW,CAAC,EACpE6f,GAAuBC,EAAAA,EAAAA,KAA2BlhB,GAElDue,EAAO1K,GAAQzQ,EACf+9B,EAAeD,GAAgBxlB,EAE/BmqI,EAAoBhyI,IAASA,EAAKmsB,UAAW3gB,EAAAA,EAAAA,KAAUxL,KAAUwB,GAClE8C,QAAQ+oB,GAAc4kH,kBACrB7lH,GAAcC,EAAAA,EAAAA,KAAsBlgC,EAAQoB,GAE5C2kJ,EAAqB7kH,GAAc0iC,SAASoiF,gBAC5CC,EAAkBjmJ,EAAOm8B,MAAM0Q,oBAAoBzrC,GAEnD8kJ,EAAgB3nI,IAAS1K,GAAMmsB,SAAYzhB,EAAK6hD,kBAAoBj/B,GAAcglH,oBAClF9wI,EACAgtC,EAAc6jG,GAAgBrjG,EAAAA,EAAAA,KAAkB7iD,EAAQue,EAAKhc,SAAMgD,EACnEs+C,EAAWxB,GAAa+jG,WACxBC,EAAiBhkG,GAAahyC,UAC9Bi2I,EAAajkG,GAAa/4C,KAC1Bi9I,EAAkBlkG,GAAamkG,WAE/BC,EAActuI,QAAQ+oB,GAAcwlH,iBAAmBrxI,EACvDsxI,EAAY3mJ,EAAOm8B,MAAMggB,UAAU/6C,GAEzC,MAAO,CACLkoC,OAAOmpC,EAAAA,EAAAA,KAAYzyE,GACnB6nF,YACAj3E,eACAggB,WACAq0H,kBACAY,oBACAK,gBACAd,gBACAW,qBACAT,mBACAG,gBACAC,mBACAxjJ,cAAelC,EAAOkC,cACtBwoI,oBAAoBp+E,EAAAA,EAAAA,KAAyBtsD,EAAQ02E,GACrDz+D,aAAc7U,GAAM6U,aACpBmkF,kBACAikD,YACAhuH,mBACA8yH,YACAthG,WACA4iG,cACA1vG,MAAO4vG,GAAW5vG,MAClBsvG,iBACAE,kBACAD,aACAhmC,gBAAiBl9G,GAAMozF,YACvBrvC,gBAAgBjnD,EAAAA,EAAAA,KAAeF,GAAQmnD,eACvCF,uBAAuB/mD,EAAAA,EAAAA,KAAeF,GAAQinD,sBAC9Cy6D,mBAAoB1hH,EAAO64B,SAASmU,MAAM00E,mBAC1CklC,gBAAiBjB,EACjBM,kBACAhlI,uBACAikI,cACA7vI,gBACAqf,SAAU10B,EAAO00B,SACjBmyH,sBAAsBl5H,EAAAA,GAAAA,GAAmB3tB,EAAQ,0BAC7ColJ,GAAiB5iF,GAAW,CAAEA,UAASM,uBACvC+iF,GAAqBhyI,GAAQ,CAAEizI,cAAe7mH,GAAa91B,KAChE,GA/FeshE,EAxlBuB1pE,IA4CrC,IA5CsC,OAC1CX,EAAM,SACN4G,EAAQ,aACR++I,EAAY,MACZz9G,EAAK,UACLu+C,EAAS,cACT3lF,EAAa,aACb0O,EAAY,SACZggB,EAAQ,SACRizB,EAAQ,eACRwiG,EAAc,gBACdE,EAAe,WACfD,EAAU,gBACVrB,EAAe,kBACfY,EAAiB,cACjBK,EAAa,cACbd,EAAa,mBACbW,EAAkB,YAClBU,EAAW,MACX1vG,EAAK,gBACLkvG,EAAe,iBACfX,EAAgB,cAChBG,EAAa,iBACbC,EAAgB,cAChBoB,EAAa,QACbtkF,EAAO,iBACPM,EAAgB,UAChBu9E,EAAS,iBACThuH,EAAgB,UAChB8yH,EAAS,mBACTza,EAAkB,aAClBzyH,EAAY,gBACZmkF,EAAe,gBACfkkB,EAAe,eACfn5D,EAAc,mBACdu6D,EAAkB,gBAClBklC,EAAe,qBACf3lI,EAAoB,qBACpB4lI,EAAoB,YACpB3B,EAAW,cACX7vI,EAAa,sBACb4xC,EAAqB,SACrBvyB,EAAQ,qBACRsyH,GACDjlJ,EACC,MAAM,yBACJklJ,EAAwB,gBACxBC,EAAe,gBACfC,EAAe,SACfzpI,EAAQ,0BACR0pI,GAAyB,gBACzBlgC,GAAe,gBACfC,GAAe,aACfl6G,GAAY,6BACZo6I,GAA4B,uBAC5BC,GAAsB,mBACtBC,GAAkB,iBAClBrkI,GAAgB,2BAChBskI,GAA0B,kBAC1BC,GAAiB,cACjBjrG,KACE50B,EAAAA,EAAAA,MAGEmlE,IAAe9f,EAAAA,GAAAA,IAAuB,MAEtCD,IAAgBC,EAAAA,GAAAA,IAAuB,MACvC9iB,IAAO+f,EAAAA,GAAAA,MACNw9E,GAAgBC,KAAqB19E,EAAAA,GAAAA,MAEtC29E,GAAYvyI,EAAgBpJ,OAAOjE,GAAY5G,EAC/C6lH,GAAkB2gC,KAAc1lJ,IAAkBmT,EAElDw7D,IAAOpG,EAAAA,GAAAA,KAAQ,IAAO,IACtBw8C,KAAoB5xG,EAAgB,CAAC,CAAEhT,KAAM,UAAoB2c,MAAO,oBAAuB,MAC/FknI,EAAgB,CAAC,CAAE7jJ,KAAM,UAAoB2c,MAAO,mBAAsB,MAC1EknI,GAAiBj/B,GAAkB,CAAC,CAAE5kH,KAAM,iBAA2B2c,MAAO,0BAA6B,MAC3GynI,EAAc,CAAC,CAAEpkJ,KAAM,QAAkB2c,MAAO,iBAAoB,MACpEomI,EAAgB,CAAC,CACnB/iJ,KAAM,UAAoB2c,MAAO6oE,EAAY,qBAAuB,iBACjE,MACDk+D,EAAqB,CAAC,CACxB1jJ,KAAM,eAAyB2c,MAAO,yBACnC,MACFgmI,MAGEE,EAAuE,GAAzD,CAAC,CAAE7iJ,KAAM,QAAkB2c,MAAO,uBACjD6mI,EAAoB,CAAC,CAAExjJ,KAAM,cAAwB2c,MAAO,qBAAwB,MACpF6oE,GAAa++D,GAAiB/kJ,OAC9B,CAAC,CAAEQ,KAAM,kBAA4B2c,MAAO,uBAC5C,KACF,CACF6mI,EACAT,EACAW,EACAG,EACAO,EACA5+D,EACAq9D,EACA0B,EACA3/B,GACA5xG,IAGIwyI,IAAap9E,EAAAA,GAAAA,KAAQ,KACzB,IAAKtjB,EACH,OAAO,EAGT,MAAM3wC,EAAQq6D,GAAKp6D,WAAU/I,IAAA,IAAC,KAAErL,GAAMqL,EAAA,OAAKrL,IAAS8kD,CAAc,IAClE,OAAkB,IAAX3wC,EAAe,EAAIA,CAAK,GAC9B,CAAC2wC,EAAgB0pB,MAEbi3E,GAAuBC,GAA+BC,KAAwB7xE,EAAAA,GAAAA,IAAQ,IAEtFrF,GAAWm3E,KAAgBh+E,EAAAA,GAAAA,IAAS49E,KAE3Ct+E,EAAAA,GAAAA,KAAU,KACR,IAAKpiB,EAAgB,OACrB,MAAM3wC,EAAQq6D,GAAKp6D,WAAUhH,IAAA,IAAC,KAAEpN,GAAMoN,EAAA,OAAKpN,IAAS8kD,CAAc,KAEnD,IAAX3wC,GACJyxI,GAAazxI,EAAM,GAClB,CAAC2wC,EAAgB0pB,KAEpB,MAAM/B,IAAkBxE,EAAAA,GAAAA,KAAa9zD,IACnCuxI,KACAE,GAAazxI,EAAM,GAClB,KAEH+yD,EAAAA,GAAAA,KAAU,KACJw8E,IAAuBE,GACzBwB,GAAkB,CAAEhlH,MAAOrhC,GAC7B,GACC,CAACA,EAAQ6kJ,EAAiBF,KAE7Bx8E,EAAAA,GAAAA,KAAU,KACJse,IAAc++D,GAAmBlyH,GACnC8yH,GAA2B,CAAEpmJ,UAC/B,GACC,CAACA,EAAQymF,EAAW++D,EAAiBlyH,IAExC,MAAMwzH,IAAUz9E,EAAAA,GAAAA,KAAQ,IACf1zB,GAAOroC,KAAI0B,IAAA,IAAC,KAAE8D,EAAI,KAAEy9B,EAAI,OAAE4rB,GAAQntD,EAAA,MAAM,GAAE8D,KAAQqpD,KAAU5rB,EAAKpvC,IAAI,KAC3E,CAACw0C,IAEEoxG,GAAqBr3E,GAAYD,GAAKhvE,OAAS,EAAIgvE,GAAKhvE,OAAS,EAAIivE,GACrEsxE,GAAUvxE,GAAKs3E,IAAoB9lJ,KACnC+lJ,IAAwB99E,EAAAA,GAAAA,KAAY,KACxC68E,EAAgB,CAAEnrI,OAAQ5a,GAAS,GAClC,CAACA,IACEinJ,IAAwB/9E,EAAAA,GAAAA,KAAYz3D,IAAwC,IAAvC,SAAEwB,GAAgCxB,EAC3Ey0I,GAAuB,CAAErlJ,OAAQb,EAAQiT,YAAW,GACnD,CAACjT,IACEknJ,IAA2Bh+E,EAAAA,GAAAA,KAAYjiE,IAAwC,IAAvC,SAAEgM,GAAgChM,EAC9Ek/I,GAAmB,CAAEtlJ,OAAQC,EAAgBmS,YAAW,GACvD,CAACnS,IACEqmJ,IAAkBj+E,EAAAA,GAAAA,KAAY,KAClC9tB,GAAc,CAAExgC,OAAQ5a,GAAS,GAChC,CAACA,KAEGonJ,GAAYtwI,GAAa0qI,GAAS6F,IN1T5B,SAA8B1mJ,GA4C1C,IA5C2C,gBAC5CmlJ,EAAe,gBACfC,EAAe,eACfuB,EAAc,YACdC,EAAW,mBACXpB,EAAkB,cAClBqB,EAAa,QACbxG,EAAO,gBACP6C,EAAe,iBACf4D,EAAgB,cAChB/B,EAAa,UACbzG,EAAS,iBACThuH,EAAgB,UAChB8yH,EAAS,aACTj0I,EAAY,SACZ0f,EAAQ,SACR5oB,EAAQ,SACR67C,EAAQ,QACRqkG,EAAO,eACP7B,EAAc,gBACdE,EAAe,gBACfK,GAuBD7kJ,EACC,MAAMymJ,EAAyB,YAAZpG,GAA0B6C,EAA4BA,EAAV7C,EAEzDnC,GAAYx1E,EAAAA,GAAAA,KAAQ,KACxB,GAAKo+E,GAAqBxI,GAAchuH,EAIxC,OAAOy2H,EAAAA,EAAAA,KACLD,EAAiBn6I,KAAIhB,IAAA,IAAC,OAAEsO,GAAQtO,EAAA,OAAKsO,CAAM,IAC3CqkI,EACAhuH,EACD,GACA,CAACw2H,EAAkBxI,EAAWhuH,IAE3B+N,GAAUqqC,EAAAA,GAAAA,KAAQ,KACtB,GAAKq8E,GAAkB3B,EAIvB,OAAO3E,EAAAA,GAAAA,GAAYsG,GAAe,EAAK,GACtC,CAAC3B,EAAW2B,KAERiC,EAAmBC,EAAgBC,GAA2BvG,GACnEwE,EAAiBjH,IAGZiJ,EAAkBC,EAAcC,GAAyBrG,GAC9D,QAASyF,EAAYE,EAAgBx3I,EAAc0f,EAAU5oB,IAGxDqhJ,EAAqBC,EAAkBC,GAA6BxG,GACzE,YAAayF,EAAYE,EAAgBx3I,EAAc0f,EAAU5oB,IAG5DwhJ,EAAiBC,EAAcC,GAAyB3G,GAC7D,QAASyF,EAAYE,EAAgBx3I,EAAc0f,EAAU5oB,IAGxD2hJ,EAAkBC,EAAcC,GAAyB9G,GAC9D,QAASyF,EAAYE,EAAgBx3I,EAAc0f,EAAU5oB,IAGxD8hJ,EAAkBC,EAAeC,GAA0BjH,GAChE,QAASyF,EAAYE,EAAgBx3I,EAAc0f,EAAU5oB,IAGxDiiJ,EAAuBC,EAAoBC,GAA+BzH,GAC/EyE,EAAiB/mH,GAGbgqH,GAAiB3/E,EAAAA,GAAAA,KAAQ,KAC7B,IAAK5mB,GAAUhiD,OAAQ,OAAOgiD,EAC9B,MAAMwmG,EAAoB,IAAIhgJ,IAAIg8I,GAClC,OAAOxiG,EAAS/sC,QAAQpS,MAAK,CAACC,EAAGC,KAC/B,MAAM0lJ,EAAYD,EAAkBt/I,IAAIpG,GAClC4lJ,EAAYF,EAAkBt/I,IAAInG,GACxC,OAAI0lJ,IAAcC,GAAmB,GAChCD,GAAaC,EAAkB,EAC7B3lJ,EAAID,CAAC,GACZ,GACD,CAACk/C,EAAUwiG,KAEPmE,EAAkBC,EAAgBC,GAA2BhI,GAClEiG,EAAayB,IAIbO,EACAC,EACAC,GACEnI,GACF6E,EAAoBhB,GAGtB,IAAIruI,GACA0qI,GACA6F,IAAgB,EAEpB,OAAQD,GACN,IAAK,UACHtwI,GAAc6wI,EACdnG,GAAUoG,EACVP,GAAgBQ,EAChB,MACF,IAAK,cACH/wI,GAAc+xI,EACdrH,GAAUsH,EACVzB,GAAgB0B,EAChB,MACF,IAAK,QACHjyI,GAAcgxI,EACdtG,GAAUuG,EACVV,GAAgBW,EAChB,MACF,IAAK,YACHlxI,GAAcmxI,EACdzG,GAAU0G,EACVb,GAAgBc,EAChB,MACF,IAAK,QACHrxI,GAAcsxI,EACd5G,GAAU6G,EACVhB,GAAgBiB,EAChB,MACF,IAAK,QACHxxI,GAAcyxI,EACd/G,GAAUgH,EACVnB,GAAgBoB,EAChB,MACF,IAAK,QACH3xI,GAAc4xI,EACdlH,GAAUmH,EACVtB,GAAgBuB,EAChB,MACF,IAAK,UACH9xI,GAAcsyI,EACd5H,GAAU6H,EACVhC,GAAgBiC,EAChB,MACF,IAAK,iBACHxyI,GAAcyyI,EACd/H,GAAUgI,EACVnC,GAAgBoC,EAChB,MACF,IAAK,kBACH3yI,GAAc0uI,EACd,MACF,IAAK,QACH1uI,GAAcgwI,EACdtF,GAAUgG,EACV,MACF,IAAK,UACHH,IAAgB,EAIpB,MAAO,CAACD,EAAYtwI,GAAa0qI,GAAS6F,GAC5C,CMoI4DqC,CAAsB,CAC9E5D,kBACAwB,eAAgBtB,GAChBuB,YAAaN,GACbd,mBAAoBe,GACpBM,cAAeL,GACfpB,gBAAiBiB,GACjBhG,WACA6C,kBACA4D,iBAAkBrmF,EAClBskF,gBACAzG,YACAhuH,mBACA8yH,YACAj0I,aAAcN,EACdggB,WACA5oB,WACA67C,WACAqkG,WACA7B,iBACAE,kBACAK,oBAEImE,GAAc9jC,IAAkC,YAAfuhC,IACjCtC,GAAgC,YAAfsC,IACH,YAAfA,KACEpD,GAAgC,UAAfoD,GAClBt3E,GAAYL,GAAKp6D,WAAUvN,IAAA,IAAC,KAAE7G,GAAM6G,EAAA,OAAK7G,IAASmmJ,EAAU,KAElEwC,EAAAA,GAAAA,GAAqC,YAAfxC,GAA2BtwI,QAA0B3S,GAE3E,MAAM0lJ,IAA6Bl8E,EAAAA,GAAAA,IAAgB,KACjDi5E,IAAsB,KAGlB,aAAE5pB,IP1VK,SACbrxC,EACAq1D,EACA2E,EACAC,GAIA,IAHA//F,EAAqB3hD,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GACrBwiJ,EAAqBxiJ,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,GACrB2lJ,EAAsC3lJ,UAAAzD,OAAA,EAAAyD,UAAA,QAAAC,GAGtCwxE,EAAAA,GAAAA,IAAsBh1E,IAAmB,IAAjBmpJ,GAAYnpJ,EAClC,GAAKmpJ,GAAeA,IAAgB9I,GAAW0F,GAA2B1F,GAAWn7F,EAAwB,CAC3G,MAAMi4C,EAAYnS,EAAa9+D,QACzBk9H,EAASjsD,EAAUl3B,cAA8B,YACvDijF,IACI/rD,EAAUmtB,UAAY8+B,EAAOz0B,YAC/BswB,EAAqB7E,GAAoBC,IACzCF,IAA8B,GAC9Bp3D,EAAAA,GAAAA,IAAcoU,EAAWisD,EAAQ,aAAS5lJ,OAAWA,OAAWA,EAzB5C,KA0BpBgG,YAAW,KACT22I,IAA8B,CAAK,GA1BN,KA6BnC,IACC,CAACE,EAAS4E,EAAsBj6D,EAAc9lC,EAC/C6gG,EAAuBmD,KAGzBl0E,EAAAA,GAAAA,IAAsBrpE,IAAwB,IAAtB09I,GAAiB19I,EACvC,GAAIq5I,IAAiB1E,EAAAA,GAAagJ,SAAWtE,IAAiBqE,EAC5D,OAGF,MAAMlsD,EAAYnS,EAAa9+D,QAC/B,IAAKixE,EACH,OAGF,MAAMosD,EAAYpsD,EAAUl3B,cAA8B,aACrDsjF,GAAaA,EAAU50B,UAAYx3B,EAAUmtB,YAIlD61B,IAA8B,GAC9Bp3D,EAAAA,GAAAA,IACEoU,EACAA,EAAU4N,kBACV,aACAvnG,EACyB,EAAzB25F,EAAUwY,cAGZnsG,YAAW,KACT22I,IAA8B,CAAK,GA3DF,KA4DD,GACjC,CAAC6E,EAAch6D,IAElB,MAAMw+D,GAAwBx8E,EAAAA,GAAAA,IAAgB,KAC5C,MAAMmwB,EAAYnS,EAAa9+D,QAC/B,IAAKixE,EACH,OAGF,MAAMosD,EAAYpsD,EAAUl3B,cAA8B,YAC1D,IAAKsjF,EACH,OAGF,IAAI/+G,EAAsB81G,EAAAA,GAAagJ,QACnCnsD,EAAUmtB,WAAai/B,EAAU50B,YACnCnqF,EAAQ41G,GAAoBC,IAG9B4E,EAAqBz6G,EAAM,IAqB7B,OAjBAg9B,EAAAA,GAAAA,KAAU,KACJ24E,IAIJqJ,GAAuB,GACtB,CAACA,EAAuBnJ,IAWpB,CAAEhkB,cARYrvD,EAAAA,GAAAA,IAAgB,KAC/BmzE,IAIJD,GAAsBsJ,EAAsB,IAIhD,CO2P2BC,CACvBz+D,GACAy7D,GACAzB,EACAC,EACA//F,EACA6gG,GACAmD,KAGI,mBAAEQ,GAAkB,qBAAEC,IC/Wf,SACb3+D,GAEA,IADA4+D,EAAoBrmJ,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG,sCAgDvB,OA7CAikE,EAAAA,GAAAA,KAAU,KACR,SAASqiF,IACP,MAAM1sD,EAAYnS,EAAa9+D,QACzB49H,EAAe3sD,EAAUl3B,cAA8B2jF,GACvDR,EAASjsD,EAAUl3B,cAA8B,YACvD,GAAI6jF,GAAgBV,EAAQ,CAC1B,MAAMn/B,EAAY9sB,EAAUwY,aAAeyzC,EAAOzzC,cAElDpO,EAAAA,GAAAA,KAAgB,KACduiD,EAAaz9D,MAAM09D,UAAa,GAAE9/B,KAAa,GAEnD,CACF,CAMA,OAJA4/B,IAEA5mI,OAAO8qD,iBAAiB,SAAU87E,GAAc,GAEzC,KACL5mI,OAAO+qD,oBAAoB,SAAU67E,GAAc,EAAM,CAC1D,GACA,CAAC7+D,EAAc4+D,IAwBX,CAAEF,oBArBkB18E,EAAAA,GAAAA,IAAgB,MAEzCmpB,EAAAA,GAAAA,KAAe,KACb,MAAMgH,EAAYnS,EAAa9+D,QAC/B,GAAkC,WAA9BixE,EAAU9Q,MAAM29D,UAAwB,OAE5C,MAAMC,EAAiB9sD,EAAUuY,YAAcvY,EAAU+sD,aAEzD3iD,EAAAA,GAAAA,KAAgB,KACdpK,EAAU9Q,MAAM29D,UAAY,SAC5B7sD,EAAU9Q,MAAM89D,aAAgB,GAAEF,KAAkB,GACpD,GACF,IASyBN,sBANA38E,EAAAA,GAAAA,IAAgB,KAC3C,MAAMmwB,EAAYnS,EAAa9+D,QAC/BixE,EAAU9Q,MAAM29D,UAAY,SAC5B7sD,EAAU9Q,MAAM89D,aAAe,GAAG,IAItC,CD4TuDC,CAAmBp/D,KAEjEq/D,GAAaC,IRrXCC,MACrB,MAAOF,EAAaG,IAAkBtiF,EAAAA,GAAAA,IAAS,GAM/C,MAAO,CAACmiF,GAJkB9hF,EAAAA,GAAAA,KAAY,KACpCiiF,GAAgBt+H,GAAYA,EAAU,GAAE,GACvC,IAEoC,EQ8WCq+H,IAEhCz5B,QAAS25B,KAAgC15B,EAAAA,GAAAA,IAAwB,CACvEC,QAAShmC,GACTsoC,WAvN0B,MA0NtBo3B,IAAuB19E,EAAAA,GAAAA,IAAgB,KAC3C28E,KACAW,IAAkB,IAGdK,IAA4B39E,EAAAA,GAAAA,IAAgB,KAChDs4E,GAA6B,CAAE7/F,uBAAwBm4F,EAAAA,GAAuBnpH,YAAa,KAI7F+yC,EAAAA,GAAAA,KAAU,KACR09E,EAAyB,CAAE50I,UAAW+vI,IAA6B,GAClE,CAAC6E,EAA0B7E,GAASp6I,IAEvC,MAAM2kJ,IAAoB59E,EAAAA,GAAAA,IAAiB1nE,IACzC6/G,GAAgB,CACd9lH,OAAQwmJ,GACR5/I,SAAUD,EAAAA,GACVV,YACA0kD,OAAQ07D,EAAAA,GAAkBg7B,aAC1B,IAGEmK,IAA2B79E,EAAAA,GAAAA,IAAiBv4D,IAChD0wG,GAAgB,CACdrtD,gBAAiBosF,GAAiB32H,SAASsgE,GAASA,GAAMlqF,QAAQE,OAC/DgqF,GAAMlqF,QAAQG,QAAO/D,OAAOqW,SAC/B4zC,OAAQ07D,EAAAA,GAAkBolC,aAC1BpzF,WAAYjjD,GACZ,IAGEs2I,IAAkB/9E,EAAAA,GAAAA,IAAiB1nE,IACvC8/G,GAAgB,CAAE/lH,OAAQwmJ,GAAWvgJ,aAAY,IAG7C0lJ,IAAoBh+E,EAAAA,GAAAA,IAAiBxsE,IACzCmb,EAAS,CAAEnb,MAAK,IAGZyqJ,IAAqBj+E,EAAAA,GAAAA,IAAiB/tE,IAC1CiM,GAAa,CAAE7L,OAAQJ,EAAQI,OAAQiG,UAAWrG,EAAQuB,IAAK,IAG3D0qJ,IAAgCl+E,EAAAA,GAAAA,IAAgB,KACpD44E,QAAkBpiJ,EAAU,IAkC9B,IAAI2nJ,IA/BJn2E,EAAAA,GAAAA,IAAsBt7C,IAAyB,IAAvB0xH,GAAkB1xH,EACxC,QAA0Bl2B,IAAtB4nJ,GAAiD,IAAdr8E,IAAmBq8E,IAAsB/H,EAC9E,OAGF,MAAMgI,EAAet8E,IAAas0E,EAAgB,GAAK,GAEvD6C,GAAatnJ,KAAKC,IAAIwsJ,EAAcv8E,GAAKhvE,OAAS,GAAG,GACpD,CAACujJ,EAAet0E,GAAWD,MAE9BtH,EAAAA,GAAAA,KAAU,KACR,GAAKyD,GAAc/+C,SAAYohC,EAAAA,GAI/B,OAAO2f,EAAAA,GAAAA,IAAchC,GAAc/+C,QAAS,CAC1CghD,wBAAyB,WACzBC,QAAUA,CAACxc,EAAGp+C,IACRA,IAAc66D,GAAAA,GAAeC,MAC/B64E,GAAatnJ,KAAKC,IAAIunJ,GAAqB,EAAGt3E,GAAKhvE,OAAS,KACrD,GACEyS,IAAc66D,GAAAA,GAAeE,QACtC44E,GAAatnJ,KAAKE,IAAI,EAAGsnJ,GAAqB,KACvC,IAKX,GACD,CAACA,GAAoBt3E,GAAKhvE,SAIzBkpJ,GACFmC,GAAkBxiB,EAA2C,EA7SrC,IA+SdxyH,IAAgB+tI,IAC1BiH,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmB9sD,EAAAA,GAAAA,GAAkB,CAACp/F,EAAQ4G,EAAUwgJ,GAAYL,IAAqB+E,IAsO/F,OACExkF,GAAAA,GAAAC,cAAC4kF,GAAAA,EAAc,CACbrgF,IAAK6f,GACLh/D,UAAU,wBACVy/H,aAAe,uDAAsDhF,yBACrErP,MAAOmU,GAAmBp1I,QAAc3S,EACxC6mJ,YAAaA,GACbqB,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAf9E,GAA2B1F,EAAAA,IAAgB/vH,EAAAA,GAAsB,EAEvG66H,sBAAoB,EACpBC,YAAU,EACVC,WAAYlL,GACZpiB,SAAUpC,KAERqqB,KAAkBxhC,IA2C1B,SAA2B2gC,EAAmBvzB,EAAkBh/G,GAC9D,OACEqzD,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,gBACb26C,GAAAA,GAAAC,cAAColF,GAAAA,EAAW,CAAC9rJ,OAAQ2lJ,EAAWoG,aAAc35B,IAC9C3rD,GAAAA,GAAAC,cAACslF,GAAAA,EAAS,CAACC,aAActG,EAAWvyI,cAAeA,IAGzD,CAjDQ84I,CAAkBvG,GAAWld,GAAsB4iB,GAAkBj4I,IAErE4C,GACAywD,GAAAA,GAAAC,cAAA,OACE56C,UAAU,gBAEV26C,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACT/D,IAAKF,GACLv+B,KAAM0b,GAAK2gB,MAAQ,oBAAsB,iBACzCoG,UAAWA,GACXC,YAAaN,GAAKhvE,OAClBusJ,qBAAmB,EACnBrgI,UAAU,0BACVg+G,QAAS0f,GACTn7B,OAAQm8B,IAxPlB,WACE,GAAmB,YAAfjE,GACF,OACE9/E,GAAAA,GAAAC,cAAC2H,GAAAA,EAAQ,CAACviD,UAAU,gBAAgBwiD,WAAW,QAAQre,UAAQ,IAInE,IAAMh6C,KAAgB+tI,IAAqBqH,KAAqB18I,EAAc,CAC5E,MAAMy9I,EAAYtD,KAAeuC,GAC3BgB,EAA2Bn2I,QAAuB,YAAfqwI,IAA4BlD,GAErE,OACE58E,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,uBACXsgI,IAAcC,GAA4B5lF,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,MACnDg8E,GAA4B5lF,GAAAA,GAAAC,cAAC4lF,GAAAA,EAAY,CAACjgJ,KAAK,8CAGtD,CAEA,GAAI4J,KAAgBA,IAAarW,OAAQ,CACvC,IAAIyM,EAEJ,OAAQk6I,IACN,IAAK,UACHl6I,EAAOg3I,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACHh3I,EAAO67C,GAAK,oBACZ,MACF,IAAK,YACH77C,EAAO67C,GAAK,wBACZ,MACF,IAAK,QACH77C,EAAO67C,GAAK,wBACZ,MACF,IAAK,QACH77C,EAAO67C,GAAK,wBACZ,MACF,IAAK,QACH77C,EAAO67C,GAAK,yBACZ,MACF,IAAK,UACH77C,EAAO67C,GAAK,mCACZ,MACF,IAAK,iBACH77C,EAAO67C,GAAK,sCACZ,MACF,QACE77C,EAAO67C,GAAK,0BAGhB,OACEue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,sBACb26C,GAAAA,GAAAC,cAAC4lF,GAAAA,EAAY,CAACjgJ,KAAMA,IAG1B,CAEA,OACEo6D,GAAAA,GAAAC,cAAA,OACE56C,UAAY,WAAUy6H,UACtB39E,IAAK1gB,GAAK2gB,OAAwB,UAAf09E,GAAyB,WAAQjjJ,EACpD6wG,eAAa,GAEG,UAAfoyC,GACEtwI,GAA0BxJ,KAAKnM,GAAOqO,EAAarO,IAClDmmE,GAAAA,GAAAC,cAAC6lF,GAAAA,EAAK,CACJpsH,IAAK7/B,EACLvB,QAAS4P,EAAarO,GACtBi0F,YAAa8pB,GAAmB1vG,EAAarO,GAAIi0F,YACjD+F,oBAAqBiwD,GACrB5hF,QAAS+hF,OAGK,YAAfnE,IAA2C,mBAAfA,GAC9BtwI,GAA0BxJ,KAAI,CAACnM,EAAI2C,IAAMohJ,IAAa/jJ,IACrDmmE,GAAAA,GAAAC,cAAC8lF,GAAU,CACTnR,cAAep4I,EACfk9B,IAAM,GAAEomH,MAAcjmJ,IACtBskB,MAAOy/H,EAAW/jJ,GAClB67D,UAA0B,mBAAfoqF,OAGE,cAAfA,GACDtwI,GAA0BxJ,KAAKnM,GAAOqO,EAAarO,IAClDmmE,GAAAA,GAAAC,cAACqoD,GAAAA,EAAQ,CACP5uF,IAAK7/B,EACLwD,UAAU2oJ,EAAAA,EAAAA,KAAmB99I,EAAarO,IAC1CosJ,UAAQ,EACRC,SAAO,EACP7gI,UAAU,cACVgwE,eAAeC,EAAAA,EAAAA,KAAiB5B,GAAiBsyD,EAAAA,EAAAA,KAAmB99I,EAAarO,KACjFg6F,oBAAqBiwD,GACrBqC,YAAa7B,GACbhsJ,QAAS4P,EAAarO,GACtBm/G,mBAAoBA,MAGP,UAAf8mC,GACDtwI,GAA0BxJ,KAAKnM,GAAOqO,EAAarO,IAClDmmE,GAAAA,GAAAC,cAACmmF,GAAAA,EAAO,CACN1sH,IAAK7/B,EACLvB,QAAS4P,EAAarO,GACtBi0F,YAAa8pB,GAAmB1vG,EAAarO,GAAIi0F,YACjD+F,oBAAqBiwD,GACrBuC,eAAgB/B,OAGH,UAAfxE,GACDtwI,GAA0BxJ,KAAKnM,GAAOqO,EAAarO,IAClDmmE,GAAAA,GAAAC,cAACo2B,GAAAA,GAAK,CACJ38D,IAAK7/B,EACL+mC,MAAOA,EACPtoC,QAAS4P,EAAarO,GACtBwpD,OAAQ8kE,EAAAA,GAAY4xB,YACpBvuI,KAAMtD,EAAarO,GAAI2R,KACvB6Z,UAAU,cACVgjG,OAAQ+7B,GACR+B,YAAa7B,GACbp+F,aAAc0xD,IAAoB1vG,EAAarO,GAAIi0F,YACnDuH,eAAeC,EAAAA,EAAAA,KAAiB5B,EAAiBxrF,EAAarO,GAAImD,QAAQm5F,WAG7D,UAAf2pD,GACDtwI,GAA0BxJ,KAAKnM,IAC9B,MAAMvB,EAAU4P,EAAarO,GAC7B,IAAKvB,EAAS,OACd,MAAMoR,EAAQxB,EAAarO,KAAOssD,EAAAA,EAAAA,KAA4B7tD,GAC9D,OAAO4P,EAAarO,IAClBmmE,GAAAA,GAAAC,cAACo2B,GAAAA,GAAK,CACJ38D,IAAK7/B,EACL+mC,MAAOA,EACPtoC,QAAS4P,EAAarO,GACtBmoD,aAAaskG,EAAAA,GAAAA,GAAc7kG,GAAMv5C,EAAarO,GAAK4iJ,EAAW9E,GAC9Dt0F,OAAQ8kE,EAAAA,GAAY4xB,YACpBvuI,KAAMtD,EAAarO,GAAI2R,KACvB6Z,UAAU,cACVgjG,OAAQ+7B,GACR+B,YAAa7B,GACbp+F,aAAc0xD,IAAoB1vG,EAAarO,GAAIi0F,YACnDuH,eAAeC,EAAAA,EAAAA,KAAiB5B,EAAiBhqF,IAEpD,IAEc,YAAfo2I,GACDtwI,GAA0BxJ,KAAI,CAACnM,EAAI2C,KAClCwjE,UAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAK7/B,EACL+6I,cAAep4I,EACf6oB,UAAU,+DAEV68C,QAASA,IAAMmiF,GAAkBxqJ,GACjC8rE,gBAlKoB6gF,EAkKmB3sJ,EAjK1C2sJ,IAAahtJ,GAAkBwjJ,EAA+B,CAAC,CACpE1mI,MAAOmrC,GAAK,iCACZ0S,KAAM,OACN0R,QAASA,KACPo5E,GAAkBuH,EAAS,SAJ0B3pJ,IAmK/CmjE,GAAAA,GAAAC,cAACokE,GAAAA,EAAe,CAAC/wH,OAAQzZ,EAAI4sJ,YAAarsF,IAAmBvgE,GAAK0jG,eAAa,EAACknC,WAAS,KApKrG,IAAgC+hB,CAsKvB,IACgB,gBAAf1G,GACDtwI,GAA0BxJ,KAAI,CAACnM,EAAI2C,IAClCwjE,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAK7/B,EACL+6I,cAAep4I,EACf6oB,UAAU,6CAEV68C,QAASA,IAAMltD,EAAS,CAAEnb,QAE1BmmE,GAAAA,GAAAC,cAACglE,GAAAA,EAAa,CAACvsI,OAAQmB,OAGV,iBAAfimJ,GACFvC,EAAiBv3I,KAAI,CAAC0D,EAAOlN,IAC3BwjE,GAAAA,GAAAC,cAACkkF,GAAY,CACXzqH,IAAKhwB,EAAM8B,KACX9B,MAAOA,EACPokF,YAAa8pB,EACb/jB,oBAAqBiwD,GACrB5hF,QAASgiF,GACTp2I,MAAOtR,MAGM,oBAAfsjJ,GACF9/E,GAAAA,GAAAC,cAAA,OAAKvmC,IAAKomH,IACNtwI,GAA0BxJ,KAAI,CAACgD,EAAWxM,IAC1CwjE,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAK1wB,EACL4rI,cAAep4I,EACf6oB,WAAWq8C,EAAAA,GAAAA,GACT,qCACCnpD,GAAwB/b,IAAM0hJ,EAAiB/kJ,OAAS,GAAK,UAGhE+oE,QAASA,IAAMltD,EAAS,CAAEnb,GAAImP,KAE9Bg3D,GAAAA,GAAAC,cAACglE,GAAAA,EAAa,CAACyhB,WAAW,QAAQhuJ,OAAQsQ,EAAWu7H,cAAY,QAGnEhsH,GACAynD,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KAEEhC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CAACh9C,UAAU,qBAAqBqgC,KAAK,UAAUwc,QAASA,IAAM1nD,MAClEinC,GAAK,iBACNue,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,4BAEf26C,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,iBACZihE,EAAAA,GAAAA,GAAW7kC,GAAK,kBAAmB08F,GAAuB,CAAC,uBAKnD,UAAf2B,GACDzxG,GAAOroC,KAAKijC,GACX+2B,GAAAA,GAAAC,cAAC0mF,GAAQ,CAACrzI,OAAQ5a,EAAQghC,IAAM,GAAEuP,EAAKz9B,QAAQy9B,EAAK4rB,UAAU5rB,EAAKA,KAAKpvC,KAAMovC,KAAMA,WAEpFpsC,EAGV,CAkCWmiF,IAEHhf,GAAAA,GAAAC,cAACgI,GAAAA,EAAO,CAACG,UAAWq3E,GAAoBt3E,KAAMA,GAAME,YAAajC,MAIpE22E,GACC/8E,GAAAA,GAAAC,cAAC84E,GAAAA,EAAoB,CACnB1iF,QAAwB,YAAfypF,GACT59E,QAAS8hF,GACTzhF,UAAW9gB,GAAK,0BAEhBue,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,+BAGhB23H,GACCh9E,GAAAA,GAAAC,cAAC2mF,GAAAA,EAAiB,CAChBj5G,OAAQl+B,QAAQuvI,IAChB1rI,OAAQ0rI,GACRn8E,QAAS0hF,KAGE,KE9pBfsC,GAA4B,IAAMvlG,EAAAA,IAAoB,IAEvDwlG,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,yBAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,mDAAbA,EAAAA,EAAa,4BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,gCAAbA,CAAa,EAAbA,IAAa,IAyClB,MAgcA,IAAe/jF,EAAAA,EAAAA,KACb,CAACzrE,EAAM0N,KAEW,IAFT,OACPtM,EAAM,UAAEquJ,EAAS,aAAEC,EAAY,SAAE1nJ,GAClC0F,EACC,MAAMI,GAAW5N,EAAAA,EAAAA,KAAeF,IACxB4qB,MAAO+kI,IAAuBC,EAAAA,EAAAA,KAA2B5vJ,IAAW,CAAC,GACrE4qB,MAAOilI,IAAmBC,EAAAA,EAAAA,KAAuB9vJ,IAAW,CAAC,EAC/DoD,EAAOhC,GAASuG,EAAAA,EAAAA,KAAW3H,EAAQoB,QAAUmE,EAC7CsO,EAAO47I,GAAaruJ,IAAUyP,EAAAA,EAAAA,KAASzP,IAAU0S,EAAAA,EAAAA,KAAW9T,EAAQoB,QAAUmE,EAC9EsiF,EAAYzkF,IAAQia,EAAAA,EAAAA,KAAcja,GAClCs1H,EAAgBt1H,GAAMsG,SAAWyO,QAAQnQ,GAAYA,IAAaD,EAAAA,IAClE0B,EAAQivH,GAAgBnuH,EAAAA,EAAAA,KAAYvK,EAAQoB,EAAS4G,QAAazC,EAClEwqJ,EAAer3B,GAAiBjvH,IAASumJ,EAAAA,EAAAA,KAAkB5sJ,EAAMqG,GACjEkxH,EAAQ9mH,IAAQwL,EAAAA,EAAAA,KAAUxL,GAC1BozG,EAAkB7lH,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUmE,EAClE0qJ,EAAat1B,GAAS9mH,GAAMo8I,WAE5BhuD,EAAgBpuF,IAAQquF,EAAAA,EAAAA,KAAiBruF,GACzCq8I,EAAY/3I,SAASu3I,GAAgBD,GAAaruJ,IAAU+uJ,EAAAA,EAAAA,KAAgBnwJ,EAAQoB,IAEpFgvJ,EAAkBj4I,QAAQ/W,GAAU0M,EAASwoB,WAAWnlB,SAAS/P,IAAS+1B,eAC1Ek5H,GAAqB33B,GAAiBt3H,GACxCua,EAAAA,EAAAA,KAAmB3b,EAAQoB,IAASivJ,uBACpC9qJ,EACE6yB,EAAoBh3B,EACtB0M,EAASwoB,WAAWnlB,SAAS/P,IAASg2B,YAAYF,YAAS3xB,EAE/D,MAAO,CACL2qJ,YACAjuD,gBACAouD,oBACAxoE,YACA8yC,QACAjC,gBACAq3B,eACA/zI,OAAQnI,GAAMtR,GACdy9B,OAAQnsB,GAAMmsB,OACd2vH,qBACAE,iBACAO,kBACAh4H,oBACA6uF,kBACAl7C,4BAA6Bj+D,EAASi+D,4BACtCkkF,aACD,GA5CL,EAhc+CluJ,IAqCzC,IArC0C,OAC9CX,EAAM,SACN4G,EAAQ,aACRsoJ,EAAY,UACZb,EAAS,aACTC,EAAY,aACZa,EAAY,oBACZC,EAAmB,kBACnBC,EAAiB,yBACjBC,EAAwB,kBACxBC,EAAiB,gBACjBC,EAAe,YACfC,EAAW,cACXC,EAAa,gBACbC,EAAe,eACfC,EAAc,oBACdC,EAAmB,aACnBlK,EAAY,iBACZmK,EAAgB,cAChBjvD,EAAa,OACbjmF,EAAM,OACNgkB,EAAM,UACNkwH,EAAS,UACTroE,EAAS,mBACT8nE,EAAkB,eAClBE,EAAc,gBACdO,EAAe,kBACfC,EAAiB,kBACjBj4H,EAAiB,4BACjB2zC,EAA2B,MAC3B4uD,EAAK,cACLjC,EAAa,aACbq3B,EAAY,gBACZ9oC,EAAe,QACf17C,EAAO,eACPqc,EAAc,WACdqoE,GACDluJ,EACC,MAAM,sBACJovJ,EAAqB,kBACrBC,EAAiB,iBACjBC,EAAgB,qBAChBtvD,EAAoB,iBACpBuvD,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACE7pI,EAAAA,EAAAA,OAEG8pI,EAAoBC,EAAkBC,IAAqBz7E,EAAAA,GAAAA,MAC5D,SAAEO,IAAaC,EAAAA,EAAAA,MAEfk7E,GAAmBC,EAAAA,GAAAA,MAEnBC,IAAwBhjF,EAAAA,GAAAA,IAAgB,KAC5CwiF,EAAyB,CAAEnwJ,OAAQA,EAAS81B,OAAQkB,IACpDwvD,EAAeoqE,EAAAA,GAAkBC,WAAW,IAGxCC,IAA0BnjF,EAAAA,GAAAA,IAAgB,KAC9CyiF,EAAyB,CAAEpwJ,OAAQA,EAASywB,KAAMuG,EAAmBvG,OACrE+1D,EAAeoqE,EAAAA,GAAkBG,SACjCP,GAAmB,IAGfQ,IAAiCrjF,EAAAA,GAAAA,IAAiBnkD,IACtDumI,EAAsB,CAAEvmI,SAAQ,IAG5BynI,IAA6BtjF,EAAAA,GAAAA,IAAiBnkD,IAClDwmI,EAAkB,CAAExmI,SAAQ,IAGxBw3E,IAAmBrzB,EAAAA,GAAAA,IAAgB,KACvCgzB,EAAqB,CAAE/lF,UAAS,IAG5Bs2I,IAAkBvjF,EAAAA,GAAAA,IAAgB,KACjC3tE,GAAW4G,GAChBypJ,EAAmB,CAAErwJ,SAAQ+J,QAASF,OAAOjD,IAAY,IAGrDuqJ,IAAyBxjF,EAAAA,GAAAA,IAAgB,KAC7CsiF,GAAkB,IAGdmB,IAAyBzjF,EAAAA,GAAAA,IAAgB,KAC7CuiF,GAAkB,IAGd/mF,IAAcwE,EAAAA,GAAAA,IAAgB,KAClCxD,GAAS07C,EAAgB,KAGpBxuC,GAAsBg6E,KAA2BxoF,EAAAA,GAAAA,KAAUqmF,IAElE/mF,EAAAA,GAAAA,KAAU,KACRh+D,YAAW,KACTknJ,IAAyBnC,EAAa,GACrCf,GAA0B,GAC5B,CAACe,IAEJ,MAAMnmG,IAAO+f,EAAAA,GAAAA,KACPwoF,GAAajD,EACjB1I,IAAiB1E,EAAAA,GAAagJ,QAC5BmE,GAAcnE,QACZtE,IAAiB1E,EAAAA,GAAaI,YAChC+M,GAAc/M,YACZsE,IAAiB1E,EAAAA,GAAaC,WAChCkN,GAAclN,WACZyE,IAAiB1E,EAAAA,GAAaE,UAChCiN,GAAcjN,UACZwE,IAAiB1E,EAAAA,GAAaG,aAChCgN,GAAchN,cACX,EACHsO,EACFtB,GAAcxN,YACZ4O,EACFpB,GAAcmD,cACZ9B,EACFrB,GAAc3N,UACZoP,EACFzB,GAAcoD,cACZlD,EACFwB,IAAqBc,EAAAA,GAAkBa,QACrCrD,GAAcsD,cACZ5B,IAAqBc,EAAAA,GAAkBe,gBACzCvD,GAAcwD,sBACZ9B,IAAqBc,EAAAA,GAAkBiB,WACzCzD,GAAc0D,iBACZhC,IAAqBc,EAAAA,GAAkBmB,mBACzC3D,GAAc4D,yBACZlC,IAAqBc,EAAAA,GAAkBqB,iBACzC7D,GAAc8D,uBACZpC,IAAqBc,EAAAA,GAAkBuB,mBACzC/D,GAAcgE,yBACZtC,IAAqBc,EAAAA,GAAkByB,kBACzCjE,GAAckE,wBACZxC,IAAqBc,EAAAA,GAAkB2B,oBACzCnE,GAAcoE,0BACZ1C,IAAqBc,EAAAA,GAAkB6B,2BACzCrE,GAAcsE,iCACZ5C,IAAqBc,EAAAA,GAAkB+B,qBACzCvE,GAAcwE,2BACZ9C,IAAqBc,EAAAA,GAAkBiC,mBACzCzE,GAAc0E,yBACZhD,IAAqBc,EAAAA,GAAkBmC,gBACzC3E,GAAc4E,uBACZlD,IAAqBc,EAAAA,GAAkBqC,mBACzC7E,GAAc8E,0BACZpD,IAAqBc,EAAAA,GAAkBuC,aACzC/E,GAAcgF,mBACZtD,IAAqBc,EAAAA,GAAkBG,QACzC3C,GAAciF,cACZvD,IAAqBc,EAAAA,GAAkBC,WACzCzC,GAAckF,iBACZxD,IAAqBc,EAAAA,GAAkB2C,eACzCnF,GAAcoF,qBACZ1D,IAAqBc,EAAAA,GAAkBjkC,UACzCyhC,GAAcqF,gBACZ3D,IAAqBc,EAAAA,GAAkB8C,WACzCtF,GAAcuF,iBACZ7D,IAAqBc,EAAAA,GAAkBgD,aACzCxF,GAAcyF,wBACZ1vJ,EACFgrJ,EACFf,GAAc0F,WACZ1E,EACFhB,GAAc2F,kBACZ1E,EACFjB,GAAc4F,gBACZzE,EACFnB,GAAc6F,gBACZtE,EACFvB,GAAc9N,YACZsP,EACFxB,GAAc7N,UACZ+O,EACFlB,GAAc8F,4BACZ/vJ,EAEEgwJ,IAAsB7zB,EAAAA,GAAAA,GAAiBgxB,IAAY,KAAU,EA+N7D8C,GAAe9+E,IAClBuwC,IACCyrC,KAAelD,GAAc/M,aAC1BiQ,KAAelD,GAAclN,YAC7BoQ,KAAelD,GAAcjN,WAC7BmQ,KAAelD,GAAcoD,eAC7BF,KAAelD,GAAc2F,mBAC7BzC,KAAelD,GAAc4F,iBAC7B1F,GAID+F,IAAkBrrF,EAAAA,GAAAA,GACtB,sBACAorF,IAAgB,cACf/8E,IAAwB1M,IAAgC,iBAIrD0O,IAAYxN,EAAAA,GAAAA,IAAuB,MAGzC,OAFAyN,EAAAA,GAAAA,GAAgBD,IAGd/R,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,cAAcm/C,IAAKuN,IAChC/R,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACLh9C,UAAU,eACV5Y,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACLwc,QAASL,GACTU,UAA0B9gB,GAAfqrG,GAAoB,cAAsB,iBAErD9sF,GAAAA,GAAAC,cAAA,OAAK56C,UAAW0nI,MAElB/sF,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTxiC,KAAOgqC,IAAwB1M,EAA+B,OAAS,YACvEmF,UAAWqkF,IA7OjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAK/F,GAAcxN,YACjB,OAAOt5E,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,gBACrC,KAAKqlG,GAAcoD,cACjB,OAAOlqF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK09B,EAAY,wBAA0B,oBAC3E,KAAK2nE,GAAcsD,cACjB,OAAOpqF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,SACrC,KAAKqlG,GAAcwD,sBACjB,OAAOtqF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK09B,EAAY,oBAAsB,oBACvE,KAAK2nE,GAAc0D,iBACjB,OAAOxqF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,eACrC,KAAKqlG,GAAcgE,yBACjB,OAAO9qF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,0BACrC,KAAKqlG,GAAc0E,yBACjB,OAAOxrF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,wBACrC,KAAKqlG,GAAc4E,uBACjB,OAAO1rF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,oBACrC,KAAKqlG,GAAc8E,0BACjB,OAAO5rF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,eACrC,KAAKqlG,GAAc8D,uBACjB,OAAO5qF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,uBACrC,KAAKqlG,GAAckE,wBACjB,OAAOhrF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,iBACrC,KAAKqlG,GAAcoE,0BACjB,OAAOlrF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,wBACrC,KAAKqlG,GAAcsE,iCACjB,OAAOprF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,wBACrC,KAAKqlG,GAAcwE,2BACjB,OAAOtrF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,qBACrC,KAAKqlG,GAAciF,cACjB,OAAO/rF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,2BACrC,KAAKqlG,GAAckF,iBACjB,OAAOhsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAA2Bo8B,GAAlBimG,EAAuB,WAAmB,YAC1E,KAAKZ,GAAcuF,iBACjB,OACErsF,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,eAC5Bue,GAAAA,GAAAC,cAAA,WAAS56C,UAAU,SAChBqK,IAAsBA,EAAkBd,WACvCoxC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,QAChBygB,QAASmnF,IAETrpF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,oBAGhBqK,GAAqBA,EAAkBd,WACtCoxC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,SACN5c,KAAK,UACL6c,UAAW9gB,GAAK,UAChBygB,QAAS+mF,GAETjpF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,sBAEf26C,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZjwD,OAAQq7G,EACRnmF,QAASqmF,EACT5yI,MAAOmrC,GAAK,cACZ77C,KAAM67C,GAAK,kBACX+lF,sBAAoB,EACpBnG,aAAc5/E,GAAK,UACnBq8C,eAAgB0rD,QAO9B,KAAK1C,GAAcyF,mBACjB,OAAOvsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAAqBo8B,GAAZ09B,EAAiB,oBAA4B,mBAC7E,KAAK2nE,GAAcoF,qBACjB,OAAOlsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,oCACrC,KAAKqlG,GAAcmD,cACjB,OACEjqF,GAAAA,GAAAC,cAAC8S,GAAAA,EAAW,CACVh1C,MAAOkpH,EACP5zE,YAAa5xB,GAAK,sBAClBurG,iBAAe,EACfz5E,SAAUm2E,KAGhB,KAAK5C,GAAc3N,UACjB,OACEn5E,GAAAA,GAAAC,cAAC8S,GAAAA,EAAW,CACVh1C,MAAOopH,EACP9zE,YAAa5xB,GAAK,mBAClBurG,iBAAe,EACfz5E,SAAUo2E,KAGhB,KAAK7C,GAAc0F,WACjB,OAAOxsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK09B,EAAY,qBAAuB,qBACxE,KAAK2nE,GAAc2F,kBACjB,OAAOzsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,uBACrC,KAAKqlG,GAAc4F,gBACjB,OAAO1sF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,qBACrC,KAAKqlG,GAAc6F,gBACjB,OAAO3sF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,WACrC,KAAKqlG,GAAc8F,uBACjB,OAAO5sF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,2BACrC,KAAKqlG,GAAc/M,YACjB,OAAO/5E,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,gBACrC,KAAKqlG,GAAc4D,yBACjB,OAAO1qF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,uBACrC,KAAKqlG,GAAclN,WACnB,KAAKkN,GAAcgF,mBACjB,OAAO9rF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,iBACrC,KAAKqlG,GAAcjN,UACjB,OAAO75E,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAKnqB,EAAS,qBAAuB,yBACrE,KAAKwvH,GAAchN,aACjB,OACE95E,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,UACb26C,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,qBAC5Bue,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,YAAYo8B,GAAK,QAAS0nG,EAAiB8D,EAAAA,QAGhE,KAAKnG,GAAcqF,gBACjB,OAAOnsF,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,cACrC,KAAKqlG,GAAc9N,YACjB,OAAOh5E,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,aACrC,KAAKqlG,GAAc7N,UACjB,OAAOj5E,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SAASo8B,GAAK,cACrC,QACE,OACEue,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,MAAI56C,UAAU,SA1Jbo8B,GADL88D,EACU,gBAGVyR,EACU,gBAGV7wC,EACU,oBAGV7rE,EACU2+G,EAAQ,qBAAuB,sBAGjC,oBA8IJjyD,GAAAA,GAAAC,cAAA,WAAS56C,UAAU,SAChBk0E,GACCv5B,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,cAChBygB,QAASw3B,IAET15B,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,qBAAqB,oBAGrCmiI,IAAcx3B,GACbhwD,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,QAChBygB,QAAS2nF,IAET7pF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,oBAGhBkiI,GACCvnF,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,QAChBygB,QAAS2nF,IAET7pF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,UAGdshH,GACCrnF,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,aAChBygB,QAAS0nF,IAET5pF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,oBAGhBsiI,GACC3nF,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL51D,OAAK,EACL61D,MAAM,cACN5c,KAAK,UACL6c,UAAW9gB,GAAK,cAChBygB,QAAS4nF,IAET9pF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,uBAO7B,CAwCO6nI,IAEC,I,oDCzjBV,UAAgB,KAAO,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,KAAO,WAAW,gBAAkB,WAAW,OAAS,WAAW,KAAO,WAAW,MAAQ,WAAW,SAAW,WAAW,cAAgB,WAAW,yBAA2B,WAAW,qBAAuB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,QAAU,WAAW,aAAe,WAAW,eAAiB,WAAW,aAAe,Y,oDCmDrkB,MAAMC,GAA+C,CACnD,EAAGC,GACH,EAAGC,GACH,GAAIC,IAGAC,GAAoE,CACxEC,cAAc,EACdC,WAAY,OACZC,YAAa,GAGTC,GAA4C,CAChDH,cAAc,EACdI,SAAU,0BACVH,WAAY,OACZI,qBAAqB,GAqWvB,IAAeptF,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MACMy3C,GADWv3C,EAAAA,EAAAA,KAAeF,GACCy3C,gBAC3B++G,GAAsBC,EAAAA,EAAAA,IAAuCz2J,GAC7DoB,EAASq2C,GAAmBA,EAAgBr2C,OAC5CgC,EAAOhC,GAASuG,EAAAA,EAAAA,KAAW3H,EAAQoB,QAAUmE,EAC7CsiF,EAAYzkF,IAAQia,EAAAA,EAAAA,KAAcja,GAClCszJ,EAA2B12J,EAAOwkB,WAAWkyI,yBAEnD,MAAO,CACLj/G,kBACA++G,sBACAp1J,OAAQA,EACRs1J,2BACA7uE,YACD,GAhBepc,EAlWI1pE,IAMN,IANO,gBACvB01C,EAAe,oBACf++G,EAAmB,OACnBp1J,EAAM,yBACNs1J,EAAwB,UACxB7uE,GACW9lF,EACX,MAAM,SACJ2b,EAAQ,iBAAEi5I,EAAgB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBAAE16I,IACnEyL,EAAAA,EAAAA,MACEuiC,GAAO+f,EAAAA,GAAAA,KAEP8C,GAAgBC,EAAAA,GAAAA,IAAuB,MAEvC2uC,EAAWnkE,GAAiBH,YAC5B7F,EAASmqE,EAAWnkE,EAAgBH,iBAAc/xC,EAIlDuxJ,IAFkBr/G,GAAmBA,GAAiBD,QAAQ/hC,QAC9DgiC,GAAiBO,cAAcviC,QACagiC,GAAiBO,cAC9DP,GAAiBO,cAAcF,MAAMj2C,OAAS,GAE7C,aACJk1J,EAAY,aACZC,EAAY,OACZx/G,EAAM,cACNy/G,EAAa,gBACbC,IACEzsF,EAAAA,GAAAA,KAAQ,IACLh5B,GAUE0lH,EAAAA,GAAAA,GAAqB1lH,GATnB,CACLslH,aAAc,EACdC,cAAc,EACdx/G,OAAQ,EACRy/G,cAAe,EACfC,gBAAiB,EACjBE,iBAAkB,KAIrB,CAAC3lH,IAEE4lH,GAAgB5sF,EAAAA,GAAAA,KAAQ,KAC5B,GAAKh5B,EAEL,MAAO,CACLwH,MAAO89G,EACPv/G,SACA8/G,mBAAoB7lH,EAAO6lH,mBAC3BJ,kBACAE,iBAAkB3lH,EAAO2lH,iBAC1B,GACA,CAAC3lH,EAAQ+F,EAAQu/G,EAAcG,IAE5BrmF,GAAOpG,EAAAA,GAAAA,KAAQ,IACfqsF,EACK,CACL,CACEz0J,KAAM,YACN2c,MAAOmrC,EAAK,sBAAuB1S,GAAiBD,QAAQ/hC,MAAO,MAErE,CACEpT,KAAM,kBACN2c,MAAOmrC,EAAK,qBAAsB1S,GAAiBO,cAAcviC,MAAO,OAIvE,IACN,CAACqhJ,EAAuB3sG,EAAM1S,GAAiBD,QAAQ/hC,MAAOgiC,GAAiBO,cAAcviC,QAE1FoyI,GAAap9E,EAAAA,GAAAA,KAAQ,IAClBhzB,GAAiBD,QAAUC,EAAgBD,QAAQM,KAAKj2C,OAAS,EAAI,EAAI,GAC/E,CAAC41C,KAEGq5B,EAAWm3E,IAAgBh+E,EAAAA,GAAAA,IAAS49E,GAErCM,EAAqBr3E,EAAYD,EAAKhvE,OAAS,EAAIgvE,EAAKhvE,OAAS,EAAIivE,EAErEsxE,EAAUvxE,EAAKs3E,IAAqB9lJ,KAEpC6uE,EAAYL,EAAKp6D,WAAU/I,IAAA,IAAC,KAAErL,GAAMqL,EAAA,OAAKrL,IAAS+/I,CAAO,IAEzDmV,GAAsB9sF,EAAAA,GAAAA,KAAQ,KAClC,IAAKhzB,EAAiB,OAEtB,MAAMK,EAAOg/G,EAAqC,cAAZ1U,EAClC3qG,EAAgBD,OAASC,EAAgBO,aAAgBP,EAAgBD,OAC7E,IAAKM,GAAMriC,MAAO,OAElB,MAAM+hJ,EAAoB1/G,EAAKA,KAAK19B,QAAO,CAAC82F,EAAO53D,IAC1C43D,GAAS53D,EAAMm+G,YAAc,IACnC,GAGGC,EADa5/G,EAAKriC,MACS+hJ,EAEjC,OAAOE,EAAc,EAAIA,OAAcnyJ,CAAS,GAC/C,CAACuxJ,EAAuBr/G,EAAiB2qG,IAEtCuV,GAAkB5oF,EAAAA,GAAAA,IAAiB0oF,GACvC/uF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOia,UACrBv8B,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAO4sE,cAAe5sE,GAAO6sE,2BAC1DnvF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,QAAQ1gB,UAAWi9D,GAAO8sE,oBACrCpvF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO+sE,oBAAqBN,OAK5CO,GAAsBjpF,EAAAA,GAAAA,IAAiBz1B,IAC3C,GAAKA,EAAM2+G,gBAAmB3+G,EAAM/C,OAIpC,OACEmyB,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOia,UACrBv8B,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAO4sE,eACnCt+G,EAAM2+G,gBAAkBjtE,GAAOktE,qBAChCltE,GAAO6sE,yBACP7sE,GAAOmtE,sBAEPzvF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,OAAO1gB,UAAWi9D,GAAO8sE,oBACpCpvF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO+sE,oBAAqB5tG,EAAK7Q,EAAM2+G,eACnD,mBAAqB,kBAGvB,IAIJG,GAAqBrpF,EAAAA,GAAAA,IAAiB/yD,IACrCA,GAML0B,EAAS,CAAEnb,GAAIyZ,IACf46I,KANEz6I,EAAiB,CACfnb,QAASmpD,EAAK,oCAKI,IAGlBkuG,GAAkBtpF,EAAAA,GAAAA,IAAiBz1B,IAGvC,IAAIg/G,EAYJ,OAdiBngJ,QAAQmhC,GAAOxH,SAI9BwmH,EAAa,IACRrC,GACHj3I,MAAOmrC,EAAK,QAAS7Q,EAAMxH,SAI1BwH,EAAMt9B,SACTs8I,EAAajC,IAIb3tF,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACPlhI,UAAU,sBAEV68C,QAASA,IAAMwtF,EAAmB9+G,EAAMt9B,SAExC0sD,GAAAA,GAAAC,cAACokE,GAAAA,EAAe,CACdh/G,UAAWi9D,GAAOn3E,KAClBmI,OAAQs9B,EAAMt9B,OACds8I,WAAYA,EACZ7mH,OAAQ0Y,EAAK,iBAAiBy8C,EAAAA,GAAAA,GAAiBz8C,EAAsB,IAAhB7Q,EAAMxX,UAC3Dy2H,eAAa,EACbtyD,eAAa,EACbuyD,QAAM,EACNC,YAAU,EACVC,YAAap/G,EAAMm+G,WAAaE,EAAgBr+G,EAAMm+G,iBAAclyJ,EACpEozJ,aAAcX,EAAoB1+G,KAE3B,IAITs/G,GAAsB7pF,EAAAA,GAAAA,IAAgB,KAC1C8nF,EAAkB,CAAEz1J,UAAS,IAGzBuhJ,GAAiB5zE,EAAAA,GAAAA,IAAiBrc,IACtCA,EAAE0V,iBACFuuF,EAAiB,CAAE9+G,QAAqB,oBAAZuqG,GAAgC,IAGxDyW,GAA+B9pF,EAAAA,GAAAA,IAAiBn4B,IACpDigH,EAAkB,CAAEz1J,SAAQw1C,mBAAkB,IAsBhD,OACE8xB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAOgf,KAAM,mBACxC4R,GAAYlzC,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,MACrBiyC,GAAYy7C,GACX3uF,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACrBpwF,GAAAA,GAAAC,cAACowF,GAAAA,EAAe,CACdC,SAAU7uG,EAAK,cAAe4sG,GAC9BkC,UAAWjC,EAAe7sG,EAAK,cAAe4sG,EAAgB,QAAKxxJ,EACnE+R,SAAU2/I,EACViC,mBAAmBC,EAAAA,GAAAA,IAAc3hH,GACjCsgH,kBAAkB,UAEpBpvF,GAAAA,GAAAC,cAACywF,GAAAA,EAAkB,CAACrrI,UAAWi9D,GAAOhqC,MAAOM,WAAY+1G,EAAeh1J,KAAK,WAE9Eg1J,EAAcD,kBACb1uF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACrBpwF,GAAAA,GAAAC,cAAA,MAAI56C,UAAWi9D,GAAOquE,cAAexuF,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAC5D4kD,EAAK,8BAEPktG,GAAeD,kBAAkB1oJ,KAAKkoC,IACrC,MAAM0iH,EAAkB,UAAW1iH,EAEnC,OACE8xB,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAKwU,EAAgBr0C,GACrBwrB,UAAU,sBAEV68C,QAASA,IAAMiuF,EAA6BjiH,IAE5C8xB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAOv5C,OAAQ,qBAC5Ci3B,GAAAA,GAAAC,cAAA,WACG2wF,EAEG5wF,GAAAA,GAAAC,cAAA,OACE2lB,IAAKirE,GACLxrI,UAAWi9D,GAAOwuE,aAClBjrE,IAAKpkC,EAAK,cAGZue,GAAAA,GAAAC,cAAA,OACE2lB,IAAKunE,GAAkBj/G,EAAgB6tD,QACvC12E,UAAWi9D,GAAOwuE,aAClBjrE,IAAKpkC,EAAK,eAIlBue,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOrxC,MACrB+uB,GAAAA,GAAAC,cAAA,UACG2wF,EACGnvG,EAAK,+BAAgCvT,EAAgB9E,OACrDqY,EAAK,qCAAsCvT,EAAgBquD,WAEjEv8B,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,GAAOyuE,OACnBH,EAAkBnvG,EAAK,8BAA+BvT,EAAgBquD,UAClE96C,EAAK,wBAAyBvT,EAAgB6tD,UAItD/7B,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOia,UACrBv8B,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAO4sE,cACpC5sE,GAAO6sE,yBACP7sE,GAAOmtE,sBAEPzvF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,QAAQ1gB,UAAWi9D,GAAO8sE,oBACrCpvF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO+sE,mBAAoBltF,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAClE+zJ,EAAkB1iH,EAAgBY,OAC/BZ,EAAgBquD,UAAYyxD,GAA4BgD,EAAAA,SAK3D,IAGfhxF,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,kBAAkBqU,IAAI,cAAc+nB,EAAK,gCAG1Due,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACpBhC,EACCpuF,GAAAA,GAAAC,cAAA,OACE56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAO2uE,aAAc3uE,GAAOtlF,UAEtDgjE,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACT/D,IAAKF,EACLv+B,KAAM0b,EAAK2gB,MAAQ,oBAAsB,iBACzCoG,UAAWA,EACXC,YAAaN,EAAKhvE,OAClBusJ,qBAAmB,GA3GnC,WACE,IAAIwL,EAOJ,GANgB,cAAZxX,EACFwX,EAAeniH,GAAiBD,QAAQM,KACnB,oBAAZsqG,IACTwX,EAAeniH,GAAiBO,cAAcF,OAG5C8hH,GAAiBA,GAAc/3J,OAInC,OACE6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACpBc,GAAclrJ,KAAK4qC,GAAU++G,EAAgB/+G,KAGpD,CA4FiBouC,IAEHhf,GAAAA,GAAAC,cAACgI,GAAAA,EAAO,CAACG,UAAWq3E,EAAoBt3E,KAAMA,EAAME,YAAak3E,KAGnEv/E,GAAAA,GAAAC,cAAAD,GAAAA,GAAAgC,SAAA,KACEhC,GAAAA,GAAAC,cAAA,MAAI56C,UAAWi9D,GAAOquE,cAAexuF,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GAC5D4kD,EAAK,sBAAuB1S,GAAiBD,QAAQ/hC,SAEtDgiC,GAAiBD,QAAQM,MAAMj2C,QAC/B6mE,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO6uE,WAAY1vG,EAAK09B,EAAY,iBAAmB,wBAGxEpwC,GAAiBD,QAAQM,MAAMppC,KAAK4qC,GAAU++G,EAAgB/+G,MAGlEnhC,QAAQo/I,IACP7uF,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAI,YACJrU,UAAWi9D,GAAO8uE,SAClBx5D,SAAU7oD,GAAiBS,kBAC3B0yB,QAAS+3E,GAERlrG,GAAiBS,kBAChBwwB,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CAACvkD,UAAWi9D,GAAO+uE,kBAE3BrxF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,OAAO1gB,UAAWi9D,GAAOgvE,OAErC7vG,EAAK,YAAaotG,EAAqB,OAI9C7uF,GAAAA,GAAAC,cAACsxF,GAAAA,EAAS,CAAClsI,UAAWi9D,GAAO8tE,QAASjnI,KAAM4f,EAAQyoH,SAAUC,WAAS,EAACn7I,MAAOmrC,EAAK,qBACnFqsG,GACC9tF,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACrBpwF,GAAAA,GAAAC,cAACsmF,GAAAA,EAAQ,CACP7sH,IAAI,YACJy6B,KAAK,OACL+N,QAASguF,EACT7qI,UAAWi9D,GAAOovE,gBAEjBjwG,EAAK,8BAERue,GAAAA,GAAAC,cAAA,KAAG56C,UAAU,kBAAkBqU,IAAI,cAAc+nB,EAC/C09B,EAAY,wBAA0B,iCAO5C,KCnZV,GAP8Cxf,IAC5C,MAAM8sF,GAAoB5sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAGzD,OAAOmsF,EAAoBzsF,GAAAA,GAAAC,cAACwsF,EAAsB9sF,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECE3E,GARmDtB,IACjD,MAAM,OAAEhyB,GAAWgyB,EACbgyF,GAAyB9xF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,0BAA2B3yB,GAGzF,OAAOgkH,EAAyB3xF,GAAAA,GAAAC,cAAC0xF,EAA2BhyF,QAAY9iE,CAAS,E,gBCLnF,MAQA,GAR0D8iE,IACxD,MAAM,OAAEhyB,GAAWgyB,EACbiyF,GAAgC/xF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iCAAkC3yB,GAGvG,OAAOikH,EAAgC5xF,GAAAA,GAAAC,cAAC2xF,EAAkCjyF,QAAY9iE,CAAS,ECbjG,IAAgB,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,QAAU,WAAW,QAAU,WAAW,gBAAkB,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,eAAiB,WAAW,YAAc,WAAW,WAAa,YC6B5S,IAAIg1J,GACAC,GAWJ,MAAMC,GAA6B,CACjCC,cAAe,kCACfC,aAAc,kCAEVC,GAAsB1yJ,OAAOsG,KAAKisJ,IA4OxC,IAAetxF,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACC,MAAM8N,GAAW5N,EAAAA,EAAAA,KAAeF,IAE9B64B,UACEmU,OAAO,YACLgC,IAGJ22B,eACEz2B,KAAM2rH,IAEN76J,EACE0uB,EAAY1uB,EAAO4lE,kBAAkBl3C,UACrC/b,EAAQ3S,EAAO4lE,kBAAkBjzD,MACjCslC,EAAyBnqC,EAASmqC,uBAClC72C,EAAS62C,GAA0BA,EAAuB72C,OAC1DgC,EAAOhC,GAASuG,EAAAA,EAAAA,KAAW3H,EAAQoB,QAAUmE,EAC7Cu7C,GAAOnlC,EAAAA,EAAAA,KAAmB3b,EAAQoB,IAAU2/C,eAC5C25E,EAAYviH,QAAQ/U,GAAMs3H,WAE1Bp5E,EAAaxzC,EAASwzC,WAAWw5G,aAEjCC,EAAoC/6J,EAAOwkB,WAAWu2I,kCAE5D,MAAO,CACL35J,OAAQA,EACR0/C,OACAQ,aACAo5E,YACAqgC,oCACA/rH,cACA6rH,eACAloJ,QACA+b,YACD,GAnCe+8C,EA9NW1pE,IAUb,IAVc,OAC9BX,EAAM,KACN0/C,EAAI,WACJQ,EAAU,UACVo5E,EAAS,kCACTqgC,EAAiC,YACjC/rH,EAAW,aACX6rH,EAAY,MACZloJ,EAAK,UACL+b,GACW3sB,EACX,MAAM,kCAAEi5J,EAAiC,iBAAEx6E,IAAqB54D,EAAAA,EAAAA,MAC1DurD,GAAUjJ,EAAAA,GAAAA,KACV/f,GAAOipB,EAAAA,GAAAA,KAGP2Z,GAAe9f,EAAAA,GAAAA,IAAuB,OACrConD,EAASkjB,IAActtE,EAAAA,GAAAA,KAAS,GACjCgxF,GAAehuF,EAAAA,GAAAA,IAAiB,IAChCm+B,GAAcC,EAAAA,GAAAA,MACb6vD,EAA8BC,EAA4BC,IAA+BjlF,EAAAA,GAAAA,IAAQ,IAEtGklF,EAAqCC,EAAmCC,IACtEplF,EAAAA,GAAAA,IAAQ,IACLqlF,EAA6BC,EAA+BC,IAAkCvlF,EAAAA,GAAAA,KAC/FwlF,EAAmBr6G,GAAYs6G,UAAUD,iBACzCE,EAAsBv6G,GAAYs6G,UAAUC,oBAC5CC,EAAcphC,GAAaqgC,GAAqC5iJ,QAAQwjJ,IACzEE,GAELtyF,EAAAA,GAAAA,KAAU,KACJnoE,IACF45J,EAAkC,CAAE/4J,OAAQb,IAC5Co/E,IACF,GACC,CAACp/E,EAAQ45J,KAEZzxF,EAAAA,GAAAA,KAAU,KACR,iBAjEJ/1D,iBAME,OALK+mJ,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CA2DYwB,GAED1nC,GAKDtnC,EAAa9+D,SACftZ,MAAMiC,KAAKm2E,EAAa9+D,QAAQozE,UAAUl/F,SAAS65J,IACjDA,EAAM/0B,UAAY,GAClB+0B,EAAMvjE,UAAUnuF,IAAI0gF,GAAO4oB,OAAO,IAItCqnD,EAAahtI,QAAU,GAElBqzB,GAAeyrC,EAAa9+D,UAIjC2sI,GAAoBz4J,SAAQ,CAACssC,EAAMj4B,KACjC,MAAMylJ,EAAQ36G,EAAW7S,GACQ,iBAAVwtH,GAERhB,EAAahtI,QAAQ3pB,SAASmqC,KAIxCwtH,GAMLzB,GAAY0B,OAAOnvE,EAAa9+D,QAASozE,SAAS7qF,GAAQ,CACxDwI,MAAOm0D,EAASsnF,GAAsDhsH,OACnEwtH,IAGLhB,EAAahtI,QAAQpiB,KAAK4iC,GAE1Bs+C,EAAa9+D,QAASozE,SAAS7qF,GAAOiiF,UAAUqG,OAAO9T,GAAO4oB,SAZ5DqnD,EAAahtI,QAAQpiB,KAAK4iC,GAYyC,IAGvE28D,MAzCEmsC,GAAW,EA0Cd,EA9CD,EA8CI,GACH,CAACljB,EAAS/yE,EAAY6xB,EAAS/xE,EAAQ0/C,EAAMsqD,IAyBhD,MAAM+wD,GAAU1xF,EAAAA,GAAAA,KAAQ,KACtB,MAAM2xF,EAAWjpF,EAAQ,aACzB,OAAOhpB,EACL,mBACA,CACEt4B,KACE62C,GAAAA,GAAAC,cAACkpE,GAAAA,EAAI,CAACC,WAAS,EAAClnE,QAASuwF,GACtBiB,EACD1zF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,WAIjB,CACE4tH,WAAW,GAEd,GACA,CAAClyG,EAAMgpB,IAEJmpF,GAAc7xF,EAAAA,GAAAA,KAAQ,KAC1B,MAAM2xF,EAAWjpF,EAAQ,aACzB,OAAOhpB,EACL,8BACA,CACEt4B,KACE62C,GAAAA,GAAAC,cAAC4zF,GAAAA,EAAQ,CAACx4I,IAAKovD,EAAQ,gCAAiC7kE,KAAM8tJ,GAC3DA,EACD1zF,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAACtsD,KAAK,WAIjB,CACE4tH,WAAW,GAEd,GACA,CAAClyG,EAAMgpB,IAEJqpF,GAAkCztF,EAAAA,GAAAA,IAAgB,KAClD//B,EACFssH,IAEAG,GACF,IAGF,OAAKpnC,GAAY/yE,EAKfonB,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAOgf,KAAM,gBAAiBqqB,GAAWrpC,GAAOyxE,QAC7E/zF,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAO8tE,QAAS9tE,GAAOmxE,UAAWA,GAEjEzzF,GAAAA,GAAAC,cAACywF,GAAAA,EAAkB,CACjB93G,WAAYA,EACZo7G,WAAS,EACTr6J,KAAK,eACL2c,MAAOm0D,EAAQ,wBACfl0D,SACEypD,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO2xE,YAAaxpF,EAAQ,mCAI9C8nF,EAAahtI,QAAQpsB,QAAU6mE,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,MAEzCjB,GAAAA,GAAAC,cAAA,OAAKuE,IAAK6f,EAAch/D,UAAWi9D,GAAO8tE,SACvC8B,GAAoB94J,OAAOqW,SAASzJ,KAAKutJ,GACxCvzF,GAAAA,GAAAC,cAAA,OAAKvmC,IAAK65H,EAAOluI,WAAWq8C,EAAAA,GAAAA,GAAe4gB,GAAOixE,MAAOjxE,GAAO4oB,aAIpElrC,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO8tE,SACpB3lF,EAAQ,kCA9Ff,WACE,MAAOypF,EAAgBC,GAAkBlB,EAAmBA,EAAiBxqD,QAAQ,GAAGt2F,MAAM,KAAO,CAAC,IAC/FiiJ,EAAgBC,GAAkBpB,GACtCr6G,GAAY07G,SAAWrB,EAAmBr6G,EAAW07G,SAAS7rD,QAAQ,GAAGt2F,MAAM,KAAO,CAAC,GAE1F,OACE6tD,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOiyE,iBACrBv0F,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAOkyE,SACrBx0F,GAAAA,GAAAC,cAACoyB,GAAAA,EAAI,CAAChtE,UAAWi9D,GAAOmyE,YAAa1uH,KAAK,YAC1Ci6B,GAAAA,GAAAC,cAAA,KAAG56C,UAAWi9D,GAAOoyE,aAClBR,EACAC,EAAiBn0F,GAAAA,GAAAC,cAAA,QAAM56C,UAAWi9D,GAAOqyE,aAAa,IAAER,QAAyBt3J,IAGrF,IACDmjE,GAAAA,GAAAC,cAAA,QAAM56C,UAAWi9D,GAAOsyE,SAAS,MAC3BR,EACHC,EAAiBr0F,GAAAA,GAAAC,cAAA,QAAM56C,UAAWi9D,GAAO+xE,gBAAgB,IAAEA,QAAyBx3J,GAI7F,CA2EOg4J,GAED70F,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CACL3c,KAAK,UACL/rD,KAAK,SACLuoE,QAAS4xF,EACTl8D,UAAWw7D,GAEV3oF,EAAQ,yBAGXzK,GAAAA,GAAAC,cAAA,OAAK56C,UAAWi9D,GAAO2xE,YAAaL,IAGtC5zF,GAAAA,GAAAC,cAAC0xF,GAAsB,CACrBhkH,OAAQ6kH,EACR3vF,QAAS6vF,IAEX1yF,GAAAA,GAAAC,cAAC2xF,GAA6B,CAC5Bl5J,OAAQA,EACRi1C,OAAQglH,EACR9vF,QAASgwF,EACTV,aAAcA,EACdloJ,MAAOA,EACP+b,UAAWA,IAEbg6C,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZC,eAAa,EACblwD,OAAQmlH,EACRjwF,QAASmwF,EACTl1D,eAAgBk1D,EAChB3xB,aAAc5/E,EAAK,OAEnBue,GAAAA,GAAAC,cAAA,UAAIqmB,EAAAA,GAAAA,GAAW7b,EAAQ,oCAAqC,CAAC,UA7D1DzK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KA+DT,KCpQV,GAPuCtB,IACrC,MAAM6sF,GAAa3sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAOksF,EAAaxsF,GAAAA,GAAAC,cAACusF,EAAe7sF,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECG7D,GAP4CtB,IAC1C,MAAM+sF,GAAkB7sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAGvD,OAAOosF,EAAkB1sF,GAAAA,GAAAC,cAACysF,EAAoB/sF,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECCvE,GAP+B6zF,KAC7B,MAAM7K,GAAgBpqF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAGrD,OAAO2pF,EAAgBjqF,GAAAA,GAAAC,cAACgqF,EAAa,MAAMjqF,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECiDlD8zF,GAAqB,IAAMzzG,EAAAA,IAC3B0zG,GAAqBx1J,OAAOsG,KAAKmvJ,EAAAA,IAAoB97J,OAAS,EAC9D+7J,GAA2B11J,OAAOsG,KAAKwjJ,EAAAA,IAAmBnwJ,OAAS,EAEzE,SAASg8J,KACP,MAAMC,EAAc/3J,SAASiiE,cAAc,mCACvC81F,GACFA,EAAY16H,MAEhB,CAEA,MA8UA,IAAe+lC,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAMyP,KAA+B,IAA7B,SAAEinE,GAAUjnE,EACnB,MAAM,OAAErO,EAAM,SAAE4G,IAAagF,EAAAA,EAAAA,KAAyBhN,IAAW,CAAC,EAC5D+9J,GAAuBC,EAAAA,EAAAA,KAA2Bh+J,IAClD,WACJs2B,EAAU,4BAAEy1C,EAA2B,eAAE5kB,EAAc,uBAAEmR,IACvDp4D,EAAAA,EAAAA,KAAeF,GACbi+J,EAAuB78J,EAASk1B,EAAWnlB,SAAS/P,IAASgxD,gBAAa7sD,EAE1E0hH,EAAkB7lH,GAASD,EAAAA,EAAAA,KAAqBnB,EAAQoB,QAAUmE,EAClE8P,EAAgBjU,GAAS0K,EAAAA,EAAAA,KAAiB1K,EAAQ4G,EAAUhI,EAAOkC,oBAAiBqD,EAE1F,MAAO,CACLmtJ,YAAYwL,EAAAA,EAAAA,KAA4Bl+J,EAAQ02E,GAChDt1E,SACA4G,WACAm2J,eAAgBhmJ,QAAQ/W,GAAU28J,GAClChyF,8BACAkyF,uBACA92G,iBACAmR,yBACA2uD,kBACA5xG,gBACD,GAvBeo2D,EA9U2B1pE,IAYzC,IAZ0C,WAC9C2wJ,EAAU,OACVtxJ,EAAM,SACN4G,EAAQ,SACR0uE,EAAQ,eACRynF,EAAc,4BACdpyF,EAA2B,qBAC3BkyF,EAAoB,eACpB92G,EAAc,uBACdmR,EAAsB,gBACtB2uD,EAAe,cACf5xG,GACDtT,EACC,MAAM,eACJq8J,EAAc,iBACd/M,EAAgB,sBAChBF,EAAqB,kBACrBC,EAAiB,iBACjBiN,EAAgB,eAChBC,EAAc,6BACdjX,EAA4B,yBAC5BkK,EAAwB,iBACxBD,EAAgB,wBAChBiN,EAAuB,sBACvBC,EAAqB,oBACrBC,EAAmB,4BACnBC,EAA2B,oBAC3BC,EAAmB,sBACnBC,EAAqB,oBACrBC,EAAmB,qBACnBjI,EAAoB,0BACpBkI,EAAyB,4BACzBC,IACEn3I,EAAAA,EAAAA,OAEInnB,MAAOH,IAAgB2qI,EAAAA,GAAAA,MACxB8b,EAAciY,IAAmB/0F,EAAAA,GAAAA,IACtCg9C,IAAoB5xG,EAAgBgtI,EAAAA,GAAaG,aAAeH,EAAAA,GAAagJ,UAExE6F,EAAkB+N,IAAuBh1F,EAAAA,GAAAA,IAA4B+nF,EAAAA,GAAkBa,UACvFqM,EAAsBC,IAA2Bl1F,EAAAA,GAAAA,OACjDm1F,EAAyBC,IAA8Bp1F,EAAAA,GAAAA,MACxDq1F,EAAiBvY,IAAiB1E,EAAAA,GAAagJ,QAE/Ch1G,OAAwB9wC,IAAfmtJ,EACTjD,EAAYiD,IAAeiL,EAAAA,GAAmB4B,SAC9C7P,EAAegD,IAAeiL,EAAAA,GAAmB7b,WACjDyO,EAAemC,IAAeiL,EAAAA,GAAmBzI,WACjD1E,EAAsBkC,IAAeiL,EAAAA,GAAmBxI,kBACxD1E,EAAoBiC,IAAeiL,EAAAA,GAAmBvI,gBACtDzE,EAAoB+B,IAAeiL,EAAAA,GAAmBtI,gBACtD3E,EAA2BgC,IAAeiL,EAAAA,GAAmBrI,uBAC7D1E,EAAkB8B,IAAeiL,EAAAA,GAAmBhL,cACpD9B,EAAc6B,IAAeiL,EAAAA,GAAmB9b,UAChDiP,GAAgB4B,IAAeiL,EAAAA,GAAmB3b,YAClDiP,GAAsByB,IAAeiL,EAAAA,GAAmB/K,cACxD7B,GAAkB2B,IAAeiL,EAAAA,GAAmBjc,YACpDsP,GAAiB0B,IAAeiL,EAAAA,GAAmBhc,UACnD6d,GAAel/J,GAAeI,EAAAA,KAE7B+3E,GAAsBg6E,KAA2BxoF,EAAAA,GAAAA,KAAU5zB,GAE5Dk/G,IAAsB7zB,EAAAA,GAAAA,GAAiBgxB,GAAY,GAAOyL,KAAoB,EAE9E16H,IAAQsrC,EAAAA,GAAAA,IAAgB,WAA2B,IAA1B0wF,IAAcn6J,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,KAAAA,UAAA,GAC3C,OAAQotJ,GACN,KAAKiL,EAAAA,GAAmB/K,cACtBvL,EAA6B,CAAE7/F,uBAAwBm4F,EAAAA,GAAuB+f,SAC9E,MACF,KAAK/B,EAAAA,GAAmB4B,SACtB,GAAID,GAAkBG,IAAmBx4C,EAAiB,CACxD+3C,EAAgB3c,EAAAA,GAAagJ,SAC7B,KACF,CACA+S,EAAe,CAAEh1J,OAAO,GAAS,CAAEo/E,gBAAgB,IACnD,MACF,KAAKm1E,EAAAA,GAAmB7b,WACtB,OAAQoP,GACN,KAAKc,EAAAA,GAAkBa,QACrBxB,IACA,MACF,KAAKW,EAAAA,GAAkBe,gBACvB,KAAKf,EAAAA,GAAkBiB,WACvB,KAAKjB,EAAAA,GAAkBqB,iBACvB,KAAKrB,EAAAA,GAAkB2N,UACvB,KAAK3N,EAAAA,GAAkBuB,mBACvB,KAAKvB,EAAAA,GAAkBmB,mBACvB,KAAKnB,EAAAA,GAAkBuC,aACvB,KAAKvC,EAAAA,GAAkBG,QACvB,KAAKH,EAAAA,GAAkBjkC,UACvB,KAAKikC,EAAAA,GAAkBgD,aACvB,KAAKhD,EAAAA,GAAkB2B,oBACrBsL,EAAoBjN,EAAAA,GAAkBa,SACtC,MACF,KAAKb,EAAAA,GAAkB6B,2BACvB,KAAK7B,EAAAA,GAAkByB,kBACvB,KAAKzB,EAAAA,GAAkB+B,qBACrBkL,EAAoBjN,EAAAA,GAAkBqB,kBACtC8L,OAAwB55J,GACxB85J,OAA2B95J,GAC3B,MACF,KAAKysJ,EAAAA,GAAkBmC,gBACvB,KAAKnC,EAAAA,GAAkBqC,mBACvB,KAAKrC,EAAAA,GAAkB2C,eACvB,KAAK3C,EAAAA,GAAkBiC,mBACrBgL,EAAoBjN,EAAAA,GAAkBuB,oBACtC,MACF,KAAKvB,EAAAA,GAAkBC,WACvB,KAAKD,EAAAA,GAAkB8C,WACrBmK,EAAoBjN,EAAAA,GAAkBG,SACtCsM,EAAoB,CAAEr9J,OAAQA,EAAS81B,YAAQ3xB,IAC/CgsJ,EAAyB,CAAEnwJ,OAAQA,EAAS81B,YAAQ3xB,IAIxD,MAEF,KAAKo4J,EAAAA,GAAmBxI,kBACtBoJ,IACA,MACF,KAAKZ,EAAAA,GAAmBvI,gBACtBoJ,IACA,MACF,KAAKb,EAAAA,GAAmBzI,WACtB5D,IACA,MACF,KAAKqM,EAAAA,GAAmBtI,gBACtBuB,IACA,MACF,KAAK+G,EAAAA,GAAmBrI,uBACtByJ,IACA,MACF,KAAKpB,EAAAA,GAAmBhL,cACtBkL,KACA1M,EAAsB,CAAEvmI,WAAOrlB,IAC/B,MACF,KAAKo4J,EAAAA,GAAmB9b,UACtBgc,KACAzM,EAAkB,CAAExmI,WAAOrlB,IAC3B,MAEF,KAAKo4J,EAAAA,GAAmB3b,YACtBqc,IACA,MACF,KAAKV,EAAAA,GAAmBjc,YACtBkd,IACA,MACF,KAAKjB,EAAAA,GAAmBhc,UACtBkd,IAGN,IAEMe,IAAyB7wF,EAAAA,GAAAA,IAAgB,CAACmgF,EAAU2Q,KACxDV,EAAwBjQ,GACxBmQ,EAA2BQ,EAAW,IAGlCC,IAA6B/wF,EAAAA,GAAAA,IAAiBkxE,IAClDqe,EAAe,CAAEl9J,OAAQA,EAAS6+I,aAAY,IA2DhD,SAASv4D,GAAcx1B,GACrB,IAA6B,IAAzBqjG,GAIJ,OAAQA,IACN,KAAKoI,EAAAA,GAAmB/K,cACtB,OACElqF,GAAAA,GAAAC,cAACo3F,GAAc,CACb39H,IAAM,oBAAmBhhC,IACzBA,OAAQA,EACR8wD,SAAU7b,GAAU6b,EACpB0tF,WAAYkgB,GACZv0F,QAAS9nC,KAGf,KAAKk6H,EAAAA,GAAmB4B,SACtB,OACE72F,GAAAA,GAAAC,cAAC0iF,GAAO,CACNjpH,IAAM,WAAUhhC,KAAW4G,IAC3B5G,OAAQA,EACR4G,SAAUA,EACV++I,aAAcA,EACdrwE,SAAUA,EACVswE,qBAAsBgY,IAG5B,KAAKrB,EAAAA,GAAmB7b,WACtB,OACEp5E,GAAAA,GAAAC,cAACm5E,GAAU,CACT1/G,IAAM,cAAahhC,KAAW8vJ,IAC9B9vJ,OAAQA,EACRumF,cAAeupE,EACfkO,wBAAyBA,EACzBF,qBAAsBA,EACtBhtG,SAAU7b,GAAU6b,EACpB01B,eAAgBq3E,EAChBe,mBAAoBJ,GACpBr0F,QAAS9nC,KAIf,KAAKk6H,EAAAA,GAAmBzI,WACtB,OAAOxsF,GAAAA,GAAAC,cAACusF,GAAU,CAAC9zJ,OAAQA,IAC7B,KAAKu8J,EAAAA,GAAmBtI,gBACtB,OAAO3sF,GAAAA,GAAAC,cAAC0sF,GAAe,MACzB,KAAKsI,EAAAA,GAAmBrI,uBACtB,OAAO5sF,GAAAA,GAAAC,cAAC2sF,GAAsB,MAChC,KAAKqI,EAAAA,GAAmBxI,kBACtB,OAAOzsF,GAAAA,GAAAC,cAACwsF,GAAiB,CAAC/zJ,OAAQA,EAAS8wD,SAAU7b,GAAU6b,IACjE,KAAKyrG,EAAAA,GAAmBvI,gBACtB,OAAO1sF,GAAAA,GAAAC,cAACysF,GAAe,CAACh0J,OAAQA,EAAS8wD,SAAU7b,GAAU6b,IAC/D,KAAKyrG,EAAAA,GAAmBhL,cACtB,OAAOjqF,GAAAA,GAAAC,cAACgqF,GAAa,CAACpnF,QAAS9nC,GAAOyuB,SAAU7b,GAAU6b,IAC5D,KAAKyrG,EAAAA,GAAmB9b,UACtB,OAAOn5E,GAAAA,GAAAC,cAACk5E,GAAS,CAACt2E,QAAS9nC,GAAOyuB,SAAU7b,GAAU6b,IACxD,KAAKyrG,EAAAA,GAAmB3b,YACtB,OAAOt5E,GAAAA,GAAAC,cAACq5E,GAAW,CAACz2E,QAAS9nC,GAAOyuB,SAAU7b,GAAU6b,IAC1D,KAAKyrG,EAAAA,GAAmBjc,YACtB,OAAOh5E,GAAAA,GAAAC,cAAC+4E,GAAW,CAACn2E,QAAS9nC,GAAOyuB,SAAU7b,GAAU6b,IAC1D,KAAKyrG,EAAAA,GAAmBhc,UACtB,OAAOj5E,GAAAA,GAAAC,cAACg5E,GAAS,CAACp2E,QAAS9nC,GAAOyuB,SAAU7b,GAAU6b,IAI5D,CAEA,OA3HAqX,EAAAA,GAAAA,KAAU,IAAOlzB,GAAUj1C,GAASmuE,EAAAA,GAAAA,GAAsB9rC,SAASl+B,GAAY,CAAC8wC,EAAQ5S,GAAOriC,KAE/FmoE,EAAAA,GAAAA,KAAU,KACRh+D,YAAW,KACTknJ,IAAyBp8G,EAAO,GAC/BonH,GAAmB,GACrB,CAACpnH,KAEJkzB,EAAAA,GAAAA,KAAU,KACJ00F,IACFgB,EAAoBhB,GACpBS,OAA4Bn5J,GAC9B,GACC,CAAC04J,KAEJ10F,EAAAA,GAAAA,KAAU,KACHpiB,GAELw3G,GAAqB,GACpB,CAACx3G,KAEJoiB,EAAAA,GAAAA,KAAU,KACJjR,IACF70B,KACAq7H,EAA0B,CAAEr4H,WAAOlhC,IACrC,GACC,CAAC+yD,KAGJiR,EAAAA,GAAAA,KAAU,KACJlzB,GAAUmpH,IACZ/7H,IACF,GAEC,CAAC+7H,MAGJz2D,EAAAA,GAAAA,IAA4Br7F,IAAgC,IAA9BuyJ,EAAYC,GAAaxyJ,EACjDuyJ,IAAe7+J,GAAU8+J,IAAiBl4J,IAC5Cg3J,EACE/3C,IAAoB5xG,EAAgBgtI,EAAAA,GAAaG,aAAeH,EAAAA,GAAagJ,SAE/E4T,EAAoBjN,EAAAA,GAAkBa,SACxC,GACC,CAACzxJ,EAAQ4G,EAAUqN,EAAe4xG,KAErCz3C,EAAAA,GAAAA,GAAe,CACbtd,SAAUisG,IACRzL,IAAeiL,EAAAA,GAAmB4B,UAC/B7M,IAAeiL,EAAAA,GAAmB7b,YAClC4Q,IAAeiL,EAAAA,GAAmB/K,eAClCF,IAAeiL,EAAAA,GAAmBjc,aAClCgR,IAAeiL,EAAAA,GAAmBhc,WACvClyE,OAAQA,IAAMhsC,IAAM,KAuEpBilC,GAAAA,GAAAC,cAAA,OACEpmE,GAAG,sBACHwrB,UAAYowI,OAA+B54J,EAAd,aAE5Bi6J,IACC92F,GAAAA,GAAAC,cAAA,OAAK56C,UAAU,mBAAmB68C,QAASnnC,KAE7CilC,GAAAA,GAAAC,cAAA,OAAKpmE,GAAG,eACNmmE,GAAAA,GAAAC,cAACw3F,GAAW,CACV/+J,OAAQA,EACR4G,SAAUA,EACVsoJ,aAAcj6G,EACdo5G,UAAWA,EACXC,aAAcA,EACda,aAAcA,EACdI,kBAAmBA,EACnBD,yBAA0BA,EAC1BF,oBAAqBA,EACrBC,kBAAmBA,EACnBG,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,GACfC,gBAAiBA,GACjBC,eAAgBA,GAChBC,oBAAqBA,GACrBlK,aAAcA,EACdmK,iBAAkBA,EAClB3lF,QAAS9nC,GACTmkD,eAAgBq3E,IAElBv2F,GAAAA,GAAAC,cAACsI,GAAAA,GAAU,CACTxiC,KAAOgqC,IAAwB1M,EAA+B,OAAS,WACvEoF,YAAausF,GAAqBE,GAClC1sF,UAAWw+E,EAAegO,GAAqBxM,EAAmBqE,GAClEr2E,eAAa,EACbC,oBACGo2E,KAAwBoI,EAAAA,GAAmBxI,mBACvCI,KAAwBoI,EAAAA,GAAmBvI,gBAC5CuI,EAAAA,GAAmBzI,gBAAa3vJ,GAGrCmiF,KAGD,KClYV,IAAeve,EAAAA,GAAAA,KANwBpnE,IAAgB,IAAf,OAAEs0C,GAAQt0C,EAChD,MAAMq+J,GAAc73F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgB3yB,GAEnE,OAAO+pH,EAAc13F,GAAAA,GAAAC,cAACy3F,EAAW,WAAM76J,CAAS,ICKlD,GAVqD8iE,IACnD,MAAM,yBAAEze,GAA6Bye,EAC/Bg4F,GAA2B93F,EAAAA,GAAAA,GAC/BC,GAAAA,GAAQQ,MAAO,4BAA6Bpf,GAI9C,OAAOy2G,EAA2B33F,GAAAA,GAAAC,cAAC03F,EAA6Bh4F,QAAY9iE,CAAS,ECCvF,GAR0C8iE,IACxC,MAAM,IAAEzgC,GAAQygC,EACVi4F,GAAgB/3F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBphC,GAGvE,OAAO04H,EAAgB53F,GAAAA,GAAAC,cAAC23F,EAAkBj4F,QAAY9iE,CAAS,ECGjE,GAR+C8iE,IAC7C,MAAM,OAAExqD,GAAWwqD,EACbk4F,GAAqBh4F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,sBAAuBnrD,GAGjF,OAAO0iJ,EAAqB73F,GAAAA,GAAAC,cAAC43F,EAAuBl4F,QAAY9iE,CAAS,ECA3E,GAPyBxD,IAAgB,IAAf,OAAEs0C,GAAQt0C,EAClC,MAAMy+J,GAAUj4F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,WAAY3yB,GAG3D,OAAOmqH,EAAU93F,GAAAA,GAAAC,cAAC63F,EAAO,WAAMj7J,CAAS,E,gBCS1C,MAEMk7J,GAAkB,IAAIp2J,IACtBq2J,GAAmB,IAAIr2J,IA8E7B,IAAe8+D,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IAGQ,CACLo8F,iBAHsBl8F,EAAAA,EAAAA,KAAeF,GAAQo8F,mBAF/B3wB,EA5EoB1pE,IAElC,IAFmC,gBACvCq6F,GACDr6F,EACC,MAAM,yBAAE4+J,EAAwB,iBAAExkJ,IAAqByL,EAAAA,EAAAA,MAEjD41G,GAAeC,EAAAA,GAAAA,GAVQ,KAUgC,GAEvDmjC,GAAwB7xF,EAAAA,GAAAA,IAAiBllD,IAC7C62I,GAAiBp2J,IAAIuf,GACrB2zG,GAAa,KACPkjC,GAAiBtyG,OACnBuyG,EAAyB,CAAEzyG,YAAav5C,MAAMiC,KAAK8pJ,MACnDA,GAAiBG,QACnB,GACA,KAGJt3F,EAAAA,GAAAA,KAAU,KACHrhE,OAAOsG,KAAK4tF,GAAiBv6F,OAKlCqG,OAAOiI,QAAQisF,GAAiBj6F,SAAQuL,IAA2B,IAAzBs+F,EAAW79C,GAASzgD,EAC5D,GAAI+yJ,GAAgB11J,IAAIihG,GACtB,OAEFy0D,GAAgBn2J,IAAI0hG,GAEpB,MAAM,KAAE59C,EAAI,SAAEG,EAAUF,OAAQyyG,GAAgB3yG,EAE1C6zE,EAAYplF,GAAAA,GAA0BovD,GAE5C,GAAIg2B,EAGF,OAFA++B,EAAAA,GAAAA,GAAS/+B,EAAWzzE,QACpBqyG,EAAsB50D,GAIxB,GAAI59C,EAAO4yG,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKnD,OAJA/kJ,EAAiB,CACfnb,QAAS,6EAEX4/J,EAAsB50D,GAIxB,MAAMm1D,EAAiBA,MACIjhK,EAAAA,EAAAA,MAAesL,EAAAA,EAAAA,OAAa4wF,gBAC/B4P,IACpBpvD,GAAAA,GAA2BukH,EAC7B,EAGFvkH,GAAAA,GAAkBovD,EAAW80D,GAAa,EAAMK,GAAgBpuG,EAAAA,GAAAA,MAAoBhzC,MAAMxK,IACxF,GAAIurJ,IAAgBjkH,EAAAA,GAAeukH,YAAa,CAC9C,MAAMr9I,EAAM,IAAIY,IAAIpP,EAAQyP,OAAOjf,SAASs7J,SAC5Ct9I,EAAIgB,aAAaxN,IAAI,WAAY+pJ,mBAAmB/yG,IACpD,MAAMgzG,EAAiBv8I,OAAOC,KAAKlB,EAAI+J,YACvCyzI,GAAgBzxF,iBAAiB,gBAAgB,KAC/C3zD,EAAiB,CACfnb,QAAS,yEACT,GAEN,MAAWuU,IACTwrJ,EAAAA,GAAAA,GAASxrJ,EAAQg5C,GAGnBqyG,EAAsB50D,EAAU,GAChC,IAlDFy0D,GAAgBI,OAmDhB,GACD,CAACzkE,GAEY,KCjFlB,GARiD/zB,IAC/C,MAAM,eAAE/gB,GAAmB+gB,EACrBm5F,GAAuBj5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyB1hB,GAGrF,OAAOk6G,EAAuB94F,GAAAA,GAAAC,cAAC64F,EAAyBn5F,QAAY9iE,CAAS,ECG/E,GARmD8iE,IACjD,MAAM,OAAEhyB,GAAWgyB,EACbo5F,GAAyBl5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,0BAA2B3yB,GAGzF,OAAOorH,EAAyB/4F,GAAAA,GAAAC,cAAC84F,EAA2Bp5F,QAAY9iE,CAAS,E,2BCMnF,MAsEA,IAAe4jE,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAM0N,KAAiC,IAA/B,WAAE+mD,GAAY/mD,EACrB,MAAM,OAAEtM,GAAWqzD,GAAc,CAAC,EAC5BrxD,EAAOhC,IAAUuG,EAAAA,EAAAA,KAAW3H,EAAQoB,GACpCsa,EAAeta,GAASua,EAAAA,EAAAA,KAAmB3b,EAAQoB,QAAUmE,EAGnE,MAAO,CACLwkF,QAHc5xE,QAAQ/U,KAAS0vI,EAAAA,EAAAA,KAAiB1vI,OAAMmC,OAAWA,EAAWmW,GAI7E,GATe+vD,EA3DyB1pE,IAAwC,IAAvC,WAAE0yD,EAAU,UAAEitG,EAAS,QAAE33E,GAAShoF,EAC9E,MAAM,UAAE4/J,EAAS,gBAAE5zG,IAAoBnmC,EAAAA,GAAAA,MACjCuiC,GAAO+f,EAAAA,GAAAA,MACP,IAAEnmD,EAAG,OAAE3iB,EAAM,UAAEiG,GAAcotD,GAAc,CAAC,EAC5Cpe,EAASl+B,QAAQ4L,GAEjB69I,GAAoBC,EAAAA,GAAAA,GAAqBzgK,IAC/C2oG,EAAAA,GAAAA,IAAY,KACV63D,EAAkB,CAAEv/J,KAAM,eAAgB,GACzCg0C,GAAU0zC,EApBmB,SAoBmBxkF,GAEnD,MAAMu8J,GAAgBx3F,EAAAA,GAAAA,KAAaroC,IACjC,IACE,MAAMtb,EAAO6tB,KAAK6mB,MAAMp5B,EAAMtb,MACP,gBAAnBA,EAAKub,YACP6rB,EAAgB,CAAEptC,WAAYvf,EAAQwN,WAAY,CAACvH,GAAYwZ,aAAa,IAC5E8gJ,KAGqB,eAAnBh7I,EAAKub,YACP6rB,EAAgB,CAAEptC,WAAYvf,EAAQwN,WAAY,CAACvH,KACnDs6J,IAEJ,CAAE,MAAOjvG,GACP,IAED,CAACtxD,EAAQugK,EAAWt6J,EAAW0mD,IAE5Bg0G,GAAaz3F,EAAAA,GAAAA,KAAaroC,IAC9BA,EAAMm3D,cAAc91D,OAAO,GAC1B,IAOH,OALAimC,EAAAA,GAAAA,KAAU,KACRvkD,OAAO8qD,iBAAiB,UAAWgyF,GAC5B,IAAM98I,OAAO+qD,oBAAoB,UAAW+xF,KAClD,CAACA,IAGFp5F,GAAAA,GAAAC,cAACq5F,GAAAA,EAAK,CACJj0I,UAAU,YACVsoB,OAAQA,EACRk1B,QAASo2F,EACT3iJ,MAAO0iJ,EACPO,gBAAc,GAEb5rH,GACCqyB,GAAAA,GAAAC,cAAA,UACE56C,UAAU,aACVm0I,OAAQH,EACRzzE,IAAKvqE,EACL/E,MAAOmrC,EAAK,cACZg4G,QAAQ,yDACRC,MAAM,eAGJ,KCrEZ,GAR4C/5F,IAC1C,MAAM,OAAEhyB,GAAWgyB,EACbg6F,GAAkB95F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoB3yB,GAG3E,OAAOgsH,EAAkB35F,GAAAA,GAAAC,cAAC05F,EAAoBh6F,QAAY9iE,CAAS,ECGrE,GAR4C8iE,IAC1C,MAAM,OAAEhyB,GAAWgyB,EACbi6F,GAAkB/5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoB3yB,GAG3E,OAAOisH,EAAkB55F,GAAAA,GAAAC,cAAC25F,EAAoBj6F,QAAY9iE,CAAS,ECArE,GAP+BxD,IAAgB,IAAf,OAAEs0C,GAAQt0C,EACxC,MAAMigF,GAAgBzZ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkB3yB,GAGvE,OAAO2rC,EAAgBtZ,GAAAA,GAAAC,cAACqZ,EAAa,WAAMz8E,CAAS,ECMtD,GARqD8iE,IACnD,MAAM,MAAE7yD,GAAU6yD,EACZk6F,GAA2Bh6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,4BAA6BxzD,GAG7F,OAAO+sJ,EAA2B75F,GAAAA,GAAAC,cAAC45F,EAA6Bl6F,QAAY9iE,CAAS,ECGvF,GAR0C8iE,IACxC,MAAM,OAAEhyB,GAAWgyB,EACbm6F,GAAgBj6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkB3yB,GAGvE,OAAOmsH,EAAgB95F,GAAAA,GAAAC,cAAC65F,EAAkBn6F,QAAY9iE,CAAS,ECGjE,GAR6C8iE,IAC3C,MAAM,OAAEhyB,GAAWgyB,EACbo6F,GAAmBl6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqB3yB,GAG7E,OAAOosH,EAAmB/5F,GAAAA,GAAAC,cAAC85F,EAAqBp6F,QAAY9iE,CAAS,ECGvE,GARoD8iE,IAClD,MAAM,OAAEhyB,GAAWgyB,EACbq6F,GAA0Bn6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQ81E,MAAO,2BAA4BjoG,GAG3F,OAAOqsH,EAA0Bh6F,GAAAA,GAAAC,cAAC+5F,EAA4Br6F,QAAY9iE,CAAS,ECGrF,GAR0C8iE,IACxC,MAAM,IAAEtkD,GAAQskD,EACVs6F,GAAgBp6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBjlD,GAGvE,OAAO4+I,EAAgBj6F,GAAAA,GAAAC,cAACg6F,EAAkBt6F,QAAY9iE,CAAS,ECbjE,IAAgB,KAAO,YC0CjBq9J,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAE1EC,GAAY,IAAIC,OAAO,qjCA0K7B,IAAe35F,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IAAuBo7B,EAAAA,EAAAA,KAAKl7B,EAAAA,EAAAA,KAAeF,GAAS,CAAC,cADpCyrE,EAvKM1pE,IAA8B,IAA7B,SAAE6yD,GAAsB7yD,EAEjD,MAAMghK,GAAY91F,EAAAA,GAAAA,IAA0B,MACtC+1F,GAAc/1F,EAAAA,GAAAA,IAAmB,IACjCg2F,GAAkBh2F,EAAAA,GAAAA,KAAO,GACzB1sE,GAAa0qI,EAAAA,GAAAA,KACb7/B,GAAcC,EAAAA,GAAAA,MACd,SAAE30B,IAAaC,EAAAA,EAAAA,MAEfusF,EAAwBxsF,EAAW,GAAK,KACxC,iBACJ7hB,EAAgB,IAAE2iD,EAAG,MAAE/2G,EAAK,KAAE82G,EAAI,OAAEppB,EAAM,MAAEC,EAAQ,WAClDx5B,GAAY,CAAC,EAEXuuG,GAAmBp0F,EAAAA,GAAAA,IAAgB,SAAColB,EAAWE,GAA8C,IAAnC75C,EAAMl1C,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG49J,EACvE,IAAK,IAAIh+J,EAAI,EAAGA,EAAIs1C,EAAQt1C,IAAK,CAC/B,MAAM,SACJyiD,EAAQ,SAAEy7G,GACRC,GAA2Bj1E,EAAO+F,EAAGE,EAAGnvF,GAEtCkpD,EA1BkB,GA0Bak1G,GAAuBC,GAEtDC,EAAcZ,GAAgBjiK,KAAK8B,MAAM9B,KAAKsN,SAAW20J,GAAgB/gK,SAC/EmhK,EAAY/0I,QAAQpiB,KAAK,CACvB43J,IAAK97G,EACLyG,OACA4c,MAAOw4F,EACPJ,WACAM,QAASt1G,EACTu1G,iBAAkC,GAAhBhjK,KAAKsN,SACvB21J,SAAU,EACVC,YAAanhK,KAAKC,MAClBmhK,WAAY,EACZC,OAAQnvG,GAAU/a,WAAal5C,KAAKsN,SAAW,IAEnD,CACF,IAEM+1J,GAAej1F,EAAAA,GAAAA,IAAgB,KACnC,IAAKg0F,EAAU90I,UAAYg1I,EAAgBh1I,QACzC,OAEF,MAAMg2I,EAASlB,EAAU90I,QAEnBi2I,EAAMD,EAAOE,WAAW,MAC9B,IAAKD,EACH,OAGF,MAAQzjK,MAAO2jK,EAAaj2E,OAAQk2E,GAAiBJ,EACrDC,EAAII,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrCvB,EAAY/0I,QAAQ9rB,SAAQ,CAACqiK,EAAGt/J,KAC9B,MAAM,IACJu+J,EAAG,SACHL,EAAQ,KACRh1G,EAAI,MACJ4c,EAAK,QACL04F,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACEU,EACE/xE,GAAQ/vF,KAAKC,MAAQkhK,GAAe,IAEpCY,EAAS,CACbxkK,EAAGwjK,EAAIxjK,EAAImjK,EAASnjK,EAAIwyF,EACxB/0C,EAAG+lH,EAAI/lH,EAAI0lH,EAAS1lH,EAAI+0C,GAGpBiyE,EAAc,CAClBzkK,EAAGmjK,EAASnjK,EAAI,KAAQwyF,EAAO,GAC/B/0C,EAAG0lH,EAAS1lH,GAAY,IAAP+0C,GAGbkyE,EAAav2G,EAAOztD,KAAK+xF,IAAI/xF,KAAKikK,IAAId,EAAaH,IACnDkB,EAAc,EAAIf,EAAaH,GAAoBhjK,KAAK+pG,GAAK,KAE7Do6D,EAAgBhB,EAAa,EAC7BiB,EAAiBriK,KAAKC,MAG5B,GADqB8hK,EAAO/mH,EAAI2mH,EAAeG,EAAEp2G,KAG/C,YADAm2G,EAAiB14J,KAAK24J,GAIxB,MAAMQ,EAAc,IACfR,EACHf,IAAKgB,EACLrB,SAAUsB,EACVhB,QAASiB,EACTf,SAAUiB,EACVhB,YAAakB,EACbjB,WAAYgB,GAGd9B,EAAY/0I,QAAQ/oB,GAAK8/J,EACzBd,EAAIe,UAAYj6F,EACZw5F,EAAET,QACJG,EAAI7uH,OACJ6uH,EAAIgB,UAAUzB,EAAIxjK,EAAGwjK,EAAI/lH,GACzBwmH,EAAIrsD,MACDzpD,EA/GmB,GAID,IA4GlBA,EAhHmB,GAID,KA8GrB81G,EAAIiB,OAAOvB,GACXM,EAAI11D,KAAKq0D,IACTqB,EAAIkB,YAEJlB,EAAImB,YACJnB,EAAIoB,QACF7B,EAAIxjK,EACJwjK,EAAI/lH,EACJ0Q,EACAs1G,EACAE,EACA,EACA,EAAIjjK,KAAK+pG,IAEXw5D,EAAI11D,OACN,IAEFw0D,EAAY/0I,QAAU+0I,EAAY/0I,QAAQnsB,QAAQ0iK,IAAOD,EAAiBjgK,SAASkgK,KAC/ExB,EAAY/0I,QAAQpsB,QACtBq2F,EAAAA,GAAAA,IAAe8rE,GAEff,EAAgBh1I,SAAU,CAC5B,IAmBF,IAhBAo5D,EAAAA,GAAAA,IAAc35E,IAAwB,IAChC63J,GADUC,GAAiB93J,EAU/B,OARI83J,IAAqB3wG,IACvBsuG,EAAiB1iK,GAASF,EAAWE,MAAO0tF,GAAU5tF,EAAW4tF,QACjEo3E,EAAch6J,WAAW6/F,EAhJE,KAiJtB63D,EAAgBh1I,UACnBg1I,EAAgBh1I,SAAU,GAC1BiqE,EAAAA,GAAAA,IAAe8rE,KAGZ,KACLt8I,aAAa69I,EAAY,CAC1B,GAEA,CAAC1wG,EAAkBu2C,EAAa44D,KAE9BnvG,GAAoBnyD,KAAKC,MAAQkyD,EA5JP,IA6J7B,OAGF,MAAMigC,GAAiBzG,EAAAA,GAAAA,GACrBl2E,QAAQq/F,IAAS,QAAOA,MACxBr/F,QAAQo/F,IAAU,SAAQA,MAC1Bp/F,QAAQ1X,IAAW,UAASA,MAC5B0X,QAAQg2E,IAAY,WAAUA,OAGhC,OACEzlB,GAAAA,GAAAC,cAAA,OAAKpmE,GAAG,WAAWwrB,UAAWi9D,GAAOgf,KAAM5b,MAAO0G,GAChDpsB,GAAAA,GAAAC,cAAA,UAAQuE,IAAK61F,EAAWh1I,UAAWi9D,GAAOi5E,OAAQxjK,MAAOF,EAAWE,MAAO0tF,OAAQ5tF,EAAW4tF,SAC1F,KAQV,SAASk1E,GACPj1E,EAAsB4O,EAAwBC,EAAyBzmF,GAEvE,GAAc,YAAV43E,EAAqB,CACvB,MAAMq3E,EAAWjvJ,EAAQ,EACnBmxC,EAAW,CACf1nD,EAAG+8F,GAAkByoE,GAAY,GAAM,KACvC/nH,EAAqB,IAAlBu/C,GAECyoE,EAAU/kK,KAAKsN,SAAW+uF,EAOhC,MAAO,CACLr1C,WACAy7G,SAPe,CACfnjK,EAAGwlK,EAAWC,GAAqB,EAAXA,EACxBhoH,GAHeu/C,EAAkBqmE,GAAyC,IAAlBrmE,IAU5D,CAYE,MAAO,CACLt1C,SAZe,CACf1nD,EAAGU,KAAKsN,SAAW+uF,EACnBt/C,GAAG,IAWH0lH,SAPe,CACfnjK,EAHcqjK,GAAuBtmE,GAIrCt/C,GAHeu/C,EAAkBt8F,KAAKsN,SAAW,MAWvD,CAEA,SAASq1J,KAAwC,IAAjBziK,EAAWyE,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC5C,OAAO3E,KAAKsN,SAAWpN,EAAMA,EAAM,CACrC,C,gBCnQA,M,8CC8BM8kK,GAAY,cA6ElB,IAAex8F,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IAEQ,CACL4lK,UAFe1lK,EAAAA,EAAAA,KAAeF,GAEXk1D,QAJLuW,EAzEE1pE,IAA8B,IAA7B,SAAE6jK,GAAsB7jK,EAC7C,MAAO8jK,EAAOC,IAAY77F,EAAAA,GAAAA,IAAiB,IAErC87F,GAAUh3F,EAAAA,GAAAA,IAAiBi3F,IAC3BH,EAAMhkK,QANW,GAQrBikK,GAAUG,GAAc,IAAIA,EAAWD,IAAS,IAiDlD,OA9CAz8F,EAAAA,GAAAA,KAAU,KACR,IAAKq8F,EAAU,OAEf,MAAM,OAAE9wG,EAAM,OAAEC,GAAW6wG,GACrB,MAAEnlK,EAAK,OAAE0tF,GAAW5tF,EAAAA,EAAWC,MAG/B0lK,EArBmB,KAoBTvlK,KAAKE,IAAIJ,EAAQq0D,EAAQq5B,EAASp5B,EAAQD,EAAQC,GAE5DyiD,EAAMziD,EAASmxG,EAAc,EAC7B3uD,EAAOziD,EAASoxG,EAAc,EAEpCH,EAAQ,CACNI,UAAWP,EAASzwG,aACpBixG,UAAWF,EACX1uD,MACAD,QACA,GACD,CAACquD,KAEJr8F,EAAAA,GAAAA,KAAU,KACR,MAAMznE,EAASiE,SAASsgK,gBAAgBC,GAAAA,GAAe,UACvDxkK,EAAO03F,aAAa,IAAK,KACzB13F,EAAO03F,aAAa,IAAK,KACzB13F,EAAO03F,aAAa,QAAS,KAC7B13F,EAAO03F,aAAa,SAAU,KAC9B13F,EAAO03F,aAAa,8BAA+B,SACnD+sE,EAAAA,GAAAA,IAAiBzkK,EAAQ6jK,IAEzB,MAAMa,EAAUzgK,SAASsgK,gBAAgBC,GAAAA,GAAe,WACxDE,EAAQhtE,aAAa,OAAQitE,IAC7BD,EAAQhtE,aAAa,SAAU,aAC/B13F,EAAO4kK,YAAYF,GAEnB,MAAMG,EAAoB5gK,SAASsgK,gBAAgBC,GAAAA,GAAe,qBAQlE,OAPAK,EAAkBntE,aAAa,KAAM,iBACrCmtE,EAAkBntE,aAAa,MAAO,aACtCmtE,EAAkBntE,aAAa,QAhDd,MAiDjBmtE,EAAkBntE,aAAa,mBAAoB,KACnDmtE,EAAkBntE,aAAa,mBAAoB,KACnD13F,EAAO4kK,YAAYC,GAEZ,MACLC,EAAAA,GAAAA,IAAoBjB,GAAU,CAC/B,GACA,IAGDj9F,GAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,GAAAA,GD1FG,YC0F0BgsC,eAAa,GACvDyvD,EAAMn3J,KAAKwmD,GACVwT,GAAAA,GAAAC,cAAA,OACE56C,UD7F+B,WC8F/BqgE,OAAOC,EAAAA,GAAAA,GACJ,iBAAgBn5B,EAAKkxG,cACrB,mBAAkBlxG,EAAKsiD,QACvB,oBAAmBtiD,EAAKqiD,UAE3Bn1E,IAAK8yB,EAAKixG,UACVU,eAAgBA,IAAMf,GAAUG,GAAcA,EAAUnkK,QAAQqyF,GAAMA,IAAMj/B,UAG5E,KC4CV,IAAI4xG,IAAiB,EAErB,MA2bA,IAAe39F,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KAClB,CAACzrE,EAAMoQ,KAA+B,IAA7B,SAAEsmE,GAAUtmE,EACnB,MACEyoB,UACEmU,OAAO,yBACL+5H,IAEH,cACD7kK,GACElC,GAEE,gBACJ+rC,EAAe,yBACf6d,EAAwB,eACxBtC,EAAc,iBACdgN,EAAgB,0BAChBlqC,EAAyB,wBACzB2rC,EAAuB,4BACvBgW,EAA2B,WAC3BtX,EAAU,kBACVt0D,EAAiB,0BACjBq0D,EAAyB,cACzBvB,EAAa,QACbkB,EAAO,WACP7C,EAAU,gBACV4V,EAAe,aACf/wB,EAAY,cACZW,EAAa,mBACb2Z,EAAkB,wBAClB2L,EAAuB,YACvBl/B,EAAW,QACXqV,EAAO,kBACPujB,EAAiB,wBACjBjO,IACE3nD,EAAAA,EAAAA,KAAeF,GAEbgnK,EAAcvyG,IAAc3vD,EAAAA,EAAAA,KAAkB9E,EAAQy0D,EAAWrzD,OAAQqzD,EAAWptD,WACpFq6J,EAAYsF,GAAathK,QAAQi+F,MAAM3kF,OACvC,OAAE5d,IAAW4L,EAAAA,EAAAA,KAAyBhN,IAAW,CAAC,EAClDinK,IAA0BpjK,EAAAA,EAAAA,KAA+B7D,EAAQ,4BAC/D20D,EAAAA,EAAAA,KAA0B30D,GAE5BknK,EAAqBr/G,GAA0Bs/G,EAAAA,EAAAA,KAAiBnnK,EAAQ6nD,QAA2BtiD,EAEzG,MAAO,CACLrD,gBACAklK,iBAAkBjnK,EAClBknK,mBAAoBlvJ,QAAQ/W,GAC5BkmK,mBAAmBh7G,EAAAA,EAAAA,KAAyBtsD,EAAQ02E,GACpD6wF,mBAAmBC,EAAAA,EAAAA,KAAwBxnK,GAC3CynK,mBAAmBC,EAAAA,EAAAA,KAAwB1nK,GAC3C2nK,oBAAoBC,EAAAA,EAAAA,KAAyB5nK,GAC7C6nK,sBAAsBC,EAAAA,EAAAA,KAA2B9nK,GACjD+nK,iBAAkB5vJ,QAAQ86C,EAAcpxD,QACxCmmK,WAAY7vJ,QAAQg8C,EAAQtyD,QAC5ByyD,mBACA2zG,sBAAuB9vJ,QAAQq8C,GAC/BuX,8BACA3hD,4BACA2rC,0BACAmyG,oBAAoBn2J,EAAAA,EAAAA,KAAyB/R,GAC7C+lE,kBAAmB7oC,EAAcl9B,EAAO8lE,WAAWC,uBAAoBxgE,EACvEotI,yBAAyBh+E,EAAAA,EAAAA,KAA0B30D,GACnD+mK,2BACAoB,kBAAmBjrI,EAAc/kB,QAAQnY,EAAO6mE,gBAAathE,EAC7DmmB,YAAa1rB,EAAO+pB,SAASoB,MAAMM,OACnC28I,oBAAqBpoK,EAAOmiB,aAAagJ,MAAMM,OAC/C48I,iBAAkB/2G,GAAYt1C,OAC9BssJ,wBAAyBh3G,GAAYC,gBACrCkD,aACAitG,YACA6G,yBAA0BpwJ,QAAQ+uD,GAClCn7B,kBACAy8H,mBAAoBz8H,IAAmBj4B,EAAAA,EAAAA,KAAW9T,EAAQ+rC,EAAgBtJ,OAC1EmnB,2BACA3oC,sBAAsBC,EAAAA,EAAAA,KAA2BlhB,GACjDyoK,mBAAoBtyH,GAAcE,OAClCqyH,oBAAqB5xH,GAAeT,OACpCsyH,yBAA0BxwJ,QAAQs4C,GAClCm4G,0BAA2BxsG,GAAyB/lB,OACpDwyH,aAAc/yG,GAAmBtgD,MACjC+7B,mBAAoBgB,EAAQhB,mBAC5Bu3H,mBAAoB3wJ,QAAQo6B,EAAQH,SACpC80H,qBACAhqI,cACAoqB,iBACA2/G,yBACAvyI,SAAU10B,EAAO00B,SAClB,GAxFe+2C,EA3bP1pE,IA6CgB,IA7Cf,SACZ20E,EAAQ,iBACR0wF,EAAgB,mBAChBC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,kBACjBE,EAAiB,mBACjBE,EAAkB,iBAClBI,EAAgB,WAChBC,EAAU,kBACVjiG,EAAiB,iBACjBzR,EAAgB,sBAChB2zG,EAAqB,4BACrBl8F,EAA2B,aAC3B88F,EAAY,0BACZz+I,EAAyB,wBACzB2rC,EAAuB,mBACvBmyG,EAAkB,wBAClBv1B,EAAuB,yBACvBo0B,EAAwB,YACxBr7I,EAAW,oBACX08I,EAAmB,kBACnBD,EAAiB,iBACjBE,EAAgB,wBAChBC,EAAuB,WACvB7zG,EAAU,UACVitG,EAAS,yBACT6G,EAAwB,gBACxBx8H,EAAe,mBACfy8H,EAAkB,yBAClB5+G,EAAwB,eACxBtC,EAAc,mBACdmhH,EAAkB,oBAClBC,EAAmB,yBACnBC,EAAwB,0BACxBC,EAAyB,mBACzBr3H,EAAkB,mBAClBu3H,EAAkB,qBAClBjB,EAAoB,qBACpB5mJ,EAAoB,mBACpBimJ,EAAkB,YAClBhqI,EAAW,uBACX+pI,EAAsB,SACtBvyI,EAAQ,cACRxyB,GACsBH,EACtB,MAAM,SACJgnK,EAAQ,mBACRC,EAAkB,4BAClBC,EAA2B,4BAC3BC,EAA2B,yBAC3BC,EAAwB,2BACxBC,GAA0B,eAC1BpwG,GAAc,iBACdqwG,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtB9kG,GAAe,iBACf+kG,GAAgB,cAChBC,GAAa,sBACbC,GAAqB,kBACrBC,GAAiB,qBACjBxlG,GAAoB,uBACpBylG,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBlqH,GAAU,cACVmqH,GAAa,eACbj8H,GAAc,gBACdk8H,GAAe,iBACf7+I,GAAgB,wBAChB8+I,GAAuB,kBACvB/lJ,GAAiB,aACjBgmJ,GAAY,gBACZC,GAAe,WACfvkJ,GAAU,iBACV8kH,GAAgB,wBAChBvmE,GAAuB,gBACvB9d,GAAe,iBACf+jH,GAAgB,oBAChBlmG,GAAmB,wBACnBmmG,GAAuB,0BACvBC,GAAyB,6BACzBC,GAA4B,mBAC5BvmG,GAAkB,eAClBwmG,GAAc,sBACdzrH,GAAqB,cACrB0rH,GAAa,iBACbC,GAAgB,eAChB70H,GAAc,qBACd80H,GAAoB,eACpBC,GAAc,wBACdC,KACErjJ,EAAAA,EAAAA,MAEA0R,EAAAA,MAAUwtI,KACZA,IAAiB,EAEjBvtI,QAAQC,IAAI,oBAGd,MAAM2wB,IAAOipB,EAAAA,GAAAA,MAGb0D,EAAAA,GAAAA,IAAW,MACJo0F,EAAAA,GAAAA,IAAW1iG,GAAAA,GAAQC,MAAM,GAlHG,KAsHnC,MAAMskB,IAAe9f,EAAAA,GAAAA,IAAuB,MAEtCmnE,IAAgBnnE,EAAAA,GAAAA,IAAuB,OAEvC,UAAE8L,KAAcpC,EAAAA,EAAAA,OACtBpN,EAAAA,GAAAA,KAAU,KACH69F,GAAqBC,GAAuBtuF,GAGtCquF,GAAoBC,GAAsB3wF,GAEnDo0D,KAHAA,IAIF,GACC,CAAC/xD,GAAWquF,EAAkBC,EAAoB3wF,EAAUo0D,MAE/D/gC,EAAAA,GAAAA,GAAYwgE,GAAiBrtI,EAtIC,SAsIuC33B,GAAW,IAEhFgkE,EAAAA,GAAAA,KAAU,KACR,IAAK1iB,EAAAA,GACH,OAGF,MAAMskH,EAAgCnmJ,OAAO8hC,SAAUskH,GAAGC,GAAAA,EAAcC,kBAAkB,KACxFX,IAA6B,EAAK,IAG9BY,EAA4BvmJ,OAAO8hC,SAAUskH,GAAGC,GAAAA,EAAcG,cAAc,KAChFb,IAA6B,GAC7BQ,KAAiC,IAGnC,MAAO,KACLI,MACAJ,KAAiC,CAClC,GACA,KAGH5hG,EAAAA,GAAAA,KAAU,KACJrsC,GAAexI,IACjBskC,IAAe,GACfhZ,KACAmqH,KACAS,KACA7B,IACAU,KACAT,IACAG,IACAC,KACAl7H,KACAk8H,KACAR,KACAW,KACAC,KACAlmG,KACAmmG,KACAC,KACApB,KACAC,GAAkB,CAAEh7I,SAAUk9I,EAAAA,MAC9BZ,KACAC,KACA70H,KACAyzH,KACAC,KACAoB,KACA9B,IACAC,IACAmB,KACAlrH,KACAilB,KACA4mG,KACAC,KACF,GACC,CAAC/tI,EAAaxI,KAGjB60C,EAAAA,GAAAA,KAAU,KACJrsC,GAAejc,IACjB6oJ,KACAvlG,KACF,GACC,CAACtjD,EAAsBic,KAG1BqsC,EAAAA,GAAAA,KAAU,KACJrsC,IACEitB,GAAK1a,OAASg8H,EAAAA,KAChBlC,GAAkB,CAAEh7I,SAAU47B,GAAK1a,OAGrC+5H,GAAgB,CAAE76H,SAAUwb,GAAK1a,OAEjCvB,KACF,GACC,CAACic,GAAMjtB,KAGVqsC,EAAAA,GAAAA,KAAU,KACJrsC,GACF3R,GAAiB,CACfphB,IAAKjC,OAAOsG,MAAKhD,EAAAA,EAAAA,MAAY2W,aAAa7Y,MAC1C0Y,aAAa,GAEjB,GACC,CAACkb,KAGJqsC,EAAAA,GAAAA,KAAU,KACJrsC,GAAexI,IACZhJ,GAAgB08I,IACnBzjG,KACAN,MAGE34C,GAAe08I,GACjByB,KAEJ,GACC,CAACn+I,EAAa08I,EAAqBlrI,EAAaxI,KAGnD60C,EAAAA,GAAAA,KAAU,KACJ2+F,GAAsBhrI,GACxBgtI,IACF,GACC,CAAChC,EAAoBhrI,KAGxBqsC,EAAAA,GAAAA,KAAU,KACHw9F,GACHgD,IACF,GACC,CAAChD,KAGJx9F,EAAAA,GAAAA,KAAU,KACR,IAAK70C,EAAU,OACf+xB,KAEA,MAAMilH,GAA4BC,EAAAA,GAAAA,MAC9BD,GAA2BE,SAC7BC,EAAAA,GAAAA,GAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,CAACl3I,KAEJ60C,EAAAA,GAAAA,KAAU,IACDvkD,OAAO8hC,UAAUskH,GAAGC,GAAAA,EAAcU,UAAWl6I,KAClDg6I,EAAAA,GAAAA,GAAgBC,mBAAmBj6I,GAAM,KAE1C,KAEH03C,EAAAA,GAAAA,KAAU,KACR,MAAMyiG,GAAqBC,EAAAA,GAAAA,IAAkB/pK,GACxC8pK,GAELhmJ,GAAW,CACT5kB,OAAQ4qK,EAAmB5qK,OAC3B4G,SAAUgkK,EAAmBhkK,SAC7B3F,KAAM2pK,EAAmB3pK,MACzB,GACD,CAACH,KAGJirG,EAAAA,GAAAA,KAAgB,KACd,MAAMjO,EAAYnS,GAAa9+D,QACiB,IAA5CixE,EAAUgtE,WAAYC,oBACxB3sC,EAAAA,GAAAA,IAActgC,EAAW,0BAC3B,GACC,KAEH3xB,EAAAA,GAAAA,GAAkB,CAChBL,IAAK6f,GACL12C,OAAQ+wH,EACRgF,kBAAmBrgG,EACnBlU,OAAQ,iBAEV,MAAMw0G,IAA2Bp/F,EAAAA,GAAAA,KAAO,GAClCm+B,IAAcC,EAAAA,GAAAA,MAGpBhkB,EAAAA,GAAAA,IAAc35E,IAA4B,IAA1B4+J,GAAqB5+J,EACnC,QAA6BnI,IAAzB+mK,GAAsClF,IAAqBkF,IAAyB35B,EACtF,OAGF05B,GAAyBp+I,SAAU,EAE/B2U,EAAAA,KACF2pI,EAAAA,GAAAA,KAAoB,KAClBxmK,SAASwuC,KAAKkkD,UAAUq/C,OAAO,8BAA+BsvB,EAAiB,IAInF,MAAMoF,GAAoBtgD,EAAAA,GAAAA,OAE1BugD,EAAAA,GAAAA,GAAqB1mK,SAAS67E,eAAe,iBAAkB,KAC7D4qF,IACAH,GAAyBp+I,SAAU,EACnCm9E,IAAa,GACb,GACD,CAACg8D,EAAkBz0B,EAAyBvnC,MAE/C79B,EAAAA,GAAAA,GAAkB,CAChBL,IAAK6f,GACL12C,OAAQixH,EACR8E,kBAAmBrgG,EACnBlU,OAAQ,kBAEV,MAAM60G,IAA4Bz/F,EAAAA,GAAAA,KAAO,IAClC0/F,GAAqBC,KAA0B3iG,EAAAA,GAAAA,IAASq9F,GAEzDrkJ,IAAeo3D,EAAAA,GAAAA,OAGrBgN,EAAAA,GAAAA,IAAc53E,IAAqD,IAAnDo9J,EAAwBC,GAAsBr9J,EAC5D,QAA8BlK,IAA1BunK,GAAuCxF,IAAsBwF,EAC/D,OAGF,IAAKD,GAA0B5F,EAE7B,YADA2F,GAAuBtF,GAIzBoF,GAA0Bz+I,SAAU,EAEpC,MAAMu+I,GAAoBtgD,EAAAA,GAAAA,OAE1BugD,EAAAA,GAAAA,GAAqB1mK,SAAS67E,eAAe,gBAAiB,KAC5D4qF,IACAE,GAA0Bz+I,SAAU,EACpCm9E,KACAwhE,GAAuBtF,EAAkB,GACzC,GACD,CAACD,EAAoBC,EAAmBL,EAAwB77D,KAEnE,MAAMr9E,IAAYq8C,EAAAA,GAAAA,GAChBiiG,GAAyBp+I,SAAW,wBACpCy+I,GAA0Bz+I,SAAW,yBACrC0+I,IAAuB,sBACvB5gG,GAA+B,6BAC/B9oD,IAAgB,iBAGZ8pJ,IAAah+F,EAAAA,GAAAA,IAAgB,KACjCs6F,GAAiB,CAAE/xG,WAAW,GAAO,IAGjCqvD,IAAc53C,EAAAA,GAAAA,IAAgB,KAClCs6F,GAAiB,CAAE/xG,WAAW,IAEzBvxD,SAASiZ,MAAM1a,SAASwzD,EAAAA,MAC3BrR,KAGFgL,IAAW,EAAM,IAGbu7G,IAA6Bj+F,EAAAA,GAAAA,IAAgB,KACjDi7F,IAAsB,IAGlBiD,IAAkCl+F,EAAAA,GAAAA,IAAgB,KACtDk7F,IAAsB,IAQxB,OAJAn0C,EAAAA,GAAAA,GAAkBi3C,GAAYpmD,KAAe9/D,EAAAA,KAC7CqmH,EAAAA,GAAAA,GAAgBH,IvM3gBH,WAAwD,IAApBv7F,EAAUlsE,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,IAAAA,UAAA,IAC3DikE,EAAAA,GAAAA,KAAU,KACR,GAAKla,EAAAA,GAAL,CAIA,IAAImiB,EAgBJ,OATAzJ,IAAcyxB,aAAa,UAAWvxB,IAKlCxwD,EAAAA,KAAW01J,EAAAA,IACbpnK,SAAS+pE,iBAAiB,eAAgB3H,IAGrC,KACLJ,IAAcyxB,aAAa,UAAW,yDAClC/hF,EAAAA,KAAW01J,EAAAA,IACbpnK,SAASgqE,oBAAoB,eAAgB5H,GAC/C,EAjBAJ,IAAcyxB,aAAa,UAXE,4EAM/B,CAuBC,GACA,CAAChoB,GACN,CuM+eE47F,CAA2B7F,GAAqBE,GAG9C/+F,GAAAA,GAAAC,cAAA,OAAKuE,IAAK6f,GAAcxqF,GAAG,OAAOwrB,UAAWA,IAC3C26C,GAAAA,GAAAC,cAAC0kG,GAAU,CAACngG,IAAKknE,KACjB1rE,GAAAA,GAAAC,cAAC2kG,GAAY,CAACl5B,cAAeA,GAAe19D,SAAUA,IACtDhO,GAAAA,GAAAC,cAAC4kG,GAAW,CAAC72F,SAAUA,IACvBhO,GAAAA,GAAAC,cAAC0f,GAAW,CAAChyC,OAAQkxH,IACrB7+F,GAAAA,GAAAC,cAACy3F,GAAW,CAAC/pH,OAAQoxH,IACrB/+F,GAAAA,GAAAC,cAAC84F,GAAsB,CAACprH,OAAQsxH,IAChCj/F,GAAAA,GAAAC,cAAC64F,GAAoB,CAACl6G,eAAgBA,IACtCohB,GAAAA,GAAAC,cAACqZ,GAAa,CAAC3rC,OAAQ0xH,IACvBr/F,GAAAA,GAAAC,cAAC63F,GAAO,CAACnqH,OAAQ2xH,IACjBt/F,GAAAA,GAAAC,cAACmlE,GAAW,CAAC3M,MAAI,IACjBz4D,GAAAA,GAAAC,cAAC6kG,GAAc,MACf9kG,GAAAA,GAAAC,cAACg6F,GAAa,CAAC5+I,IAAKuwC,IACpBoU,GAAAA,GAAAC,cAAC05F,GAAe,CAAChsH,OAAQ4xH,IACzBv/F,GAAAA,GAAAC,cAACO,GAAe,CACd7yB,OAAQl+B,QAAQiS,GAChBmhD,QAASyhG,GACTS,oBAAqBrjJ,IAEvBs+C,GAAAA,GAAAC,cAACI,GAAoB,CACnBl9C,kBAAmBkqC,EACnBwV,QAAS0hG,KAEVlnG,GAAqB2C,GAAAA,GAAAC,cAACC,GAAS,CAACnC,YAAaV,IAC9C2C,GAAAA,GAAAC,cAACL,GAAgB,CAACpW,SAAU/5C,QAAQ4tD,GAAqBoiG,KACzDz/F,GAAAA,GAAAC,cAAC25F,GAAe,CACdjsH,OAAQl+B,QAAQkwJ,GAAoBC,GACpCtsJ,OAAQqsJ,EACR92G,gBAAiB+2G,IAEnB5/F,GAAAA,GAAAC,cAAC+kG,GAAS,CAACj5G,WAAYA,EAAYitG,UAAWA,IAC9Ch5F,GAAAA,GAAAC,cAACglG,GAAe,MAChBjlG,GAAAA,GAAAC,cAACilG,GAAiB,MACjB54G,EAAAA,IAA+B0T,GAAAA,GAAAC,cAACklG,GAAa,MAC9CnlG,GAAAA,GAAAC,cAACmlG,GAAAA,EAAmB,MACpBplG,GAAAA,GAAAC,cAACE,GAAS,CAAC3W,SAAUi2G,IACrBz/F,GAAAA,GAAAC,cAAColG,GAAW,CAAC3kG,eAAa,IAC1BV,GAAAA,GAAAC,cAACG,GAAkB,CAACzyB,OAAQkyH,IAC5B7/F,GAAAA,GAAAC,cAAC23F,GAAa,CACZ14H,IAAK4gI,EACLnmK,KAAM0pC,GAAiB1pC,KACvBwlC,yBAA0BkE,GAAiBlE,2BAE7C6gC,GAAAA,GAAAC,cAAC03F,GAAwB,CAACz2G,yBAA0BA,IACpD8e,GAAAA,GAAAC,cAACqlG,GAAyB,MAC1BtlG,GAAAA,GAAAC,cAAC85F,GAAgB,CAACpsH,OAAQoyH,IAC1B//F,GAAAA,GAAAC,cAAC65F,GAAa,CAACnsH,OAAQqyH,IACvBhgG,GAAAA,GAAAC,cAAC+5F,GAAuB,CAACrsH,OAAQuyH,IACjClgG,GAAAA,GAAAC,cAAC45F,GAAwB,CAAC/sJ,MAAOqzJ,IACjCngG,GAAAA,GAAAC,cAAC42E,GAAY,CAAClpG,OAAQ9E,EAAoBg6B,QAASjnD,KACnDokD,GAAAA,GAAAC,cAAC62E,GAAY,CAACnpG,OAAQyyH,EAAoBv9F,QAAS++F,KACnD5hG,GAAAA,GAAAC,cAAC43F,GAAkB,CAAC1iJ,OAAQqpJ,IAC5Bx+F,GAAAA,GAAAC,cAAC2f,GAAc,CAACjyC,OAAQwxH,IACxBn/F,GAAAA,GAAAC,cAACM,GAAkB,CAAC5yB,OAAQsyH,IACxB,K,gCC3iBV,MAyHA,IAAex/F,EAAAA,GAAAA,KAAKsC,EAAAA,EAAAA,KACjBzrE,IACQ,CACLiuK,iBAAkBjuK,EAAOi4D,YAHXwT,EAvH0B1pE,IAGxC,IAHyC,SAC7CmsK,EAAQ,iBACRD,GACDlsK,EACC,MAAM,aACJosK,EAAY,QACZC,EAAO,wBACPC,EAAuB,2BACvBC,IACE1mJ,EAAAA,EAAAA,OAEE,qBACJ8zC,EAAoB,aACpBG,EAAY,UACZntC,GACEu/I,EAEE9jH,GAAO+f,EAAAA,GAAAA,MACNqkG,EAAiBC,IAAsBvkG,EAAAA,GAAAA,IAAiB,KACxDwkG,EAAoBC,IAAyBzkG,EAAAA,GAAAA,KAAS,IACtD0kG,EAAqBC,EAAyBC,IAA4B14F,EAAAA,GAAAA,IAAQ,IACnF,aAAEhJ,IAAiB0Q,EAAAA,GAAAA,GAA4BqwF,IAErDp3F,EAAAA,GAAAA,GAAWw3F,EAA4BzyG,EAAeA,EAAen5D,KAAKC,WAAQ4C,GAElF,MAAMupK,GAAmBxkG,EAAAA,GAAAA,KAAY,KACnCkkG,EAAmB,GAAG,GACrB,IAEGO,GAAezkG,EAAAA,GAAAA,KAAarS,SACX1yD,IAAjBs2D,GAKJ2yG,EAAmB,KACnBQ,EAAAA,GAAAA,IAAe/2G,GAAUl4C,KAAKouJ,GAAe95G,IACvCA,aAAe46G,GAAAA,IACjBb,EAAQ,CAAEc,cAAc,IAG1Bb,IACAG,EAAmBrkH,EAAK,sBAAsB,KAX9CqkH,EAAmBrkH,EAAK,aAYxB,GACD,CAACA,EAAM0R,KAEV0N,EAAAA,GAAAA,KAAU,UACahkE,IAAjBs2D,EACF2yG,EAAmBrkH,EAAK,cACU,IAAzBuR,GACT8yG,EAAmB,GACrB,GACC,CAAC3yG,EAAc1R,EAAMuR,IAExB,MAAMyzG,GAAuB7kG,EAAAA,GAAAA,KAAY,KACvCukG,IACAT,EAAQ,CAAEc,cAAc,GAAO,GAC9B,CAACL,EAA0BT,IAE9B,GAAKjhG,EAoBL,OACEzE,GAAAA,GAAAC,cAAA,OAAK56C,UCnHmB,YDoHtB26C,GAAAA,GAAAC,cAAA,OAAK56C,UCpHsC,WDoHX88C,IAAK1gB,EAAK2gB,MAAQ,WAAQvlE,GACxDmjE,GAAAA,GAAAC,cAAC+8B,GAAAA,EAAuB,CACtBC,OAAQC,GAAAA,EAAewpE,KACvBC,WAAYC,GACZlhH,KAvFQ,IAwFRrgC,UCzHyD,aD4H3D26C,GAAAA,GAAAC,cAAC4mG,GAAAA,EAAY,CACXntI,IAAI,gBACJotI,kBAAgB,EAChBC,8BAA4B,EAC5B/gJ,UAAWA,EACX/b,MAAO47J,EACPxyF,YAAa5xB,EAAK,qCAClBulH,YAAavlH,EAAK,QAClBwlH,WAAYb,EACZc,kBAAmBnB,EACnBoB,UAAQ,EACRC,2BAA4BpB,EAC5BqB,SAAUhB,IApCdrmG,GAAAA,GAAAC,cAAA,OAAK56C,UCpG0E,YDqG7E26C,GAAAA,GAAAC,cAAA,SACED,GAAAA,GAAAC,cAACkpE,GAAAA,EAAI,CAACjnE,QAASgkG,GAAyB,WAAe,IAAI,wCAG7DlmG,GAAAA,GAAAC,cAAA,SACED,GAAAA,GAAAC,cAACoC,GAAAA,EAAM,CAACC,MAAM,cAAc5c,KAAK,OAAOm0C,QAAM,EAAC33B,QAASgkG,GACrDzkH,EAAK,8BAmCZue,GAAAA,GAAAC,cAAC29B,GAAAA,EAAa,CACZjwD,OAAQs4H,EACRpjG,QAASsjG,EACTvgK,KAAM67C,EAAK,mBACX4/E,aAAc5/E,EAAK,0BACnBq8C,eAAgB2oE,EAChBj/B,sBAAoB,IAElB,KE/IN52G,EAAAA,KAEFC,QAAQC,IAAI,+BAGd,MAAQy+B,UAAU,eAAEC,IAAgB,gBAAE94C,KAAoB5T,EAAAA,EAAAA,MACrD4T,IAAoB84C,IAAmB83G,EAAAA,KAC1CpoJ,EAAAA,EAAAA,MAAag0C,S,6DCdf,MCuBA,EAZoB75D,IAIJ,IAJK,SACnBs/F,EAAQ,UACRtzE,EAAS,QACT68C,GACS7oE,EACT,OACE2mE,EAAAA,GAAAC,cAAA,OAAK56C,WAAWq8C,EAAAA,EAAAA,GDjBG,WCiByBr8C,GAAY68C,QAASA,GAC9Dy2B,EACG,C,kGCNH,SAAS3wD,EACd1wC,EAAWuwC,GAEX,GAA0B,SAAtBA,EAAaluC,KAAiB,OAAOkuC,EAEzC,GAA0B,aAAtBA,EAAaluC,KAAqB,CACpC,MAAM,OACJ2Z,EAAM,eAAE41B,EAAc,OAAEI,EAAM,QAAEhxC,GAC9BuvC,EACE18B,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAEhC,IAAKnI,EAAM,OAEX,MAAO,CACLxR,KAAM,WACNwR,OACA+9B,iBACAI,SACAhxC,UAEJ,CAEA,GAA0B,cAAtBuvC,EAAaluC,KAAsB,CACrC,MAAM,OACJ2Z,EAAM,MAAE81B,EAAK,OAAE0I,EAAM,SAAED,GACrBhK,EACE18B,GAAOC,EAAAA,EAAAA,KAAW9T,EAAQgc,GAEhC,IAAKnI,EAAM,OAEX,MAAO,CACLxR,KAAM,QACN4tK,QAAS,CACP5tK,KAAM,YACNwR,OACAi+B,QACA0I,SACAD,YAGN,CAEA,GAA0B,UAAtBhK,EAAaluC,KAAkB,CACjC,MAAM,MACJyvC,EAAK,OAAE0I,EAAM,SAAED,GACbhK,EAEJ,MAAO,CACLluC,KAAM,QACN4tK,QAAS,CACP5tK,KAAM,QACNyvC,QACA0I,SACAD,YAGN,CAEA,GAA0B,2BAAtBhK,EAAaluC,KAAmC,CAClD,MAAM,KAAEwnB,GAAS0mB,EAEjB,MAAO,CACLluC,KAAM,yBACNwnB,OAEJ,CAEA,GAA0B,YAAtB0mB,EAAaluC,KAAoB,CACnC,MAAMe,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQuwC,EAAanvC,QAC7C,IAAKgC,EACH,OAEF,MAAO,CACLf,KAAM,UACNe,OACAiE,UAAWkpC,EAAalpC,UAE5B,CAEA,GAA0B,aAAtBkpC,EAAaluC,KAAqB,CACpC,MAAM,QACJoZ,EAAO,eAAEy0J,EAAc,OAAE11H,EAAM,SAAED,EAAQ,OAAEl8B,EAAM,QAAErd,GACjDuvC,EAIJ,MAAO,CACLluC,KAAM,WACNgc,SACA4xJ,QAAS,CACP5tK,KAAM,WACNm4C,SACAD,WACApe,MAVU1gB,EAAQ/M,KAAKnM,IAAOuR,EAAAA,EAAAA,KAAW9T,EAAQuC,KAAKT,OAAOqW,SAW7Dg4J,aAViBD,GAAiBvoK,EAAAA,EAAAA,KAAW3H,EAAQkwK,QAAkB3qK,EAWvEvE,WAGN,CAEA,GAA0B,kBAAtBuvC,EAAaluC,KAA0B,CACzC,MAAM,OACJjB,EAAM,qBAAE84C,EAAoB,OAAEM,EAAM,SAAED,EAAQ,UAAED,EAAS,kBAAEH,EAAiB,UAAEC,EAAS,wBACvFg2H,EAAuB,iBAAE/1H,EAAgB,MAAEvI,EAAK,MAAE3V,GAChDoU,EACEntC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAEF,MAAM62C,EAAqBC,GAAsBxrC,KAAKnM,IAAOoF,EAAAA,EAAAA,KAAW3H,EAAQuC,KAAKT,OAAOqW,SAE5F,MAAO,CACL9V,KAAM,gBACN4tK,QAAS,CACP5tK,KAAM,gBACNm4C,SACAD,WACAn3C,OACA62C,qBACAK,YACAH,oBACAC,YACAg2H,0BACA/1H,mBACAvI,QACA3V,SAGN,CAEA,GAA0B,aAAtBoU,EAAaluC,KAAqB,CACpC,MAAM,OACJjB,EAAM,qBAAE84C,EAAoB,OAAEM,EAAM,SAAED,EAAQ,OAAEl8B,EAAM,UAAEi8B,EAAS,kBAAEH,EAAiB,UAAEC,EAAS,wBAC/Fg2H,EAAuB,iBAAE/1H,GACvB9J,EACEntC,GAAOuE,EAAAA,EAAAA,KAAW3H,EAAQoB,GAChC,IAAKgC,EACH,OAEF,MAAM62C,EAAqBC,GAAsBxrC,KAAKnM,IAAOoF,EAAAA,EAAAA,KAAW3H,EAAQuC,KAAKT,OAAOqW,SAE5F,MAAO,CACL9V,KAAM,WACNgc,SACA4xJ,QAAS,CACP5tK,KAAM,WACNm4C,SACAD,WACAn3C,OACA62C,qBACAK,YACAH,oBACAC,YACAg2H,0BACA/1H,oBAGN,CAGF,CAEO,SAASg2H,EACd9xJ,GAEA,MAAkB,aAAdA,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,2CACVga,YAAa,8CACbla,YAAa,GAIC,eAAd73I,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,4CACVga,YAAa,+CACbla,YAAa,GAIC,aAAd73I,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,8CACVga,YAAa,iDACbC,sBAAuB,WAIT,eAAdhyJ,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,gDACVga,YAAa,mDACbla,YAAa,EACbG,qBAAqB,GAIP,QAAdh4I,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,4CACVga,YAAa,+CACbla,YAAa,GAIC,QAAd73I,EAAKlc,KACA,CACL8zJ,WAAY,OACZD,cAAc,EACdI,SAAU,+CACVga,YAAa,kDACbla,YAAa,GAIV,CACLD,WAAY,OACZD,cAAc,EACdI,SAAU,4CACVga,YAAa,4CACbla,YAAa,EAEjB,CAEO,SAASoa,EAA6Bh2H,GAC3C,OAAIA,EAAS,EACH,MAAI2+G,EAAAA,EAAAA,IAAcx4J,KAAK+xF,IAAIl4C,MAG7B,MAAI2+G,EAAAA,EAAAA,IAAc3+G,IAC5B,CAEO,SAASsiB,EAA4B97D,GAC1C,MAAM,OAAEyJ,GAAWzJ,EAAQ0E,QAE3B,GAAqB,cAAjB+E,GAAQpI,KAAsB,OAElC,MAAM,cAAEouK,EAAa,MAAE3+H,GAAUrnC,EAEjC,MAAO,CACLlI,GAAIkuK,EACJ3+H,MAAOA,EACPvzB,KAAM,CACJlc,KAAM,OACNE,GAAIvB,EAAQqC,WAAarC,EAAQI,OAAUJ,EAAQigE,UAAYjgE,EAAQI,QAEzE8S,KAAMlT,EAAQkT,KACdqiC,QAAQ,EACRm6H,SAAU1vK,EAAQqC,iBAAckC,EAEpC,CAEO,SAAS+2D,EAAqCt7D,GACnD,MAAM,OAAEyJ,GAAWzJ,EAAQ0E,QAE3B,GAAqB,eAAjB+E,GAAQpI,KAAuB,OAEnC,MAAM,cAAEouK,EAAa,MAAE3+H,EAAK,aAAEgrF,GAAiBryH,EAE/C,MAAO,CACLlI,GAAIkuK,EACJ3+H,MAAOA,EACPvzB,KAAM,CACJlc,KAAM,OACNE,GAAIu6H,GAEN5oH,KAAMlT,EAAQkT,KACdy8J,eAAgB3vK,EAAQuB,GAE5B,C","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/UserGift.module.scss?7193","webpack://telegram-t/./src/components/common/gift/UserGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs, WebPageMediaSize,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, peer, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatusId, referrerWebAppKey, expires, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatusId, expires);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatusId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...updatedWebAppKey === activeWebAppKey && {\n        activeWebApp: updatedValue,\n      },\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  const newActiveWebApp = openedWebApps[webAppKey];\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebApp: newActiveWebApp,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebApp: webApp },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  if (!currentTabState.webApps.activeWebApp) return global;\n\n  const key = getWebAppKey(currentTabState.webApps.activeWebApp);\n\n  return removeWebAppFromOpenList(global, key, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = currentTabState.webApps.openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n\n  const isRemovedAppActive = activeWebApp && (getWebAppKey(activeWebApp) === getWebAppKey(webApp));\n\n  const openedWebAppsValues = Object.values(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebApp: openedWebAppsCount\n          ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([url, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebApp: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = currentTabState.webApps.activeWebApp;\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  newActiveWebApp.isCloseModalOpen = true;\n\n  const key = getWebAppKey(newActiveWebApp);\n\n  if (key) webAppsNotAllowedToClose[key] = newActiveWebApp;\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k in webAppsNotAllowedToClose);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStarGift, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, userId, message, shouldHideName, tabId = getCurrentTabId(),\n  } = payload;\n\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance < gift.stars) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    userId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n  };\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    starGift: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { starGift, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || starGift?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || starGift?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: starGift ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type {\n  StarGiftCategory,\n} from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  updateStarsBalance,\n} from '../../reducers';\nimport {\n  selectPeer,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const { gifts, stickers } = result;\n\n  const starGiftsById = buildCollectionByKey(gifts, 'id');\n\n  const starGiftCategoriesByName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(starGiftsById);\n  const allStarGifts = Object.values(starGiftsById);\n\n  const limitedStarGiftIds = allStarGifts.map(\n    (gift) => {\n      return gift.isLimited ? gift.id : undefined;\n    },\n  ).filter(Boolean) as string[];\n\n  starGiftCategoriesByName.all = allStarGiftIds;\n  starGiftCategoriesByName.limited = limitedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!starGiftCategoriesByName[starsCategory]) {\n      starGiftCategoriesByName[starsCategory] = [];\n    }\n    starGiftCategoriesByName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGiftsById,\n    starGiftCategoriesByName,\n    stickers: {\n      ...global.stickers,\n      starGifts: {\n        stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserGifts', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefresh } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const currentGifts = global.users.giftsById[userId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchUserStarGifts', {\n    user,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = {\n    ...global,\n    users: {\n      ...global.users,\n      giftsById: {\n        ...global.users.giftsById,\n        [userId]: {\n          gifts: newGifts,\n          nextOffset: result.nextOffset,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisilibity', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, shouldUnsave } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('saveStarGift', {\n    user,\n    messageId,\n    shouldUnsave,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('convertStarGift', {\n    user,\n    messageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectCurrentMessageList, selectTabState, selectWebApp } from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebApp: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsValues = Object.values(openedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebApp: openedWebAppsCount ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  const activeWebApp = tabState.webApps.activeWebApp;\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiUserStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift') return;\n  const starGift = action.starGift!;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n  } satisfies ApiUserStarGift;\n\n  actions.openGiftInfoModal({ userId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userId = 'userId' in payload ? payload.userId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      userId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { applyLangPackDifference, requestLangPackDifference } from '../../../util/localization';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApps.activeWebApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeActiveWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forUserId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatusId: sticker.id });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile, isDesktop } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (!isDesktop && !isMessageListOpen) && (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n      const newIndex = pinnedIndexAboveFocused !== -1 ? pinnedIndexAboveFocused : 0;\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  availableStars?: number;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectAreStarsLoaded(global: GlobalState) {\n  return Boolean(global.stars);\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  availableStars,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const areStarsLoaded = useSelector(selectAreStarsLoaded);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && (!availableStars || amount > availableStars)) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, availableStars, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  availableStars?: number;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  availableStars,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n            availableStars={availableStars}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  availableStars?: number;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  availableStars,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n    && !((sticker || hasAnimatedEmoji) && asForwarded)\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n  && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (message.isDeleting && element) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n    !canShowActionButton && 'no-action-button',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasCommentButton: withCommentButton,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        availableStars={availableStars}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {lang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderSenderName(shouldSkipRenderForwardTitle:boolean = false, shouldSkipRenderAdminTitle: boolean = false) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.usernames?.length;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <span className=\"interactive\">\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            availableStars={availableStars}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const { balance: availableStars } = global.stars || {};\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      availableStars,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  avatarPeer,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (headerActionsHeight || STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getSenderTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState, chatReportState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState, getChatReportState, getBotAdState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'aboutAdsModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  aboutAdsModal: AboutAdsModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Db6J462r\",\"avatar\":\"vDMy3ohp\",\"stars\":\"xtk5vN0o\",\"hiddenGift\":\"X8rK1aAQ\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiUser, ApiUserStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './UserGift.module.scss';\n\ntype OwnProps = {\n  userId: string;\n  gift: ApiUserStarGift;\n};\n\ntype StateProps = {\n  fromPeer?: ApiUser;\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst UserGift = ({\n  userId, gift, fromPeer, sticker,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      userId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  if (!sticker) return undefined;\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      <div className={styles.stars}>\n        {formatCurrency(gift.gift.stars, STARS_CURRENCY_CODE)}\n      </div>\n      {gift.gift.availabilityTotal && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(gift.gift.availabilityTotal))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.gift.stickerId];\n    const fromPeer = gift.fromId ? selectUser(global, gift.fromId) : undefined;\n\n    return {\n      sticker,\n      fromPeer,\n    };\n  },\n)(UserGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStarGift,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport UserGift from '../common/gift/UserGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiUserStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n    loadUserGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasGiftsTab ? [{ type: 'gifts' as const, title: 'ProfileGifts' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    hasGiftsTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadUserGifts({ userId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <UserGift userId={chatId} key={`${gift.date}-${gift.fromId}-${gift.gift.id}`} gift={gift} />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(userFullInfo?.starGiftCount) && !isSavedDialog;\n    const userGifts = global.users.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: userGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ConfettiStyle, TabState } from '../../../global/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition, SVG_NAMESPACE } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    const filter = document.createElementNS(SVG_NAMESPACE, 'filter');\n    filter.setAttribute('x', '0');\n    filter.setAttribute('y', '0');\n    filter.setAttribute('width', '1');\n    filter.setAttribute('height', '1');\n    filter.setAttribute('color-interpolation-filters', 'sRGB');\n    addSvgDefinition(filter, FILTER_ID);\n\n    const feImage = document.createElementNS(SVG_NAMESPACE, 'feImage');\n    feImage.setAttribute('href', waveRipple);\n    feImage.setAttribute('result', 'waveImage');\n    filter.appendChild(feImage);\n\n    const feDisplacementMap = document.createElementNS(SVG_NAMESPACE, 'feDisplacementMap');\n    feDisplacementMap.setAttribute('in', 'SourceGraphic');\n    feDisplacementMap.setAttribute('in2', 'waveImage');\n    feDisplacementMap.setAttribute('scale', FILTER_SCALE);\n    feDisplacementMap.setAttribute('xChannelSelector', 'R');\n    feDisplacementMap.setAttribute('yChannelSelector', 'B');\n    filter.appendChild(feDisplacementMap);\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'stargift') {\n    const {\n      userId, shouldHideName, giftId, message,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stargift',\n      user,\n      shouldHideName,\n      giftId,\n      message,\n    };\n  }\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option, message,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n        message,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  if (peer.type === 'api') {\n    return {\n      avatarIcon: 'bots',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramBotApi.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramBotApi.Subtitle',\n      peerColorId: 4,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    giveawayPostId: message.id,\n  };\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","title","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatusId","referrerWebAppKey","expires","sendWebAppEvent","webAppKey","event","eventType","eventData","key","customEmojiIconId","isCloseFriend","customEmojiId","duration","botId","suggestedStatusModal","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","_len3","_key3","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","activeWebApp","activeWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsValues","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len12","_ref13","_key12","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","_len4","_key4","newActiveWebApp","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","isPaymentFormLoading","form","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","balance","stars","openStarsBalanceModal","giftId","sendStarPaymentForm","starGift","formId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","starGiftsById","starGiftCategoriesByName","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","starsCategory","starGifts","shouldRefresh","currentGifts","giftsById","localNextOffset","newGifts","isCancelled","subscriptionId","loadUserGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","_len6","_key6","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","_len10","_key10","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","clearOpenedWebApps","_len11","_key11","replaceWebAppModalState","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","actionText","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","giftReceiverId","starsToConvert","isNameHidden","isUnsaved","isSaved","fromId","isConverted","openGiftInfoModal","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","emojiStatus","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isDesktop","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","resolve","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","handleBeforeContextMenu","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","handleClick","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","onMouseDown","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","isSelected","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","audio","remove","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","disabled","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectAreStarsLoaded","recentReactors","chosenClassName","availableStars","onPaidClick","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","areStarsLoaded","useSelector","handlePaidClick","prevReaction","left","top","offsetWidth","offsetHeight","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","Sparkles","preset","PaidReactionEmoji","animatedEmoji","paidCounter","ReactionAnimatedEmoji","counter","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","ReactionButton","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","messageSender","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","shouldRenderSenderName","renderForwardTitle","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","onHideTranscription","isTranscribed","canTranscribe","AudioOrigin","isSelectable","onPlay","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","handleOpenAboutAdsModal","renderMediaContent","isRecommended","BadgeButton","isRectangular","canReport","triggerRef","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","computedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","customIcon","renderPlaybackRateMenuItem","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","renderingPinnedMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","confirmLabel","PinnedMessageNavigation","isFullVideo","asSpoiler","shouldRenderVideo","pluralValue","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","emojiStatusSticker","isRightColumnShown","currentTransitionKey","openThreadWithInfo","openPreviousChat","toggleLeftColumn","isBackButtonActive","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","UnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderPinnedMessage","AudioPlayer","HeaderActions","canExpandActions","sponsoredMessage","renderingSponsoredMessage","withResizeObserver","handleAboutClick","isAutoArchived","canReportSpam","canBlockContact","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","isFirstRenderRef","audioPlayerState","pinnedState","stateArray","isFirstRender","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","ChatReportPane","BotAdPane","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeaderPanes","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","AboutAdsModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","stickerId","fromPeer","CUSTOM_PEER_HIDDEN","availabilityTotal","GiftRibbon","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","userGifts","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","UserGift","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","createElementNS","SVG_NAMESPACE","addSvgDefinition","feImage","waveRipple","appendChild","feDisplacementMap","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","SnapEffectContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","purpose","boostChannelId","boostChannel","isOnlyForNewSubscribers","buildStarsTransactionCustomPeer","subtitleKey","customPeerAvatarColor","formatStarsTransactionAmount","transactionId","isMyGift","giveawayPostId"],"sourceRoot":""}