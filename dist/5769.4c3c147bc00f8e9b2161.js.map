{"version":3,"file":"5769.4c3c147bc00f8e9b2161.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { isReactionChosen, isSameReaction } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiTypeReplyTo,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStory,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyUserId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyUserId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.userId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectUserStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadUserStories({ userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n  selectReplyingToId, selectSendAs, selectTabState, selectThreadTopMessageId, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || (isFromSideMenu && (bot?.isInactive || bot?.isDisclaimerNeeded));\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId, url } = payload;\n    actions.openChat({ id: chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules, getStoryKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForUser,\n  addUsers,\n  removeUserStory,\n  toggleUserStoriesHidden,\n  updateLastReadStoryForUser,\n  updateLastViewedStoryForUser,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n  updateUser,\n  updateUserPinnedStory,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!user || !userStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(userStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', {\n    user,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  const story = selectUserStory(global, userId, storyId);\n  if (!user || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForUser(global, userId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { user, storyId });\n  }\n\n  const isUnread = (global.stories.byUserId[userId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    user,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForUser(global, userId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { storyId } = payload;\n\n  const result = await callApi('deleteStory', { storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeUserStory(global, global.currentUserId!, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { storyId, isPinned } = payload;\n\n  const story = selectUserStory(global, global.currentUserId!, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updateUserStory(global, global.currentUserId!, storyId, { isPinned });\n  global = updateUserPinnedStory(global, global.currentUserId!, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updateUserStory(global, global.currentUserId!, storyId, { isPinned: currentIsPinned });\n    global = updateUserPinnedStory(global, global.currentUserId!, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStories', { user });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForUser(global, userId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadUserPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { userId, offsetId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserPinnedStories', { user, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { offsetId } = payload;\n  const currentUserId = global.currentUserId!;\n\n  const result = await callApi('fetchStoriesArchive', { currentUserId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, currentUserId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadUserStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { userId, storyIds } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', { user, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updateUserStory(global, global.currentUserId!, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    userId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    user,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    storyId,\n    privacy,\n  } = payload;\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { userId, isHidden } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('toggleStoriesHidden', { user, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = toggleUserStoriesHidden(global, userId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n  const users = userIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n  if (!users.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { users });\n  if (!result) return;\n\n  const userIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const user = users[i];\n    global = updateUser(global, user.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n    if (maxId !== 0) {\n      userIdsToLoad.push(user.id);\n    }\n  });\n  setGlobal(global);\n\n  userIdsToLoad?.forEach((userId) => actions.loadUserStories({ userId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const story = selectUserStory(global, userId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateUserStory(global, userId, storyId, {\n    sentReaction: reaction,\n  });\n  setGlobal(global);\n\n  const containerId = getStoryKey(userId, storyId);\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    user, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateUserStory(global, userId, storyId, {\n      sentReaction: previousReaction,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  return APP_VERSION_REGEX.test(remoteVersion) && remoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    storyUserId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyUserId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyUserId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForUser, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectTabState,\n  selectUser,\n  selectUserFirstStoryId,\n  selectUserFirstUnreadStoryId,\n  selectUserStories,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const userStories = selectUserStories(global, userId);\n\n  if (storyId && (!userStories || !userStories.byId[storyId])) {\n    const result = await callApi('fetchUserStoriesByIds', { user, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addStoriesForUser(global, userId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId,\n      storyId: storyId || selectUserFirstUnreadStoryId(global, userId) || selectUserFirstStoryId(global, userId),\n      isSingleUser,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    userId: chat.id,\n    storyId,\n    isSingleUser: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByUserIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedUserIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousUserId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousUserId = userId;\n  } else {\n    const previousUserIdIndex = orderedUserIds.indexOf(userId) - 1;\n    if (isSingleUser || previousUserIdIndex < 0) {\n      return undefined;\n    }\n\n    previousUserId = orderedUserIds[previousUserIdIndex];\n    previousStoryIndex = (selectUserStories(global, previousUserId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectUserStories(global, previousUserId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: previousUserId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextUserId: string;\n\n  if (currentStoryIndex < userStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextUserId = userId;\n  } else {\n    const nextUserIdIndex = orderedUserIds.indexOf(userId) + 1;\n    if (isSingleUser || nextUserIdIndex > orderedUserIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextUserId = orderedUserIds[nextUserIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectUserStories(global, nextUserId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: nextUserId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const link = await callApi('fetchStoryLink', { userId, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyUserId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, toggleUserStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const currentUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (currentUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = toggleUserStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForUser,\n  removeBlockedUser,\n  removeUserStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForUser,\n  updateStealthMode,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { selectUserStories, selectUserStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForUser(global, update.userId, { [update.story.id]: update.story });\n      global = updateUsersWithStories(global, { [update.userId]: selectUserStories(global, update.userId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removeUserStory(global, update.userId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForUser(global, update.userId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { userId, storyId, reaction } = update;\n      const story = selectUserStory(global, userId, storyId);\n      if (!story) return global;\n      global = updateUserStory(global, userId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedUserIds: {\n          archived: archivedStories,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_APP, IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTypeStory, ApiUser } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerColorKey,\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiUser | ApiChat;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getPeerColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {isFullStory && (\n            <i className=\"icon icon-story-reply\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPoll, ApiPollAnswer, ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectUserStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  user?: ApiUser;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, user, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      userId: story!.userId,\n      storyId: story!.id,\n      isSingleUser: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.userId, storyData!.id, story);\n\n  function getTitle() {\n    if (user?.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getUserFirstOrLastName(user));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n  const lastReadId = selectUserStories(global, userId)?.lastReadId;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    user: selectUser(global, userId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerColorKey,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n  selectUserStory,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getPeerColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <i className={`icon ${forwardInfo?.hiddenUserName ? 'icon-forward' : 'icon-share-filled'}`} />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectUserStory(global, webPageStoryData.userId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectUserStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStory,\n  ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadUserStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByUserIds = storyDataList.reduce((acc, storyData) => {\n      const { userId, id } = storyData!;\n      if (!acc[userId]) {\n        acc[userId] = [];\n      }\n      acc[userId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByUserIds).forEach(([userId, storyIds]) => {\n      loadUserStoriesByIds({ userId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadUserSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleUser: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.userId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStories,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useUserStoriesPolling from '../../hooks/polling/useUserStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadUserPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadUserStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadUserPinnedStories({ userId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ offsetId });\n  }, []);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadUserStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  useUserStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let hasStoriesTab;\n    let resolvedUserId;\n    let user;\n    let storyIds;\n    let archiveStoryIds;\n    let storyByIds;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      const userFullInfo = selectUserFullInfo(global, chatId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n      hasStoriesTab = user && (user.isSelf || (!user.areStoriesHidden && userFullInfo?.hasPinnedStories));\n      const userStories = hasStoriesTab ? selectUserStories(global, user!.id) : undefined;\n      storyIds = userStories?.pinnedIds;\n      storyByIds = userStories?.byId;\n      archiveStoryIds = userStories?.archiveIds;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","userId","storyUserId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectUserStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadUserStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","userStories","updateUsersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectUserStories","skippedStoryIds","addStoriesForUser","updateLastViewedStoryForUser","serverTime","byUserId","lastReadId","updateLastReadStoryForUser","removeUserStory","currentIsPinned","updateUserStory","updateUserPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","toggleUserStoriesHidden","userIdsToLoad","maxStoryId","hasStories","previousReaction","sentReaction","getStoryKey","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","trim","test","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSingleUser","isSingleStory","isArchive","selectUserFirstUnreadStoryId","selectUserFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByUserIds","isShown","orderedUserIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousUserId","previousUserIdIndex","previousStoryId","userStoryIds","nextStoryIndex","nextUserId","nextUserIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorKey","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","usersById","chatsById","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","noLoop","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadUserStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByUserIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","info","ChatlistModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadUserSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","hasStoriesTab","resolvedUserId","archiveStoryIds","storyByIds","userFullInfo","hasPinnedStories","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadUserPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadUserStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","useUserStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}