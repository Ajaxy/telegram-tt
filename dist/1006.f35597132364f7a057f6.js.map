{"version":3,"file":"1006.f35597132364f7a057f6.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f"],"sourcesContent":["import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n}: OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftPremium, ApiMessageActionGiftStars } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          )}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message && (lang(action.type === 'giftPremium' ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>{lang('ActionGiveawayResultTitle')}</h3>\n        <div>\n          {action.type === 'giftCode' && (\n            lang(\n              action.isViaGiveaway ? 'ActionGiveawayResultPremiumText' : 'ActionGiftCodePremiumText',\n              { months: action.months, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = selectChat(global, action.boostPeerId!);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {Boolean(action.gift.availabilityTotal) && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const stickerRef = useRef<HTMLDivElement>();\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'openSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  const ref = useRef<HTMLDivElement>();\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n    && (isExpanded || isAnimating)\n    && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>\n          {formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): StateProps => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID, IS_ELECTRON, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport PremiumGiftCode from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS = new Set<ApiMessageAction['type']>([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS = new Set<ApiMessageAction['type']>(['giftCode', 'prizeStars', 'suggestProfilePhoto']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <PremiumGiftCode\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, observeIntersectionForLoading, message, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={styles.inlineWrapper}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={styles.inlineWrapper}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftResalePriceComposerModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n    updateStarGiftPrice,\n    closeGiftInfoModal,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n  const giftResalePrice = isGiftUnique ? gift.resellPriceInStars : undefined;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (!savedGift || savedGift?.gift.type !== 'starGiftUnique') return;\n\n    if (savedGift.canTransferAt && savedGift.canTransferAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanTransferAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canTransferAt * 1000) },\n        },\n      });\n      return;\n    }\n\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleSell = useLastCallback(() => {\n    if (!savedGift) return;\n    if (savedGift.canResellAt && savedGift.canResellAt > getServerTime()) {\n      showNotification({\n        message: {\n          key: 'NotificationGiftCanResellAt',\n          variables: { date: formatDateAtTime(oldLang, savedGift.canResellAt * 1000) },\n        },\n      });\n      return;\n    }\n    openGiftResalePriceComposerModal({ peerId, gift: savedGift });\n  });\n\n  const handleUnsell = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift) return;\n    closeGiftInfoModal();\n    updateStarGiftPrice({ gift: savedGift.inputGift, price: 0 });\n    showNotification({\n      icon: 'unlist-outline',\n      message: {\n        key: 'NotificationGiftIsUnlist',\n        variables: { gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }) },\n      },\n    });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && !giftResalePrice && (\n        <MenuItem icon=\"sell-outline\" onClick={handleSell}>\n          {lang('Sell')}\n        </MenuItem>\n      )}\n      {canManage && isGiftUnique && Boolean(giftResalePrice) && (\n        <MenuItem icon=\"unlist-outline\" onClick={handleUnsell}>\n          {lang('GiftInfoUnlist')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear-outline\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off-outline\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n  green: [['#52D553', '#4BB121'], ['#52D553', '#4BB121']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\ntype GradientColor = readonly [string, string];\n\ntype OwnProps = {\n  color: ColorKey | GradientColor | (string & {});\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor: GradientColor | undefined\n  = Array.isArray(color)\n    ? color as GradientColor\n    : colorKey\n      ? COLORS[colorKey][isDarkTheme ? 1 : 0]\n      : undefined;\n\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};"],"names":["AVATAR_SIZE","REM","memo","ChannelPhotoAction","action","onClick","observeIntersection","_jsx","Avatar","className","styles","channelPhoto","photo","loopIndefinitely","withVideo","size","withGlobal","global","sticker","type","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","observeIntersectionForPlaying","stickerRef","useRef","lang","useLang","message","undefined","_jsxs","contentBox","tabIndex","role","children","ref","stickerWrapper","style","StickerView","containerRef","noLoad","info","title","pluralValue","amount","renderTextWithEntities","actionButton","Sparkles","preset","channel","selectChat","boostPeerId","GiveawayPrizeAction","channelLink","useMemo","channelTitle","getPeerTitle","channelFallbackText","renderPeerLink","id","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","currentUser","selectUser","currentUserId","messageSender","selectSender","giftSender","fromId","selectPeer","messageRecipient","isOutgoing","chatId","sender","recipient","peerId","starGiftMaxConvertPeriod","appConfig","StarGiftAction","getStickerFromGift","gift","peer","isChannel","isApiPeerChat","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","peerTitle","isSelf","giftDescription","peerLink","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","translateWithYou","isConverted","getServerTime","date","buildClassName","starGift","Boolean","GiftRibbon","color","text","total","formatIntegerCompact","subtitle","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","slice","tableData","name","shouldShowFrom","isUpgrade","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","clearBottomSector","textColor","number","MiniTable","data","valueClassName","uniqueValue","buildStyle","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","showNotification","getActions","cropModalBlob","setCropModalBlob","useState","isVideoModalOpen","openVideoModal","closeVideoModal","useFlag","suggestedPhotoUrl","useMedia","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","user","showAvatarNotification","useLastCallback","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","file","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","find","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","onClose","onChange","ConfirmDialog","isOpen","confirmHandler","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","useEffect","averageColor","getAverageColor","rgb2hex","useAverageColor","Icon","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","useOldLang","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","map","filter","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","length","shouldRenderChannels","useHorizontalScroll","useTimeout","setTimeout","clearTimeout","current","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","width","height","viewBox","fill","xmlns","d","Button","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","Set","HIDDEN_TEXT_ACTIONS","tabState","selectTabState","themes","settings","chat","isInsideTopic","isForum","replyToMsgId","replyToPeerId","getMessageReplyInfo","replyMessage","selectChatMessage","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","scrollTargetPosition","focusedMessage","hasUnreadReaction","unreadReactions","includes","isAccountFrozen","selectIsCurrentUserFrozen","isInSelectMode","selectIsInSelectMode","selectTheme","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","content","isLocal","isLocalMessageId","isTextHidden","has","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","messageReplyInfo","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useAppLayout","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","isPinned","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","IS_ELECTRON","IS_ANDROID","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","handleClick","ChannelAvatar","slug","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","PremiumGiftCode","Gift","StarGift","StarGiftUnique","getMessageHtmlId","root","singleLine","fluidMultiline","hasFullContent","onMouseDown","e","preventMessageInputBlur","onContextMenu","_Fragment","inlineWrapper","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","GiftMenuItems","canManage","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","openChatWithDraft","openGiftTransferModal","openGiftResalePriceComposerModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","updateStarGiftPrice","closeGiftInfoModal","oldLang","isSavedGift","savedGift","starGiftUniqueSlug","starGiftUniqueLink","TME_LINK_PREFIX","userCollectibleStatus","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","giftResalePrice","resellPriceInStars","hasPinOptions","isUnsaved","handleTriggerVisibility","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","handleLinkShare","handleTransfer","canTransferAt","key","variables","formatDateAtTime","handleSell","canResellAt","handleUnsell","price","icon","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","MenuItem","SVG_MAP","Map","SvgFluidBackgroundFilter","referenceCount","constructor","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","result","mode","values","in2","operator","getFilterId","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","get","delete","prepareStyle","svg","set","COLORS","red","blue","purple","green","COLOR_KEYS","Object","keys","theme","validSvgRandomId","useUniqueId","colorKey","isDarkTheme","gradientColor","Array","isArray","startColor","endColor","ribbon","x1","y1","x2","y2","gradientUnits","offset","keyClassName","value"],"sourceRoot":""}