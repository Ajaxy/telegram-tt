{"version":3,"file":"7768.4e453f8cc0286a0f72f9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={handleSelectMyProfile}\n      >\n        {oldLang('My Profile')}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { debounce } from '../../util/schedulers';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => ref?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className} ref={ref}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n      {shouldRenderContextMenu && renderContextMenu()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage peerId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isChatMonoforum={isChatMonoforum}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n          canPost={canPost}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","lang","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectMyProfile","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","noLoop","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}