{"version":3,"file":"6708.16c732773c2ea8a31f9c.js","mappings":"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","sources":["webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts","webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/cycleRestrict.ts"],"sourcesContent":["import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type ApiUpdate = { type: string } & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: AnyToVoidFunction;\n  reject: AnyToVoidFunction;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise = new Promise<any>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n","import { animate } from '../../util/animation';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/browser/windowEnvironment';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst CANVAS_CLASS = 'rlottie-canvas';\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.classList.add(CANVAS_CLASS);\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["ConnectorClass","requestStates","Map","requestStatesByCallback","pendingPayloads","pendingTransferables","constructor","target","onUpdate","channel","destroy","init","args","this","postMessageOnTickEnd","type","request","messageData","transferables","restMessageData","messageId","generateUniqueId","payload","requestState","promise","Promise","resolve","reject","Object","assign","length","withCallback","callback","pop","set","catch","finally","delete","cancelCallback","progressCallback","isCanceled","get","onMessage","data","payloads","forEach","update","error","response","callbackArgs","Error","message","push","postMessagesOnTickEnd","throttleWithTickEnd","postMessage","createConnector","worker","connector","handleMessage","addEventListener","removeEventListener","MAX_WORKERS","Math","min","navigator","hardwareConcurrency","instances","launchMediaWorkers","IS_TEST","Array","fill","undefined","map","Worker","URL","requestMediaWorker","index","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","instancesByRenderId","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","views","msPerFrame","reduceFactor","frames","isAnimating","isWaiting","isEnded","isDestroyed","isRendererInited","approxFrameIndex","prevFrameIndex","stopFrameIndex","speed","direction","canvas","renderId","params","viewId","onLoad","instance","addView","coords","tgsUrl","container","customColor","onEnded","onLoop","initConfig","initRenderer","removeView","ctx","isSharedCanvas","clearRect","x","y","imgSize","remove","size","isPlaying","play","forceRestart","isPaused","floor","doPlay","pause","lastRenderAt","from","values","every","isLowPriority","frame","i","close","playSegment","startFrameIndex","frameIndex","round","setSpeed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","imageData","ImageData","requestMutation","document","createElement","getContext","classList","add","style","appendChild","isConnected","quality","max","window","devicePixelRatio","clearCache","destroyRenderer","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","name","onRendererInit","bind","framesCount","changeData","onChangeData","animate","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred"],"sourceRoot":""}