{"version":3,"file":"5420.9499ba857e6e32481088.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/wavpack/WavPackToken.js","webpack://telegram-t/./node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nexport const BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: isBitSet(flags, 2),\n                isHybrid: isBitSet(flags, 3),\n                isJointStereo: isBitSet(flags, 4),\n                crossChannel: isBitSet(flags, 5),\n                hybridNoiseShaping: isBitSet(flags, 6),\n                floatingPoint: isBitSet(flags, 7),\n                samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],\n                isDSD: isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nexport const MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: getBitAllignedNumber(buf[off], 0, 6), // functionId overlaps with isOptional flag\n            isOptional: isBitSet(buf[off], 5),\n            isOddSize: isBitSet(buf[off], 6),\n            largeBlock: isBitSet(buf[off], 7)\n        };\n    }\n};\nfunction isBitSet(flags, bitOffset) {\n    return getBitAllignedNumber(flags, bitOffset, 1) === 1;\n}\nfunction getBitAllignedNumber(flags, bitOffset, len) {\n    return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n}\n//# sourceMappingURL=WavPackToken.js.map","import * as Token from 'token-types';\nimport { APEv2Parser } from '../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BlockHeaderToken, MetadataIdToken } from './WavPackToken.js';\nimport initDebug from 'debug';\nimport { uint8ArrayToHex } from 'uint8array-extras';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:WavPack');\nexport class WavPackContentError extends makeUnexpectedFileContentError('WavPack') {\n}\n/**\n * WavPack Parser\n */\nexport class WavPackParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioDataSize = 0;\n    }\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new WavPackContentError('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= BlockHeaderToken.len);\n        if (this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n        }\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param header Header\n     * @param remainingLength Remaining length\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        let remaining = remainingLength;\n        while (remaining > MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: { // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << Token.UINT8.get(data, 0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new WavPackContentError('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                }\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${uint8ArrayToHex(data)}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remaining -= MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remaining}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remaining !== 0)\n            throw new WavPackContentError('metadata-sub-block should fit it remaining length');\n    }\n}\n//# sourceMappingURL=WavPackParser.js.map"],"names":["SampleRates","BlockHeaderToken","len","get","buf","off","flags","res","BlockID","blockSize","version","totalSamples","blockIndex","blockSamples","bitsPerSample","getBitAllignedNumber","isMono","isBitSet","isHybrid","isJointStereo","crossChannel","hybridNoiseShaping","floatingPoint","samplingRate","isDSD","crc","MetadataIdToken","functionId","isOptional","isOddSize","largeBlock","bitOffset","debug","WavPackContentError","WavPackParser","BasicParser","constructor","super","arguments","this","audioDataSize","parse","parseWavPackBlocks","APEv2Parser","tryParseApeHeader","metadata","tokenizer","options","peekToken","header","readToken","format","container","setFormat","ignoreBytes","parseMetadataSubBlock","ignore","fileInfo","size","position","duration","remainingLength","remaining","id","dataSizeInWords","readNumber","data","Uint8Array","readBuffer","toString","length","mp"],"sourceRoot":""}