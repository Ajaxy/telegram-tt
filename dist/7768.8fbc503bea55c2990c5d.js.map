{"version":3,"file":"7768.8fbc503bea55c2990c5d.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, stars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n  };\n\n  payInputStarInvoice(global, inputInvoice, stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_RESALE_GIFTS_FILTER_OPTIONS, RESALE_GIFTS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReason', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => ref?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className} ref={ref}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n      {shouldRenderContextMenu && renderContextMenu()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage peerId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isChatMonoforum={isChatMonoforum}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n          canPost={canPost}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPriceInStars) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPriceInStars ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","monoforumPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","sendStarPaymentForm","directInfo","formId","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","currentScreen","isChannel","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","selectIsMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","ribbonText","resellPriceInStars","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","nonInteractive","noLoop","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}