{"version":3,"file":"6972.18e163b54cdee0e06ae1.js","mappings":"sFAwHAA,EAAOC,QAhHP,SAAaC,GACX,MAAMC,EAAQD,EAAKC,MACbC,EAAU,CACdC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CAAEC,MAAO,wBACT,CAAEA,MAAON,EAAKO,aAGZC,EAAWR,EAAKS,UACtBD,EAASH,SAAW,CAClB,CACEC,MAAO,IACPI,IAAK,KAEP,CACEJ,MAAO,IACPI,IAAK,MAGT,MAAMC,EAAY,CAChBR,UAAW,WACXE,SAAU,CACR,CAAEC,MAAO,qBACT,CAAEA,MAAO,iBAGPM,EAAW,CACfT,UAAW,UACXG,MAAO,gCAEHO,EAAU,CACdV,UAAW,SACXW,SAAU,CAAEd,EAAKe,kBACjBV,SAAU,CACR,CACEC,MAAO,MACPI,IAAK,MACLN,UAAW,IAEb,CACEE,MAAO,MACPI,IAAK,MACLN,UAAW,IAEb,CACEE,MAAO,IACPI,IAAK,KAEP,CACEJ,MAAO,IACPI,IAAK,OAILM,EAAQ,CACZV,MAAO,KACPI,IAAK,KACLI,SAAU,CACRN,EACAI,EACAD,EACAE,EACAX,EACA,QAEFE,UAAW,GAMPa,EAAUhB,EAAMiB,OAHL,iBACe,gBACA,WAShC,MAAO,CACLC,KAAM,iBACNC,QAAS,CAAE,QACXC,kBAAkB,EAClBC,QAAS,KACTR,SAAU,CACRN,EACA,CACEL,UAAW,UACXG,MAAO,MACPI,IAAK,OAEP,CACEJ,MAlBaL,EAAMsB,OACvBN,EAAS,eAAgBA,EAAS,KAClChB,EAAMuB,UAAU,kBAiBZrB,UAAW,OACXsB,OAAQ,CACNf,IAAK,IACLI,SAAU,CACRN,EACAQ,EACAJ,EACAD,EACAE,EACAX,MAMZ,C","sources":["webpack://telegram-t/./node_modules/highlight.js/lib/languages/ini.js"],"sourcesContent":["/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  const regex = hljs.regex;\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      { begin: /([+-]+)?[\\d]+_[\\d_]+/ },\n      { begin: hljs.NUMBER_RE }\n    ]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {\n      begin: /;/,\n      end: /$/\n    },\n    {\n      begin: /#/,\n      end: /$/\n    }\n  ];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [\n      { begin: /\\$[\\w\\d\"][\\w\\d_]*/ },\n      { begin: /\\$\\{(.*?)\\}/ }\n    ]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: \"'''\",\n        end: \"'''\",\n        relevance: 10\n      },\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        begin: \"'\",\n        end: \"'\"\n      }\n    ]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance: 0\n  };\n\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = regex.either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  const DOTTED_KEY = regex.concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    regex.lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: [ 'toml' ],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/,\n        end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n"],"names":["module","exports","hljs","regex","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","ANY_KEY","either","name","aliases","case_insensitive","illegal","concat","lookahead","starts"],"sourceRoot":""}