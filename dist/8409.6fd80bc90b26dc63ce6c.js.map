{"version":3,"file":"8409.6fd80bc90b26dc63ce6c.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/flac/FlacToken.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js","webpack://telegram-t/./node_modules/music-metadata/lib/flac/FlacParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/opus/Opus.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/opus/OpusStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/speex/Speex.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/speex/SpeexStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/theora/Theora.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/theora/TheoraStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/OggToken.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/flac/FlacStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/OggParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js","webpack://telegram-t/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggStream\n */\nexport class VorbisStream {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.durationOnLastPage = true;\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        this.lastPageHeader = header;\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisStream.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisStream.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', this.lastPageHeader.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.lastPageHeader.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param _header\n     * @param pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        this.metadata.setFormat('hasAudio', true);\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n","import * as util from '../common/Util.js';\nimport { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nexport const BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport const BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nexport const BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n","import * as Token from 'token-types';\nimport { textDecode } from '@borewit/text-codec';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = textDecode(this.data.subarray(this.offset, this.offset + len), 'utf-8');\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.substring(0, idx).toUpperCase(),\n            value: v.substring(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n","import initDebug from 'debug';\nimport { Uint8ArrayType } from 'token-types';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisStream } from '../ogg/vorbis/VorbisStream.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport * as Flac from './FlacToken.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisStream(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Flac.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO:\n                return this.readBlockStreamInfo(blockHeader.length);\n            case Flac.BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.readComment(blockHeader.length);\n            case Flac.BlockType.CUESHEET:\n                break;\n            case Flac.BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async readBlockStreamInfo(dataLen) {\n        if (dataLen !== Flac.BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Flac.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.processsStreamInfo(streamInfo);\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    processsStreamInfo(streamInfo) {\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('hasAudio', true);\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Read VORBIS_COMMENT from tokenizer\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async readComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        return this.parseComment(data);\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(data) {\n        const decoder = new VorbisDecoder(data, 0);\n        const vendor = decoder.readStringUtf8();\n        if (vendor.length > 0) {\n            this.metadata.setFormat('tool', vendor);\n        }\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => {\n            if (tag.key === 'ENCODER') {\n                this.metadata.setFormat('tool', tag.value);\n            }\n            return this.addTag(tag.key, tag.value);\n        }));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        return this.addPictureTag(await this.tokenizer.readToken(new VorbisPictureToken(dataLen)));\n    }\n    addPictureTag(picture) {\n        return this.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n    addTag(id, value) {\n        return this.vorbisParser.addTag(id, value);\n    }\n}\n","import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n","import * as Token from 'token-types';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggStream\n */\nexport class OpusStream extends VorbisStream {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.idHeader = null;\n        this.lastPos = -1;\n        this.tokenizer = tokenizer;\n        this.durationOnLastPage = true;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n        this.metadata.setAudioOnly();\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = this.lastPageHeader.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n","import initDebug from 'debug';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexStream extends VorbisStream {\n    constructor(metadata, options, _tokenizer) {\n        super(metadata, options);\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n        this.metadata.setAudioOnly();\n    }\n}\n","import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n","import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraStream {\n    constructor(metadata, _options, _tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n        this.metadata.setFormat('hasVideo', true);\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { StringType } from 'token-types';\nexport const PageHeader = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: new StringType(4, 'latin1').get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n","import initDebug from 'debug';\nimport * as Flac from '../../flac/FlacToken.js';\nimport { FlacParser } from '../../flac/FlacParser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport { VorbisPictureToken } from '../vorbis/Vorbis.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://xiph.org/flac/ogg_mapping.html\n */\nexport class FlacStream {\n    constructor(metadata, options, tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n        this.options = options;\n        this.tokenizer = tokenizer;\n        this.flacParser = new FlacParser(this.metadata, this.tokenizer, options);\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/FLAC page');\n        const fourCC = await FourCcToken.get(pageData, 9);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new Error('Invalid FLAC preamble');\n        }\n        const blockHeader = await Flac.BlockHeader.get(pageData, 13);\n        await this.parseDataBlock(blockHeader, pageData.subarray(13 + Flac.BlockHeader.len));\n    }\n    async parseDataBlock(blockHeader, pageData) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO: {\n                const streamInfo = Flac.BlockStreamInfo.get(pageData, 0);\n                return this.flacParser.processsStreamInfo(streamInfo);\n            }\n            case Flac.BlockType.PADDING:\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.flacParser.parseComment(pageData);\n            case Flac.BlockType.PICTURE:\n                if (!this.options.skipCovers) {\n                    const picture = new VorbisPictureToken(pageData.length).get(pageData, 0);\n                    return this.flacParser.addPictureTag(picture);\n                }\n                break;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisStream } from './vorbis/VorbisStream.js';\nimport { OpusStream } from './opus/OpusStream.js';\nimport { SpeexStream } from './speex/SpeexStream.js';\nimport { TheoraStream } from './theora/TheoraStream.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { PageHeader, SegmentTable } from './OggToken.js';\nimport { FlacStream } from './flac/FlacStream.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nclass OggStream {\n    constructor(metadata, streamSerial, options) {\n        this.pageNumber = 0;\n        this.closed = false;\n        this.metadata = metadata;\n        this.streamSerial = streamSerial;\n        this.options = options;\n    }\n    async parsePage(tokenizer, header) {\n        this.pageNumber = header.pageSequenceNo;\n        debug('serial=%s page#=%s, Ogg.id=%s', header.streamSerialNumber, header.pageSequenceNo, header.capturePattern);\n        const segmentTable = await tokenizer.readToken(new SegmentTable(header));\n        debug('totalPageSize=%s', segmentTable.totalPageSize);\n        const pageData = await tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n        debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n        if (header.headerType.firstPage) {\n            this.metadata.setFormat('container', 'Ogg');\n            const idData = pageData.subarray(0, 7); // Copy this portion\n            const asciiId = Array.from(idData)\n                .filter(b => b >= 32 && b <= 126) // Keep only printable ASCII\n                .map(b => String.fromCharCode(b))\n                .join('');\n            switch (asciiId) {\n                case 'vorbis': // Ogg/Vorbis\n                    debug(`Set Ogg stream serial ${header.streamSerialNumber}, codec=Vorbis`);\n                    this.pageConsumer = new VorbisStream(this.metadata, this.options);\n                    break;\n                case 'OpusHea': // Ogg/Opus\n                    debug('Set page consumer to Ogg/Opus');\n                    this.pageConsumer = new OpusStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'Speex  ': // Ogg/Speex\n                    debug('Set page consumer to Ogg/Speex');\n                    this.pageConsumer = new SpeexStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'fishead':\n                case 'theora': // Ogg/Theora\n                    debug('Set page consumer to Ogg/Theora');\n                    this.pageConsumer = new TheoraStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'FLAC': // Ogg/Theora\n                    debug('Set page consumer to Vorbis');\n                    this.pageConsumer = new FlacStream(this.metadata, this.options, tokenizer);\n                    break;\n                default:\n                    throw new OggContentError(`Ogg codec not recognized (id=${asciiId}`);\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.closed = true;\n        }\n        if (this.pageConsumer) {\n            await this.pageConsumer.parsePage(header, pageData);\n        }\n        else\n            throw new Error('pageConsumer should be initialized');\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.streams = new Map();\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        this.streams = new Map();\n        let header;\n        try {\n            do {\n                header = await this.tokenizer.readToken(PageHeader);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                let stream = this.streams.get(header.streamSerialNumber);\n                if (!stream) {\n                    stream = new OggStream(this.metadata, header.streamSerialNumber, this.options);\n                    this.streams.set(header.streamSerialNumber, stream);\n                }\n                await stream.parsePage(this.tokenizer, header);\n                if (stream.pageNumber > 12 && !(this.options.duration && [...this.streams.values()].find(stream => stream.pageConsumer?.durationOnLastPage))) {\n                    debug(\"Stop processing Ogg stream\");\n                    break;\n                }\n            } while (![...this.streams.values()].every(item => item.closed));\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"Reached end-of-stream\");\n            }\n            else if (err instanceof OggContentError) {\n                this.metadata.addWarning(`Corrupt Ogg content at ${this.tokenizer.position}`);\n            }\n            else\n                throw err;\n        }\n        for (const stream of this.streams.values()) {\n            if (!stream.closed) {\n                this.metadata.addWarning(`End-of-stream reached before reaching last page in Ogg stream serial=${stream.streamSerial}`);\n                await stream.pageConsumer?.flush();\n            }\n            stream.pageConsumer?.calculateDuration();\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = buffer.slice(offset, offset + picDataLen);\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],"names":["debug","VorbisContentError","VorbisStream","constructor","metadata","options","this","pageSegments","durationOnLastPage","parsePage","header","pageData","lastPageHeader","headerType","firstPage","parseFirstPage","continued","length","push","lastPage","fullPage","mergeUint8Arrays","parseFullPage","arrays","totalSize","reduce","acc","e","merged","Uint8Array","forEach","array","i","_arrays","offset","slice","set","flush","parseUserComment","tag","addTag","key","value","len","id","skipCovers","fromBase64","format","calculateDuration","sampleRate","absoluteGranulePosition","setFormat","_header","commonHeader","get","vorbis","packetType","idHeader","bitrateNominal","channelMode","byteLength","parseUserCommentList","strLen","userCommentListLength","BlockType","STREAMINFO","PADDING","APPLICATION","SEEKTABLE","VORBIS_COMMENT","CUESHEET","PICTURE","BlockHeader","buf","off","lastBlock","type","UINT24_BE","BlockStreamInfo","minimumBlockSize","UINT16_BE","maximumBlockSize","minimumFrameSize","maximumFrameSize","channels","bitsPerSample","totalSamples","fileMD5","Uint8ArrayType","VorbisDecoder","data","readInt32","readStringUtf8","subarray","offset0","v","idx","indexOf","substring","toUpperCase","FlacContentError","FlacParser","super","arguments","vorbisParser","padding","postId3v2Parse","tokenizer","readToken","toString","blockHeader","parseDataBlock","fileInfo","size","duration","dataSize","position","readBlockStreamInfo","readComment","parsePicture","addWarning","ignore","then","dataLen","streamInfo","processsStreamInfo","parseComment","decoder","vendor","commentListLength","tags","Array","Promise","all","map","addPictureTag","picture","OpusContentError","IdHeader","magicSignature","version","channelCount","preSkip","inputSampleRate","outputGain","channelMapping","OpusStream","lastPos","setAudioOnly","pos_48bit","SpeexStream","_tokenizer","speexHeader","speex","version_id","header_size","rate","mode","mode_bitstream_version","nb_channels","bitrate","frame_size","vbr","frames_per_packet","extra_headers","reserved1","reserved2","TheoraStream","_options","vmaj","vmin","vrev","vmbw","vmbh","nombr","nqual","resolve","PageHeader","capturePattern","StringType","Number","streamSerialNumber","pageSequenceNo","pageChecksum","page_segments","SegmentTable","sum","dv","DataView","buffer","s","getUint8","totalPageSize","FlacStream","flacParser","Error","Vorbis","OggContentError","OggStream","streamSerial","pageNumber","closed","segmentTable","idData","asciiId","from","filter","b","String","fromCharCode","join","pageConsumer","OggParser","BasicParser","streams","Map","parse","stream","values","find","every","item","err","VorbisPictureToken","base64str","fromBuffer","atob","c","charCodeAt","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","CommonHeader","IdentificationHeader","uint8Array","bitrateMax","bitrateMin","AbstractID3Parser","id3parser","startsWithID3v2Header","peekToken","fileIdentifier","parseID3v2","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser"],"sourceRoot":""}