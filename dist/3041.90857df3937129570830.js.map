{"version":3,"file":"3041.90857df3937129570830.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/TrackingMonkey.tsx","webpack://telegram-t/./src/components/auth/AuthCode.tsx","webpack://telegram-t/./src/components/auth/AuthPassword.tsx","webpack://telegram-t/./src/components/auth/AuthRegister.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/hooks/useTimeout.ts","webpack://telegram-t/./src/util/directInputManager.ts","webpack://telegram-t/./src/util/stopEvent.ts","webpack://telegram-t/./src/util/trapFocus.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  code: string;\n  codeLength: number;\n  trackingDirection: number;\n  isTracking: boolean;\n  isBig?: boolean;\n};\n\nconst TRACKING_START_FRAME = 15;\nconst TRACKING_END_FRAME = 180;\n\nconst TrackingMonkey: FC<OwnProps> = ({\n  code,\n  codeLength,\n  trackingDirection,\n  isTracking,\n  isBig,\n}) => {\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const { isMobile } = useAppLayout();\n  const trackningFramesPerSymbol = (TRACKING_END_FRAME - TRACKING_START_FRAME) / codeLength;\n  const stickerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  function getTrackingFrames(): [number, number] {\n    const startFrame = (code && code.length > 1) || trackingDirection < 0\n      ? TRACKING_START_FRAME + trackningFramesPerSymbol * (code.length - 1)\n      : 0;\n    const endFrame = code.length === codeLength\n      ? TRACKING_END_FRAME\n      : TRACKING_START_FRAME + trackningFramesPerSymbol * code.length;\n\n    if (trackingDirection < 1) {\n      return [\n        endFrame,\n        startFrame,\n      ];\n    }\n\n    return [\n      startFrame,\n      endFrame,\n    ];\n  }\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stickerSize}\n        className={isTracking ? 'hidden' : undefined}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyIdle}\n        play={!isTracking}\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stickerSize}\n        className={!isTracking ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyTracking}\n        playSegment={isTracking ? getTrackingFrames() : undefined}\n        speed={2}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(TrackingMonkey);\n","import type { FormEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport TrackingMonkey from '../common/TrackingMonkey';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\n\ntype StateProps = Pick<GlobalState, 'authPhoneNumber' | 'authIsCodeViaApp' | 'authIsLoading' | 'authError'>;\n\nconst CODE_LENGTH = 5;\n\nconst AuthCode: FC<StateProps> = ({\n  authPhoneNumber,\n  authIsCodeViaApp,\n  authIsLoading,\n  authError,\n}) => {\n  const {\n    setAuthCode,\n    returnToAuthPhoneNumber,\n    clearAuthError,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [code, setCode] = useState<string>('');\n  const [isTracking, setIsTracking] = useState(false);\n  const [trackingDirection, setTrackingDirection] = useState(1);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, []);\n\n  useHistoryBack({\n    isActive: true,\n    onBack: returnToAuthPhoneNumber,\n  });\n\n  const onCodeChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { currentTarget: target } = e;\n    target.value = target.value.replace(/[^\\d]+/, '').substr(0, CODE_LENGTH);\n\n    if (target.value === code) {\n      return;\n    }\n\n    setCode(target.value);\n\n    if (!isTracking) {\n      setIsTracking(true);\n    } else if (!target.value.length) {\n      setIsTracking(false);\n    }\n\n    if (code && code.length > target.value.length) {\n      setTrackingDirection(-1);\n    } else {\n      setTrackingDirection(1);\n    }\n\n    if (target.value.length === CODE_LENGTH) {\n      setAuthCode({ code: target.value });\n    }\n  }, [authError, clearAuthError, code, isTracking, setAuthCode]);\n\n  function handleReturnToAuthPhoneNumber() {\n    returnToAuthPhoneNumber();\n  }\n\n  return (\n    <div id=\"auth-code-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <TrackingMonkey\n          code={code}\n          codeLength={CODE_LENGTH}\n          isTracking={isTracking}\n          trackingDirection={trackingDirection}\n        />\n        <h1>\n          {authPhoneNumber}\n          <div\n            className=\"auth-number-edit div-button\"\n            onClick={handleReturnToAuthPhoneNumber}\n            role=\"button\"\n            tabIndex={0}\n            title={lang('WrongNumber')}\n            aria-label={lang('WrongNumber')}\n          >\n            <i className=\"icon icon-edit\" />\n          </div>\n        </h1>\n        <p className=\"note\">\n          {renderText(lang(authIsCodeViaApp ? 'SentAppCode' : 'Login.JustSentSms'), ['simple_markdown'])}\n        </p>\n        <InputText\n          ref={inputRef}\n          id=\"sign-in-code\"\n          label={lang('Code')}\n          onInput={onCodeChange}\n          value={code}\n          error={authError && lang(authError)}\n          autoComplete=\"off\"\n          inputMode=\"numeric\"\n        />\n        {authIsLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authPhoneNumber', 'authIsCodeViaApp', 'authIsLoading', 'authError']),\n)(AuthCode));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport MonkeyPassword from '../common/PasswordMonkey';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError' | 'authHint'>;\n\nconst AuthPassword: FC<StateProps> = ({\n  authIsLoading, authError, authHint,\n}) => {\n  const { setAuthPassword, clearAuthError } = getActions();\n\n  const lang = useLang();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChangePasswordVisibility = useCallback((isVisible) => {\n    setShowPassword(isVisible);\n  }, []);\n\n  const handleSubmit = useCallback((password: string) => {\n    setAuthPassword({ password });\n  }, [setAuthPassword]);\n\n  return (\n    <div id=\"auth-password-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <MonkeyPassword isPasswordVisible={showPassword} />\n        <h1>{lang('Login.Header.Password')}</h1>\n        <p className=\"note\">{lang('Login.EnterPasswordDescription')}</p>\n        <PasswordForm\n          clearError={clearAuthError}\n          error={authError && lang(authError)}\n          hint={authHint}\n          isLoading={authIsLoading}\n          isPasswordVisible={showPassword}\n          onChangePasswordVisibility={handleChangePasswordVisibility}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError', 'authHint']),\n)(AuthPassword));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport AvatarEditable from '../ui/AvatarEditable';\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError'>;\n\nconst AuthRegister: FC<StateProps> = ({\n  authIsLoading, authError,\n}) => {\n  const { signUp, clearAuthError, uploadProfilePhoto } = getActions();\n\n  const lang = useLang();\n  const [isButtonShown, setIsButtonShown] = useState(false);\n  const [croppedFile, setCroppedFile] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const handleFirstNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { target } = event;\n\n    setFirstName(target.value);\n    setIsButtonShown(target.value.length > 0);\n  }, [authError, clearAuthError]);\n\n  const handleLastNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setLastName(target.value);\n  }, []);\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    signUp({ firstName, lastName });\n\n    if (croppedFile) {\n      uploadProfilePhoto({ file: croppedFile });\n    }\n  }\n\n  return (\n    <div id=\"auth-registration-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n          <AvatarEditable onChange={setCroppedFile} />\n          <h2>{lang('YourName')}</h2>\n          <p className=\"note\">{lang('Login.Register.Desc')}</p>\n          <InputText\n            id=\"registration-first-name\"\n            label={lang('Login.Register.FirstName.Placeholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={authError && lang(authError)}\n            autoComplete=\"given-name\"\n          />\n          <InputText\n            id=\"registration-last-name\"\n            label={lang('Login.Register.LastName.Placeholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n            autoComplete=\"family-name\"\n          />\n          {isButtonShown && (\n            <Button type=\"submit\" ripple isLoading={authIsLoading}>{lang('Next')}</Button>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError']),\n)(AuthRegister));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  noRipple?: boolean;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n          aria-label=\"Toggle password visibility\"\n        >\n          <i className={buildClassName('icon', isPasswordVisible ? 'icon-eye' : 'icon-eye-closed')} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { useLayoutEffect, useRef } from '../lib/teact/teact';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDepsRef = useRef<T>();\n\n  return useLayoutEffect(() => {\n    const prevDeps = prevDepsRef.current;\n    prevDepsRef.current = dependencies;\n\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import { useEffect } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nfunction useTimeout(callback: () => void, delay?: number, dependencies: readonly any[] = []) {\n  const savedCallback = useLastCallback(callback);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n\n    const id = setTimeout(() => savedCallback(), delay);\n    return () => clearTimeout(id);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [delay, savedCallback, ...dependencies]);\n}\n\nexport default useTimeout;\n","let counter = 0;\n\nexport function disableDirectTextInput() {\n  counter += 1;\n}\n\nexport function enableDirectTextInput() {\n  counter -= 1;\n}\n\nexport function getIsDirectTextInputDisabled() {\n  return counter > 0;\n}\n","import type React from '../lib/teact/teact';\n\nconst stopEvent = (e: React.UIEvent | Event | React.FormEvent) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nexport default stopEvent;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n"],"names":["memo","TrackingMonkey","code","codeLength","trackingDirection","isTracking","isBig","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","useState","isMobile","useAppLayout","trackningFramesPerSymbol","stickerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","useCallback","React","createElement","id","className","AnimatedSticker","size","STICKER_SIZE_TWO_FA","undefined","tgsUrl","LOCAL_TGS_URLS","MonkeyIdle","play","onLoad","MonkeyTracking","playSegment","startFrame","length","endFrame","getTrackingFrames","speed","noLoop","withGlobal","global","pick","AuthCode","authPhoneNumber","authIsCodeViaApp","authIsLoading","authError","setAuthCode","returnToAuthPhoneNumber","clearAuthError","getActions","lang","useLang","inputRef","useRef","setCode","setIsTracking","setTrackingDirection","useEffect","IS_TOUCH_ENV","current","focus","useHistoryBack","isActive","onBack","onCodeChange","e","currentTarget","target","value","replace","substr","onClick","role","tabIndex","title","renderText","InputText","ref","label","onInput","error","autoComplete","inputMode","Loading","AuthPassword","authHint","setAuthPassword","showPassword","setShowPassword","handleChangePasswordVisibility","isVisible","handleSubmit","password","MonkeyPassword","isPasswordVisible","PasswordForm","clearError","hint","isLoading","onChangePasswordVisibility","onSubmit","AuthRegister","signUp","uploadProfilePhoto","isButtonShown","setIsButtonShown","croppedFile","setCroppedFile","firstName","setFirstName","lastName","setLastName","handleFirstNameChange","event","handleLastNameChange","action","method","preventDefault","file","AvatarEditable","onChange","Button","type","ripple","placeholder","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","onInputChange","setPassword","canSubmit","setCanSubmit","focusDelayTimeoutMs","useTimeout","requestMutation","select","stopEvent","buildClassName","dir","isRtl","MIN_PASSWORD_LENGTH","maxLength","disabled","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","stikerSize","MonkeyClose","MonkeyPeek","useLayoutEffectWithPrevDeps","cb","dependencies","debugKey","prevDepsRef","useLayoutEffect","prevDeps","callback","delay","savedCallback","useLastCallback","setTimeout","clearTimeout","counter","disableDirectTextInput","enableDirectTextInput","getIsDirectTextInputDisabled","stopPropagation","trapFocus","element","handleKeyDown","key","focusableElements","Array","from","querySelectorAll","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","addEventListener","removeEventListener"],"sourceRoot":""}