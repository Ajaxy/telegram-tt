{"version":3,"file":"7768.764b8619fb8fee5fda3e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId, type WebPageMediaSize } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageBatches = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      messageBatches.forEach((batch) => {\n        callApi('forwardMessages', {\n          fromChat,\n          toChat,\n          toThreadId,\n          messages: batch,\n          isSilent,\n          scheduledAt,\n          sendAs,\n          withMyScore,\n          noAuthors,\n          noCaptions,\n          isCurrentUserPremium,\n          wasDrafted: Boolean(draft),\n          lastMessageId,\n        });\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, withTransition, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  const tabState = selectTabState(global, tabId);\n\n  if (withTransition) {\n    global = updateTabState(global, {\n      savedGifts: {\n        ...tabState.savedGifts,\n        transitionKey: (tabState?.savedGifts.transitionKey || 0) + 1,\n      },\n    }, tabId);\n  }\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedPosition: position,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      miniAppsCachedSize: size,\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getPeerTitle,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, withTransition: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment, selectTabState } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('StarsGiftCompleted'),\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {withAvatar && (\n        <div className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getPeerTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getPeerTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getPeerTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"avatar\":\"we2fpVuo\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  fromPeer,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onClick={handleClick}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      {totalIssued && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(totalIssued))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n\n    return {\n      fromPeer,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  giftsTransitionKey: number;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  giftsTransitionKey,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <SavedGift\n              peerId={chatId}\n              key={`${gift.date}-${gift.fromId}-${gift.gift.id}`}\n              gift={gift}\n              observeIntersection={observeIntersectionForMedia}\n            />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'gifts';\n  const contentTransitionKey = giftsTransitionKey;\n\n  function renderContentWithTransition() {\n    return (\n      <Transition\n        className={`${resultType}-list`}\n        activeKey={contentTransitionKey}\n        name=\"fade\"\n      >\n        {renderContent()}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} > .scroll-item`\n    : `${activeListSelector} > .Transition_slide-active > .content > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {shouldUseTransitionForContent ? renderContentWithTransition() : renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n    const giftsTransitionKey = selectTabState(global).savedGifts.transitionKey || 0;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      giftsTransitionKey,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadPasswordInfo();\n      loadUserCollectibleStatuses();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","peer","selectPeer","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageBatches","config","maxForwardedCount","splitMessagesForForwarding","batch","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","amount","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","withTransition","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","savedGifts","transitionKey","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","addTabStateResetterAction","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","variables","getTranslationFn","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","useLang","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","children","messageSender","avatarPeer","handleAvatarClick","hiddenName","Avatar","renderAvatar","SponsoredMessageContextMenuContainer","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleClick","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","canReport","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderBotInfo","noAppearanceAnimation","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","album","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","firstMessageOrAlbum","firstMessage","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","pluralValue","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canAddContact","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","SavedGift","shouldPlay","play","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","totalIssued","getTotalGiftAvailability","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","giftsTransitionKey","shouldWarnAboutSvg","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","isSavedMessages","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","withNodes","withMarkdown","shouldUseTransitionForContent","contentTransitionKey","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","total","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","root","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","months","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}