{"version":3,"file":"7768.4be37528bd4f72695d6e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/UserGift.module.scss?7193","webpack://telegram-t/./src/components/common/gift/UserGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && chat && !chat.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (chat && !chat.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs, WebPageMediaSize,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, peer, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatusId, referrerWebAppKey, expires, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatusId, expires);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatusId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStarGift, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, userId, message, shouldHideName, tabId = getCurrentTabId(),\n  } = payload;\n\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < gift.stars) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    userId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n  };\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    starGift: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { starGift, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || starGift?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || starGift?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: starGift ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type {\n  StarGiftCategory,\n} from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport {\n  selectPeer,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const { gifts, stickers } = result;\n\n  const starGiftsById = buildCollectionByKey(gifts, 'id');\n\n  const starGiftCategoriesByName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(starGiftsById);\n  const allStarGifts = Object.values(starGiftsById);\n\n  const limitedStarGiftIds = allStarGifts.map(\n    (gift) => {\n      return gift.isLimited ? gift.id : undefined;\n    },\n  ).filter(Boolean) as string[];\n\n  starGiftCategoriesByName.all = allStarGiftIds;\n  starGiftCategoriesByName.limited = limitedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!starGiftCategoriesByName[starsCategory]) {\n      starGiftCategoriesByName[starsCategory] = [];\n    }\n    starGiftCategoriesByName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGiftsById,\n    starGiftCategoriesByName,\n    stickers: {\n      ...global.stickers,\n      starGifts: {\n        stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserGifts', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefresh } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const currentGifts = global.users.giftsById[userId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchUserStarGifts', {\n    user,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = {\n    ...global,\n    users: {\n      ...global.users,\n      giftsById: {\n        ...global.users.giftsById,\n        [userId]: {\n          gifts: newGifts,\n          nextOffset: result.nextOffset,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisilibity', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, shouldUnsave } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('saveStarGift', {\n    user,\n    messageId,\n    shouldUnsave,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('convertStarGift', {\n    user,\n    messageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiUserStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift') return;\n  const starGift = action.starGift!;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n  } satisfies ApiUserStarGift;\n\n  actions.openGiftInfoModal({ userId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userId = 'userId' in payload ? payload.userId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      userId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { applyLangPackDifference, requestLangPackDifference } from '../../../util/localization';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forUserId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatusId: sticker.id });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile, isDesktop } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (!isDesktop && !isMessageListOpen) && (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {message.isVideoProcessingPending && `${lang('lng_approximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectStarsState(global: GlobalState) {\n  return global.stars;\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const starsState = useSelector(selectStarsState);\n  const areStarsLoaded = Boolean(starsState);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && amount > starsState.balance.amount) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, starsState?.balance, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n    && !((sticker || hasAnimatedEmoji) && asForwarded)\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n  && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (message.isDeleting && element) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n    !canShowActionButton && 'no-action-button',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasCommentButton: withCommentButton,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {lang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderSenderName(shouldSkipRenderForwardTitle:boolean = false, shouldSkipRenderAdminTitle: boolean = false) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.usernames?.length;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <span className=\"interactive\">\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  avatarPeer,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getSenderTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState, chatReportState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState, getChatReportState, getBotAdState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'aboutAdsModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  aboutAdsModal: AboutAdsModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Db6J462r\",\"avatar\":\"vDMy3ohp\",\"stars\":\"xtk5vN0o\",\"hiddenGift\":\"X8rK1aAQ\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiUser, ApiUserStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './UserGift.module.scss';\n\ntype OwnProps = {\n  userId: string;\n  gift: ApiUserStarGift;\n};\n\ntype StateProps = {\n  fromPeer?: ApiUser;\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst UserGift = ({\n  userId, gift, fromPeer, sticker,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      userId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  if (!sticker) return undefined;\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      <div className={styles.stars}>\n        {formatCurrency(gift.gift.stars, STARS_CURRENCY_CODE)}\n      </div>\n      {gift.gift.availabilityTotal && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(gift.gift.availabilityTotal))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.gift.stickerId];\n    const fromPeer = gift.fromId ? selectUser(global, gift.fromId) : undefined;\n\n    return {\n      sticker,\n      fromPeer,\n    };\n  },\n)(UserGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStarGift,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport UserGift from '../common/gift/UserGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiUserStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n    loadUserGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasGiftsTab ? [{ type: 'gifts' as const, title: 'ProfileGifts' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    hasGiftsTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadUserGifts({ userId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <UserGift userId={chatId} key={`${gift.date}-${gift.fromId}-${gift.gift.id}`} gift={gift} />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(userFullInfo?.starGiftCount) && !isSavedDialog;\n    const userGifts = global.users.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: userGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ConfettiStyle, TabState } from '../../../global/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition, SVG_NAMESPACE } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    const filter = document.createElementNS(SVG_NAMESPACE, 'filter');\n    filter.setAttribute('x', '0');\n    filter.setAttribute('y', '0');\n    filter.setAttribute('width', '1');\n    filter.setAttribute('height', '1');\n    filter.setAttribute('color-interpolation-filters', 'sRGB');\n    addSvgDefinition(filter, FILTER_ID);\n\n    const feImage = document.createElementNS(SVG_NAMESPACE, 'feImage');\n    feImage.setAttribute('href', waveRipple);\n    feImage.setAttribute('result', 'waveImage');\n    filter.appendChild(feImage);\n\n    const feDisplacementMap = document.createElementNS(SVG_NAMESPACE, 'feDisplacementMap');\n    feDisplacementMap.setAttribute('in', 'SourceGraphic');\n    feDisplacementMap.setAttribute('in2', 'waveImage');\n    feDisplacementMap.setAttribute('scale', FILTER_SCALE);\n    feDisplacementMap.setAttribute('xChannelSelector', 'R');\n    feDisplacementMap.setAttribute('yChannelSelector', 'B');\n    filter.appendChild(feDisplacementMap);\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref8","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref9","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","_ref3","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref4","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref5","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","_ref6","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref7","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatusId","referrerWebAppKey","expires","sendWebAppEvent","webAppKey","event","eventType","eventData","customEmojiIconId","isCloseFriend","customEmojiId","duration","botId","suggestedStatusModal","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","_len3","_key3","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len12","_ref13","_key12","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","_len4","_key4","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","isPaymentFormLoading","form","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","balance","stars","amount","openStarsBalanceModal","giftId","sendStarPaymentForm","starGift","formId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","starGiftsById","starGiftCategoriesByName","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","starsCategory","starGifts","shouldRefresh","currentGifts","giftsById","localNextOffset","newGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","loadUserGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","_len6","_key6","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","_len10","_key10","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","_len11","_key11","replaceWebAppModalState","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","giftReceiverId","starsToConvert","isNameHidden","isUnsaved","isSaved","fromId","isConverted","openGiftInfoModal","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","emojiStatus","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isDesktop","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","resolve","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","handleBeforeContextMenu","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","handleClick","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","onMouseDown","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","isSelected","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","audio","remove","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","disabled","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","emojiIconClassName","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","peerColor","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","children","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectStarsState","recentReactors","chosenClassName","onPaidClick","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","starsState","useSelector","areStarsLoaded","handlePaidClick","prevReaction","left","top","offsetWidth","offsetHeight","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","Sparkles","preset","PaidReactionEmoji","animatedEmoji","paidCounter","ReactionAnimatedEmoji","counter","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","ReactionButton","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","messageSender","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","backgroundEmojiId","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","shouldRenderSenderName","renderForwardTitle","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","onHideTranscription","isTranscribed","canTranscribe","AudioOrigin","isSelectable","onPlay","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","handleOpenAboutAdsModal","renderMediaContent","isRecommended","BadgeButton","isRectangular","canReport","triggerRef","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","computedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","customIcon","renderPlaybackRateMenuItem","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","renderingPinnedMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","confirmLabel","PinnedMessageNavigation","isFullVideo","asSpoiler","shouldRenderVideo","pluralValue","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","emojiStatusSticker","isRightColumnShown","currentTransitionKey","openThreadWithInfo","openPreviousChat","toggleLeftColumn","isBackButtonActive","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","UnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderPinnedMessage","AudioPlayer","HeaderActions","canExpandActions","sponsoredMessage","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","isAutoArchived","canReportSpam","canBlockContact","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","isFirstRenderRef","audioPlayerState","pinnedState","stateArray","isFirstRender","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","ChatReportPane","BotAdPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeaderPanes","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","AboutAdsModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","stickerId","fromPeer","CUSTOM_PEER_HIDDEN","availabilityTotal","GiftRibbon","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","userGifts","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","UserGift","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","createElementNS","SVG_NAMESPACE","addSvgDefinition","feImage","waveRipple","appendChild","feDisplacementMap","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","SnapEffectContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}